	                            ; compiles with https://github.com/parasyte/asm6
	                            
	                            ; ines header
	  4E 45 53 1A                     .db $4e, $45, $53, $1a                        ;  magic signature
	  10                              .db $10                                       ;  PRG ROM size in 16384 byte units
	  20                              .db $20                                       ;  CHR
	                                  if BATTERY
	                                    ;.db $4a                                       ;  mirroring type and mapper number lower nibble + battery
	  4A                        		.db $4a
	                                  else
	                                    .db $4a                                       ;  mirroring type and mapper number lower nibble
	                                  endif
	  00                              .db $00                                       ;  mapper number upper nibble
	                            
	  00 00 00 00 00 00 00 00         .db $00, $00, $00, $00, $00, $00, $00, $00
	                            
	                            ; RAM variables
	                                    ; We start at a weird address here because
	                                    ; we're adding on to all this defined stuff.
	                                    ; Needs cleanup.
	                                    ;.base $07cb
	                            ; Zero page variables
	                                    ;.base $0000
	                            
	                            ; Include constants, macros
	                            include code\settings.default.asm               ; default settings
	                            ; Do not modify this default settings file.
	                            ; Instead, create a settings.asm with the 
	                            ; settings you want to change.
	                            
	                            ; Set starting world and level
	                            ; set START_WORLD to 0 to disable.
	                            START_WORLD = 0
	                            START_LEVEL = 1
	                            
	                            ; Skip the intermediate screen
	                            SKIP_INTERMEDIATE = 0
	                            
	                            ; Skip title screen
	                            SKIP_TITLE = 0
	                            
	                            ; Enable sound
	                            SOUND = 1
	                            
	                            ; Enable dpcm sample support
	                            ; NOTE: needs work
	                            DPCM = 0
	                            
	                            ; Add a battery
	                            ; High score is saved
	                            ; To erase save data, hold select+a+up while loading the game
	                            ; NOTE: Turning this off may cause issues.
	                            BATTERY = 1
	                            
	                            ; Enable cheats.
	                            ;
	                            ; Settings starting with CHEAT require
	                            ; cheats to be enabled.
	                            CHEATS = 0
	                            
	                            ; Infinite lives
	                            INFINITE_LIVES = 0
	                            
	                            ; Can't be hurt
	                            CHEAT_NO_INJURY = 0
	                            
	                            ; Skip level by pressing select in game
	                            CHEAT_LEVEL_SKIP = 0
	                            
	                            ; World select always enabled
	                            ; NOTE: Currently not working
	                            CHEAT_WORLD_SELECT = 0
	                            
	                            ; Remove game timer
	                            CHEAT_REMOVE_TIMER = 0
	                            
	                            CHEAT_START_FIERY = 0
	                            
	                            ; Enable some things that showcase features
	                            ; * Goomba graphics change when player is small
	                            ; * Display text message on intermediate screen
	                            DEMO_FEATURES = 1
	                            
	                            ; Use IRQ, new scanline counter based hud, 
	                            ; other major changes.
	                            USEIRQ = 0
	                            
	                            ; Import level from a nes file.  It must be a
	                            ; non-expanded rom with data in the same place as the original game.
	                            IMPORT_LEVELS = 0
	                            
	                            ; File to use with IMPORT_LEVELS option.
	                            ;LEVEL_FILE equ "Super Mario Bros. (World).nes"
	                            ;LEVEL_FILE equ "Luigis_Turn.nes"
	                            ;LEVEL_FILE equ "SMB Annoyance.nes"
	                            ;LEVEL_FILE equ "Super_Drew_Bros_Nintendrew.nes"
	                            ;LEVEL_FILE equ "smbGreatEd2.nes"
	                            ;LEVEL_FILE equ "Super Mario Bros - Hi Episode 4.nes"
	                            ;LEVEL_FILE equ "SMB_but_with_10_worlds_GE.nes"
	                            
	                            ; File to use when IMPORT_LEVELS is off
	                            LEVEL_DATA equ code\vanillalevels.asm
	                            ;LEVEL_DATA equ code\levelDataBowser.asm
	                            ;LEVEL_DATA equ code\levelDataj.asm
	                            ;LEVEL_DATA equ code\blah.asm
	                            ;LEVEL_DATA equ tools\output.txt
	                            
	                            ; Adds code to make the minus world work again.
	                            MINUS_WORLD_FIX = 0
	                            
	                            ; Fix bug to enable unused spiny behaviour
	                            SPINYFIX = 1
	                            
	                            ; jumpspring bug fixes from PAL version
	                            
	                            ; * Define vertical acceleration on springs (was undefined on NTSC)
	                            JUMPSPRING_FIX = 1
	                            
	                            ; * Check whether there's a free enemy slot before placing spring. Avoids placing it in the special item slot.
	                            ; NOTE: Causes a crash.  Can't figure out why.
	                            JUMPSPRING_FIX2 = 0
	                            
	                            ; Blooper vertical distance from player.  Default is #$10 (NTSC) or #$0c (PAL).
	                            ;BLOOPER_DISTANCE = #$10
	                            BLOOPER_DISTANCE = $10
	                            
	                            ; reworked movement function for Cheep Cheeps from PAL version
	                            ; NOTE: Not working.  Cheep Cheeps fly lower for some reason
	                            CHEEPCHEEP_FIX = 0
	                            
	                            ; Collision fix taken from PAL version.
	                            ; Vertical difference deciding whether Mario stomped or got hit depends on the enemy
	                            PLAYER_COLLISION_FIX = 0
	                            
	                            ; Set vertical speed to 0 in water stages.  Taken from PAL version.
	                            ; This makes you bounce less (or more consistant speed) when you hit 
	                            ; your head in water.  With turbofire it is a bit too easy to clip
	                            ; up through blocks though.
	                            WATER_SPEED_FIX = 0
	                            
	                            ; Some enemies (Piranha, Bullet Bill, Goomba, Spiny, Blooper, Cheep Cheep) has larger hitbox
	                            ; Taken from PAL version.
	                            BOUNDBOX_FIX = 0
	                            
	                            ; Allow display of up to 99 lives
	                            LIVES_FIX = 1
	                            
	                            ; Luigi has smb2j physics
	                            LUIGI_PHYSICS = 1
	                            
	                            ; Give Luigi his DX color palette
	                            LUIGI_PALETTE_DX = 1
	                            
	                            ; Bounce higher off enemies as in SMB2J.
	                            EXTRA_BOUNCE = 0
	                            
	                            ; Turn Mario into Luigi (mostly) for testing.
	                            ; Note: currently breaks time up message.
	                            TEST_LUIGI = 0
	                            
	                            ; Same as above but for other players.
	                            ; Use 0 to turn off.
	                            TEST_PLAYER = 0
	                            
	                            ; Add a game over menu (continue, retry)
	                            GAME_OVER_MENU = 1
	                            
	                            ; Fix pipe pointer issue for world 9
	                            WORLD9_PIPE_FIX = 0
	                            
	                            ; Enable "More Power" mode.  Needs DPCM enabled.
	                            ; NOTE: needs work
	                            TIM_GRUNT = 0
	                            
	                            ; Enable skid sound effect as in SMB2J
	                            SKID_SFX = 1
	                            
	                            ; Prevent blank tiles from being displayed.
	                            BLANK_SPRITE_MOD = 0
	                            
	                            ; :V	                            include code\settings.asm                       ; local settings
	                            include code\macros.asm                         ; macros
	                            macro bricks x,y,w
	                                .db x*$10+y, Objects1Flag + $01 * $10 + w - $01             ; (x,y) row of w bricks
	                            endm
	                            
	                            macro blocks x,y,w
	                                .db x*$10+y, Objects1Flag + $02 * $10 + w - $01             ; (x,y) row of w blocks
	                            endm
	                            ; levelHeader $00,$02,$01,$01,$02,$00
	                            ; scenery_bgcolor
	                            ; entrance, timer
	                            ; terrain_control
	                            ; background_scenery_type
	                            ; background_scenery
	                            macro levelheader scenery_bgcolor, entrance, timer, terrain_control, background_scenery_type, background_scenery
	                                ; Header (first byte): scenery/bg color + player entrance control * $08 + timer setting * $40
	                                ; Header (second byte): terrain control + background scenery type * $10 + background scenery * $40
	                                .db scenery_bgcolor + entrance * $08 + timer * $40
	                                .db terrain_control + background_scenery_type * $10 + background_scenery * $40
	                            endm
	                            
	                            ;16 bits branches (removed because worst bug in the world)
	                            
	                            
	                            ;creates a advanced custom object
	                            macro customobj x,y,w,h,mt
	                            	.db Objects4Flag + x*$10, $07 * $10 + w - $01, (h-$01)*$10+ y, mt 		;(x,y) custom metatile (mt), lenght (w) and height (h)
	                            endm
	                            macro customobjp x,y,w,h,mt
	                            	.db Objects4Flag + x*$10, $07 * $10 + w - $01 + $80, (h-$01)*$10 + y, mt;(x,y) custom metatile (mt), lenght (w) and height (h)
	                            endm
	                            macro uverticalpipe x,y,h
	                            	.db Objects4Flag + x*$10, $06 * $10 + h - $01, y  				        ;(x,y) upside down pipe (not enterable) (h blocks height)
	                            endm
	                            macro verticalpipe x,y,h
	                            	.db x*$10 + y, Objects1Flag + $06 * $10 + h - $01             			;(x,y) Vertical pipe (h blocks height)
	                            endm
	                            macro water x,y,w,h
	                            	.db Objects4Flag + x*$10, $07 * $10 + w - $01, (h-$01)*$10+ y, $90 		;(x,y) custom metatile (mt), lenght (w) and height (h)
	                            endm
	                            
	                            ;adds to a
	                            macro add adrr	
	                            	clc
	                            	adc adrr ;apparently this sometimes refuses to work correctly lmao
	                            endm
	                            
	                            ;subtracts from a
	                            macro sub addr
	                            	sec
	                            	sbc addr
	                            endm
	                            
	                            ;arithmetic shift right
	                            macro asr
	                            	cmp #$80
	                            	ror
	                            endm
	                            
	                            ;move high nybble to low (for comparation)
	                            macro hny
	                            	and #$f0
	                            	lsr
	                            	lsr
	                            	lsr
	                            	lsr
	                            endm
	                            
	                            ;move low nybble to high
	                            macro lny
	                            	and #$0f
	                            	asl
	                            	asl
	                            	asl
	                            	asl
	                            endm
	                            ;include code\residual.asm                       ; dummy assignments to remove unreferenced label warnings
	                            include code\zeropage.asm
	                            ; Items that don't have .dsb are aliases for the definition below it.
	                            
	                            _temp                   = $00  ; used for temporary stuff including indirect pointers
	                            ObjectOffset            = $08
	                            FrameCounter            = $09
	                            A_B_Buttons             = $0a
	                            Up_Down_Buttons         = $0b
	                            Left_Right_Buttons      = $0c
	                            PreviousA_B_Buttons     = $0d
	                            GameEngineSubroutine    = $0e
	                            Enemy_Flag              = $0f
	                            Enemy_ID                = $15
	                            SprObject_State 		= $1b
	                            Player_State            = $1b
	                            Enemy_State             = $1c
	                            Fireball_State          = $22
	                            Block_State             = $24
	                            Misc_State              = $28
	                            PlayerFacingDir         = $31
	                            FirebarSpinDirection    = $32
	                            DestinationPageLoc      = $37
	                            VictoryWalkControl      = $38
	                            ;zp_unknown1             .dsb 3
	                            PowerUpType             = $39
	                            FireballBouncingFlag    = $3a
	                            HammerBroJumpTimer      = $3c
	                            ;zp_unknown2             .dsb 3
	                            Player_MovingDir        = $42
	                            Enemy_MovingDir         = $43
	                            ;zp_unknown3             .dsb 10
	                            SprObject_X_Speed 		= $49
	                            Player_X_Speed          = $49
	                            Jumpspring_FixedYPos 	= $4a
	                            YPlatformCenterYPos     = $4a
	                            RedPTroopaCenterYPos    = $4a
	                            XMoveSecondaryCounter   = $4a
	                            CheepCheepMoveMFlag 	= $4a
	                            LakituMoveSpeed 		= $4a
	                            BlooperMoveSpeed 		= $4a
	                            PiranhaPlant_Y_Speed 	= $4a
	                            FirebarSpinState_Low 	= $4a
	                            ExplosionGfxCounter 	= $4a
	                            Enemy_X_Speed           = $4a
	                            Fireball_X_Speed        = $50
	                            Block_X_Speed           = $52
	                            Misc_X_Speed            = $56
	                            SprObject_PageLoc 		= $5f
	                            Player_PageLoc          = $5f
	                            Enemy_PageLoc           = $60
	                            Fireball_PageLoc        = $66
	                            Block_PageLoc           = $68
	                            Misc_PageLoc            = $6c
	                            Bubble_PageLoc          = $75
	                            SprObject_X_Position 	= $78
	                            Player_X_Position       = $78
	                            Enemy_X_Position        = $79
	                            Fireball_X_Position     = $7f
	                            Block_X_Position        = $81
	                            Misc_X_Position         = $85
	                            Bubble_X_Position       = $8e
	                            SprObject_Y_Speed 		= $91
	                            Player_Y_Speed          = $91
	                            FirebarSpinState_High 	= $92
	                            LakituMoveDirection 	= $92
	                            PiranhaPlant_MoveFlag 	= $92
	                            BlooperMoveCounter 		= $92
	                            XMovePrimaryCounter 	= $92
	                            Enemy_Y_Speed           = $92
	                            Fireball_Y_Speed        = $98
	                            Block_Y_Speed           = $9a
	                            Misc_Y_Speed            = $9e
	                            SprObject_Y_HighPos 	= $a7
	                            Player_Y_HighPos        = $a7
	                            Enemy_Y_HighPos         = $a8
	                            Fireball_Y_HighPos      = $ae
	                            Block_Y_HighPos         = $b0
	                            Misc_Y_HighPos          = $b4
	                            Bubble_Y_HighPos        = $bd
	                            SprObject_Y_Position 	= $c0
	                            Player_Y_Position       = $c0
	                            Enemy_Y_Position        = $c1
	                            Fireball_Y_Position     = $c7
	                            Block_Y_Position        = $c9
	                            Misc_Y_Position         = $cd
	                            Bubble_Y_Position       = $d6
	                            AreaData 				= $d9
	                            AreaDataLow             = $d9
	                            AreaDataHigh            = $da
	                            EnemyData 				= $db
	                            EnemyDataLow            = $db
	                            EnemyDataHigh           = $dc
	                            temp1                   = $dd ; originally used as $eb directly
	                            temp2                   = $de ; originally used as $ec directly
	                            temp3                   = $df ; originally used as $ed directly
	                            ;zp_unknown4             .dsb 1
	                            temp4                   = $e0 ; originally used as $ef directly
	                            NoteLenLookupTblOfs     = $e1
	                            Square1SoundBuffer      = $e2
	                            Square2SoundBuffer      = $e3
	                            NoiseSoundBuffer        = $e4
	                            AreaMusicBuffer         = $e5
	                            MusicData 				= $e6
	                            MusicDataLow            = $e6
	                            MusicDataHigh           = $e7
	                            MusicOffset_Square2     = $e8
	                            MusicOffset_Square1     = $e9
	                            MusicOffset_Triangle    = $ea
	                            PauseSoundQueue         = $eb
	                            AreaMusicQueue          = $ec
	                            EventMusicQueue         = $ed
	                            NoiseSoundQueue         = $ee
	                            Square2SoundQueue       = $ef
	                            Square1SoundQueue       = $f0
	                            
	                            skipNMI                 = $f1
	                            
	                            include code\constants.asm                      ; other constants
	                            ;-------------------------------------------------------------------------------------
	                            ;DEFINES
	                            
	                            ;NES specific hardware defines
	                            
	                            PPU_CTRL_REG1         = $2000
	                            PPU_CTRL_REG2         = $2001
	                            PPU_STATUS            = $2002
	                            PPU_SPR_ADDR          = $2003
	                            PPU_SPR_DATA          = $2004
	                            PPU_SCROLL_REG        = $2005
	                            PPU_ADDRESS           = $2006
	                            PPU_DATA              = $2007
	                            
	                            SND_REGISTER          = $4000
	                            SND_SQUARE1_REG       = $4000
	                            SND_SQUARE2_REG       = $4004
	                            SND_TRIANGLE_REG      = $4008
	                            SND_NOISE_REG         = $400c
	                            SND_DELTA_REG         = $4010
	                            SND_MASTERCTRL_REG    = $4015
	                            
	                            SPR_DMA               = $4014
	                            JOYPAD_PORT           = $4016
	                            JOYPAD_PORT1          = $4016
	                            JOYPAD_PORT2          = $4017
	                            
	                            ; GAME SPECIFIC DEFINES
	                            
	                            VerticalFlipFlag      = $0109
	                            FlagpoleFNum_Y_Pos    = $010d
	                            FlagpoleFNum_YMFDummy = $010e
	                            FlagpoleScore         = $010f
	                            FloateyNum_Control    = $0110
	                            FloateyNum_X_Pos      = $0117
	                            FloateyNum_Y_Pos      = $011e
	                            ShellChainCounter     = $0125
	                            FloateyNum_Timer      = $012c
	                            DigitModifier         = $0134
	                            
	                            Sprite_Data           = $0200
	                            Sprite_Y_Position     = $0200
	                            Sprite_Tilenumber     = $0201
	                            Sprite_Attributes     = $0202
	                            Sprite_X_Position     = $0203
	                            
	                            VRAM_Buffer1_Offset   = $6400
	                            VRAM_Buffer1          = $6401
	                            
	                            VRAM_Buffer2_Offset   = $64e0
	                            VRAM_Buffer2          = $64e1
	                            
	                            BowserBodyControls    = $0563
	                            BowserFeetCounter     = $0564
	                            BowserMovementSpeed   = $0565
	                            BowserOrigXPos        = $0566
	                            BowserFlameTimerCtrl  = $0567
	                            BowserFront_Offset    = $0568
	                            BridgeCollapseOffset  = $0569
	                            BowserGfxFlag         = $056a
	                            
	                            FirebarSpinSpeed      = $0388
	                            
	                            VineFlagOffset        = $0398
	                            VineHeight            = $0399
	                            VineObjOffset         = $039a
	                            
	                            VineStart_Y_Position  = $039d
	                            
	                            BalPlatformAlignment  = $03a0
	                            Platform_X_Scroll     = $03a1
	                            PlatformCollisionFlag = $03a2
	                            HammerThrowingTimer   = $03a2
	                            
	                            SprObject_Rel_XPos    = $03ad
	                            Player_Rel_XPos       = $03ad
	                            Enemy_Rel_XPos        = $03ae
	                            Fireball_Rel_XPos     = $03af
	                            Bubble_Rel_XPos       = $03b0
	                            Block_Rel_XPos        = $03b1
	                            Misc_Rel_XPos         = $03b3
	                            SprObject_Rel_YPos    = $03b8
	                            Player_Rel_YPos       = $03b8
	                            Enemy_Rel_YPos        = $03b9
	                            Fireball_Rel_YPos     = $03ba
	                            Bubble_Rel_YPos       = $03bb
	                            Block_Rel_YPos        = $03bc
	                            Misc_Rel_YPos         = $03be
	                            SprObject_SprAttrib   = $03c4
	                            Player_SprAttrib      = $03c4
	                            Enemy_SprAttrib       = $03c5
	                            
	                            
	                            SprObject_OffscrBits  = $03d0
	                            Player_OffscreenBits  = $03d0
	                            Enemy_OffscreenBits   = $03d1
	                            FBall_OffscreenBits   = $03d2
	                            Bubble_OffscreenBits  = $03d3
	                            Block_OffscreenBits   = $03d4
	                            
	                            Misc_OffscreenBits    = $03d6
	                            EnemyOffscrBitsMasked = $03d8
	                            
	                            Block_Orig_YPos       = $03e4
	                            Block_BBuf_Low        = $03e6
	                            Block_Metatile        = $03e8
	                            Block_PageLoc2        = $03ea
	                            Block_RepFlag         = $03ec
	                            SprDataOffset_Ctrl    = $03ee
	                            Block_ResidualCounter = $03f0
	                            Block_Orig_XPos       = $03f1
	                            
	                            AttributeBuffer       = $03f9
	                            
	                            SprObject_X_MoveForce = $0400
	                            YPlatformTopYPos      = $0401
	                            Enemy_X_MoveForce     = $0401
	                            RedPTroopaOrigXPos    = $0401
	                            
	                            SprObject_YMF_Dummy   = $0416
	                            Player_YMF_Dummy      = $0416
	                            Enemy_YMF_Dummy       = $0417
	                            BowserFlamePRandomOfs = $0417
	                            PiranhaPlantUpYPos    = $0417
	                            Bubble_YMF_Dummy      = $042c
	                            
	                            SprObject_Y_MoveForce = $0433
	                            Player_Y_MoveForce    = $0433
	                            Enemy_Y_MoveForce     = $0434
	                            PiranhaPlantDownYPos  = $0434
	                            CheepCheepOrigYPos    = $0434
	                            Block_Y_MoveForce     = $043c
	                            
	                            MaximumLeftSpeed      = $0450
	                            MaximumRightSpeed     = $0456
	                            
	                            Cannon_Offset         = $046a
	                            Whirlpool_Offset      = $046a
	                            Cannon_PageLoc        = $046b
	                            Whirlpool_PageLoc     = $046b
	                            Cannon_X_Position     = $0471
	                            Whirlpool_LeftExtent  = $0471
	                            Cannon_Y_Position     = $0477
	                            Whirlpool_Length      = $0477
	                            Cannon_Timer          = $047d
	                            Whirlpool_Flag        = $047d
	                            
	                            BowserHitPoints       = $0483
	                            StompChainCounter     = $0484
	                            
	                            Player_CollisionBits  = $0490
	                            Enemy_CollisionBits   = $0491
	                            
	                            SprObj_BoundBoxCtrl   = $0499
	                            Player_BoundBoxCtrl   = $0499
	                            Enemy_BoundBoxCtrl    = $049a
	                            Fireball_BoundBoxCtrl = $04a0
	                            Misc_BoundBoxCtrl     = $04a2
	                            
	                            BoundingBox_UL_XPos   = $04ac
	                            BoundingBox_UL_YPos   = $04ad
	                            BoundingBox_DR_XPos   = $04ae
	                            BoundingBox_DR_YPos   = $04af
	                            BoundingBox_UL_Corner = $04ac
	                            BoundingBox_LR_Corner = $04ae
	                            EnemyBoundingBoxCoord = $04b0
	                            
	                            Block_Buffer_1        = $6600
	                            Block_Buffer_2        = $6700
	                            
	                            BlockBufferColumnPos  = $06a0
	                            MetatileBuffer        = $06a1
	                            
	                            HammerEnemyOffset     = $06ae
	                            
	                            JumpCoinMiscOffset    = $06b7
	                            
	                            BrickCoinTimerFlag    = $06bc
	                            
	                            Misc_Collision_Flag   = $06be
	                            
	                            EnemyFrenzyBuffer     = $06cb
	                            SecondaryHardMode     = $06cc
	                            EnemyFrenzyQueue      = $06cd
	                            FireballCounter       = $06ce
	                            DuplicateObj_Offset   = $06cf
	                            
	                            LakituReappearTimer   = $06d1
	                            
	                            NumberofGroupEnemies  = $06d3
	                            ColorRotateOffset     = $06d4
	                            PlayerGfxOffset       = $06d5
	                            WarpZoneControl       = $06d6
	                            FireworksCounter      = $06d7
	                            
	                            MultiLoopCorrectCntr  = $06d9
	                            MultiLoopPassCntr     = $06da
	                            JumpspringForce       = $06db
	                            MaxRangeFromOrigin    = $06dc
	                            BitMFilter            = $06dd
	                            ChangeAreaTimer       = $06de
	                            
	                            SprShuffleAmtOffset   = $06e0
	                            SprShuffleAmt         = $06e1
	                            SprDataOffset         = $06e4
	                            Player_SprDataOffset  = $06e4
	                            Enemy_SprDataOffset   = $06e5
	                            Block_SprDataOffset   = $06ec
	                            Alt_SprDataOffset     = $06ec
	                            Bubble_SprDataOffset  = $06ee
	                            FBall_SprDataOffset   = $06f1
	                            Misc_SprDataOffset    = $06f3
	                            
	                            SavedJoypadBits       = $06fc
	                            SavedJoypad1Bits      = $06fc
	                            SavedJoypad2Bits      = $06fd
	                            
	                            Player_X_Scroll       = $06ff
	                            Player_XSpeedAbsolute = $0700
	                            FrictionAdderHigh     = $0701
	                            FrictionAdderLow      = $0702
	                            RunningSpeed          = $0703
	                            SwimmingFlag          = $0704
	                            Player_X_MoveForce    = $0705
	                            DiffToHaltJump        = $0706
	                            JumpOrigin_Y_HighPos  = $0707
	                            JumpOrigin_Y_Position = $0708
	                            VerticalForce         = $0709
	                            VerticalForceDown     = $070a
	                            PlayerChangeSizeFlag  = $070b
	                            PlayerAnimTimerSet    = $070c
	                            PlayerAnimCtrl        = $070d
	                            JumpspringAnimCtrl    = $070e
	                            FlagpoleCollisionYPos = $070f
	                            PlayerEntranceCtrl    = $0710
	                            FireballThrowingTimer = $0711
	                            DeathMusicLoaded      = $0712
	                            FlagpoleSoundQueue    = $0713
	                            CrouchingFlag         = $0714
	                            GameTimerSetting      = $0715
	                            DisableCollisionDet   = $0716
	                            DemoAction            = $0717
	                            DemoActionTimer       = $0718
	                            PrimaryMsgCounter     = $0719
	                            ScreenEdge_PageLoc    = $071a
	                            ScreenLeft_PageLoc    = $071a
	                            ScreenRight_PageLoc   = $071b
	                            ScreenLeft_X_Pos      = $071c
	                            ScreenEdge_X_Pos      = $071c
	                            ScreenRight_X_Pos     = $071d
	                            ColumnSets            = $071e
	                            AreaParserTaskNum     = $071f
	                            CurrentNTAddr_High    = $0720
	                            CurrentNTAddr_Low     = $0721
	                            IRQDisable 		      = $0722
	                            ScrollLock            = $0723
	                            
	                            CurrentPageLoc        = $0725
	                            CurrentColumnPos      = $0726
	                            TerrainControl        = $0727
	                            BackloadingFlag       = $0728
	                            BehindAreaParserFlag  = $0729
	                            AreaObjectPageLoc     = $072a
	                            AreaObjectPageSel     = $072b
	                            AreaDataOffset        = $072c
	                            
	                            AreaStyle             = $0733
	                            StaircaseControl      = $0734
	                            AreaObjectHeight      = $0735
	                            
	                            EnemyDataOffset       = $0739
	                            EnemyObjectPageLoc    = $073a
	                            EnemyObjectPageSel    = $073b
	                            ScreenRoutineTask     = $073c
	                            ScrollThirtyTwo       = $073d
	                            
	                            HorizontalScroll      = $073f
	                            VerticalScroll        = $0740
	                            ForegroundScenery     = $0741
	                            BackgroundScenery     = $0742
	                            CloudTypeOverride     = $0743
	                            BackgroundColorCtrl   = $0744
	                            LoopCommand           = $0745
	                            StarFlagTaskControl   = $0746
	                            TimerControl          = $0747
	                            CoinTallyFor1Ups      = $0748
	                            SecondaryMsgCounter   = $0749
	                            JoypadBitMask         = $074a
	                            
	                            AreaType              = $074e
	                            AreaAddrsLOffset      = $074f
	                            AreaPointer           = $0750
	                            EntrancePage          = $0751
	                            AltEntranceControl    = $0752
	                            CurrentPlayer         = $0753
	                            PlayerSize            = $0754
	                            Player_Pos_ForScroll  = $0755
	                            PlayerStatus          = $0756
	                            FetchNewGameTimerFlag = $0757
	                            JoypadOverride        = $0758
	                            GameTimerExpiredFlag  = $0759
	                            OnscreenPlayerInfo    = $075a
	                            NumberofLives         = $075a ;used by current player
	                            HalfwayPage           = $075b
	                            LevelNumber           = $075c ;the actual dash number
	                            Hidden1UpFlag         = $075d
	                            CoinTally             = $075e
	                            WorldNumber           = $075f
	                            AreaNumber            = $0760 ;internal number used to find areas
	                            ;OffscreenPlayerInfo   = $0761
	                            ;OffScr_NumberofLives  = $0761 ;used by offscreen player
	                            ;OffScr_HalfwayPage    = $0762
	                              	  
	                            Player_OldCollisionBits = $0765
	                            OffScr_WorldNumber    = $0766
	                            OffScr_AreaNumber     = $0767
	                            ScrollFractional      = $0768
	                            DisableIntermediate   = $0769
	                            PrimaryHardMode       = $076a
	                            WorldSelectNumber     = $076b
	                            OperMode              = $0770
	                            
	                            OperMode_Task         = $0772
	                            VRAM_Buffer_AddrCtrl  = $0773
	                            DisableScreenFlag     = $0774
	                            ScrollAmount          = $0775
	                            GamePauseStatus       = $0776
	                            GamePauseTimer        = $0777
	                            Mirror_PPU_CTRL_REG1  = $0778
	                            Mirror_PPU_CTRL_REG2  = $0779
	                            NumberOfPlayers       = $077a
	                            NameTableSelect 	  = $077b
	                            IRQAckFlag  		  = $077c
	                            
	                            IntervalTimerControl  = $077f
	                            Timers                = $0780
	                            SelectTimer           = $0780
	                            PlayerAnimTimer       = $0781
	                            JumpSwimTimer         = $0782
	                            RunningTimer          = $0783
	                            BlockBounceTimer      = $0784
	                            SideCollisionTimer    = $0785
	                            JumpspringTimer       = $0786
	                            GameTimerCtrlTimer    = $0787
	                            ClimbSideTimer        = $0789
	                            EnemyFrameTimer       = $078a
	                            FrenzyEnemyTimer      = $0792
	                            BowserFireBreathTimer = $0790
	                            StompTimer            = $0791
	                            AirBubbleTimer        = $0792
	                            
	                            ScrollIntervalTimer   = $0795
	                            EnemyIntervalTimer    = $0796
	                            UnusedTimer			  = $079d
	                            InjuryTimer           = $079e
	                            StarInvincibleTimer   = $079f
	                            ScreenTimer           = $07a0
	                            WorldEndTimer         = $07a1
	                            DemoTimer             = $07a2
	                            
	                            PseudoRandomBitReg    = $07a7
	                            
	                            SoundMemory           = $07b0
	                            MusicOffset_Noise     = $07b0
	                            EventMusicBuffer      = $07b1
	                            PauseSoundBuffer      = $07b2
	                            Squ2_NoteLenBuffer    = $07b3
	                            Squ2_NoteLenCounter   = $07b4
	                            Squ2_EnvelopeDataCtrl = $07b5
	                            Squ1_NoteLenCounter   = $07b6
	                            Squ1_EnvelopeDataCtrl = $07b7
	                            Tri_NoteLenBuffer     = $07b8
	                            Tri_NoteLenCounter    = $07b9
	                            Noise_BeatLenCounter  = $07ba
	                            Squ1_SfxLenCounter    = $07bb
	                            
	                            Squ2_SfxLenCounter    = $07bd
	                            Sfx_SecondaryCounter  = $07be
	                            Noise_SfxLenCounter   = $07bf
	                            DAC_Counter           = $07c0
	                            NoiseDataLoopbackOfs  = $07c1
	                            
	                            NoteLengthTblAdder    = $07c4
	                            AreaMusicBuffer_Alt   = $07c5
	                            PauseModeFlag         = $07c6
	                            GroundMusicHeaderOfs  = $07c7
	                            
	                            AltRegContentFlag     = $07ca
	                            
	                            WarmBootOffset        = <$07d6
	                            DisplayDigits         = $07d7
	                            TopScoreDisplay       = $07d7
	                            
	                            ScoreAndCoinDisplay   = $07dd
	                            PlayerScoreDisplay    = $07dd
	                            PlayerCoinDisplay	  = $07eb
	                            
	                            GameTimerDisplay      = $07f8
	                            ColdBootOffset        = <$07fe
	                            WarmBootValidation    = $07ff
	                            ClearRemainings		  = $0600
	                            TextBoxYScroll1		  = $0601
	                            OldTextboxID		  = $0602
	                            wea32				  = $0603
	                            clearVRAM			  = $0604
	                            ;-------------------------------------------------------------------------------------
	                            ;CONSTANTS
	                            
	                            ;sound effects constants
	                            Sfx_SmallJump         = %10000000
	                            Sfx_Flagpole          = %01000000
	                            Sfx_Fireball          = %00100000
	                            Sfx_PipeDown_Injury   = %00010000
	                            Sfx_EnemySmack        = %00001000
	                            Sfx_EnemySmackOr	  = %00011000
	                            Sfx_EnemyStomp        = %00000100
	                            Sfx_PSwitchOut		  = %00001100
	                            Sfx_Bump              = %00000010
	                            Sfx_BigJump           = %00000001
	                            
	                            Sfx_BowserFall        = %10000000
	                            Sfx_ExtraLife         = %01000000
	                            Sfx_PowerUpGrab       = %00100000
	                            Sfx_TimerTick         = %00010000
	                            Sfx_Blast             = %00001000
	                            Sfx_GrowVine          = %00000100
	                            Sfx_GrowPowerUp       = %00000010
	                            Sfx_CoinGrab          = %00000001
	                            
	                            Sfx_BowserFlame       = %00000010
	                            Sfx_BrickShatter      = %00000001
	                            
	                            ;music constants
	                            Silence               = %10000000
	                            
	                            StarPowerMusic        = %01000000
	                            PipeIntroMusic        = %00100000
	                            CloudMusic            = %00010000
	                            CastleMusic           = %00001000
	                            UndergroundMusic      = %00000100
	                            WaterMusic            = %00000010
	                            GroundMusic           = %00000001
	                            PSwitchMusic		  = $5f
	                            
	                            TimeRunningOutMusic   = %01000000
	                            EndOfLevelMusic       = %00100000
	                            AltGameOverMusic      = %00010000
	                            EndOfCastleMusic      = %00001000
	                            VictoryMusic          = %00000100
	                            GameOverMusic         = %00000010
	                            DeathMusic            = %00000001
	                            
	                            ;----------------------
	                            ;enemy object constants 
	                            ;----------------------
	                            Koopa 				  = $00
	                            GreenKoopa            = $00
	                            DemotedRPTroopa		  = $01
	                            BuzzyBeetle           = $02
	                            RedKoopa              = $03
	                            KoopaShell			  = $04
	                            HammerBro             = $05
	                            Goomba                = $06
	                            Bloober               = $07
	                            BulletBill_FrenzyVar  = $08
	                            FastGoomba			  = $09
	                            GreyCheepCheep        = $0a
	                            RedCheepCheep         = $0b
	                            Podoboo               = $0c
	                            PiranhaPlant          = $0d
	                            GreenParatroopaJump   = $0e
	                            RedParatroopa         = $0f
	                            GreenParatroopaFly    = $10
	                            Lakitu                = $11
	                            Spiny                 = $12
	                            BlackParatroopa		  = $13
	                            FlyCheepCheepFrenzy   = $14
	                            FlyingCheepCheep      = $14
	                            BowserFlame           = $15
	                            Fireworks             = $16
	                            BBill_CCheep_Frenzy   = $17
	                            Stop_Frenzy           = $18
	                            RedKoopaShell		  = $19
	                            ;$1a, $1b used by springboard frames
	                            ;from $1c to $2c are firebars and lifts (23 is null sprite)
	                            Bowser                = $2d
	                            PowerUpObject         = $2e
	                            VineObject            = $2f
	                            FlagpoleFlagObject    = $30
	                            StarFlagObject        = $31
	                            JumpspringObject      = $32
	                            BulletBill_CannonVar  = $33
	                            ;$34 is warp zone
	                            RetainerObject        = $35
	                            ;$36 potentially free slot
	                            UDPiranhaPlant		  = $21
	                            RUDPiranhaPlant		  = $22
	                            RedPiranhaPlant		  = $20
	                            
	                            Sign				  = $40
	                            ScrollLockEnemy		  = $41
	                            BBillSpawner		  = $42
	                            PltRem				  = $43
	                            
	                            LastEnemyID			  = $43
	                            
	                            
	                            
	                            
	                            ;other constants
	                            World1 = 0
	                            World2 = 1
	                            World3 = 2
	                            World4 = 3
	                            World5 = 4
	                            World6 = 5
	                            World7 = 6
	                            World8 = 7
	                            World9 = 8
	                            Level1 = 0
	                            Level2 = 1
	                            Level3 = 2
	                            Level4 = 3
	                            
	                            
	                            ;TitleScreenDataOffset = $1ec0
	                            SwimTileRepOffset     = PlayerGraphicsTable + $9e
	                            MusicHeaderOffsetData = MusicHeaderData - 1
	                            MHD                   = MusicHeaderData
	                            
	                            A_Button              = %10000000
	                            B_Button              = %01000000
	                            Select_Button         = %00100000
	                            Start_Button          = %00010000
	                            Up_Dir                = %00001000
	                            Down_Dir              = %00000100
	                            Left_Dir              = %00000010
	                            Right_Dir             = %00000001
	                            
	                            GrabState = $04
	                            
	                            TitleScreenModeValue  = 0
	                            GameModeValue         = 1
	                            VictoryModeValue      = 2
	                            GameOverModeValue     = 3
	                            
	                            ;New Defines
	                            
	                            ChangeBankR				= $6000
	                            ChangeBankRDelay		= $6001
	                            SuppressJumpNoise		= $6002
	                            UnlockWorld9			= $6003
	                            GrabFlag				= $6004
	                            temp5					= $6005
	                            HurryUp					= $6006
	                            UnknownHurryUp			= $6007	;i forgor why i made this?
	                            GrabID					= $6008
	                            
	                            AreaObjOffsetBuffer   	= $0500
	                            AreaObjectLength      	= $0510
	                            MushroomLedgeHalfLen  	= $0520
	                            
	                            GrabDown				= $601d
	                            eastereggflag			= $601e
	                            StarChainCounter		= $601f
	                            
	                            debug					= $6020
	                            FlipGFX					= $6021
	                            FlipTimer				= $6022
	                            dontinc					= $6023
	                            RemoveChain				= $6024
	                            EnemyDefeatPitch		= $6025
	                            DoNotChangeSize			= $6026
	                            
	                            PFlag					= $6027
	                            PTimer					= $6028
	                            
	                            WaterReplace			= $6029
	                            
	                            temp6					= $602a
	                            temp7					= $602b
	                            temp8					= $602c
	                            
	                            ;$602d is ununused
	                            peo						= $602d
	                            
	                            FballCooldown			= $602e
	                            OldStatus				= $6030
	                            ExplosionTimerCounter	= $6031
	                            BlockUsed				= $6032
	                            temp9					= $6034
	                            BowserKilled			= $6035
	                            ParallaxOffset			= $6036
	                            World9Debug				= $6037 ;i dont fucking now why i have this
	                            StartTimer				= $6038
	                            
	                            Flag1kCoins				= $6039
	                            
	                            ExtendedLength			= $0530
	                            ExtendedMetatile		= $0540
	                            ExtendedHeight			= $0550
	                            
	                            WaitForReset			= $6050
	                            tempA					= $6051
	                            HardModeFlag			= $6052
	                            OnOffBits				= $6053
	                            OnOffFlag				= $6054
	                            DebugSwim				= $6065
	                            tempB					= $6056
	                            tempC					= $6057
	                            tempD					= $6058
	                            LakituRespawning		= $6059
	                            WaterCooldown			= $605a
	                            Tortilla				= $605b
	                            lag					    = $605c
	                            LagFrameYes				= $605d
	                            OldSwim					= $605e
	                            bocata					= $605f
	                            bocata2					= $6060
	                            bocata3					= $6061
	                            FrameCaunter			= $6062
	                            ;this goes to $6064
	                            PlayerFoot				= $6065
	                            OnSlope					= $606b
	                            TwoFoot					= $6071
	                            OneSecTimer 			= $6077
	                            GrabUp					= $6078
	                            CrouchingFlag2			= $6079
	                            Webito					= $607a
	                            EntranceCoolDown		= $607b
	                            DontDecPT				= $607c
	                            sleeping				= $607d
	                            EvenFrame				= $607e
	                            DetectedFoot			= $607f
	                            OldDetectedFoot			= $6080
	                            TimerWa					= $6081
	                            currentBank				= $6082
	                            
	                            ; $6083 is free
	                            
	                            ContinueWriting			= $6084
	                            CurrentText				= $6085
	                            OldWriting				= $6086
	                            test					= $6087
	                            dontchecklag			= $6088
	                            dou						= $6089
	                            Wea						= $608a
	                            ClimbingSlope			= $608b
	                            temp2a					= $608c
	                            temp3a					= $608d
	                            temp4a					= $608e
	                            temp5a					= $608f
	                            temp6a					= $6090
	                            pspeed					= $6091
	                            pspeeddelay				= $6092
	                            pspeedsound				= $6093
	                            tickid					= $6094
	                            oldpspeed				= $6095
	                            framesfour				= $6096
	                            dontdecrementagain		= $6097
	                            ScrollThirtyTwoOG		= $6098
	                            olddirscroll			= $6099
	                            stopload				= $609a
	                            Player_X_ColumnLoc		= $609b
	                            bbl2					= $609c
	                            Block_BBuf_High			= $609f
	                            dont					= $60a1
	                            scrolldir				= $60a2
	                            tempXD					= $60a3
	                            dontscroll				= $60a4
	                            iwantdie				= $60a5
	                            ScrollLockPageLoc		= $60a6
	                            ScrollLockColumnPos		= $60a7
	                            WarpZoneCheck			= $60a8
	                            ScrollLeftLock			= $60a9
	                            Player_X_Column			= $60aa
	                            GlobalSaveOffset		= $60ab
	                            Saved_X_Position		= $60ac
	                            Saved_Y_Position		= $614c
	                            Saved_PageLoc			= $61ac
	                            Saved_State				= $624c
	                            Saved_isDefeated		= $62ac
	                            Saved_ID				= $634c
	                            OldPageLoc				= $63ac
	                            OldHorizontalScroll		= $63ad
	                            OldNameTableSelect		= $63ae
	                            TouchingFloor			= $63af
	                            TouchingCeiling			= $63b0
	                            PlatformTimer			= $63b1
	                            timerupthing			= $63b2
	                            ChangeBankRDelay2		= $63b3
	                            BrickCoinTimer			= $63b4
	                            DisableScreenFlag2		= $63b5
	                            waitforit				= $63b6
	                            SetupPause				= $63b7
	                            PreviousUp_Down_Buttons	= $63b8
	                            SettingSelec			= $63b9
	                            OldSettingSelec			= $63ba
	                            DoFin					= $63bb
	                            BackgroundColorCtrlFP	= $63bc
	                            FlagpoleEnemyPage		= $63bd
	                            FlagpoleEnemyCol		= $63be
	                            OnPlatform				= $63bf
	                            OnWater					= $63c0
	                            OrigMetatile			= $63c1
	                            Cbolla					= $069e
	                            SavedOffset				= $63c4
	                            FlagpoleOnScreen		= $63ca
	                            tempE					= $63cc
	                            AreaPages				= $63cd
	                            PagesPages				= $63ed
	                            Averveamos				= $63dd
	                            WasLocked				= $63de
	                            ScrollLeftFlag			= $63df
	                            AutoScrollFlag			= $63e0
	                            AutoScrollFlag2			= $63e1
	                            OldScrollLeftFlag		= $63e2
	                            OldSquare1SoundBuffer	= $63e3
	                            OldMirror_PPU_CTRLREG1	= $63e4
	                            OldVerticalScroll		= $63e5
	                            tempF					= $63e6
	                            tempG					= $63e7
	                            SideCollisionAdder		= $63e8
	                            FramesMissed			= $63e9
	                            GroundedTimer			= $63ea
	                            EnemyOnSlope			= $05f0
	                            lagframedetect			= $63eb
	                            DecodingLevel			= $63ec
	                            FloateyNum_PageLoc		= $63ed
	                            
	                            ExtraShit			    = $0501
	                            ExtraShit2			    = $0541
	                            ExtraShit3			    = $0581
	                            ExtraShit4			    = $05a1	
	                            
	                            CHR0:               	= $7e00
	                            CHR1:              		= $7e01
	                            CHR2:              		= $7e02
	                            CHR3:              		= $7e03
	                            CHR4:              		= $7e04
	                            CHR5:              		= $7e05
	                            LevelBank				= $7e06
	                            seed					= $7e07
	                            VineGrabCooldown		= $7e09
	                            TitleScreenSelect		= $7e0a
	                            FirstFrame				= $7e0b
	                            FirstBootFlag			= $7e0c
	                            DontRepeat				= $7e0d
	                            Cannon_Creator			= $7e0e
	                            WorldPalette			= $7e13
	                            TheresPal3				= $7e14
	                            OldPal3					= $7e15
	                            dumbflag				= $7e19
	                            FloateyShit				= $7e1a
	                            DontJump				= $7e1f
	                            BowserGotHit			= $7e20
	                            PCooldown				= $7e21
	                            
	                            TextboxID				= $05c1
	                            CurrentChar				= $05c2
	                            IncrementedTxtHAdd		= $05c3
	                            IRQnum					= $05c4
	                            Old8000					= $05c5
	                            StartedTextBox			= $05c6
	                            SomeOffset				= $05c7
	                            TextBoxYScroll			= $05c8
	                            ScrollText				= $05c9
	                            songPlaying				= $05ca
	                            EndTimer				= $05cb
	                            LastCHR3				= $05cc
	                            TimesScrolled			= $05cd
	                            PlayerOnVine			= $05ce
	                            OldSavedJoypadBits		= $05cf
	                            LevelParserOffset		= $05d0
	                            LevelSelectNumber		= $05d1
	                            EnemyOffsetPage			= $05d2
	                            
	                            
	                            
	                            ; Save game
	                            
	                            SavedScore				= $7f00
	                            WorldSelectEnableFlag 	= $7f0a
	                            SettingsBits			= $7f06
	                            TopMaxedOut				= $7f10
	                            ContinueWorld           = $7f11
	                            ContinueLevel			= $7f12
	                            ContinueScore			= $7f13
	                            ContinueCoins			= $7f1a
	                            ContinuePwrup			= $7f1e
	                            ContinueCoinTally       = $7f1f
	                            SavedWord				= $7fbc
	                            
	                            
	                            UP = $7f
	                            DOWN = $81
	                            LEFT = $80
	                            RIGHT = $82
	                            Abutton = $83
	                            Bbutton = $84
	                            
	                            
	                            OriginalLevelDataStart = $09CB4 ; start of level data in a normal SMB 
	                            LevelDataOffset = OriginalLevelDataStart - LevelDataStart
	                            
	                            ContinueMenuSelect = Player_Y_Position
	                            
	                            FinalWorld = World8         ; Final world
	                            SecHardModeWorld = World5   ; Secondary hard mode starts on this world
	                            
	                            save_playerData = $7e00
	                            
	                            NumberOfCharacters = #$02
	                            
	                            shufflelevels = 0
	                            
	                            if shufflelevels == 1
	                            	Enablew1l1PiranhaPlants = 1
	                            else
	                            	Enablew1l1PiranhaPlants = 0
	                            endif
	                            
	                            BANK_SOUND = #$02
	                            BANK_CORE = #$03
	                            
	                            Unlock9Steps = #$01
	                            
	                            FirstLevelBank = #$0a
	                            
	                            
	                            ;include code\sound\soundConstants.asm           ; sound constants
	                            include code\banks.asm                          ; Bank asignments
	                            ; bank 00 -- first half of original SMB code
	                            base $8000
08000 00                        .db $00                     ; bank identifier
08001                           include code\bank00.asm
08001                           ;-------------------------------------------------------------------------------------
08001                           
08001                           include code\numbers.asm      
08001                           ; Convert the value in the A register to decimal digits
08001                           ; $00 hundreds digit
08001                           ; $01 tens digit
08001                           ; $02 ones digit
08001                           convertNumber:
08001 A2 00                         ldx #$00
08003 A0 00                         ldy #$00
08005                           -
08005 96 00                         stx $00,y
08007 C8                            iny
08008 C0 03                         cpy #$03
0800A D0 F9                         bne -
0800C A0 02                         ldy #$02
0800E                           -
0800E D9 36 80                      cmp decimalPlaceValues, y
08011 90 08                         bcc +
08013 F9 36 80                      sbc decimalPlaceValues, y
08016 F6 00                         inc $00,x
08018 4C 0E 80                      jmp -
0801B                           +
0801B C0 00                         cpy #$00
0801D F0 05                         beq +
0801F 88                            dey
08020 E8                            inx
08021 4C 0E 80                      jmp -
08024                           +
08024 A0 00                         ldy #$00
08026                           -
08026                               ; replace digit with space if 0, starting from leftmost digit
08026 B9 00 00                      lda $00,y
08029 D0 0A                         bne +           ; exit routine if not 0
0802B A9 24                         lda #$24
0802D 99 00 00                      sta $00,y
08030                               
08030 C8                            iny
08031 C0 02                         cpy #$02
08033 D0 F1                         bne -
08035                           +
08035 60                        rts
08036                           
08036                           decimalPlaceValues:
08036 01 0A 64                      .db $01, $0a, $64
08039                           
08039                           ;hexTable:
08039                           ;    .db $00, $01, $02, $03, $04, $05, $06, $07, $08, $09, $0a, $0b, $0c, $0d, $0e, $0f
08039                           ;include code\lagmaker.asm                  
08039                           ;-------------------------------------------------------------------------------------
08039                           ;$00 - vram buffer address table low, also used for pseudorandom bit
08039                           ;$01 - vram buffer address table high
08039                           
08039                           
08039                           
08039                           ;-------------------------------------------------------------------------------------
08039                           ;NoPlease1: jmp NoPlease
08039                           OperModeExecutionTree:
08039 AD BB 63                  	  lda DoFin
0803C F0 18                     	  beq +
0803E A9 80                     	  lda #$80
08040 8D 76 07                  	  sta GamePauseStatus
08043 A9 00                     	  lda #$00
08045 8D C6 07                   	  sta PauseModeFlag
08048 8D B2 07                        sta PauseSoundBuffer
0804B 8D B7 63                        sta SetupPause
0804E 85 EB                     	  sta PauseSoundQueue
08050 8D BB 63                  	  sta DoFin
08053 4C B3 91                  	  jmp TerminateGame
08056                           +:			   
08056 AD 70 07                  	  lda OperMode     ;this is the heart of the entire program,
08059                           	  if shufflelevels == 1
08059                           	     cmp #$04
08059                           		 bcc +
08059                           		 lda #$01
08059                           		 sta OperMode
08059                           +:
08059                           	  endif
08059 20 A0 F7                  	  jsr JumpEngine   ;most of what goes on starts here
0805C                           
0805C 64 80                           .dw TitleScreenMode
0805E F7 91                           .dw GameMode
08060 87 82                           .dw VictoryMode
08062 7D 91                           .dw GameOverMode
08064                           
08064                           ;-------------------------------------------------------------------------------------
08064                           
08064                           if SKIP_TITLE
08064                               StartGameNoTitle:
08064                                   jsr PrimaryGameSetup
08064                                   jsr ResetTitle
08064                                   jmp StartWorld1
08064                           endif
08064                           
08064                           TitleScreenMode:
08064 AD 72 07                        lda OperMode_Task
08067 20 A0 F7                        jsr JumpEngine
0806A                           
0806A F2 8D                           .dw InitializeGame
0806C 28 86                           .dw ScreenRoutines
0806E 8D 80                     	  .dw MenuContinue
08070 4D 8F                           .dw PrimaryGameSetup
08072                                 if SKIP_TITLE
08072                                   .dw StartGame
08072                                 else
08072 A6 80                             .dw GameMenuRoutine
08074                                 endif
08074                           
08074                           ;-------------------------------------------------------------------------------------
08074                           ContinueWord:
08074 0A 22 8B 08 24 24 24 24.. 	  .db $0a, $22, $8b, $08, $24, $24, $24, $24, $24, $24, $24, $24, $00
08081                           WSelectBufferTemplate:
08081 07 20 73 04 00 28 01 00..       .db $07, $20, $73, $04, $00, $28, $01, $00, $00
0808A                           NullJoypadJMP:
0808A 4C AF 81                  		jmp NullJoypad
0808D                           		
0808D                           MenuContinue:
0808D AD 0B 7E                  	lda FirstFrame
08090 F0 10                     			  beq +
08092 CE 0B 7E                  			  dec FirstFrame
08095 A2 00                     			  ldx #$00
08097 BD 74 80                  -:			  lda ContinueWord,x ;write template for world select in vram buffer
0809A 9D 00 64                                sta VRAM_Buffer1-1,x        ;do this until all bytes are written
0809D E8                                      inx
0809E C9 00                                   cmp #$00
080A0 D0 F5                                   bne -
080A2 EE 72 07                  +:			  inc OperMode_Task
080A5 60                        			  rts
080A6                           
080A6                           GameMenuRoutine:
080A6 A0 00                                   ldy #$00
080A8 8C DD 63                  			  sty Averveamos
080AB AD FC 06                                lda SavedJoypad1Bits        ;check to see if either player pressed
080AE C9 10                     			  cmp #Start_Button
080B0 D0 10                                   bne ChkSelect     
080B2 AD CF 05                  StartGame:    lda OldSavedJoypadBits
080B5 29 10                     		      and #Start_Button
080B7 D0 06                     			  bne +
080B9 AD FC 06                  			  lda SavedJoypad1Bits
080BC 4C D8 81                  			  jmp ChkContinue             ;if either start or A + start, execute here
080BF AD FC 06                  +:			  lda SavedJoypad1Bits
080C2 C9 80                     ChkSelect:    cmp #A_Button
080C4 D0 37                     			  bne +
080C6 AD 80 07                  				  lda SelectTimer             ;check select/B button timer
080C9 D0 BF                     				  bne NullJoypadJMP           ;if not expired, branch
080CB A9 10                     					  lda #$10                    ;otherwise reset select button timer
080CD 8D 80 07                  					  sta SelectTimer
080D0 AD 52 60                  					  lda HardModeFlag
080D3 49 01                     					  eor #$01
080D5 8D 52 60                  					  sta HardModeFlag
080D8 A9 04                     					  lda #$04
080DA 8D 00 64                  					  sta VRAM_Buffer1-1
080DD A9 20                     					  lda #$20
080DF 8D 01 64                  					  sta VRAM_Buffer1
080E2 A9 76                     					  lda #$76
080E4 8D 02 64                  					  sta VRAM_Buffer1+1
080E7 A9 01                     					  lda #$01
080E9 8D 03 64                  					  sta VRAM_Buffer1+2
080EC AC 52 60                  					  ldy HardModeFlag
080EF B9 D8 89                  					  lda HardModeDisplay,y
080F2 8D 04 64                  					  sta VRAM_Buffer1+3
080F5 A9 00                     					  lda #$00
080F7 8D 05 64                  					  sta VRAM_Buffer1+4
080FA 4C AF 81                  					  jmp NullJoypad
080FD                           +:			  
080FD C9 B0                     			  cmp #Select_Button+Start_Button+A_Button
080FF D0 28                     			  bne +
08101 A0 00                     				  ldy #$00
08103 98                        				  tya
08104 99 00 7F                  -:				  	  sta SavedScore,y
08107 C8                        					  iny
08108 10 FA                     				  bpl -
0810A A0 05                     				  ldy #$05
0810C 99 DD 07                  -:				  	  sta PlayerScoreDisplay,y
0810F 88                        					  dey
08110 D0 FA                     				  bne -
08112 A0 03                     				  ldy #$03
08114 99 EB 07                  -:				  	  sta PlayerCoinDisplay,y
08117 88                        					  dey
08118 D0 FA                     				  bne -
0811A EE 0B 7E                  				  inc FirstFrame
0811D EE BB 63                  				  inc DoFin
08120 EE 74 07                  				  inc DisableScreenFlag
08123 EE 0C 7E                  				  inc FirstBootFlag
08126 4C 8D 81                  				  jmp UpdateShroom
08129                           +:            
08129 C9 20                     			  cmp #Select_Button          ;check to see if the select button was pressed
0812B F0 12                                   beq SelectLogic             ;if so, branch reset demo timer
0812D C9 08                     			  cmp #Up_Dir
0812F F0 0E                     			  beq SelectLogic
08131 C9 04                     			  cmp #Down_Dir
08133 F0 0A                     			  beq SelectLogic
08135                                         ;ldx DemoTimer               ;otherwise check demo timer
08135                                         ;bne ChkWorldSel             ;if demo timer not expired, branch to check world selection
08135                                         ;sta SelectTimer             ;set controller bits here if running demo
08135                                         ;jsr DemoEngine              ;run through the demo actions
08135                                         ;bcs ResetTitle              ;if carry flag set, demo over, thus branch
08135                                         ;jmp Rundemo                 ;otherwise, run game engine for demo
08135 AE 0A 7F                  ChkWorldSel:  ldx WorldSelectEnableFlag   ;check to see if world selection has been enabled
08138 F0 75                                   beq NullJoypad
0813A C9 40                     			  cmp #B_Button               ;if so, check to see if the B button was pressed
0813C D0 71                                   bne NullJoypad
0813E C8                                      iny                         ;if so, increment Y and execute same code as select
0813F                           SelectLogic:  ;lda DemoTimer               ;if select or B pressed, check demo timer one last time
0813F                                         ;beq ResetTitle              ;if demo timer expired, branch to reset title screen mode
0813F                                         ;lda #$18                    ;otherwise reset demo timer
0813F                                         ;sta DemoTimer
0813F AD 80 07                                lda SelectTimer             ;check select/B button timer
08142 0D 0C 7E                                ora FirstBootFlag
08145 D0 68                     			  bne NullJoypad              ;if not expired, branch
08147 A9 10                                   lda #$10                    ;otherwise reset select button timer
08149 8D 80 07                                sta SelectTimer
0814C C0 01                                   cpy #$01                    ;was the B button pressed earlier?  if so, branch
0814E F0 0E                                   beq IncWorldSel             ;note this will not be run if world selection is disabled
08150                           			  ;inc CurrentPlayer
08150 AD 0A 7E                                lda TitleScreenSelect           ;if no, must have been the select button, therefore
08153 49 01                                   eor #$01
08155 8D 0A 7E                  			  sta TitleScreenSelect
08158                           +:
08158 20 67 82                                jsr DrawMushroomIcon
0815B 4C AF 81                                jmp NullJoypad
0815E                           IncWorldSel:  
0815E AE D1 05                  			  ldx LevelSelectNumber
08161 E8                        			  inx
08162 E0 04                     			  cpx #$04
08164 B0 0E                     			  bcs +
08166 8E D1 05                  			  stx LevelSelectNumber
08169 AD 6B 07                  			  lda WorldSelectNumber
0816C 20 45 82                  			  jsr GoContinue
0816F A2 00                     			  ldx #$00
08171 4C 8D 81                  			  jmp UpdateShroom
08174 EE 6B 07                  +:			  inc WorldSelectNumber       ;increment world select number
08177 AD 6B 07                                lda WorldSelectNumber
0817A C9 09                     			  cmp #$09
0817C 90 05                     			  bcc +
0817E A9 00                     			  lda #$00
08180 8D 6B 07                  			  sta WorldSelectNumber
08183 A2 00                     +:			  ldx #$00
08185 8E D1 05                  			  stx LevelSelectNumber
08188 20 45 82                                jsr GoContinue
0818B A2 00                     			  ldx #$00
0818D BD 81 80                  UpdateShroom: lda WSelectBufferTemplate,x ;write template for world select in vram buffer
08190 9D 00 64                                sta VRAM_Buffer1-1,x        ;do this until all bytes are written
08193 E8                                      inx
08194 E0 09                                   cpx #$09
08196 30 F5                                   bmi UpdateShroom
08198 AC 5F 07                                ldy WorldNumber             ;get world number from variable and increment for
0819B C8                                      iny                         ;proper display, and put in blank byte before
0819C 8C 04 64                                sty VRAM_Buffer1+3          ;null terminator
0819F AC 5C 07                  			  ldy LevelNumber
081A2 C8                        			  iny
081A3 8C 06 64                  			  sty VRAM_Buffer1+5
081A6 AC 52 60                  			  ldy HardModeFlag
081A9 B9 D8 89                  			  lda HardModeDisplay,y
081AC 8D 07 64                  			  sta VRAM_Buffer1+6
081AF AD FC 06                  NullJoypad:   lda SavedJoypad1Bits
081B2 8D CF 05                  			  sta OldSavedJoypadBits
081B5 A9 00                     			  lda #$00                    ;clear joypad bits for player 1
081B7 8D FC 06                                sta SavedJoypad1Bits
081BA 20 0D 92                  RunDemo:      jsr GameCoreRoutine         ;run game engine
081BD A5 0E                                   lda GameEngineSubroutine    ;check to see if we're running lose life routine
081BF C9 06                                   cmp #$06
081C1 D0 0E                                   bne ExitMenu1                ;if not, do not do all the resetting below
081C3 A9 00                     ResetTitle:   lda #$00                    ;reset game modes, disable
081C5 8D 70 07                                sta OperMode                ;sprite 0 check and disable
081C8 8D 72 07                                sta OperMode_Task           ;screen output
081CB 8D 22 07                                sta IRQDisable
081CE EE 74 07                                inc DisableScreenFlag
081D1                           ExitMenu1:
081D1 60                                      rts
081D2                           
081D2 01 00 00                  SizeTable: .db $01, $00, $00
081D5                           OldStatusTable:
081D5 00 00 01                  		  .db $00, $00, $01
081D8                           
081D8 A9 00                     ChkContinue:  lda #$00
081DA 8D 0C 7E                  			  sta FirstBootFlag
081DD AD 0A 7E                  			  lda TitleScreenSelect
081E0 F0 37                     			  beq StartWorld1
081E2                           			  
081E2 AD 1E 7F                  			  lda ContinuePwrup
081E5 8D 56 07                  			  sta PlayerStatus
081E8 A8                        			  tay
081E9 B9 D2 81                  			  lda SizeTable,y
081EC 8D 54 07                  			  sta PlayerSize
081EF B9 D5 81                  			  lda OldStatusTable,y
081F2 8D 30 60                  			  sta OldStatus
081F5                           			  
081F5 AD 1F 7F                  			  lda ContinueCoinTally
081F8 8D 5E 07                  			  sta CoinTally
081FB                           			  
081FB AD 0A 7F                  			  lda WorldSelectEnableFlag
081FE D0 19                     			  bne StartWorld1
08200                           			  
08200 AD 12 7F                  			  lda ContinueLevel
08203 8D 5C 07                  			  sta LevelNumber
08206 AD 11 7F                  			  lda ContinueWorld           ;load previously saved world number for secret
08209 8D 5F 07                  			  sta WorldNumber
0820C                                         
0820C 0A                        			  asl
0820D 0A                                      asl
0820E 18                                      clc
0820F 6D 5C 07                                adc LevelNumber
08212 AA                        			  tax
08213 BD 54 F9                  			  lda LevelSelectAreasOffsets,x
08216 8D 60 07                  			  sta AreaNumber
08219 20 F1 F7                  StartWorld1:  jsr LoadAreaPointer
0821C A9 10                     			  lda #$10
0821E 8D 38 60                  			  sta StartTimer
08221 EE 5D 07                                inc Hidden1UpFlag           ;set 1-up box flag for both players
08224 EE 57 07                                inc FetchNewGameTimerFlag   ;set fetch new game timer flag
08227 EE 70 07                                inc OperMode                ;set next game mode
0822A EE 74 07                  			  inc DisableScreenFlag
0822D A9 00                                   lda #$00
0822F 8D 72 07                                sta OperMode_Task           ;set game mode here, and clear demo timer
08232 8D A2 07                                sta DemoTimer
08235 AD 0A 7E                                lda TitleScreenSelect
08238 D0 0A                     			  bne ExitMenu
0823A A2 17                     			  ldx #$17
0823C A9 00                                   lda #$00
0823E 9D DD 07                  InitScores:   sta ScoreAndCoinDisplay,x   ;clear player scores and coin displays
08241 CA                                      dex
08242 10 FA                                   bpl InitScores
08244 60                        ExitMenu:     rts
08245                           
08245                           
08245 8D 5F 07                  GoContinue:   sta WorldNumber             ;start both players at the first area
08248 8D 66 07                                sta OffScr_WorldNumber      ;of the previously saved world number
0824B 8E 5C 07                  			  stx LevelNumber
0824E 0A                        			  asl
0824F 0A                                      asl
08250 18                                      clc
08251 6D 5C 07                                adc LevelNumber
08254 AA                        			  tax
08255 BD 54 F9                  			  lda LevelSelectAreasOffsets,x
08258                           			  
08258 8D 60 07                                sta AreaNumber              ;will make no difference
0825B 8D 67 07                                sta OffScr_AreaNumber   
0825E 60                                      rts
0825F                           if START_WORLD >0
0825F                           StartWorldCustom:
0825F                                         lda #START_WORLD-1
0825F                                         sta WorldNumber
0825F                                         lda #START_LEVEL-1
0825F                                         sta LevelNumber
0825F                                         
0825F                                         lda WorldNumber
0825F                                         ;sta OffScr_WorldNumber
0825F                                         lda WorldNumber-OnscreenPlayerInfo
0825F                                         jsr CopyToAllPlayers
0825F                           
0825F                                         
0825F                                         asl
0825F                                         asl
0825F                                         clc
0825F                                         adc LevelNumber
0825F                                         tax
0825F                                         lda LevelSelectAreasOffsets,x
0825F                                         sta AreaNumber
0825F                                         ;sta OffScr_AreaNumber
0825F                                         lda AreaNumber-OnscreenPlayerInfo
0825F                                         jmp CopyToAllPlayers
0825F                           endif
0825F                           ;-------------------------------------------------------------------------------------
0825F                           
0825F                           MushroomIconData:
0825F 07 22 49 83 CE 24 24 00         .db $07, $22, $49, $83, $ce, $24, $24, $00
08267                           
08267                           DrawMushroomIcon:
08267 A0 07                                   ldy #$07                ;read eight bytes to be read by transfer routine
08269 B9 5F 82                  IconDataRead: lda MushroomIconData,y  ;note that the default position is set for a
0826C 99 00 64                                sta VRAM_Buffer1-1,y    ;1-player game
0826F 88                                      dey
08270 10 F7                                   bpl IconDataRead
08272 AD 01 64                  			  lda VRAM_Buffer1
08275 85 DE                     			  sta temp2
08277 AD 0A 7E                                lda TitleScreenSelect       ;check number of players
0827A F0 0A                                   beq ExitIcon            ;if set to 1-player game, we're done
0827C A9 24                                   lda #$24                ;otherwise, load blank tile in 1-player position
0827E 8D 04 64                                sta VRAM_Buffer1+3
08281 A9 CE                                   lda #$ce                ;then load shroom icon tile in 2-player position
08283 8D 06 64                                sta VRAM_Buffer1+5
08286 60                        ExitIcon:     rts
08287                           
08287                           ;-------------------------------------------------------------------------------------
08287                           
08287                           VictoryMode:
08287 20 9C 82                              jsr VictoryModeSubroutines  ;run victory mode subroutines
0828A AD 72 07                              lda OperMode_Task           ;get current task of victory mode
0828D F0 07                                 beq AutoPlayer              ;if on bridge collapse, skip enemy processing
0828F A2 00                                 ldx #$00
08291 86 08                                 stx ObjectOffset            ;otherwise reset enemy object offset 
08293 20 5B C2                              jsr EnemiesAndLoopsCore     ;and run enemy code
08296 20 4B AD                  AutoPlayer: jsr RelativePlayerPosition  ;get player's relative coordinates
08299 4C 1C B5                              jmp PlayerGfxHandler        ;draw the player, then leave
0829C                           
0829C                           VictoryModeSubroutines:
0829C AD 72 07                        lda OperMode_Task
0829F 20 A0 F7                        jsr JumpEngine
082A2                           
082A2 1B CC                           .dw BridgeCollapse
082A4 C9 82                           .dw SetupVictoryMode
082A6 70 83                           .dw PlayerVictoryWalk
082A8 B4 83                           .dw PrintVictoryMessages
082AA 4C 84                     	  .dw EndCastleAward
082AC 57 84                           .dw PlayerEndWorld
082AE B8 82                     	  .dw WipeTheFuckingScreen
082B0 07 83                     	  .dw DisplayCredits
082B2 19 83                     	  .dw WriteCredits
082B4 2A 83                     	  .dw Nothing
082B6 2E 83                     	  .dw CheckForThing
082B8                           
082B8                           ;-------------------------------------------------------------------------------------
082B8                           Okso:
082B8                           	  ;.dw "CREDITS TO"-55
082B8                           	  ;.dw "TEST - TEST"-55
082B8                           WipeTheFuckingScreen:
082B8 20 55 86                  	  jsr InitScreen
082BB EE 87 60                        inc test
082BE AD 87 60                  	  lda test
082C1 C9 0F                     	  cmp #$0f
082C3 D0 03                     	  bne +
082C5 EE 72 07                  	  inc OperMode_Task
082C8 60                        +: 	  rts
082C9                           SetupVictoryMode:
082C9 AE 1B 07                        ldx ScreenRight_PageLoc  ;get page location of right side of screen
082CC E8                              inx                      ;increment to next page
082CD 86 37                           stx DestinationPageLoc   ;store here
082CF A9 08                           lda #EndOfCastleMusic
082D1 85 ED                           sta EventMusicQueue      ;play win castle music
082D3 AD 91 60                  	  lda pspeed
082D6 F0 2C                     	  beq +
082D8 CE 91 60                  	  dec pspeed
082DB A9 15                     	  lda #$15
082DD 8D 92 60                  	  sta pspeeddelay
082E0 AC 00 64                  		ldy VRAM_Buffer1_Offset
082E3 A9 20                     		lda #$20
082E5 99 01 64                  		sta VRAM_Buffer1,y
082E8 A9 49                     		lda #$49
082EA 99 02 64                  		sta VRAM_Buffer1+1,y
082ED A9 01                     		lda #$01
082EF 99 03 64                  		sta VRAM_Buffer1+2,y
082F2                           		;lda #$19
082F2                           		;sta VRAM_Buffer1+3,y
082F2 AD 91 60                  		lda pspeed
082F5 99 04 64                  		sta VRAM_Buffer1+3,y
082F8 A9 00                     		lda #$00
082FA 99 05 64                  		sta VRAM_Buffer1+4,y
082FD 98                        		tya
082FE                           		add #$04
082FE 18                        	clc
082FF 69 04                     	adc #$04 ;apparently this sometimes refuses to work correctly lmao
08301 8D 00 64                  		sta VRAM_Buffer1_Offset
08304 4C B3 88                  +:      jmp IncModeTask_B        ;jump to set next major task in victory mode
08307                           DisplayCredits:
08307 A9 00                     	  lda #$00
08309 8D 74 07                  	  sta DisableScreenFlag
0830C 8D 85 60                  	  sta CurrentText
0830F 8D 86 60                  	  sta OldWriting
08312 8D 7B 07                  	  sta NameTableSelect
08315 EE 72 07                  	  inc OperMode_Task
08318 60                        	  rts
08319                           WriteCredits:
08319 A9 01                     	  lda #$01
0831B 8D 84 60                  	  sta ContinueWriting
0831E A9 00                     	  lda #$00
08320 8D 86 60                  	  sta OldWriting
08323 EE 72 07                  	  inc OperMode_Task
08326 EE 88 60                  	  inc dontchecklag
08329 60                        	  rts
0832A                           Nothing: 
0832A EE 72 07                  		inc OperMode_Task
0832D 60                        -:		rts
0832E                           FinalText = $07
0832E                           AnteFinalText = FinalText - $01
0832E                           CheckForThing:
0832E AD 85 60                  		lda CurrentText
08331 C9 07                     		cmp #FinalText
08333 F0 2F                     		beq ++
08335 AD 84 60                  		lda ContinueWriting
08338 D0 F3                     		bne -
0833A AD 85 60                  		lda CurrentText
0833D C9 06                     		cmp #AnteFinalText
0833F 90 0B                     		bcc +
08341 EE 87 60                  		inc test
08344 AD 87 60                  		lda test
08347 D0 1B                     		bne ++
08349 4C 5B 83                  		jmp +e
0834C EE 87 60                  +:		inc test
0834F AD 87 60                  		lda test
08352 C9 30                     		cmp #$30
08354 D0 0E                     		bne ++
08356 A9 00                     		lda #$00
08358 8D 87 60                  		sta test
0835B EE 85 60                  +e:		inc CurrentText
0835E A9 01                     		lda #$01
08360 8D 84 60                  		sta ContinueWriting
08363 60                        +:		rts ;exit, write routine is in another part and bank
08364                           
08364 AD 84 60                  ++:		lda ContinueWriting
08367 0D 87 60                  		ora test
0836A D0 03                     		bne +
0836C 4C 89 84                  		jmp PressButtonB
0836F 60                        +:		rts
08370                           ;-------------------------------------------------------------------------------------
08370                           
08370                           PlayerVictoryWalk:
08370 A0 01                                  ldy #$01                ;set value here to not walk player by default
08372 8C 99 60                  			 sty olddirscroll
08375 8C A2 60                  			 sty scrolldir
08378 88                        			 dey
08379 84 38                                  sty VictoryWalkControl
0837B A5 5F                                  lda Player_PageLoc      ;get player's page location
0837D C5 37                                  cmp DestinationPageLoc  ;compare with destination page location
0837F D0 06                                  bne PerformWalk         ;if page locations don't match, branch
08381 A5 78                                  lda Player_X_Position   ;otherwise get player's horizontal position
08383 C9 60                                  cmp #$60                ;compare with preset horizontal position
08385 B0 03                                  bcs DontWalk            ;if still on other page, branch ahead
08387 E6 38                     PerformWalk: inc VictoryWalkControl  ;otherwise increment value and Y
08389 C8                                     iny                     ;note Y will be used to walk the player
0838A 98                        DontWalk:    tya                     ;put contents of Y in A and
0838B 20 39 96                               jsr AutoControlPlayer   ;use A to move player to the right or not
0838E AD 1A 07                               lda ScreenLeft_PageLoc  ;check page location of left side of screen
08391 C5 37                                  cmp DestinationPageLoc  ;against set value here
08393 F0 16                                  beq ExitVWalk           ;branch if equal to change modes if necessary
08395 AD 68 07                               lda ScrollFractional
08398 18                                     clc                     ;do fixed point math on fractional part of scroll
08399 69 80                                  adc #$80        
0839B 8D 68 07                               sta ScrollFractional    ;save fractional movement amount
0839E A9 01                                  lda #$01                ;set 1 pixel per frame
083A0 69 00                                  adc #$00                ;add carry from previous addition
083A2 A8                                     tay                     ;use as scroll amount
083A3 20 6F 94                               jsr ScrollScreen        ;do sub to scroll the screen
083A6 20 11 93                               jsr UpdScrollVar        ;do another sub to update screen and scroll variables
083A9 E6 38                                  inc VictoryWalkControl  ;increment value to stay in this routine
083AB A5 38                     ExitVWalk:   lda VictoryWalkControl  ;load value set here
083AD F0 01                                  beq IncModeTask_A1       ;if zero, branch to change modes
083AF 60                                     rts                     ;otherwise leave
083B0                           IncModeTask_A1:
083B0 EE 72 07                  		 	inc OperMode_Task
083B3 60                        			rts
083B4                           ;-------------------------------------------------------------------------------------
083B4                           
083B4                           PrintVictoryMessages:
083B4 AD 49 07                                 lda SecondaryMsgCounter   ;load secondary message counter
083B7 D0 64                                    bne IncMsgCounter         ;if set, branch to increment message counters
083B9 AD 19 07                                 lda PrimaryMsgCounter     ;otherwise load primary message counter
083BC F0 25                                    beq ThankPlayer           ;if set to zero, branch to print first message
083BE AC 03 60                  			   ldy UnlockWorld9
083C1 C0 01                     			   cpy #Unlock9Steps
083C3 B0 0A                     			   bcs +
083C5 AC 5F 07                                 ldy WorldNumber           ;check world number
083C8 C0 07                                    cpy #FinalWorld
083CA D0 13                                    bne MRetainerMsg          ;if not at world 8, skip to next part
083CC 4C D6 83                  			   jmp ++
083CF AC 5F 07                  +:			   ldy WorldNumber
083D2 C0 08                     			   cpy #World9
083D4 D0 09                     			   bne MRetainerMsg
083D6 C9 03                     ++:            cmp #$03                  ;check primary message counter again
083D8 90 43                                    bcc IncMsgCounter         ;if not at 3 yet (world 8 only), branch to increment
083DA E9 01                                    sbc #$01                  ;otherwise subtract one
083DC 4C E3 83                                 jmp ThankPlayer           ;and skip to next part
083DF C9 02                     MRetainerMsg:  cmp #$02                  ;check primary message counter
083E1 90 3A                                    bcc IncMsgCounter         ;if not at 2 yet (world 1-7 only), branch
083E3 A8                        ThankPlayer:   tay                       ;put primary message counter into Y
083E4 D0 06                                    bne SecondPartMsg         ;if counter nonzero, skip this part, do not print first message
083E6 AC 53 07                                 ldy CurrentPlayer         ;otherwise get player currently on the screen
083E9 4C 0E 84                  			   jmp EvalForMusic
083EC C8                        SecondPartMsg: iny                       ;increment Y to do world 8's message
083ED AD 03 60                                 lda UnlockWorld9
083F0 C9 01                     			   cmp #Unlock9Steps
083F2 B0 0A                     			   bcs +++
083F4 AD 5F 07                  			   lda WorldNumber
083F7 C9 07                                    cmp #FinalWorld           ;check world number
083F9 F0 13                                    beq EvalForMusic          ;if at world 8, branch to next part
083FB 4C 05 84                  			   jmp ++++
083FE AD 5F 07                  +++:		   lda WorldNumber
08401 C9 08                     			   cmp #World9
08403 F0 09                     			   beq EvalForMusic
08405 88                        ++++:          dey                       ;otherwise decrement Y for world 1-7's message
08406 C0 04                                    cpy #$04                  ;if counter at 4 (world 1-7 only)
08408 B0 26                                    bcs SetEndTimer           ;branch to set victory end timer
0840A C0 03                                    cpy #$03                  ;if counter at 3 (world 1-7 only)
0840C B0 0F                                    bcs IncMsgCounter         ;branch to keep counting
0840E C0 03                     EvalForMusic:  cpy #$03                  ;if counter not yet at 3 (world 8 only), branch
08410 D0 04                                    bne PrintMsg              ;to print message only (note world 1-7 will only
08412 A9 04                                    lda #VictoryMusic         ;reach this code if counter = 0, and will always branch)
08414 85 ED                                    sta EventMusicQueue       ;otherwise load victory music first (world 8 only)
08416 98                        PrintMsg:      tya                       ;put primary message counter in A
08417 18                                       clc                       ;add $0c or 12 to counter thus giving an appropriate value,
08418 69 0C                                    adc #$0c                  ;($0c-$0d = first), ($0e = world 1-7's), ($0f-$12 = world 8's)
0841A 8D 73 07                                 sta VRAM_Buffer_AddrCtrl  ;write message counter to vram address controller
0841D AD 49 07                  IncMsgCounter: lda SecondaryMsgCounter
08420 18                                       clc
08421 69 04                                    adc #$04                      ;add four to secondary message counter
08423 8D 49 07                                 sta SecondaryMsgCounter
08426 AD 19 07                                 lda PrimaryMsgCounter
08429 69 00                                    adc #$00                      ;add carry to primary message counter
0842B 8D 19 07                                 sta PrimaryMsgCounter
0842E C9 07                                    cmp #$07                      ;check primary counter one more time
08430 90 19                     SetEndTimer:   bcc ExitMsgs                  ;if not reached value yet, branch to leave
08432 AD 03 60                  			   lda UnlockWorld9
08435 C9 01                     			   cmp #Unlock9Steps
08437 B0 03                     			   bcs +
08439 4C 43 84                  			   jmp ++
0843C AC 5F 07                  +:			   ldy WorldNumber
0843F C0 08                     			   cpy #World9
08441 F0 00                     			   beq Salir
08443                           			   ;lda WorldEndTimer
08443                           			   ;cmp #$06
08443                           			   ;bcs ExitMsgs
08443                           			   ;ldy WorldNumber
08443                           			   ;cpy #FinalWorld
08443                           			   ;beq Salir
08443                           ++:			   ;jsr AwardGameTimerPoints
08443                           			   ;beq ExitMsgs
08443 A9 06                     Salir:		   lda #$06
08445 8D A1 07                                 sta WorldEndTimer             ;otherwise set world end timer
08448 EE 72 07                  IncModeTask_A: inc OperMode_Task             ;move onto next task in mode
0844B 60                        ExitMsgs:      rts                           ;leave
0844C                           ;-------------------------------------------------------------------------------------
0844C                           EndCastleAward:
0844C AD A1 07                     lda WorldEndTimer      ;if world end timer has not yet reached a certain point
0844F C9 06                        cmp #$06               ;then go ahead and skip all of this
08451 B0 03                        bcs ExEWA
08453 4C AB CF                     jmp AwardGameTimerPoints2
08456                           ExEWA:
08456 60                           rts
08457                           PlayerEndWorld:                           ;branch to leave if not
08457 AD A1 07                  			   lda WorldEndTimer          ;check to see if world end timer expired
0845A D0 23                                    bne EndExitOne
0845C AC 5F 07                                 ldy WorldNumber            ;check world number
0845F C0 07                                    cpy #FinalWorld            ;if on world 8, player is done with game, 
08461 F0 1D                                    beq EndChkBButton          ;thus branch to read controller
08463                           Tumama:
08463 A9 00                     			   lda #$00
08465 8D 60 07                                 sta AreaNumber             ;otherwise initialize area number used as offset
08468 8D 5C 07                                 sta LevelNumber            ;and level number control to start at area 1
0846B 8D 72 07                                 sta OperMode_Task          ;initialize secondary mode of operation
0846E EE 5F 07                                 inc WorldNumber            ;increment world number to move onto the next world
08471 20 F1 F7                                 jsr LoadAreaPointer        ;get area address offset for the next area
08474 EE 57 07                                 inc FetchNewGameTimerFlag  ;set flag to load game timer from header
08477 EE 74 07                  			   inc DisableScreenFlag
0847A A9 01                                    lda #GameModeValue
0847C 8D 70 07                                 sta OperMode               ;set mode of operation to game mode
0847F 60                        EndExitOne:    rts                        ;and leave
08480 A9 01                     EndChkBButton: lda #$01
08482 8D 74 07                  			   sta DisableScreenFlag
08485 EE 72 07                  			   inc OperMode_Task
08488 60                        			   rts
08489                           PressButtonB:
08489 AD FC 06                  			   lda SavedJoypad1Bits
0848C 0D FD 06                                 ora SavedJoypad2Bits       ;check to see if B button was pressed on
0848F 29 40                                    and #B_Button              ;either controller
08491 F0 13                                    beq EndExitTwo             ;branch to leave if not
08493 8D 0A 7F                                 sta WorldSelectEnableFlag
08496 A9 FF                                    lda #$ff                   ;remove onscreen player's lives
08498 8D 5A 07                                 sta NumberofLives
0849B A9 00                     			   lda #$00
0849D 8D 30 60                  			   sta OldStatus
084A0 EE 74 07                  			   inc DisableScreenFlag
084A3 4C B3 91                                 jmp TerminateGame          ;do sub to continue other player or end game
084A6 60                        EndExitTwo:    rts                        ;leave
084A7                           
084A7                           ;-------------------------------------------------------------------------------------
084A7                           
084A7                           ;data is used as tiles for numbers
084A7                           ;that appear when you defeat enemies
084A7                           FloateyNumTileData:
084A7 FF FF                           .db $ff, $ff ;dummy
084A9 F6 FB                           .db $f6, $fb ; "100"
084AB F7 FB                           .db $f7, $fb ; "200"
084AD F8 FB                           .db $f8, $fb ; "400"
084AF                                 ;.db $f9, $fb ; "500"
084AF FA FB                           .db $fa, $fb ; "800"
084B1 F6 50                           .db $f6, $50 ; "1000"
084B3 F7 50                           .db $f7, $50 ; "2000"
084B5 F8 50                           .db $f8, $50 ; "4000"
084B7                                 ;.db $f9, $50 ; "5000"
084B7 FA 50                           .db $fa, $50 ; "8000"
084B9 FD FE                           .db $fd, $fe ; "1-UP"
084BB                           
084BB                           ;high nybble is digit number, low nybble is number to
084BB                           ;add to the digit of the player's score
084BB                           ScoreUpdateData:
084BB FF                              .db $ff ;dummy
084BC 41 42 44 48                     .db $41, $42, $44, $48
084C0 31 32 34 38 00                  .db $31, $32, $34, $38, $00
084C5                           
084C5                           FloateyNumbersRoutine:
084C5 C9 09                     			  cmp #$09                     ;if less than $0b, branch
084C7 90 05                                   bcc ChkNumTimer
084C9 A9 09                                   lda #$09                     ;otherwise set to $0b, thus keeping
084CB 9D 10 01                                sta FloateyNum_Control,x     ;it in range
084CE A8                        ChkNumTimer:  tay                          ;use as Y
084CF BD 2C 01                                lda FloateyNum_Timer,x       ;check value here
084D2 D0 07                                   bne DecNumTimer              ;if nonzero, branch ahead
084D4 9D ED 63                  			  sta FloateyNum_PageLoc,x
084D7 9D 10 01                                sta FloateyNum_Control,x     ;initialize floatey number control and leave
084DA 60                                      rts
084DB DE 2C 01                  DecNumTimer:  dec FloateyNum_Timer,x       ;decrement value here
084DE C9 2F                                   cmp #$2f                     ;if not reached a certain point, branch  
084E0 D0 6A                                   bne ChkTallEnemy
084E2 BD 10 01                  			  lda FloateyNum_Control,x
084E5 A8                        			  tay
084E6 C0 09                                   cpy #$09                     ;check offset for $0b
084E8 D0 4F                                   bne LoadNumTiles             ;branch ahead if not founs
084EA A9 40                     			  lda #Sfx_ExtraLife
084EC 85 EF                                   sta Square2SoundQueue        ;and play the 1-up sound
084EE AD 5A 07                  			  lda NumberofLives
084F1 C9 63                     			  cmp #$63
084F3 F0 44                     			  beq LoadNumTiles
084F5 AD 23 60                  			  lda dontinc
084F8 F0 08                     			  beq ++
084FA A9 00                     			  lda #$00
084FC 8D 23 60                  			  sta dontinc
084FF 4C 39 85                  			  jmp LoadNumTiles
08502 98                        ++:			  tya
08503 48                        			  pha
08504 EE 5A 07                                inc NumberofLives            ;give player one extra life (1-up)
08507 A0 00                     			  ldy #$00
08509 8C FB 07                  			  sty $07fb
0850C AD 5A 07                  			  lda NumberofLives            ;otherwise, check number of lives
0850F                           			  ;clc                          ;and increment by one for display   //uncommented as having 00 lifes is like having 1
0850F                           			  ;adc #$01
0850F                           +:
0850F C9 0A                     		  	  cmp #10                      ;more than 9 lives?
08511 90 16                     			  bcc PutLives3
08513 E9 0A                     			  sbc #10                      ;if so, subtract 10 and add one to the 10s digit
08515 A0 01                     			  ldy #$01                     ;instead of showing 100 lives, A0 will show, etc.
08517 8C FB 07                  			  sty $07fb
0851A                           -:
0851A C9 0A                     			  cmp #10
0851C 90 0B                     			  bcc PutLives3
0851E E9 0A                     			  sbc #10                      ;if so, subtract 10 and add to the digit
08520 EE FB 07                  			  inc $07fb                    ;next to the difference
08523 4C 1A 85                  			  jmp -
08526 8C FC 07                  			  sty $07fc
08529 8D FC 07                  PutLives3:    sta $07fc
0852C A9 A5                     			  lda #$a5
0852E 20 3A 8D                  			  jsr PrintStatusBarNumbers
08531 AC 00 64                  			  ldy VRAM_Buffer1_Offset   
08534 B9 FB 63                  			  lda VRAM_Buffer1-6,y      ;check highest digit of score
08537                           			  ;bne +	                    ;if zero, overwrite with space tile for zero suppression
08537                           			  ;lda #$24
08537                           			  ;sta VRAM_Buffer1-6,y
08537 A8                        +:			  tay
08538 68                        			  pla
08539 B9 BB 84                  LoadNumTiles: lda ScoreUpdateData,y        ;load point value here
0853C 4A                                      lsr                          ;move high nybble to low
0853D 4A                                      lsr
0853E 4A                                      lsr
0853F 4A                                      lsr
08540 AA                                      tax                          ;use as X offset, essentially the digit
08541 B9 BB 84                                lda ScoreUpdateData,y        ;load again and this time
08544 29 0F                                   and #%00001111               ;mask out the high nybble
08546 9D 34 01                                sta DigitModifier,x          ;store as amount to add to the digit
08549 20 69 A6                  			  jsr AddToScore
0854C BC E5 06                  ChkTallEnemy: ldy Enemy_SprDataOffset,x    ;get OAM data offset for enemy object
0854F BD 1A 7E                                lda FloateyShit,x
08552 F0 06                     			  beq +
08554 DE 1A 7E                  			  dec FloateyShit,x
08557 4C 86 85                  			  jmp GetAltOffset
0855A                           +:			  
0855A B5 15                     			  lda Enemy_ID,x               ;get enemy object identifier
0855C C9 12                                   cmp #Spiny
0855E F0 2E                                   beq FloateyPart              ;branch if spiny
08560 C9 0D                                   cmp #PiranhaPlant
08562 F0 2A                                   beq FloateyPart              ;branch if piranha plant
08564 C9 05                                   cmp #HammerBro
08566 F0 1E                                   beq GetAltOffset             ;branch elsewhere if hammer bro
08568 C9 0A                                   cmp #GreyCheepCheep
0856A F0 22                                   beq FloateyPart              ;branch if cheep-cheep of either color
0856C C9 19                     			  cmp #RedKoopaShell
0856E F0 1E                     			  beq FloateyPart
08570 C9 21                     			  cmp #UDPiranhaPlant
08572 F0 1A                     			  beq FloateyPart
08574 C9 22                     			  cmp #RUDPiranhaPlant
08576 F0 16                     			  beq FloateyPart
08578 C9 20                     			  cmp #RedPiranhaPlant
0857A F0 12                     			  beq FloateyPart
0857C C9 0B                                   cmp #RedCheepCheep
0857E B0 06                                   bcs GetAltOffset             ;branch elsewhere if enemy object => $09
08580 B5 1C                                   lda Enemy_State,x
08582 C9 02                                   cmp #$02                     ;if enemy state defeated or otherwise
08584 B0 08                                   bcs FloateyPart              ;$02 or greater, branch beyond this part
08586 AE EE 03                  GetAltOffset: ldx SprDataOffset_Ctrl       ;load some kind of control bit
08589 BC EC 06                                ldy Alt_SprDataOffset,x      ;get alternate OAM data offset
0858C A6 08                                   ldx ObjectOffset             ;get enemy object offset again
0858E BD 1E 01                  FloateyPart:  lda FloateyNum_Y_Pos,x       ;get vertical coordinate for
08591 C9 18                                   cmp #$18                     ;floatey number, if coordinate in the
08593 90 05                                   bcc SetupNumSpr              ;status bar, branch
08595 E9 01                                   sbc #$01
08597 9D 1E 01                                sta FloateyNum_Y_Pos,x       ;otherwise subtract one and store as new
0859A BD 1E 01                  SetupNumSpr:  lda FloateyNum_Y_Pos,x       ;get vertical coordinate
0859D E9 08                                   sbc #$08                     ;subtract eight and dump into the
0859F 99 04 02                                sta Sprite_Data+4,y          ;and into first row sprites
085A2 99 00 02                  	          sta Sprite_Data,y            ;and do sub to dump into first and second sprites
085A5 AD A2 60                  			  lda scrolldir
085A8 F0 21                     			  beq ++
085AA BD 17 01                                lda FloateyNum_X_Pos,x       ;get horizontal coordinate
085AD 38                        			  sec
085AE ED 75 07                  			  sbc ScrollAmount
085B1 9D 17 01                  			  sta FloateyNum_X_Pos,x
085B4 99 03 02                  			  sta Sprite_X_Position,y      ;store into X coordinate of left sprite
085B7 BD ED 63                  			  lda FloateyNum_PageLoc,x
085BA E9 00                     			  sbc #$00
085BC 9D ED 63                  			  sta FloateyNum_PageLoc,x
085BF F0 42                     			  beq +
085C1 A9 FD                     			  lda #$fd
085C3 99 00 02                  			  sta Sprite_Y_Position,y
085C6 99 04 02                  			  sta Sprite_Y_Position+4,y
085C9 D0 38                     			  bne +
085CB AD 75 07                  ++:			  lda ScrollAmount
085CE 49 FF                     		      eor #$ff
085D0 18                        			  clc
085D1 69 01                     			  adc #$01
085D3 8D 56 60                  			  sta tempB
085D6 BD 17 01                  			  lda FloateyNum_X_Pos,x       ;get horizontal coordinate
085D9 18                        			  clc
085DA 6D 56 60                  			  adc tempB
085DD 9D 17 01                  			  sta FloateyNum_X_Pos,x
085E0 99 03 02                  			  sta Sprite_X_Position,y      ;store into X coordinate of left sprite
085E3 BD ED 63                  			  lda FloateyNum_PageLoc,x
085E6 69 00                     			  adc #$00
085E8 9D ED 63                  			  sta FloateyNum_PageLoc,x
085EB D0 0E                     			  bne ++
085ED BD 17 01                  			  lda FloateyNum_X_Pos,x
085F0 C9 F8                     			  cmp #$f8
085F2 90 0F                     			  bcc +
085F4 A9 FD                     			  lda #$fd
085F6 99 04 02                  			  sta Sprite_Y_Position+4,y
085F9 D0 08                     			  bne +
085FB                           			  
085FB A9 FD                     ++:			  lda #$fd
085FD 99 00 02                  			  sta Sprite_Y_Position,y
08600 99 04 02                  			  sta Sprite_Y_Position+4,y
08603                           
08603 B9 03 02                  +:			  lda Sprite_X_Position,y      ;load X coordinate of left sprite
08606 18                                      clc
08607 69 08                                   adc #$08                     ;add eight pixels and store into X
08609 99 07 02                                sta Sprite_X_Position+4,y    ;coordinate of right sprite
0860C A9 02                                   lda #$02
0860E 99 02 02                                sta Sprite_Attributes,y      ;set palette control in attribute bytes
08611 99 06 02                                sta Sprite_Attributes+4,y    ;of left and right sprites
08614 BD 10 01                                lda FloateyNum_Control,x
08617 0A                                      asl                          ;multiply our floatey number control by 2
08618 AA                                      tax                          ;and use as offset for look-up table
08619 BD A7 84                                lda FloateyNumTileData,x
0861C 99 01 02                                sta Sprite_Tilenumber,y      ;display first half of number of points
0861F BD A8 84                                lda FloateyNumTileData+1,x
08622 99 05 02                                sta Sprite_Tilenumber+4,y    ;display the second half
08625 A6 08                                   ldx ObjectOffset             ;get enemy object offset and leave
08627 60                                      rts
08628                           
08628                           ;-------------------------------------------------------------------------------------
08628                           
08628                           ScreenRoutines:
08628 AD 3C 07                        lda ScreenRoutineTask        ;run one of the following subroutines
0862B 20 A0 F7                        jsr JumpEngine
0862E                               
0862E 55 86                           .dw InitScreen
08630 65 86                           .dw SetupIntermediate
08632 4C 87                           .dw WriteTopStatusLine
08634 54 87                           .dw WriteBottomStatusLine
08636 EB 87                           .dw DisplayTimeUp
08638 3A 8A                           .dw ResetSpritesAndScreenTimer
0863A 00 88                           .dw DisplayIntermediate
0863C 3A 88                     	  .dw AreaParserTaskControl
0863E 3A 8A                           .dw ResetSpritesAndScreenTimer
08640 89 86                           .dw GetAreaPalette
08642 4C 86                           .dw GetBackgroundColor1
08644 28 87                           .dw GetAlternatePalette1
08646 B1 B0                           .dw DrawTitleScreen
08648 6C 88                           .dw ClearBuffersDrawIcon
0864A 83 88                           .dw WriteTopScore
0864C                           
0864C                           ;-------------------------------------------------------------------------------------
0864C                           GetBackgroundColor1:
0864C AD 44 07                  	  lda BackgroundColorCtrl
0864F 8D BC 63                  	  sta BackgroundColorCtrlFP
08652 4C BF 86                  	  jmp GetBackgroundColor
08655                           InitScreen:
08655 20 DB F7                        jsr MoveSpritesOffscreen ;initialize all sprites including sprite #0
08658 20 B8 F8                        jsr InitializeNameTables    ;and erase both name and attribute tables
0865B AD 70 07                        lda OperMode
0865E F0 32                           beq NextSubtask             ;if mode still 0, do not load
08660 A2 03                           ldx #$03                    ;into buffer pointer
08662 4C 8F 86                        jmp SetVRAMAddr_A
08665                           
08665                           ;-------------------------------------------------------------------------------------
08665                           
08665                           SetupIntermediate:
08665 AD 44 07                        lda BackgroundColorCtrl  ;save current background color control
08668 48                              pha                      ;and player status to stack
08669 AD 56 07                        lda PlayerStatus
0866C 48                              pha
0866D A9 00                           lda #$00                 ;set background color to black
0866F 8D 56 07                        sta PlayerStatus         ;and player status to not fiery
08672 A9 02                           lda #$02                 ;this is the ONLY time background color control
08674 8D 44 07                        sta BackgroundColorCtrl  ;is set to less than 4
08677 20 CD 86                        jsr GetPlayerColors
0867A 68                              pla                      ;we only execute this routine for
0867B 8D 56 07                        sta PlayerStatus         ;the intermediate lives display
0867E 68                              pla                      ;and once we're done, we return bg
0867F 8D 44 07                        sta BackgroundColorCtrl  ;color ctrl and player status from stack
08682 4C 7F 88                        jmp IncSubtask           ;then move onto the next task
08685                           
08685                           ;-------------------------------------------------------------------------------------
08685                           
08685                           AreaPalette:
08685 01 02 03 04                     .db $01, $02, $03, $04
08689                           
08689                           GetAreaPalette:
08689 AC 4E 07                                 ldy AreaType             ;select appropriate palette to load
0868C BE 85 86                                 ldx AreaPalette,y        ;based on area type
0868F 8E 73 07                  SetVRAMAddr_A: stx VRAM_Buffer_AddrCtrl ;store offset into buffer control
08692 4C 7F 88                  NextSubtask:   jmp IncSubtask           ;move onto next task
08695                           
08695                           ;-------------------------------------------------------------------------------------
08695                           ;$00 - used as temp counter in GetPlayerColors
08695                           
08695                           BGColorCtrl_Addr:
08695 00 09 0A 04                     .db $00, $09, $0a, $04
08699                           
08699                           BackgroundColors:
08699 22 22 0F 0F                     .db $22, $22, $0f, $0f ;used by area type if bg color ctrl not set
0869D 0F 22 0F 0F                     .db $0f, $22, $0f, $0f ;used by background color control if set
086A1 12 12 0F 0F               	  .db $12, $12, $0f, $0f
086A5                           
086A5                           ;PlayerColors:
086A5                           ;      .db $22, $16, $27, $18 ;Mario's colors
086A5                           ;      .db $22, $30, $27, $19 ;Luigi's colors
086A5                           ;      .db $22, $37, $27, $16 ;Fiery (used by both)
086A5                                 
086A5                           PlayerColorsOffset:
086A5 00 0C                           .db MarioColors-PlayerColors, LuigiColors-PlayerColors
086A7                                 
086A7                           PlayerColors:
086A7                           MarioColors:
086A7 22 16 27 18                     .db $22, $16, $27, $18 ;Small
086AB 22 16 27 18                     .db $22, $16, $27, $18 ;Big
086AF 22 37 27 16                     .db $22, $37, $27, $16 ;Fiery
086B3                           LuigiColors:
086B3 22 30 27 19               	  .db $22, $30, $27, $19 ;Small
086B7 22 30 27 19               	  .db $22, $30, $27, $19 ;Big
086BB 22 30 27 16               	  .db $22, $30, $27, $16 ;Fiery
086BF                                 
086BF                           GetBackgroundColor:
086BF AC 44 07                  		   ldy BackgroundColorCtrl   ;check background color control
086C2 F0 06                                beq NoBGColor             ;if not set, increment task and fetch palette
086C4 B9 91 86                             lda BGColorCtrl_Addr-4,y  ;put appropriate palette into vram
086C7 8D 73 07                             sta VRAM_Buffer_AddrCtrl  ;note that if set to 5-7, $0301 will not be read
086CA EE 3C 07                  NoBGColor: inc ScreenRoutineTask     ;increment to next subtask and plod on through
086CD                                 
086CD                           GetPlayerColors:
086CD AE 00 64                                 ldx VRAM_Buffer1_Offset  ;get current buffer offset
086D0 AD 56 07                                 lda PlayerStatus
086D3 0A                                       asl
086D4 0A                                       asl
086D5 85 00                                    sta $00
086D7 AC 53 07                                 ldy CurrentPlayer
086DA B9 A5 86                                 lda PlayerColorsOffset,y
086DD 18                                       clc
086DE 65 00                                    adc $00
086E0 A8                                       tay
086E1 A9 03                     StartClrGet:   lda #$03                 ;do four colors
086E3 85 00                                    sta $00
086E5 B9 A7 86                  ClrGetLoop:    lda PlayerColors,y       ;fetch player colors and store them
086E8 9D 04 64                                 sta VRAM_Buffer1+3,x     ;in the buffer
086EB C8                                       iny
086EC E8                                       inx
086ED C6 00                                    dec $00
086EF 10 F4                                    bpl ClrGetLoop
086F1 AE 00 64                                 ldx VRAM_Buffer1_Offset  ;load original offset from before
086F4 AC 44 07                  			   ldy BackgroundColorCtrl  ;if this value is four or greater, it will be set
086F7 D0 0D                                    bne SetBGColor           ;therefore use it as offset to background color
086F9 AC 4E 07                  			   ldy AreaType
086FC D0 05                     			   bne +
086FE A0 08                     			   ldy #$08
08700 4C 06 87                  			   jmp SetBGColor
08703                           +:             
08703 AC 4E 07                                 ldy AreaType             ;otherwise use area type bits from area offset as offset
08706 B9 99 86                  SetBGColor:    lda BackgroundColors,y   ;to background color instead
08709 9D 04 64                                 sta VRAM_Buffer1+3,x
0870C A9 3F                                    lda #$3f                 ;set for sprite palette address
0870E 9D 01 64                                 sta VRAM_Buffer1,x       ;save to buffer
08711 A9 10                                    lda #$10
08713 9D 02 64                                 sta VRAM_Buffer1+1,x
08716 A9 04                                    lda #$04                 ;write length byte to buffer
08718 9D 03 64                                 sta VRAM_Buffer1+2,x
0871B A9 00                                    lda #$00                 ;now the null terminator
0871D 9D 08 64                                 sta VRAM_Buffer1+7,x
08720 8A                                       txa                      ;move the buffer pointer ahead 7 bytes
08721 18                                       clc                      ;in case we want to write anything else later
08722 69 07                                    adc #$07
08724 8D 00 64                  SetVRAMOffset: sta VRAM_Buffer1_Offset  ;store as new vram buffer offset
08727 60                                       rts
08728                           
08728                           ;-------------------------------------------------------------------------------------
08728                           
08728                           GetAlternatePalette1:
08728                                          
08728 AD 4E 07                  			   lda AreaType
0872B C9 01                     			   cmp #$01
0872D D0 09                     			   bne +
0872F AC 5F 07                  			   ldy WorldNumber          ;otherwise check world number
08732 B9 FF F6                  			   lda WorldPaletteLUT,y
08735 8D 13 7E                  		       sta WorldPalette
08738 A9 00                     +:			   lda #$00
0873A 8D 14 7E                  			   sta TheresPal3
0873D AD 33 07                  			   lda AreaStyle            ;check for mushroom level style
08740 C9 01                                    cmp #$01
08742 D0 05                                    bne NoAltPal
08744 A9 0B                                    lda #$0b                 ;if found, load appropriate palette
08746 8D 73 07                  SetVRAMAddr_B: sta VRAM_Buffer_AddrCtrl
08749 4C 7F 88                  NoAltPal:      jmp IncSubtask           ;now onto the next task
0874C                           
0874C                           ;-------------------------------------------------------------------------------------
0874C                           
0874C                           WriteTopStatusLine:
0874C A9 00                           lda #$00          		;select main status barrel
0874E 20 5D 89                  	  jsr WriteGameText 		;output it
08751 4C 7F 88                  	  jmp IncSubtask    		;onto the next task
08754                           
08754                           ;-------------------------------------------------------------------------------------
08754                           
08754                           WriteBottomStatusLine:
08754 AD 70 07                        lda OperMode
08757 F0 07                     	  beq +
08759 C9 03                     	  cmp #GameOverModeValue
0875B F0 03                     	  beq +
0875D 20 18 AD                  	  jsr UpdateLives
08760                           +	  
08760 AD 70 07                  	  lda OperMode
08763 C9 00                     	  cmp #TitleScreenModeValue
08765 D0 16                     	  bne +
08767 A0 06                     		  ldy #$06
08769 B9 13 7F                  	-:	  lda ContinueScore,y
0876C 99 DD 07                  		  sta PlayerScoreDisplay,y
0876F 88                        		  dey
08770 10 F7                     		  bpl -
08772                           		 
08772 A0 03                     		  ldy #$03
08774 B9 1A 7F                  	-:	  lda ContinueCoins,y
08777 99 EB 07                  		  sta PlayerCoinDisplay,y
0877A 88                        		  dey
0877B 10 F7                     		  bpl -
0877D                           +:
0877D 20 6E A6                  	  jsr WriteScoreAndCoinTally        ;write player's score and coin tally to screen
08780 20 12 91                        jsr putpspeeddisplay
08783 A9 02                     	  lda #$02
08785 20 76 A6                  	  jsr RealUpdateNumber
08788 AE 00 64                  	  ldx VRAM_Buffer1_Offset
0878B A9 20                           lda #$20                ;write address for world-area number on screen
0878D 9D 01 64                        sta VRAM_Buffer1,x
08790 A9 73                           lda #$73
08792 9D 02 64                        sta VRAM_Buffer1+1,x
08795 A9 04                           lda #$04                ;write length for it
08797 9D 03 64                        sta VRAM_Buffer1+2,x
0879A AD 0A 7F                  	  lda WorldSelectEnableFlag
0879D D0 0D                     	  bne +
0879F AD 70 07                  	  lda OperMode
087A2 C9 00                     	  cmp #TitleScreenModeValue
087A4 D0 06                     	  bne +
087A6 AC 11 7F                  			ldy ContinueWorld
087A9 C8                        			iny
087AA D0 04                     			bne ++
087AC AC 5F 07                  +:    ldy WorldNumber         ;first the world number
087AF C8                              iny
087B0 98                        ++:   tya
087B1 9D 04 64                        sta VRAM_Buffer1+3,x
087B4 A9 28                           lda #$28                ;next the dash
087B6 9D 05 64                        sta VRAM_Buffer1+4,x
087B9 AD 0A 7F                  	  lda WorldSelectEnableFlag
087BC D0 0D                     	  bne +
087BE AD 70 07                        lda OperMode
087C1 C9 00                     	  cmp #TitleScreenModeValue
087C3 D0 06                     	  bne +
087C5 AC 12 7F                  			ldy ContinueLevel
087C8 C8                        			iny
087C9 D0 04                     			bne ++
087CB AC 5C 07                  +:    ldy LevelNumber         ;next the level number
087CE C8                              iny                     ;increment for proper number display
087CF 98                        ++    tya
087D0 9D 06 64                        sta VRAM_Buffer1+5,x    
087D3 AC 52 60                  	  ldy HardModeFlag
087D6 B9 D8 89                  	  lda HardModeDisplay,y
087D9 9D 07 64                  	  sta VRAM_Buffer1+6,x
087DC A9 00                           lda #$00                ;put null terminator on
087DE 9D 08 64                        sta VRAM_Buffer1+7,x
087E1 8A                              txa                     ;move the buffer offset up by 6 bytes
087E2 18                              clc
087E3 69 07                           adc #$07
087E5 8D 00 64                        sta VRAM_Buffer1_Offset
087E8 4C 7F 88                        jmp IncSubtask
087EB                           
087EB                           ;-------------------------------------------------------------------------------------
087EB                           
087EB                           DisplayTimeUp:
087EB AD 59 07                            lda GameTimerExpiredFlag  ;if game timer not expired, increment task
087EE F0 0A                               beq NoTimeUp              ;control 2 tasks forward, otherwise, stay here
087F0 A9 00                               lda #$00
087F2 8D 59 07                            sta GameTimerExpiredFlag  ;reset timer expiration flag
087F5 A9 02                               lda #$02                  ;output time-up screen to buffer
087F7 4C 18 88                            jmp OutputInter
087FA EE 3C 07                  NoTimeUp: inc ScreenRoutineTask     ;increment control task 2 tasks forward
087FD 4C 7F 88                            jmp IncSubtask
08800                           
08800                           ;-------------------------------------------------------------------------------------
08800                           
08800                           DisplayIntermediate:
08800 AD 70 07                                 lda OperMode                 ;check primary mode of operation
08803 F0 2F                                    beq NoInter                  ;if in title screen mode, skip this
08805 C9 03                                    cmp #GameOverModeValue       ;are we in game over mode?
08807 F0 1E                                    beq GameOverInter            ;if so, proceed to display game over screen
08809                                          if SKIP_INTERMEDIATE
08809                                               jmp NoInter
08809                                          endif
08809 AD 52 07                                 lda AltEntranceControl       ;otherwise check for mode of alternate entry
0880C D0 26                                    bne NoInter                  ;and branch if found
0880E AD 69 07                                 lda DisableIntermediate      ;if this flag is set, skip intermediate lives display
08811 D0 21                                    bne NoInter                  ;and jump to specific task, otherwise
08813 20 7E 8A                  PlayerInter:   jsr DrawPlayer_Intermediate  ;put player in appropriate place for
08816 A9 01                                    lda #$01                     ;lives display, then output lives display to buffer
08818 20 5D 89                  OutputInter:   jsr WriteGameText
0881B 20 42 8A                                 jsr ResetScreenTimer
0881E A9 00                                    lda #$00
08820 8D 74 07                                 sta DisableScreenFlag        ;reenable screen output
08823 8D 7B 07                  			   sta NameTableSelect
08826 60                                       rts
08827 A9 12                     GameOverInter: lda #$12                     ;set screen timer
08829 8D A0 07                                 sta ScreenTimer
0882C A9 03                                    lda #$03                     ;output game over screen to buffer
0882E 20 5D 89                                 jsr WriteGameText
08831 4C B3 88                                 jmp IncModeTask_B
08834 A9 07                     NoInter:       lda #$07                     ;set for specific task and leave
08836 8D 3C 07                                 sta ScreenRoutineTask
08839 60                        			   rts
0883A                           
0883A                           ;-------------------------------------------------------------------------------------
0883A                           
0883A                           AreaParserTaskControl:
0883A AD B6 63                  		   lda waitforit
0883D D0 06                     		   bne +
0883F EE B6 63                  		   inc waitforit
08842 20 12 F8                             jsr AreaParserTaskHandler1 ;render column set of current area
08845 AD A0 07                  +:		   lda ScreenTimer
08848 D0 1C                     		   bne OutputCol
0884A EE 74 07                  		   inc DisableScreenFlag
0884D 20 12 F8                  TaskLoop:  jsr AreaParserTaskHandler1 ;render column set of current area
08850 AD 1F 07                  		   lda AreaParserTaskNum     ;check number of tasks
08853 D0 F8                                bne TaskLoop              ;if tasks still not all done, do another one
08855 CE 1E 07                             dec ColumnSets            ;do we need to render more column sets?
08858 10 0C                                bpl OutputCol
0885A CE B6 63                  		   dec waitforit
0885D EE 3C 07                  		   inc ScreenRoutineTask     ;if not, move on to the next task
08860 EE 3C 07                             inc ScreenRoutineTask     ;if not, move on to the next task
08863 20 DB F7                  		   jsr MoveSpritesOffscreen
08866 A9 06                     OutputCol: lda #$06                  ;set vram buffer to output rendered column set
08868 8D 73 07                             sta VRAM_Buffer_AddrCtrl  ;on next NMI
0886B 60                                   rts
0886C                           
0886C                           ;-------------------------------------------------------------------------------------
0886C                           
0886C                           ClearBuffersDrawIcon:
0886C AD 70 07                               lda OperMode
0886F D0 42                                  bne IncModeTask_B          ;if not title screen mode, leave
08871 A2 00                                  ldx #$00                   ;otherwise, clear buffer space
08873 9D 00 64                  TScrClear:   sta VRAM_Buffer1-1,x
08876 9D 00 65                               sta VRAM_Buffer1-1+$100,x
08879 CA                                     dex
0887A D0 F7                                  bne TScrClear
0887C 20 67 82                               jsr DrawMushroomIcon       ;draw player select icon
0887F EE 3C 07                  IncSubtask:  inc ScreenRoutineTask      ;move onto next task
08882 60                                     rts
08883                           
08883                           ;-------------------------------------------------------------------------------------
08883                           
08883                           WriteTopScore:
08883                                          if BATTERY
08883 20 31 BA                                      jsr SaveBattery
08886                                          endif
08886 A9 FA                                    lda #$fa           ;run display routine to display top score on title
08888 20 76 A6                                 jsr RealUpdateNumber
0888B AD 10 7F                  			   lda TopMaxedOut
0888E F0 23                     			   beq IncModeTask_B
08890 AE 00 64                  			   ldx VRAM_Buffer1_Offset
08893 A9 22                     			   lda #$22
08895 9D 01 64                  			   sta VRAM_Buffer1,x
08898 A9 F6                     			   lda #$f6
0889A 9D 02 64                  			   sta VRAM_Buffer1+1,x
0889D A9 01                     			   lda #$01
0889F 9D 03 64                  			   sta VRAM_Buffer1+2,x
088A2 A9 09                     			   lda #$09
088A4 9D 04 64                  			   sta VRAM_Buffer1+3,x	  ;change the last 0 to a 9
088A7 A9 00                     			   lda #$00
088A9 9D 05 64                  			   sta VRAM_Buffer1+4,x
088AC 8A                        			   txa
088AD 18                        			   clc
088AE 69 04                     			   adc #$04
088B0 8D 00 64                  			   sta VRAM_Buffer1_Offset
088B3 EE 72 07                  IncModeTask_B: inc OperMode_Task  ;move onto next mode
088B6 60                                       rts
088B7                           
088B7                           ;-------------------------------------------------------------------------------------
088B7                           
088B7                           GameText:
088B7                           TopStatusBarLine:
088B7                             ;.db $20, $43, $05, $16, $0a, $1b, $12, $18 ; "MARIO"
088B7 20 43 0E 16 0A 1B 12 18..   .db $20, $43, $0e, "MARIO"-55, $24, $24, $24, $24, $24, $16, $29, $00, $04
088C8                           if CHEATS && CHEAT_REMOVE_TIMER
088C8                               .db $20, $52, $05, $20, $18, $1b, $15, $0d ; "WORLD"
088C8                             else
088C8 20 52 0B 20 18 1B 15 0D       .db $20, $52, $0b, $20, $18, $1b, $15, $0d ; "WORLD  TIME"
088D0 24 24 1D 12 16 0E             .db $24, $24, $1d, $12, $16, $0e
088D6                             endif
088D6 20 68 05 00 00 24 2E 29     .db $20, $68, $05, $00, $00, $24, $2e, $29 ; score trailing digit and coin display
088DE 23 C0 7F AA                 .db $23, $c0, $7f, $aa ; attribute table data, clears name table 0 to palette 2
088E2 23 C2 01 EA                 .db $23, $c2, $01, $ea ; attribute table data, used for coin icon in status bar
088E6 FF                          .db $ff ; end of data block
088E7                           
088E7                           WorldLivesDisplay:
088E7 21 CD 07 24 24              .db $21, $cd, $07, $24, $24 ; cross with spaces used on
088EC 29 24 24 24 24              .db $29, $24, $24, $24, $24 ; lives display
088F1 21 4B 0A 20 18              .db $21, $4b, $0a, $20, $18 ; "WORLD  - " used on lives display
088F6 1B 15 0D 24 24 28 24 24     .db $1b, $15, $0d, $24, $24, $28, $24, $24
088FE 22 0C 47 24                 .db $22, $0c, $47, $24 ; possibly used to clear time up
08902                             if LIVES_FIX !=1
08902                                   .db $23, $dc, $01, $ba ; attribute table data for crown if more than 9 lives
08902                             endif
08902 FF                          .db $ff
08903                           
08903                           TwoPlayerTimeUp:
08903 21 CD 05 16 0A 1B 12 18     .db $21, $cd, $05, $16, $0a, $1b, $12, $18 ; "MARIO"
0890B                           OnePlayerTimeUp:
0890B 22 0C 07 1D 12 16 0E 24..   .db $22, $0c, $07, $1d, $12, $16, $0e, $24, $1e, $19 ; "TIME UP"
08915 FF                          .db $ff
08916                           
08916                           if GAME_OVER_MENU == 1
08916                               TwoPlayerGameOver:
08916 21 2D 05 16 0A 1B 12 18         .db $21, $2d, $05, $16, $0a, $1b, $12, $18 ; "MARIO"
0891E                               OnePlayerGameOver:
0891E                               GameOver:
0891E 21 6B 09 10 0A 16 0E 24         .db $21, $6b, $09, $10, $0a, $16, $0e, $24 ;"GAME OVER"
08926 18 1F 0E 1B                     .db $18, $1f, $0e, $1b
0892A 21 EB 08 0C 18 17 1D 12..       .db $21, $eb, $08, $0c, $18, $17, $1d, $12, $17, $1e, $0e ;"CONTINUE"
08935 22 0C 47 24                     .db $22, $0c, $47, $24
08939 22 4B 03 0E 17 0D               .db $22, $4b, $03, "END"-55 ;"END"
0893F FF                              .db $ff
08940                           else
08940                               TwoPlayerGameOver:
08940                                 .db $21, $cd, $05, $16, $0a, $1b, $12, $18 ; "MARIO"
08940                               OnePlayerGameOver:
08940                                 .db $22, $0b, $09, $10, $0a, $16, $0e, $24 ; "GAME OVER"
08940                                 .db $18, $1f, $0e, $1b
08940                                 .db $ff
08940                           endif
08940                           
08940                           WarpZoneWelcome:
08940                           ;  .db $25, $84, $15, $20, $0e, $15, $0c, $18, $16 ; "WELCOME TO WARP ZONE!"
08940                           ;  .db $0e, $24, $1d, $18, $24, $20, $0a, $1b, $19
08940                           ;  .db $24, $23, $18, $17, $0e, $2b
08940                           ;  .db $26, $25, $01, $24         ; placeholder for left pipe
08940                           ;  .db $26, $2d, $01, $24         ; placeholder for middle pipe
08940                           ;  .db $26, $35, $01, $24         ; placeholder for right pipe
08940                           ;  .db $27, $d9, $46, $aa         ; attribute data
08940                           ;  .db $27, $e1, $45, $aa
08940                           ;  .db $ff
08940                           
08940                           ;LuigiName:
08940                           ;  .db $15, $1e, $12, $10, $12    ; "LUIGI", no address or length
08940                           
08940                           WarpZoneNumbers:
08940 04 03 02 00                 .db $04, $03, $02, $00         ; world 1-2
08944 24 05 09 00                 .db $24, $05, $09, $00         ; warp zone responsible for minus world
08948 08 07 06 00                 .db $08, $07, $06, $00         ; world 4-2
0894C 33 05 33 00                 .db $33, $05, $33, $00         ; world 4-2 to world 5
08950                           
08950                           GameTextOffsets:
08950 00 00                       .db TopStatusBarLine-GameText, TopStatusBarLine-GameText
08952 30 30                       .db WorldLivesDisplay-GameText, WorldLivesDisplay-GameText
08954 54 54                       .db OnePlayerTimeUp-GameText, OnePlayerTimeUp-GameText
08956 67 67                       .db GameOver-GameText, GameOver-GameText
08958 89 89                       .db WarpZoneWelcome-GameText, WarpZoneWelcome-GameText
0895A                           PrintWarpZoneNumbers1:
0895A 4C 15 8A                  			   jmp PrintWarpZoneNumbers
0895D                           WriteGameText:
0895D 48                        			   pha                      ;save text number to stack
0895E 0A                                       asl
0895F A8                                       tay                      ;multiply by 2 and use as offset
08960 C0 04                                    cpy #$04                 ;if set to do top status bar or world/lives display,
08962 90 07                                    bcc LdGameText           ;branch to use current offset as-is
08964 C0 08                                    cpy #$08                 ;if set to do time-up or game over,
08966 90 02                                    bcc Chk2Players          ;branch to check players
08968 A0 08                                    ldy #$08                 ;otherwise warp zone, therefore set offset
0896A                           Chk2Players:   ;lda NumberOfPlayers     ;check for number of players
0896A                                          ;bne LdGameText          ;if there are two, use current offset to also print name
0896A C8                                       iny                      ;otherwise increment offset by one to not print name
0896B BE 50 89                  LdGameText:    ldx GameTextOffsets,y    ;get offset to message we want to print
0896E A0 00                                    ldy #$00
08970 BD B7 88                  GameTextLoop:  lda GameText,x           ;load message data
08973 C9 FF                                    cmp #$ff                 ;check for terminator
08975 F0 07                                    beq EndGameText          ;branch to end text if found
08977 99 01 64                                 sta VRAM_Buffer1,y       ;otherwise write data to buffer
0897A E8                        			   inx                      ;and increment increment
0897B C8                                       iny
0897C D0 F2                                    bne GameTextLoop         ;do this for 256 bytes if no terminator found
0897E A9 00                     EndGameText:   lda #$00                 ;put null terminator at end
08980 99 01 64                                 sta VRAM_Buffer1,y
08983 68                                       pla                      ;pull original text number from stack
08984 AA                                       tax
08985 C9 04                                    cmp #$04                 ;are we printing warp zone?
08987 B0 D1                                    bcs PrintWarpZoneNumbers1
08989 C9 02                     			   cmp #$02
0898B B0 4A                     			   bcs ExitWPrint
0898D CA                                       dex                      ;are we printing the world/lives display?
0898E D0 4A                                    bne CheckPlayerName      ;if not, branch to check player's name
08990                           if LIVES_FIX == 1
08990 A0 00                     			   ldy #$00
08992 8C 08 64                  			   sty VRAM_Buffer1+7
08995 AD 5A 07                                 lda NumberofLives         ;otherwise, check number of lives
08998                                          ;clc                       ;and increment by one for display //$01 = $00 lifes
08998                                          ;adc #$01
08998                           +
08998 C9 0A                                    cmp #10                   ;more than 9 lives?
0899A 90 16                                    bcc PutLives
0899C E9 0A                                    sbc #10                   ;if so, subtract 10 and add one to the 10s digit
0899E A0 01                                    ldy #$01                  ;instead of showing 100 lives, A0 will show, etc.
089A0 8C 08 64                                 sty VRAM_Buffer1+7
089A3                           -
089A3 C9 0A                                    cmp #10
089A5 90 0B                                    bcc PutLives
089A7 E9 0A                                    sbc #10                   ;if so, subtract 10 and add to the digit
089A9 EE 08 64                                 inc VRAM_Buffer1+7        ;next to the difference
089AC 4C A3 89                                 jmp -
089AF 8C 08 64                                 sty VRAM_Buffer1+7
089B2                           else
089B2                                          cmp #10                  ;more than 9 lives?
089B2                                          bcc PutLives
089B2                                          sbc #10                  ;if so, subtract 10 and put a crown tile
089B2                                          ldy #$9f                 ;next to the difference...strange things happen if
089B2                                          sty VRAM_Buffer1+7       ;the number of lives exceeds 19
089B2                           endif
089B2                           PutLives:      
089B2 8D 09 64                                 sta VRAM_Buffer1+8
089B5 AC 5F 07                                 ldy WorldNumber          ;write world and level numbers (incremented for display)
089B8 C8                                       iny                      ;to the buffer in the spaces surrounding the dash
089B9 8C 14 64                                 sty VRAM_Buffer1+19
089BC AC 5C 07                                 ldy LevelNumber
089BF C8                                       iny
089C0 8C 16 64                                 sty VRAM_Buffer1+21      ;we're done here
089C3 AE 52 60                  			   ldx HardModeFlag
089C6 BC D8 89                  			   ldy HardModeDisplay,x
089C9 8C 17 64                  			   sty VRAM_Buffer1+22
089CC A0 00                     			   ldy #$00
089CE 8C 53 60                  			   sty OnOffBits
089D1 8C 54 60                  			   sty OnOffFlag
089D4 8C 28 60                  			   sty PTimer
089D7 60                        ExitWPrint:    rts
089D8                           HardModeDisplay:
089D8 24 6F                     			.db $24, $6f
089DA                           CheckPlayerName:
089DA AC 53 07                  			 ldy CurrentPlayer
089DD B9 48 AE                               lda PlayerNamesOffset,y
089E0 85 01                                  sta $01
089E2                                        
089E2 A9 4A                                  lda #<PlayerNames
089E4 18                                     clc
089E5 65 01                                  adc $01
089E7 85 00                                  sta $00
089E9 A9 AE                                  lda #>PlayerNames
089EB 85 01                                  sta $01
089ED                           
089ED B9 35 8A                  			 lda PlayerNamesCharLenght,y
089F0 A8                        			 tay
089F1                           NameLoop:    
089F1 B1 00                                  lda ($00),y            ; replace "MARIO" (Including for Mario)
089F3 99 04 64                               sta VRAM_Buffer1+3,y
089F6 88                                     dey
089F7 10 F8                                  bpl NameLoop           ;do this until each letter is replaced
089F9 AE 53 07                  			 ldx CurrentPlayer
089FC BD 35 8A                  			 lda PlayerNamesCharLenght,x
089FF C9 04                     			 cmp #$04
08A01 B0 0B                     			 bcs +
08A03 A8                        			 tay
08A04 A9 24                     			 lda #$24
08A06 C8                        FillB:		 iny
08A07 99 04 64                  			 sta VRAM_Buffer1+3,y
08A0A C0 04                     			 cpy #$04
08A0C D0 F8                     			 bne FillB
08A0E                           +:			
08A0E BD 30 8A                  			 lda PlayerIData,x
08A11 8D 0E 64                  			 sta VRAM_Buffer1+13
08A14 60                        ExitChkName: rts
08A15                           
08A15                           PrintWarpZoneNumbers:
08A15 E9 04                                  sbc #$04               ;subtract 4 and then shift to the left
08A17 0A                                     asl                    ;twice to get proper warp zone number
08A18 0A                                     asl                    ;offset
08A19 AA                                     tax
08A1A A0 00                                  ldy #$00
08A1C BD 40 89                  WarpNumLoop: lda WarpZoneNumbers,x  ;print warp zone numbers into the
08A1F 99 1C 64                  			 sta VRAM_Buffer1+27,y  ;placeholders from earlier
08A22 E8                                     inx
08A23 C8                                     iny                    ;put a number in every fourth space
08A24 C8                                     iny
08A25 C8                        			 iny
08A26 C8                                     iny
08A27 C0 0C                                  cpy #$0c
08A29 90 F1                                  bcc WarpNumLoop
08A2B A9 2C                                  lda #$2c               ;load new buffer pointer at end of message
08A2D 4C 24 87                               jmp SetVRAMOffset
08A30                           PlayerIData:
08A30 16                        	.db $16
08A31 15                        	.db $15
08A32 0A                        	.db $0a
08A33 0D                        	.db $0d
08A34 13                        	.db $13
08A35                           ;-------------------------------------------------------------------------------------
08A35                           
08A35                           PlayerNamesCharLenght:
08A35 04 04 02 04 04            	.db $04, $04, $02, $04, $04
08A3A                           
08A3A                           ResetSpritesAndScreenTimer:
08A3A AD A0 07                           lda ScreenTimer             ;check if screen timer has expired
08A3D D0 0B                              bne NoReset                 ;if not, branch to leave
08A3F 20 DB F7                           jsr MoveSpritesOffscreen ;otherwise reset sprites now
08A42                           
08A42                           ResetScreenTimer:
08A42 A9 04                              lda #$04                    ;reset timer again
08A44 8D A0 07                           sta ScreenTimer
08A47 EE 3C 07                           inc ScreenRoutineTask       ;move onto next task
08A4A 60                        NoReset: rts
08A4B                           
08A4B                           ;-------------------------------------------------------------------------------------
08A4B                           ;$00 - temp vram buffer offset
08A4B                           ;$01 - temp metatile buffer offset
08A4B                           ;$02 - temp metatile graphics table offset
08A4B                           ;$03 - used to store attribute bits
08A4B                           ;$04 - used to determine attribute table row
08A4B                           ;$05 - used to determine attribute table column
08A4B                           ;$06 - metatile graphics table address low
08A4B                           ;$07 - metatile graphics table address high
08A4B                           
08A4B                           
08A4B                           ;-------------------------------------------------------------------------------------
08A4B                           
08A4B                           ;$00 - used as temporary counter in ColorRotation
08A4B                           ;-------------------------------------------------------------------------------------
08A4B                           ;$00 - temp store for offset control bit
08A4B                           ;$01 - temp vram buffer offset
08A4B                           ;$02 - temp store for vertical high nybble in block buffer routine
08A4B                           ;$03 - temp adder for high byte of name table address
08A4B                           ;$04, $05 - name table address low/high
08A4B                           ;$06, $07 - block buffer address low/high
08A4B                           
08A4B                           BlockGfxData:
08A4B FD FE 45 47                      .db $fd, $fe, $45, $47 
08A4F FA FB 45 47               	   .db $fa, $fb, $45, $47 
08A53 57 58 59 5A                      .db $57, $58, $59, $5a
08A57 30 31 32 33                      .db $30, $31, $32, $33
08A5B 26 26 26 26                      .db $26, $26, $26, $26
08A5F 72 73 74 75               	   .db $72, $73, $74, $75
08A63 53 54 55 56               	   .db $53, $54, $55, $56
08A67 60                        -: rts
08A68                           RemoveCoin_Axe:
08A68                           			  ;ldy #$e1                 ;set low byte so offset points to $0341
08A68 A9 03                                   lda #$03                 ;load offset for default blank metatile
08A6A AE 4E 07                                ldx AreaType             ;check area type
08A6D D0 02                                   bne WriteBlankMT         ;if not water type, use offset
08A6F A9 04                                   lda #$04                 ;otherwise load offset for blank metatile used in water
08A71 4C 13 8B                  WriteBlankMT: jmp Hmm     			   ;do a sub to write blank metatile to vram buffer
08A74 91 00 00 00               blank: .db $91, $00, $00, $00
08A78                           
08A78                           IntermediatePlayerData:
08A78 58 01 00 60 FF 04                 .db $58, $01, $00, $60, $ff, $04
08A7E                           
08A7E                           DrawPlayer_Intermediate:
08A7E A2 05                               ldx #$05                       ;store data into zero page memory
08A80 BD 78 8A                  PIntLoop: lda IntermediatePlayerData,x   ;load data to display player as he always
08A83 95 02                               sta $02,x                      ;appears on world/lives display
08A85 CA                                  dex
08A86 10 F8                               bpl PIntLoop                   ;do this until all data is loaded
08A88 A2 B8                               ldx #$b8                       ;load offset for small standing
08A8A A0 04                               ldy #$04                       ;load sprite data offset
08A8C 20 9E B5                            jsr DrawPlayerLoop             ;draw player accordingly
08A8F AD 26 02                            lda Sprite_Attributes+36       ;get empty sprite attributes
08A92 09 40                               ora #%01000000                 ;set horizontal flip bit for bottom-right sprite
08A94 8D 22 02                            sta Sprite_Attributes+32       ;store and leave
08A97 60                                  rts
08A98                           
08A98                           ReplaceBlockMetatile2:
08A98 8D 2A 60                  	   sta temp6 
08A9B AD 29 60                  	   lda WaterReplace
08A9E F0 0B                     	   beq ReplaceBlockMetatile
08AA0 AD 4E 07                  	   lda AreaType
08AA3 D0 05                     	   bne +
08AA5 A9 04                     	   lda #$04
08AA7 4C 22 8B                  	   jmp PutBlockMetatile
08AAA 60                        +:	   rts
08AAB                           ReplaceBlockMetatile:     
08AAB AD 2A 60                  	   lda temp6
08AAE 4C C2 8A                  	   jmp WriteBlockMetatile    ;write metatile to vram buffer to replace block object
08AB1                           VineYes:
08AB1 A0 03                     	   ldy #$03
08AB3 4C 12 8B                  	   jmp UseBOffset
08AB6                           	   
08AB6                           DestroyBlockMetatile:
08AB6 AD 4E 07                  	   lda AreaType
08AB9 D0 05                     	   bne +
08ABB A9 04                     	   lda #$04  
08ABD 4C 13 8B                  	   jmp UseBOffset+1
08AC0 A9 00                     +:     lda #$00       ;force blank metatile if branched/jumped to this point
08AC2                           
08AC2                           WriteBlockMetatile:
08AC2 A0 03                     			 ldy #$03                ;load offset for blank metatile
08AC4 C9 00                     			 cmp #$00                ;check contents of A for blank metatile
08AC6 F0 4A                                  beq UseBOffset          ;branch if found (unconditional if branched from 8a6b)
08AC8 C9 87                     			 cmp #$87
08ACA F0 46                     			 beq UseBOffset
08ACC C9 23                     			 cmp #$23
08ACE F0 42                     			 beq UseBOffset
08AD0 C9 74                     			 cmp #$74
08AD2 F0 3E                     			 beq UseBOffset
08AD4 A0 00                                  ldy #$00                ;load offset for brick metatile w/ line
08AD6 C9 26                     			 cmp #$26
08AD8 F0 D7                     			 beq VineYes
08ADA C9 58                                  cmp #$58
08ADC F0 34                                  beq UseBOffset          ;use offset if metatile is brick with coins (w/ line)
08ADE C9 51                                  cmp #$51
08AE0 F0 30                                  beq UseBOffset          ;use offset if metatile is breakable brick w/ line
08AE2 C9 27                     			 cmp #$27
08AE4 F0 2C                     			 beq UseBOffset
08AE6 C8                                     iny                     ;increment offset for brick metatile w/o line
08AE7 C9 5D                                  cmp #$5d
08AE9 F0 27                                  beq UseBOffset          ;use offset if metatile is brick with coins (w/o line)
08AEB C9 52                                  cmp #$52
08AED F0 23                                  beq UseBOffset          ;use offset if metatile is breakable brick w/o line
08AEF C9 28                     			 cmp #$28
08AF1 F0 1F                     			 beq UseBOffset
08AF3 C9 34                     			 cmp #$34
08AF5 F0 1B                     			 beq UseBOffset
08AF7 A0 06                     			 ldy #$06
08AF9 C9 C2                     			 cmp #$c2
08AFB F0 0A                     			 beq +
08AFD C9 C4                     			 cmp #$c4
08AFF F0 06                     			 beq +
08B01 29 F0                     			 and #%11110000
08B03 C9 C0                     			 cmp #$c0
08B05 F0 0B                     			 beq UseBOffset
08B07 A0 05                     +:			 ldy #$05
08B09 AD 2A 60                  			 lda temp6
08B0C C9 C2                     			 cmp #$c2
08B0E F0 02                     			 beq UseBOffset
08B10 A0 02                     			 ldy #$02
08B12 98                        UseBOffset:  tya                     ;put Y in A
08B13 AC 00 64                  Hmm:         ldy VRAM_Buffer1_Offset ;get vram buffer offset
08B16 C8                                     iny                     ;move onto next byte
08B17 20 22 8B                               jsr PutBlockMetatile    ;get appropriate block data and write to vram buffer
08B1A 88                        MoveVOffset: dey                     ;decrement vram buffer offset
08B1B 98                                     tya                     ;add 10 bytes to it
08B1C 18                                     clc
08B1D 69 0A                                  adc #10
08B1F 4C 24 87                               jmp SetVRAMOffset       ;branch to store as new vram buffer offset
08B22                           
08B22                           PutBlockMetatile:
08B22 86 00                     			stx $00               ;store control bit from SprDataOffset_Ctrl
08B24 84 01                                 sty $01               ;store vram buffer offset for next byte
08B26 0A                                    asl
08B27 0A                                    asl                   ;multiply A by four and use as X
08B28 AA                                    tax
08B29 A0 20                                 ldy #$20              ;load high byte for name table 0
08B2B A5 F8                                 lda $f8               ;get low byte of block buffer pointer
08B2D 29 01                                 and #$01
08B2F C9 01                     			cmp #$01
08B31 D0 02                                 bne SaveHAdder        ;if not, use current high byte
08B33 A0 24                                 ldy #$24              ;otherwise load high byte for name table 1
08B35 84 03                     SaveHAdder: sty $03               ;save high byte here
08B37 A5 F7                                 lda $f7
08B39 29 0F                     			and #$0f              ;mask out high nybble of block buffer pointer
08B3B 0A                                    asl                   ;multiply by 2 to get appropriate name table low byte
08B3C 85 04                                 sta $04               ;and then store it here
08B3E A9 00                                 lda #$00
08B40 85 05                                 sta $05               ;initialize temp high byte
08B42 A5 02                                 lda $02               ;get vertical high nybble offset used in block buffer routine
08B44 18                                    clc
08B45 69 20                                 adc #$20              ;add 32 pixels for the status bar
08B47 0A                                    asl
08B48 26 05                                 rol $05               ;shift and rotate d7 onto d0 and d6 into carry
08B4A 0A                                    asl
08B4B 26 05                                 rol $05               ;shift and rotate d6 onto d0 and d5 into carry
08B4D 65 04                                 adc $04               ;add low byte of name table and carry to vertical high nybble
08B4F 85 04                                 sta $04               ;and store here
08B51 A5 05                                 lda $05               ;get whatever was in d7 and d6 of vertical high nybble
08B53 69 00                                 adc #$00              ;add carry
08B55 18                                    clc
08B56 65 03                                 adc $03               ;then add high byte of name table
08B58 85 05                                 sta $05               ;store here
08B5A A4 01                                 ldy $01               ;get vram buffer offset to be used
08B5C BD 4B 8A                  RemBridge:  lda BlockGfxData,x    ;write top left and top right
08B5F 99 03 64                              sta VRAM_Buffer1+2,y  ;tile numbers into first spot
08B62 BD 4C 8A                              lda BlockGfxData+1,x
08B65 99 04 64                              sta VRAM_Buffer1+3,y
08B68 BD 4D 8A                              lda BlockGfxData+2,x  ;write bottom left and bottom
08B6B 99 08 64                              sta VRAM_Buffer1+7,y  ;right tiles numbers into
08B6E BD 4E 8A                              lda BlockGfxData+3,x  ;second spot
08B71 99 09 64                              sta VRAM_Buffer1+8,y
08B74 A5 04                                 lda $04
08B76 99 01 64                              sta VRAM_Buffer1,y    ;write low byte of name table
08B79 18                                    clc                   ;into first slot as read
08B7A 69 20                                 adc #$20              ;add 32 bytes to value
08B7C 99 06 64                              sta VRAM_Buffer1+5,y  ;write low byte of name table
08B7F A5 05                                 lda $05               ;plus 32 bytes into second slot
08B81 99 00 64                              sta VRAM_Buffer1-1,y  ;write high byte of name
08B84 99 05 64                              sta VRAM_Buffer1+4,y  ;table address to both slots
08B87 A9 02                                 lda #$02
08B89 99 02 64                              sta VRAM_Buffer1+1,y  ;put length of 2 in
08B8C 99 07 64                              sta VRAM_Buffer1+6,y  ;both slots
08B8F A9 00                                 lda #$00
08B91 99 0A 64                              sta VRAM_Buffer1+9,y  ;put null terminator at end
08B94 A6 00                                 ldx $00               ;get offset control bit here
08B96 60                                    rts                   ;and leave
08B97                           
08B97                           ;-------------------------------------------------------------------------------------
08B97                           ;METATILE GRAPHICS TABLE
08B97                           WaterPaletteData:
08B97 3F 00 20                    .db $3f, $00, $20
08B9A 12 15 22 25                 .db $12, $15, $22, $25  
08B9E 12 3A 1A 0F                 .db $12, $3a, $1a, $0f
08BA2 12 30 22 0F                 .db $12, $30, $22, $0f
08BA6 12 27 22 0F                 .db $12, $27, $22, $0f
08BAA 12 16 27 18                 .db $12, $16, $27, $18
08BAE 12 1A 30 27                 .db $12, $1a, $30, $27
08BB2 12 16 30 27                 .db $12, $16, $30, $27
08BB6 12 0F 30 10                 .db $12, $0f, $30, $10
08BBA 00                          .db $00
08BBB                           
08BBB                           GroundPaletteData:
08BBB 3F 00 20                    .db $3f, $00, $20
08BBE 22 29 1A 0F                 .db $22, $29, $1a, $0f
08BC2 22 36 17 0F                 .db $22, $36, $17, $0f
08BC6 22 30 21 0F                 .db $22, $30, $21, $0f
08BCA 22 27 17 0F                 .db $22, $27, $17, $0f
08BCE 22 16 27 18                 .db $22, $16, $27, $18
08BD2 22 1A 30 27                 .db $22, $1a, $30, $27
08BD6 22 16 30 27                 .db $22, $16, $30, $27
08BDA 22 0F 36 17                 .db $22, $0f, $36, $17
08BDE 00                          .db $00
08BDF                           
08BDF                           UndergroundPaletteData:
08BDF 3F 00 20                    .db $3f, $00, $20
08BE2 0F 29 1A 0C                 .db $0f, $29, $1a, $0c
08BE6 0F 3C 1C 0C                 .db $0f, $3c, $1c, $0c
08BEA 0F 30 21 0C                 .db $0f, $30, $21, $0c
08BEE 0F 27 17 0C                 .db $0f, $27, $17, $0c
08BF2 0F 16 27 18                 .db $0f, $16, $27, $18
08BF6 0F 1A 30 27                 .db $0f, $1a, $30, $27
08BFA 0F 16 30 27                 .db $0f, $16, $30, $27
08BFE 0F 0C 3C 1C                 .db $0f, $0c, $3c, $1c
08C02 00                          .db $00
08C03                           
08C03                           CastlePaletteData:
08C03 3F 00 20                    .db $3f, $00, $20
08C06 0F 30 10 2D                 .db $0f, $30, $10, $2d
08C0A 0F 30 10 00                 .db $0f, $30, $10, $00
08C0E 0F 30 16 2D                 .db $0f, $30, $16, $2d
08C12 0F 27 17 2D                 .db $0f, $27, $17, $2d
08C16 0F 16 27 18                 .db $0f, $16, $27, $18
08C1A 0F 1A 30 27                 .db $0f, $1a, $30, $27
08C1E 0F 16 30 27                 .db $0f, $16, $30, $27
08C22 0F 00 30 10                 .db $0f, $00, $30, $10
08C26 00                          .db $00
08C27                           
08C27                           DaySnowPaletteData:
08C27 3F 00 04                    .db $3f, $00, $04
08C2A 22 30 00 10                 .db $22, $30, $00, $10
08C2E 00                          .db $00
08C2F                           
08C2F                           NightSnowPaletteData:
08C2F 3F 00 04                    .db $3f, $00, $04
08C32 0F 30 00 10                 .db $0f, $30, $00, $10
08C36 00                          .db $00
08C37                           
08C37                           MushroomPaletteData:
08C37 3F 00 20                    .db $3f, $00, $20
08C3A 22 29 1A 0F                 .db $22, $29, $1a, $0f
08C3E 22 37 27 17                 .db $22, $37, $27, $17
08C42 22 30 12 0F                 .db $22, $30, $12, $0f
08C46 22 27 17 0F                 .db $22, $27, $17, $0f
08C4A 22 16 27 18                 .db $22, $16, $27, $18
08C4E 22 1A 30 27                 .db $22, $1a, $30, $27
08C52 22 16 30 27                 .db $22, $16, $30, $27
08C56 22 17 37 27                 .db $22, $17, $37, $27
08C5A 00                          .db $00
08C5B                           
08C5B                           BowserPaletteData:
08C5B 3F 14 04                    .db $3f, $14, $04
08C5E 0F 1A 30 27                 .db $0f, $1a, $30, $27
08C62 00                          .db $00
08C63                           
08C63                           
08C63                           MarioThanksMessage:
08C63                           ;"THANK YOU MARIO!"
08C63 25 48 10                    .db $25, $48, $10
08C66 1D 11 0A 17 14 31           .db $1d, $11, $0a, $17, $14, $31
08C6C 22 18 1E 31                 .db $22, $18, $1e, $31
08C70 16 0A 1B 12 18 2B           .db $16, $0a, $1b, $12, $18, $2b
08C76 00                          .db $00
08C77                           
08C77                           LuigiThanksMessage:
08C77                           ;"THANK YOU LUIGI!"
08C77 25 48 10                    .db $25, $48, $10
08C7A 1D 11 0A 17 14 31           .db $1d, $11, $0a, $17, $14, $31
08C80 22 18 1E 31                 .db $22, $18, $1e, $31
08C84 15 1E 12 10 12 2B           .db $15, $1e, $12, $10, $12, $2b
08C8A 00                          .db $00
08C8B                           
08C8B                           MushroomRetainerSaved:
08C8B                           ;"BUT OUR PRINCESS IS IN"
08C8B 25 C5 16                    .db $25, $c5, $16
08C8E 0B 1E 1D 30 18 1E 1B 30     .db $0b, $1e, $1d, $30, $18, $1e, $1b, $30
08C96 19 1B 12 17 0C 0E 1C 1C..   .db $19, $1b, $12, $17, $0c, $0e, $1c, $1c, $31
08C9F 12 1C 30 12 17              .db $12, $1c, $30, $12, $17
08CA4                           ;"ANOTHER CASTLE!"
08CA4 26 05 0F                    .db $26, $05, $0f
08CA7 0A 17 18 1D 11 0E 1B 30     .db $0a, $17, $18, $1d, $11, $0e, $1b, $30
08CAF 0C 0A 1C 1D 15 0E 2B 00     .db $0c, $0a, $1c, $1d, $15, $0e, $2b, $00
08CB7                             
08CB7                           MushRoomRetainerGlitchWorld:
08CB7 22 18 1E E9 10 18 1D E9..   .db "YOU GOT 1000 COINS SO"-55
08CCC 22 18 1E E9 0C 0A 17 E9..   .db "YOU CAN NOW PLAY"-55
08CDC 20 18 1B 15 0D E9 02 2B..   .db "WORLD 9"-55, $2b, $00
08CE5                           
08CE5                           PrincessSaved1:
08CE5 25 A9 0E                      .db $25, $a9, $0e
08CE8 19 0E 0A 0C 0E 32 12 1C..     .db $19, $0e, $0a, $0c, $0e, $32, $12, $1c, $33
08CF1 19 0A 1F 0E 0D                .db $19, $0a, $1f, $0e, $0d
08CF6 23 D0 58 AA                   .db $23, $d0, $58, $aa
08CFA 00                            .db $00
08CFB                           
08CFB                           PrincessSaved2:
08CFB 25 E7 12                      .db $25, $e7, $12
08CFE 20 12 1D 11 33 14 12 17..     .db $20, $12, $1d, $11, $33, $14, $12, $17, $10, $0d, $18, $16, $33
08D0B 1C 0A 1F 0E 0D                .db $1c, $0a, $1f, $0e, $0d
08D10 00                            .db $00
08D11                           
08D11                           WorldSelectMessage1:
08D11 26 28 10                      .db $26, $28, $10
08D14 11 1E 1B 1B 0A 11 33 1D..     .db $11, $1e, $1b, $1b, $0a, $11, $33, $1d, $18, $33, "PLAYER"-55
08D24 00                            .db $00
08D25                           
08D25                           WorldSelectMessage2:
08D25 26 69 0D                      .db $26, $69, $0d
08D28 18 1E 1B 33 18 17 15 22..     .db $18, $1e, $1b, $33, $18, $17, $15, $22, $33, $11, $0e, $1b, $18
08D35 00                            .db $00
08D36                           
08D36                           ;-------------------------------------------------------------------------------------
08D36                           ;$00 - used to store status bar nybbles
08D36                           ;$02 - used as temp vram offset
08D36                           ;$03 - used to store length of status bar number
08D36                           
08D36                           ;status bar name table offset and length data
08D36                           PSBN:
08D36 EE 61 60                  -:	  inc bocata3
08D39 60                        	  rts
08D3A                           PrintStatusBarNumbers:
08D3A 85 00                     	  sta $00            ;store player-specific offset
08D3C 20 45 8D                        jsr OutputNumbers  ;use first nybble to print the coin display
08D3F A5 00                           lda $00            ;move high nybble to low
08D41 A8                              tay
08D42 B9 24 BD                  	  lda MSBtoLSB,y
08D45                           
08D45                           OutputNumbers:
08D45 18                                     clc                      ;add 1 to low nybble
08D46 69 01                                  adc #$01
08D48 29 0F                                  and #%00001111           ;mask out high nybble
08D4A C9 07                                  cmp #$07
08D4C B0 48                                  bcs ExitOutputN
08D4E 48                                     pha                      ;save incremented value to stack for now and
08D4F 0A                                     asl                      ;shift to left and use as offset
08D50 A8                                     tay
08D51 AE 00 64                               ldx VRAM_Buffer1_Offset  ;get current buffer pointer
08D54 E0 20                     			 cpx #$20
08D56 B0 3F                     			 bcs +
08D58 A9 20                     			 lda #$20                 ;put at top of screen by default
08D5A C0 00                                  cpy #$00                 ;are we writing top score on title screen?
08D5C D0 02                                  bne SetupNums
08D5E A9 22                                  lda #$22                 ;if so, put further down on the screen
08D60 9D 01 64                  SetupNums:   sta VRAM_Buffer1,x
08D63 B9 97 F8                               lda StatusBarData,y      ;write low vram address and length of thing
08D66 9D 02 64                               sta VRAM_Buffer1+1,x     ;we're printing to the buffer
08D69 B9 98 F8                               lda StatusBarData+1,y
08D6C 9D 03 64                               sta VRAM_Buffer1+2,x
08D6F 85 03                                  sta $03                  ;save length byte in counter
08D71 86 02                                  stx $02
08D73 68                                     pla                      ;pull original incremented value from stack
08D74 AA                                     tax
08D75 BD A5 F8                               lda StatusBarOffset,x    ;load offset to value we want to write
08D78 38                                     sec
08D79 F9 98 F8                               sbc StatusBarData+1,y    ;subtract from length byte we read before
08D7C A8                                     tay                      ;use value as offset to display digits
08D7D A6 02                                  ldx $02
08D7F B9 D7 07                  DigitPLoop:  lda DisplayDigits,y      ;write digits to the buffer
08D82 9D 04 64                               sta VRAM_Buffer1+3,x    
08D85 E8                                     inx
08D86 C8                                     iny
08D87 C6 03                                  dec $03                  ;do this until all the digits are written
08D89 D0 F4                                  bne DigitPLoop
08D8B A9 00                                  lda #$00                 ;put null terminator at end
08D8D 9D 04 64                               sta VRAM_Buffer1+3,x
08D90 E8                                     inx                      ;increment buffer pointer by 3
08D91 E8                                     inx
08D92 E8                                     inx
08D93 8E 00 64                               stx VRAM_Buffer1_Offset  ;store it in case we want to use it again
08D96 60                        ExitOutputN: rts
08D97 68                        +:			 pla
08D98 EE 61 60                  			 inc bocata3
08D9B 60                        			 rts
08D9C                           ;-------------------------------------------------------------------------------------
08D9C                           
08D9C                           DigitsMathRoutine:
08D9C AD 70 07                              lda OperMode              ;check mode of operation
08D9F C9 00                                 cmp #TitleScreenModeValue
08DA1 F0 16                                 beq EraseDMods            ;if in title screen mode, branch to lock score
08DA3 A2 05                                 ldx #$05
08DA5 BD 34 01                  AddModLoop: lda DigitModifier,x       ;load digit amount to increment
08DA8 18                                    clc
08DA9 79 D7 07                              adc DisplayDigits,y       ;add to current digit
08DAC 30 16                                 bmi BorrowOne             ;if result is a negative number, branch to subtract
08DAE C9 0A                                 cmp #10
08DB0 B0 19                                 bcs CarryOne              ;if digit greater than $09, branch to add
08DB2 99 D7 07                  StoreNewD:  sta DisplayDigits,y       ;store as new score or game timer digit
08DB5 88                                    dey                       ;move onto next digits in score or game timer
08DB6 CA                                    dex                       ;and digit amounts to increment
08DB7 10 EC                                 bpl AddModLoop            ;loop back if we're not done yet
08DB9 A9 00                     EraseDMods: lda #$00                  ;store zero here
08DBB A2 06                                 ldx #$06                  ;start with the last digit
08DBD 9D 33 01                  EraseMLoop: sta DigitModifier-1,x     ;initialize the digit amounts to increment
08DC0 CA                                    dex
08DC1 10 FA                                 bpl EraseMLoop            ;do this until they're all reset, then leave
08DC3 60                                    rts
08DC4 DE 33 01                  BorrowOne:  dec DigitModifier-1,x     ;decrement the previous digit, then put $09 in
08DC7 A9 09                                 lda #$09                  ;the game timer digit we're currently on to "borrow
08DC9 D0 E7                                 bne StoreNewD             ;the one", then do an unconditional branch back
08DCB C0 06                     CarryOne:   cpy #$06
08DCD D0 0A                     			bne +
08DCF A0 01                     			ldy #$01
08DD1 8C DD 63                  			sty Averveamos
08DD4 8C 10 7F                  			sty TopMaxedOut
08DD7 A0 06                     			ldy #$06
08DD9 38                        +:			sec                       ;subtract ten from our digit to make it a
08DDA E9 0A                                 sbc #10                   ;proper BCD number, then increment the digit
08DDC FE 33 01                              inc DigitModifier-1,x     ;preceding current digit to "carry the one" properly
08DDF 4C B2 8D                              jmp StoreNewD             ;go back to just after we branched here
08DE2                           
08DE2                           ;-------------------------------------------------------------------------------------
08DE2                           
08DE2                           UpdateTopScore:
08DE2                           ;        ldx BowserFront_Offset
08DE2                           ;        lda Enemy_ID,x
08DE2                           ;        cmp #Bowser
08DE2                           ;        bne +
08DE2                           
08DE2                           
08DE2                           ;         lda Enemy_State,x
08DE2                           
08DE2                           
08DE2                           ;        lda OperMode
08DE2                           ;        cmp #$02
08DE2                           ;        beq +
08DE2                           
08DE2                           ;        lda BowserHitPoints
08DE2                           ;        beq CODE
08DE2                           ;        cmp #$ff
08DE2                           ;        beq CODE
08DE2                           ;+
08DE2                           ;        rts
08DE2                           
08DE2                           ;        CODE:
08DE2                           ;        JMP HandleAxeMetatile
08DE2                           ;rts
08DE2 60                        rts
08DE3                           
08DE3                           ;-------------------------------------------------------------------------------------
08DE3                           
08DE3                           DefaultSprOffsets:
08DE3 00 30 48 60 78 90 A8 C0         .db $00, $30, $48, $60, $78, $90, $a8, $c0
08DEB D8 E8 24 F8 FC 28 2C            .db $d8, $e8, $24, $f8, $fc, $28, $2c
08DF2                           
08DF2                           ;-------------------------------------------------------------------------------------
08DF2                           
08DF2                           InitializeGame:
08DF2 A0 6F                                  ldy #$6f              ;clear all memory as in initialization procedure,
08DF4 20 AC F8                               jsr InitializeMemory  ;but this time, clear only as far as $076f
08DF7 A0 1F                                  ldy #$1f
08DF9 99 B0 07                  ClrSndLoop:  sta SoundMemory,y     ;clear out memory used
08DFC 88                                     dey                   ;by the sound engines
08DFD 10 FA                                  bpl ClrSndLoop
08DFF                                        if BATTERY
08DFF 20 22 BA                                  jsr LoadBattery
08E02                                        endif
08E02                                        
08E02 A9 18                                  lda #$18              ;set demo timer
08E04 8D A2 07                               sta DemoTimer
08E07 20 F1 F7                               jsr LoadAreaPointer
08E0A A9 00                     			 lda #$00
08E0C 8D 30 60                  			 sta OldStatus
08E0F                           			 
08E0F                           
08E0F                           InitializeArea:
08E0F 20 18 AD                  			   jsr UpdateLives
08E12 AC 00 64                  			   ldy VRAM_Buffer1_Offset
08E15 A0 00                     			   ldy #$00
08E17 8C 04 60                  			   sty GrabFlag
08E1A 8C 1D 60                  			   sty GrabDown
08E1D 8C 78 60                  			   sty GrabUp
08E20 8C 59 60                  			   sty LakituRespawning
08E23 8C A8 60                  			   sty WarpZoneCheck
08E26 8C 25 60                  			   sty EnemyDefeatPitch
08E29 8C 35 60                  			   sty BowserKilled
08E2C                           			   ;sty HurryUp
08E2C 8C 65 60                  			   sty DebugSwim
08E2F 8C 07 60                  			   sty HurryUp+1
08E32 A0 4B                     			   ldy #$4b                 ;clear all memory again, only as far as $074b
08E34 20 AC F8                                 jsr InitializeMemory     ;this is only necessary if branching from
08E37 A2 0B                     			   ldx #$0b
08E39 A9 00                     			   lda #$00
08E3B 9D 10 05                  -:			   sta AreaObjectLength,x
08E3E CA                        			   dex
08E3F 10 FA                     			   bpl -
08E41                           			   
08E41 A2 21                                    ldx #$21
08E43 A9 00                                    lda #$00
08E45 9D 80 07                  ClrTimersLoop: sta Timers,x             ;clear out memory between
08E48 CA                                       dex                      ;$0780 and $07a1
08E49 10 FA                                    bpl ClrTimersLoop
08E4B AD 5B 07                  			   lda HalfwayPage
08E4E AC 52 07                                 ldy AltEntranceControl   ;if AltEntranceControl not set, use halfway page, if any found
08E51 F0 03                                    beq StartPage
08E53 AD 51 07                                 lda EntrancePage         ;otherwise use saved entry page number here
08E56 8D 1A 07                  StartPage:     sta ScreenLeft_PageLoc   ;set as value here
08E59 8D 51 07                                 sta EntrancePage
08E5C 8D 28 07                                 sta BackloadingFlag      ;set flag here if halfway page or saved entry page number found
08E5F A9 00                     			   lda #$00
08E61 8D 25 07                  			   sta CurrentPageLoc       ;also set as current page
08E64 AD 1C 07                                 lda ScreenLeft_X_Pos    ;get coordinate of screen's left boundary
08E67 18                        			   clc
08E68 69 FF                     			   adc #$ff                ;add 255 pixels
08E6A 8D 1D 07                  			   sta ScreenRight_X_Pos   ;store as coordinate of screen's right boundary
08E6D AD 1A 07                  			   lda ScreenLeft_PageLoc  ;get page number where left boundary is
08E70 69 00                     			   adc #$00                ;add carry from before
08E72 8D 1B 07                  			   sta ScreenRight_PageLoc ;store as page number where right boundary is
08E75                           			   ;lda EntrancePage
08E75                           			   ;bne +
08E75 A0 20                     			   ldy #$20
08E77 29 01                     			   and #%00000001
08E79 F0 0D                     			   beq SetInitNTHigh
08E7B A0 24                     			   ldy #$24
08E7D 4C 88 8E                  			   jmp SetInitNTHigh
08E80                           			   
08E80 A0 24                     +:			   ldy #$24                 ;if on odd numbered page, use $2480 as start of rendering
08E82 29 01                                    and #%00000001           ;otherwise use $2080, this address used later as name table
08E84 F0 02                                    beq SetInitNTHigh        ;address for rendering of game area
08E86 A0 20                                    ldy #$20
08E88 8C 20 07                  SetInitNTHigh: sty CurrentNTAddr_High   ;store name table address
08E8B A0 80                     			   ldy #$80
08E8D                           			   ;ldx EntrancePage
08E8D                           			   ;beq +
08E8D                           			   ;ldy #$94
08E8D 8C 21 07                  +:             sty CurrentNTAddr_Low
08E90 0A                                       asl                      ;store LSB of page number in high nybble
08E91 0A                                       asl                      ;of block buffer column position
08E92 0A                                       asl
08E93 0A                                       asl
08E94 8D A0 06                                 sta BlockBufferColumnPos
08E97                           			   
08E97 A2 0B                     			   ldx #$0b
08E99 A9 00                     			   lda #$00
08E9B DE 10 05                  -:			   dec AreaObjectLength,x
08E9E CA                        			   dex
08E9F 10 FA                     			   bpl -
08EA1                           			   
08EA1 A9 0B                                    lda #$0b                 ;set value for renderer to update 12 column sets
08EA3 8D 1E 07                                 sta ColumnSets           ;12 column sets = 24 metatile columns = 1 1/2 screens
08EA6 20 07 F8                                 jsr GetAreaDataAddrs     ;get enemy and level addresses and load header
08EA9 AD 6A 07                                 lda PrimaryHardMode      ;check to see if primary hard mode has been activated
08EAC D0 10                                    bne SetSecHard           ;if so, activate the secondary no matter where we're at
08EAE AD 5F 07                  			   lda WorldNumber
08EB1 C9 04                                    cmp #SecHardModeWorld    ;if less than 5, do not activate secondary
08EB3 90 0C                                    bcc CheckHalfway
08EB5 D0 07                                    bne SetSecHard           ;if not equal to, then world > 5, thus activate
08EB7 AD 5C 07                                 lda LevelNumber          ;otherwise, world 5, so check level number
08EBA C9 02                                    cmp #Level3              ;if 1 or 2, do not set secondary hard mode flag
08EBC 90 03                                    bcc CheckHalfway
08EBE EE CC 06                  SetSecHard:    inc SecondaryHardMode    ;set secondary hard mode flag for areas 5-3 and beyond
08EC1 AD 5B 07                  CheckHalfway:  lda HalfwayPage
08EC4 F0 0A                                    beq DoneInitArea
08EC6 AD 52 60                  			   lda HardModeFlag
08EC9 D0 05                     			   bne DoneInitArea
08ECB A9 02                                    lda #$02                 ;if halfway page set, overwrite start position from header
08ECD 8D 10 07                                 sta PlayerEntranceCtrl
08ED0 A9 80                     DoneInitArea:  lda #Silence             ;silence music
08ED2 85 EC                                    sta AreaMusicQueue
08ED4 EE A7 07                  			   inc PseudoRandomBitReg
08ED7 AD A7 07                  			   lda PseudoRandomBitReg
08EDA 8D 07 7E                  			   sta seed
08EDD AD A8 07                  			   lda #PseudoRandomBitReg+1
08EE0 8D 08 7E                  			   sta seed+1
08EE3 A9 01                     			   lda #$01                 ;disable screen output
08EE5 8D 74 07                                 sta DisableScreenFlag
08EE8 8D 7C 60                  			   sta DontDecPT
08EEB 8D A2 60                  			   sta scrolldir
08EEE 8D 99 60                  			   sta olddirscroll
08EF1 8D 36 60                  			   sta ParallaxOffset
08EF4 EE 72 07                                 inc OperMode_Task        ;increment one of the modes
08EF7 4A                        			   lsr
08EF8 8D 9A 60                  			   sta stopload
08EFB 8D B5 63                  			   sta DisableScreenFlag2
08EFE 8D 79 60                  			   sta CrouchingFlag2
08F01 8D AB 60                  			   sta GlobalSaveOffset
08F04 A2 05                     			   ldx #$05
08F06 9D C4 63                  -:			   sta SavedOffset,x
08F09 CA                        			   dex
08F0A 10 FA                     			   bpl -
08F0C A9 66                     			   lda #$66
08F0E 85 FC                     			   sta $fc
08F10 AD 51 07                  			   lda EntrancePage
08F13 18                        		       clc
08F14 69 66                     			   adc #$66
08F16 85 FA                     			   sta $fa
08F18                           			   ;add #$01
08F18 8D A9 60                  			   sta ScrollLeftLock
08F1B A0 00                     			   ldy #$00
08F1D 8C DF 63                  			   sty ScrollLeftFlag
08F20 84 FB                     			   sty $fb
08F22 84 FF                     			   sty $ff
08F24 8C A4 60                  			   sty dontscroll
08F27 8C BD 63                  			   sty FlagpoleEnemyPage
08F2A A0 75                     			   ldy #$75
08F2C 8C A6 60                  			   sty ScrollLockPageLoc
08F2F A0 0F                     			   ldy #$0f
08F31 8C A7 60                  			   sty ScrollLockColumnPos
08F34                           ;			   ldy #$00
08F34                           ;			   lda #$00
08F34                           ;-:			   sta Saved_ID,y
08F34                           ;			   sta Saved_X_Position,y
08F34                           ;			   sta Saved_Y_Position,y
08F34                           ;			   sta Saved_PageLoc,y
08F34                           ;			   ;sta Saved_isDefeated,y
08F34                           ;			   iny
08F34                           ;			   cpy #$80
08F34                           ;			   bne -
08F34                           ;			   lda #$02
08F34                           ;			   sta Saved_isDefeated
08F34                           ;			   sta Saved_isDefeated+1
08F34                           ;			   sta Saved_isDefeated+2
08F34                           ;			   sta Saved_isDefeated+3
08F34                           ;			   sta Saved_isDefeated+4
08F34                           ;			   sta Saved_isDefeated+5
08F34                           ;			   lda #$00
08F34                           ;-:			   tya
08F34                           ;			   sta SavedOffset,y
08F34                           ;			   tay
08F34                           ;			   iny
08F34                           ;			   cpy #$06
08F34                           ;			   bne -
08F34 60                        rts
08F35 AD 51 07                  			   lda EntrancePage
08F38 F0 12                     			   beq +
08F3A AD 1C 07                  			   lda ScreenLeft_X_Pos
08F3D 38                        		       sec
08F3E E9 40                     		       sbc #$40
08F40 8D 1C 07                  		       sta ScreenLeft_X_Pos
08F43 AD 51 07                  			   lda EntrancePage
08F46 38                        			   sec
08F47 E9 01                     			   sbc #$01
08F49 8D 1A 07                  			   sta ScreenLeft_PageLoc
08F4C 60                        +:			   rts
08F4D                                          ;rts
08F4D                           
08F4D                           ;-------------------------------------------------------------------------------------
08F4D                           
08F4D                           PrimaryGameSetup:
08F4D AD FC 06                        lda SavedJoypad1Bits
08F50 8D CF 05                  	  sta OldSavedJoypadBits
08F53 A9 01                     	  lda #$01
08F55 8D 57 07                        sta FetchNewGameTimerFlag   ;set flag to load game timer from header
08F58 8D 54 07                        sta PlayerSize              ;set player's size to small
08F5B                                 if TEST_LUIGI
08F5B                                       sta CurrentPlayer
08F5B                                 endif
08F5B                                 
08F5B                                 if TEST_PLAYER > 0
08F5B                                       lda #TEST_PLAYER
08F5B                                       sta CurrentPlayer
08F5B                                 endif
08F5B                                 
08F5B                                 
08F5B                                 if CHEAT_START_FIERY
08F5B                                       lda #$00
08F5B                                       sta PlayerSize
08F5B                                       lda #$02
08F5B                                       sta PlayerStatus
08F5B                                 endif
08F5B                                 
08F5B A9 04                           lda #$04
08F5D 8D 5A 07                        sta NumberofLives           ;give each player five lives
08F60                                 
08F60                                 ;lda NumberofLives-OnscreenPlayerInfo
08F60                           
08F60                                 ;sta OffScr_NumberofLives
08F60                           
08F60                           SecondaryGameSetup:
08F60 A9 00                                  lda #$00
08F62 8D 74 07                               sta DisableScreenFlag     ;enable screen output
08F65 A8                                     tay
08F66 99 00 64                  ClearVRLoop: sta VRAM_Buffer1-1,y      ;clear buffer at $0300-$03ff
08F69 C8                                     iny
08F6A D0 FA                                  bne ClearVRLoop
08F6C 99 00 03                  ClearVRLoo2: sta $0300,y      		   ;clear buffer at $0300-$03ff
08F6F C8                                     iny
08F70 D0 FA                                  bne ClearVRLoo2
08F72 8D 59 07                               sta GameTimerExpiredFlag  ;clear game timer exp flag
08F75 8D 69 07                               sta DisableIntermediate   ;clear skip lives display flag
08F78 8D 28 07                               sta BackloadingFlag       ;clear value here
08F7B A9 FF                                  lda #$ff
08F7D 8D A0 03                               sta BalPlatformAlignment  ;initialize balance platform assignment flag
08F80 AD 1A 07                               lda ScreenLeft_PageLoc    ;get left side page location
08F83 29 01                                  and #$01                  ;mask out all but LSB of page location
08F85 8D 7B 07                               sta NameTableSelect  	   ;this is to set the proper PPU name table
08F88 20 CB 8F                  			 jsr GetAreaMusic          ;load proper music into queue
08F8B A9 38                     			 lda #$38                  ;load sprite shuffle amounts to be used later
08F8D 8D E3 06                               sta SprShuffleAmt+2
08F90 A9 48                                  lda #$48
08F92 8D E2 06                               sta SprShuffleAmt+1
08F95 A9 58                                  lda #$58
08F97 8D E1 06                               sta SprShuffleAmt
08F9A A2 0E                                  ldx #$0e                  ;load default OAM offsets into $06e4-$06f2
08F9C BD E3 8D                  ShufAmtLoop: lda DefaultSprOffsets,x
08F9F 9D E4 06                               sta SprDataOffset,x
08FA2 CA                                     dex                       ;do this until they're all set
08FA3 10 F7                                  bpl ShufAmtLoop
08FA5 EE 22 07                  			 inc IRQDisable
08FA8 EE 72 07                  			 inc OperMode_Task         ;increment to next task
08FAB 20 37 F8                  			 jsr SetupTextbox1
08FAE AD 5F 07                  			 lda WorldNumber
08FB1 C9 04                     			   cmp #$04
08FB3 D0 0C                     			   bne +
08FB5 AD 60 07                  			   lda AreaNumber
08FB8 C9 03                     			   cmp #$03
08FBA D0 05                     			   bne +
08FBC A9 01                     			   lda #$01
08FBE 8D 44 07                  			   sta BackgroundColorCtrl
08FC1                           			   
08FC1                           +:			   
08FC1                           			
08FC1 4C CD 86                  			 jmp GetPlayerColors	   ;get player colors
08FC4                           
08FC4                           MusicSelectData:
08FC4 02 01 04 08                     .db WaterMusic, GroundMusic, UndergroundMusic, CastleMusic
08FC8 10 20 5F                        .db CloudMusic, PipeIntroMusic, PSwitchMusic
08FCB                           
08FCB                           GetAreaMusic:
08FCB AD 70 07                               lda OperMode           ;if in title screen mode, leave
08FCE F0 3A                                  beq ExitGetM
08FD0 AD 52 07                               lda AltEntranceControl ;check for specific alternate mode of entry
08FD3 C9 02                                  cmp #$02               ;if found, branch without checking starting position
08FD5 F0 0D                                  beq ChkAreaType        ;from area object data header
08FD7 A0 05                                  ldy #$05               ;select music for pipe intro scene by default
08FD9 AD 10 07                               lda PlayerEntranceCtrl ;check value from level header for certain values
08FDC C9 06                                  cmp #$06
08FDE F0 1C                                  beq StoreMusic         ;load music for pipe intro scene if header
08FE0 C9 07                                  cmp #$07               ;start position either value $06 or $07
08FE2 F0 18                                  beq StoreMusic
08FE4 A0 06                     ChkAreaType: ldy #$06
08FE6 AD 28 60                  			 lda PTimer
08FE9 C9 02                     			 cmp #$02
08FEB 90 05                     			 bcc +
08FED A5 E5                     			 lda AreaMusicBuffer
08FEF F0 0B                     			 beq StoreMusic
08FF1 60                        			 rts
08FF2 AC 4E 07                  +:			 ldy AreaType           ;load area type as offset for music bit
08FF5 AD 43 07                               lda CloudTypeOverride
08FF8 F0 02                                  beq StoreMusic         ;check for cloud type override
08FFA A0 04                                  ldy #$04               ;select music for cloud type level if found
08FFC B9 C4 8F                  StoreMusic:  lda MusicSelectData,y  ;otherwise select appropriate music for level type
08FFF AC 28 60                  			 ldy PTimer
09002 88                        			 dey
09003 88                        			 dey
09004 30 02                     			 bmi +
09006 A9 5F                     			 lda #$5f
09008 85 EC                     +:           sta AreaMusicQueue     ;store in queue and leave
0900A 60                        ExitGetM:    rts
0900B                           
0900B                           ;-------------------------------------------------------------------------------------
0900B                           
0900B                           
0900B                           		
0900B                           WorldNumberOffsetY:
0900B 00                        	.db Wo1-YposLevelOffset
0900C 05                        	.db Wo2-YposLevelOffset
0900D 0A                        	.db Wo3-YposLevelOffset
0900E 0E                        	.db Wo4-YposLevelOffset
0900F 12                        	.db Wo5-YposLevelOffset
09010 16                        	.db Wo6-YposLevelOffset
09011 1A                        	.db Wo7-YposLevelOffset
09012 1F                        	.db Wo8-YposLevelOffset
09013 23                        	.db Wo9-YposLevelOffset
09014                           YposLevelOffset:
09014 B0 B0 00 B0 50            Wo1: .db $b0, $b0, $00, $b0, $50
09019 B0 B0 00 B0 50            Wo2: .db $b0, $b0, $00, $b0, $50
0901E B0 B0 B0 50               Wo3: .db $b0, $b0, $b0, $50
09022 B0 A0 B0 50               Wo4: .db $b0, $a0, $b0, $50
09026 B0 90 B0 50               Wo5: .db $b0, $90, $b0, $50
0902A B0 60 A0 60               Wo6: .db $b0, $60, $a0, $60
0902E B0 B0 00 B0 50            Wo7: .db $b0, $b0, $00, $b0, $50
09033 B0 B0 B0 50               Wo8: .db $b0, $b0, $b0, $50
09037 B0 B0 00 B0 50            Wo9: .db $b0, $b0, $00, $b0, $50
0903C                           
0903C                           Entrance_GameTimerSetup:
0903C AD 1A 07                            lda ScreenLeft_PageLoc
0903F                           		  ;ldy EntrancePage
0903F                           		  ;beq +
0903F                           		  ;lda ScreenLeft_PageLoc      ;set current page for area objects
0903F                           		  ;clc
0903F                           		  ;adc #$01
0903F 85 5F                     +:		  sta Player_PageLoc          ;as page location for player
09041 AC 4E 07                  		  ldy AreaType
09044 B9 50 F9                            lda ForceThing,y            ;store value here
09047 8D 0A 07                            sta VerticalForceDown       ;for fractional movement downwards if necessary
0904A A9 01                               lda #$01                    ;set high byte of player position and
0904C 85 31                               sta PlayerFacingDir         ;set facing direction so that player faces right
0904E 85 A7                               sta Player_Y_HighPos
09050 4A                                  lsr                    ;set player state to on the ground by default
09051 85 1B                               sta Player_State
09053 CE 90 04                            dec Player_CollisionBits    ;initialize player's collision bits
09056 A8                                  tay                    ;initialize halfway page
09057 8C 5B 07                            sty HalfwayPage      
0905A AD 4E 07                  		  lda AreaType                ;check area type
0905D D0 01                               bne ChkStPos                ;if water type, set swimming flag, otherwise do not set
0905F C8                                  iny
09060 8C 04 07                  ChkStPos: sty SwimmingFlag
09063 AE 10 07                            ldx PlayerEntranceCtrl      ;get starting position loaded from header
09066 AC 52 07                            ldy AltEntranceControl      ;check alternate mode of entry flag for 0 or 1
09069 F0 07                               beq SetStPos
0906B C0 01                               cpy #$01
0906D F0 03                               beq SetStPos
0906F BE 33 F9                            ldx AltYPosOffset-2,y       ;if not 0 or 1, override $0710 with new offset in X
09072 B9 31 F9                  SetStPos: lda PlayerStarting_X_Pos,y  ;load appropriate horizontal position
09075 85 78                               sta Player_X_Position       ;and vertical positions for the player, using
09077                           		  ;lda EntrancePage
09077 4C 93 90                  		  jmp +
0907A AD 1C 07                  		  lda ScreenLeft_X_Pos
0907D 18                        		  clc
0907E 69 FF                     		  adc #$ff
09080 8D 1D 07                  		  sta ScreenRight_X_Pos
09083                           		  ;lda ScreenRight_PageLoc
09083                           		  ;adc #$00
09083                           		  ;sta ScreenRight_PageLoc
09083 A9 C0                     		  lda #$c0
09085 8D 3F 07                  		  sta HorizontalScroll
09088 8D AD 63                  		  sta OldHorizontalScroll
0908B AD 1A 07                  		  lda ScreenLeft_PageLoc
0908E 29 01                     		  and #$01
09090 8D 7B 07                  		  sta NameTableSelect
09093                           +:
09093 BD 40 F9                  		  lda PlayerBGPriorityData,x
09096 8D C4 03                            sta Player_SprAttrib        ;set player sprite attributes using offset in X
09099                                     ;lda PlayerStarting_Y_Pos,x  ;AltEntranceControl as offset for horizontal and either $0710
09099 AD 52 07                  		  lda AltEntranceControl
0909C C9 02                     		  cmp #$02
0909E 90 05                     		  bcc +
090A0 BD 37 F9                  		  lda PlayerStarting_Y_Pos,x 
090A3 D0 0F                     		  bne ++
090A5 AD 5F 07                  +:		  lda WorldNumber
090A8 AA                        			 tax
090A9 BD 0B 90                  			 lda WorldNumberOffsetY,x
090AC 18                        			 clc
090AD 6D 60 07                  			 adc AreaNumber
090B0 AA                        			 tax
090B1 BD 14 90                  			 lda YposLevelOffset,x
090B4                           ++:			 
090B4 85 C0                     		  sta Player_Y_Position       ;or value that overwrote $0710 as offset for vertical
090B6                                        
090B6 20 CD 86                            jsr GetPlayerColors         ;get appropriate player palette
090B9 AC 15 07                            ldy GameTimerSetting        ;get timer control value from header
090BC F0 2F                               beq ChkOverR                ;if set to zero, branch (do not use dummy byte for this)
090BE AD 57 07                            lda FetchNewGameTimerFlag   ;do we need to set the game timer? if not, use 
090C1 F0 2A                               beq ChkOverR                ;old game timer setting
090C3 B9 48 F9                            lda GameTimerData,y         ;if game timer is set and game timer flag is also set,
090C6 8D F8 07                            sta GameTimerDisplay        ;use value of game timer control for first digit of game timer
090C9 A9 00                     		  lda #$00
090CB 8D 06 60                  		  sta HurryUp
090CE 8D 91 60                  		  sta pspeed
090D1 8D 92 60                  		  sta pspeeddelay
090D4 8D 74 07                  		  sta DisableScreenFlag
090D7 A9 01                               lda #$01
090D9 8D FA 07                            sta GameTimerDisplay+2      ;set last digit of game timer to 1
090DC B9 4C F9                            lda GameTimerSec,y
090DF 8D F9 07                            sta GameTimerDisplay+1      ;set second digit of game timer
090E2 A9 00                     		  lda #$00
090E4 8D 57 07                            sta FetchNewGameTimerFlag   ;clear flag for game timer reset
090E7 8D 03 06                  		  sta wea32
090EA 8D 9F 07                            sta StarInvincibleTimer     ;clear star mario timer
090ED AC 58 07                  ChkOverR: ldy JoypadOverride          ;if controller bits not set, branch to skip this part
090F0 F0 14                               beq ChkSwimE
090F2 A9 03                               lda #$03                    ;set player state to climbing
090F4 85 1B                               sta Player_State
090F6 A2 00                               ldx #$00                    ;set offset for first slot, for block object
090F8 20 EA F4                            jsr InitBlock_XY_Pos
090FB A9 F0                               lda #$f0                    ;set vertical coordinate for block object
090FD 85 C9                               sta Block_Y_Position
090FF A2 05                               ldx #$05                    ;set offset in X for last enemy object buffer slot
09101 A0 00                               ldy #$00                    ;set offset in Y for object coordinates used earlier
09103 20 BC A1                            jsr Setup_Vine1             ;do a sub to grow vine
09106                           ChkSwimE: 
09106 A9 07                     SetPESub: lda #$07                    ;set to run player entrance subroutine
09108 85 0E                               sta GameEngineSubroutine    ;on the next frame of game engine
0910A A9 05                     		  lda #$05
0910C 8D 2E 60                  		  sta FballCooldown
0910F 8D 7B 60                  		  sta EntranceCoolDown
09112                           putpspeeddisplay:
09112 A9 20                     		  lda #$20
09114 99 01 64                  		  sta VRAM_Buffer1,y
09117 A9 49                     		  lda #$49
09119 99 02 64                  		  sta VRAM_Buffer1+1,y
0911C A9 01                     		  lda #$01
0911E 99 03 64                  		  sta VRAM_Buffer1+2,y
09121                           		  ;lda #$28
09121                           		  ;sta VRAM_Buffer1+3,y
09121 AD 91 60                  		  lda pspeed
09124 99 04 64                  		  sta VRAM_Buffer1+3,y
09127 A9 00                     		  lda #$00
09129 99 05 64                  		  sta VRAM_Buffer1+4,y
0912C 98                        		  tya
0912D 18                        		  clc
0912E 69 04                     		  adc #$04
09130 8D 00 64                  		  sta VRAM_Buffer1_Offset
09133 60                        		  rts
09134                           		 
09134                           FirstSprXPos:
09134 04 00 04 00                     .db $04, $00, $04, $00
09138                           
09138                           FirstSprYPos:
09138 00 04 00 04                     .db $00, $04, $00, $04
0913C                           
0913C                           SecondSprXPos:
0913C 00 08 00 08                     .db $00, $08, $00, $08
09140                           
09140                           SecondSprYPos:
09140 08 00 08 00                     .db $08, $00, $08, $00
09144                           
09144                           FirstSprTilenum:
09144 80 82 81 83                     .db $80, $82, $81, $83
09148                           
09148                           SecondSprTilenum:
09148 81 83 80 82                     .db $81, $83, $80, $82
0914C                           
0914C                           HammerSprAttrib:
0914C 03 03 C3 C3                     .db $03, $03, $c3, $c3
09150                           
09150                           JumpingCoinTiles:
09150 60 61 62 63                     .db $60, $61, $62, $63
09154                           ;-------------------------------------------------------------------------------------
09154                           
09154                           ;page numbers are in order from -1 to -4
09154                           ;HalfwayPageNybbles:
09154                           ;      .db $56, $40
09154                           ;      .db $65, $70
09154                           ;      .db $66, $40
09154                           ;      .db $66, $40
09154                           ;      .db $66, $40
09154                           ;      .db $66, $60
09154                           ;      .db $65, $70
09154                           ;      .db $00, $00
09154                           
09154                           PlayerLoseLife:
09154 EE 74 07                               inc DisableScreenFlag    ;disable screen and sprite 0 check
09157 A9 00                                  lda #$00
09159 8D 22 07                               sta IRQDisable
0915C A9 80                                  lda #Silence             ;silence music
0915E 85 ED                                  sta EventMusicQueue
09160                                        if CHEATS && INFINITE_LIVES
09160                                           jmp StillInGame
09160                                        endif
09160 CE 5A 07                               dec NumberofLives        ;take one life from player
09163 AD 5A 07                  			 lda NumberofLives
09166 C9 FF                     			 cmp #$ff
09168 D0 0B                                  bne StillInGame          ;if player still has lives, branch
0916A A9 00                                  lda #$00
0916C 8D 72 07                               sta OperMode_Task        ;initialize mode task,
0916F A9 03                                  lda #GameOverModeValue   ;switch to game over mode
09171 8D 70 07                               sta OperMode             ;and leave
09174 60                                     rts
09175                           StillInGame: 
09175 A9 00                                  lda #$00                 ;beginning of the level
09177 8D 5B 07                  			 sta HalfwayPage          ;store as halfway page for player
0917A                                        ;jsr TransposePlayers     ;switch players around if 2-player game
0917A 4C D2 91                               jmp ContinueGame         ;continue the game
0917D                           
0917D                           ;-------------------------------------------------------------------------------------
0917D                           
0917D                           GameOverMode:
0917D AD 72 07                        lda OperMode_Task
09180 20 A0 F7                        jsr JumpEngine
09183                                 
09183 89 91                           .dw SetupGameOver
09185 28 86                           .dw ScreenRoutines
09187 9E 91                           .dw RunGameOver
09189                           
09189                           ;-------------------------------------------------------------------------------------
09189                           
09189                           SetupGameOver:
09189 A9 00                           lda #$00                  ;reset screen routine task control for title screen, game,
0918B 8D 3C 07                        sta ScreenRoutineTask     ;and game over modes
0918E 8D 22 07                        sta IRQDisable  ;disable sprite 0 check
09191                                 if GAME_OVER_MENU == 1
09191 85 C0                                 sta ContinueMenuSelect ;set continue as default choice
09193                                 endif
09193 A9 02                           lda #GameOverMusic
09195 85 ED                           sta EventMusicQueue       ;put game over music in secondary queue
09197 EE 74 07                        inc DisableScreenFlag     ;disable screen output
0919A EE 72 07                        inc OperMode_Task         ;set secondary mode to 1
0919D                           	  
0919D 60                              rts
0919E                           
0919E                           ;-------------------------------------------------------------------------------------
0919E                           
0919E                           RunGameOver:
0919E A9 00                           lda #$00              ;reenable screen
091A0 8D 74 07                        sta DisableScreenFlag
091A3                           if GAME_OVER_MENU == 1
091A3                                      ;lda WorldNumber       ;if on world 8, branch on to end the game
091A3                                      ;cmp #FinalWorld
091A3                                      ;beq W8End
091A3 20 4D F8                             jsr GameOverMenu1      ;otherwise run game over menu
091A6 A5 02                     		   lda $02
091A8 F0 03                     		   beq +
091AA 4C D2 91                  		   jmp ContinueGame
091AD 60                        +:		   rts
091AE AD A0 07                      W8End: lda ScreenTimer
091B1 D0 1E                                bne ExRGO
091B3                           else
091B3                                     lda SavedJoypad1Bits  ;check controller for start pressed
091B3                                     and #Start_Button
091B3                                     bne TerminateGame
091B3                                     lda ScreenTimer       ;if not pressed, wait for
091B3                                     bne GameIsOn          ;screen timer to expire
091B3                           endif
091B3                           
091B3                           TerminateGame:
091B3 A9 80                     	  lda #Silence          ;silence music
091B5 85 ED                           sta EventMusicQueue
091B7 AD 5F 07                        lda WorldNumber       ;otherwise put world number of current
091BA 8D 11 7F                        sta ContinueWorld     ;player into secret continue function variable
091BD A9 00                           lda #$00
091BF 8D 72 07                        sta OperMode_Task     ;reset all modes to title screen and
091C2 8D A0 07                        sta ScreenTimer       ;leave
091C5 8D 52 60                  	  sta HardModeFlag
091C8 8D 70 07                        sta OperMode
091CB 8D 88 60                  	  sta dontchecklag
091CE 8D EB 63                  	  sta lagframedetect
091D1                           if GAME_OVER_MENU == 1
091D1                           ExRGO:
091D1                           endif
091D1 60                              rts
091D2                           
091D2                           ContinueGame:
091D2 20 F1 F7                             jsr LoadAreaPointer       ;update level pointer with
091D5 A9 01                                lda #$01                  ;actual world and area numbers, then
091D7 8D 54 07                             sta PlayerSize            ;reset player's size, status, and
091DA EE 57 07                             inc FetchNewGameTimerFlag ;set game timer flag to reload
091DD A9 00                                lda #$00                  ;game timer from header
091DF 8D 47 07                             sta TimerControl          ;also set flag for timers to count again
091E2 8D 56 07                             sta PlayerStatus
091E5 85 0E                                sta GameEngineSubroutine  ;reset task for game core
091E7 8D 72 07                             sta OperMode_Task         ;set modes and leave
091EA A9 01                                lda #$01                  ;if in game over mode, switch back to
091EC 8D 81 60                  		   sta TimerWa
091EF 8D 70 07                             sta OperMode              ;game mode, because game is still on
091F2 8D 3C 07                  		   sta ScreenRoutineTask
091F5 60                        GameIsOn:  rts
091F6                           
091F6                           
091F6                           TransposePlayers:
091F6                           ;           ldx #$06
091F6                           ;TransLoop: lda OnscreenPlayerInfo,x    ;transpose the information
091F6                           ;           pha                         ;of the onscreen player
091F6                           ;           lda OffscreenPlayerInfo,x   ;with that of the offscreen player
091F6                           ;           sta OnscreenPlayerInfo,x
091F6                           ;           pla
091F6                           ;           sta OffscreenPlayerInfo,x
091F6                           ;           dex
091F6                           ;           bpl TransLoop
091F6                           		   ;sec
091F6                           		   ;lda NumberOfPlayers       ;if only a 1 player game, leave
091F6                                      ;beq ExTrans
091F6                                       ;clear carry flag to get game going
091F6                           ExTrans:   ;rts
091F6                           
091F6                           ;-------------------------------------------------------------------------------------
091F6                           
091F6                           
091F6                           ;-------------------------------------------------------------------------------------
091F6                           
091F6                           ; These two includes aren't quite as self-contained as They could be
091F6                           LevelDataStart:
091F6                           if IMPORT_LEVELS == 1
091F6                               .incbin LEVEL_FILE, OriginalLevelDataStart - $8000 + $10, $1226 ; 0x1cc4, 0x1226
091F6                           
091F6                               WorldAddrOffsets = LevelDataStart
091F6                               AreaAddrOffsets = WorldAddrOffsets + $08
091F6                               EnemyAddrHOffsets = AreaAddrOffsets + $24
091F6                               EnemyDataAddrLow = EnemyAddrHOffsets + $04
091F6                               EnemyDataAddrHigh = EnemyDataAddrLow + $22
091F6                               AreaDataHOffsets = EnemyDataAddrHigh + $22
091F6                               AreaDataAddrLow = AreaDataHOffsets + $04
091F6                               AreaDataAddrHigh = AreaDataAddrLow + $22
091F6                           else
091F6                               ;include tools\output.txt
091F6                               ;include code\levelData.asm
091F6                               ;include code\levelData_great.asm
091F6                           -   
091F6                           endif
091F6 60                        rts
091F7                           ;-------------------------------------------------------------------------------------
091F7                           
091F7                           ;indirect jump routine called when
091F7                           ;OperMode is set to 1
091F7                           GameMode:
091F7 A9 00                           lda #$00
091F9 8D 5F 60                  	  sta bocata
091FC 8D 61 60                  	  sta bocata3
091FF AD 72 07                  	  lda OperMode_Task
09202 20 A0 F7                        jsr JumpEngine
09205                           
09205 0F 8E                           .dw InitializeArea
09207 28 86                           .dw ScreenRoutines
09209 60 8F                           .dw SecondaryGameSetup
0920B 0D 92                           .dw GameCoreRoutine
0920D                           
0920D                           ;-------------------------------------------------------------------------------------
0920D                           
0920D                           GameCoreRoutine:
0920D                           	  ;lda CurrentPlayer
0920D                                 ;and #%00000001
0920D                                 ;tax
0920D                                 
0920D                                 ;ldx CurrentPlayer          ;get which player is on the screen
0920D                                 ;lda SavedJoypadBits;,x      ;use appropriate player's controller bits
0920D                                 ;sta SavedJoypadBits        ;as the master controller bits
0920D 20 7B 95                        jsr GameRoutines           ;execute one of many possible subs
09210 AD 72 07                        lda OperMode_Task          ;check major task of operating mode
09213 C9 03                           cmp #$03                   ;if we are supposed to be here,
09215 B0 01                           bcs GameEngine             ;branch to the game engine itself
09217 60                              rts
09218                           
09218                           GameEngine:
09218 AD 56 07                  			  lda PlayerStatus           ;check player's status
0921B C9 02                     			  cmp #$02
0921D D0 03                     			  bne +        				 ;if not fiery, branch
0921F 20 C9 9E                  				  jsr ProcFireball_Bubble    ;process fireballs and air bubbles
09222 A2 00                     +:            ldx #$00
09224                           
09224                           
09224 86 08                     -:		      stx ObjectOffset           ;put incremented offset in X as enemy object offset
09226 20 5B C2                                jsr EnemiesAndLoopsCore    ;process enemy objects
09229 BD 10 01                  			  lda FloateyNum_Control,x   ;load control for floatey number
0922C F0 03                     			  beq +
0922E 20 C5 84                                jsr FloateyNumbersRoutine  ;process floatey numbers
09231 E8                        +:            inx						 ;
09232 E0 06                                   cpx #$06                   ;do these two subroutines until the whole buffer is done
09234 D0 EE                                   bne -
09236                                                          ;set offsets for player-specific variables
09236 A9 00                     			  lda #$00
09238 AA                        			  tax ;save offscreen bits offset to stack for now
09239 48                        			  pha
0923A 20 67 AE                  			  jsr GetXOffscreenBits  ;do subroutine here
0923D A8                        			  tay
0923E B9 24 BD                  			  lda MSBtoLSB,y
09241 85 00                     			  sta $00                ;store here
09243 20 BB AE                  			  jsr GetYOffscreenBits
09246 A8                        			  tay
09247 B9 24 BE                  		      lda LSBtoMSB,y
0924A 05 00                     			  ora $00                     ;mask together with previously saved low nybble
0924C 85 00                     			  sta $00                     ;store both here
0924E 68                        			  pla                         ;get offscreen bits offset from stack
0924F A8                        			  tay
09250 A5 00                     			  lda $00                     ;get value here and store elsewhere
09252 99 D0 03                  			  sta SprObject_OffscrBits,y
09255                           			  ;ldx ObjectOffset
09255 A2 00                                   ldx #$00      ;set offsets for relative cooordinates
09257 A0 00                     			  ldy #$00      ;routine to correspond to player object
09259 B5 C0                     			  lda SprObject_Y_Position,x  ;load vertical coordinate low
0925B 99 B8 03                  			  sta SprObject_Rel_YPos,y    ;store here
0925E B5 78                     		   	  lda SprObject_X_Position,x  ;load horizontal coordinate
09260 38                        		      sec                         ;subtract left edge coordinate
09261 ED 1C 07                  			  sbc ScreenLeft_X_Pos
09264 99 AD 03                  			  sta SprObject_Rel_XPos,y    ;store result here
09267 A6 08                     			  ldx ObjectOffset 
09269 20 1C B5                                jsr PlayerGfxHandler       ;draw the player
0926C 20 53 AB                                jsr BlockObjMT_Updater     ;replace block objects with metatiles if necessary
0926F                           			  
0926F A2 01                                   ldx #$01
09271 86 08                                   stx ObjectOffset           ;set offset for second
09273 20 65 A9                                jsr BlockObjectsCore       ;process second block object
09276 CA                        			  dex
09277 86 08                                   stx ObjectOffset           ;set offset for first
09279 20 65 A9                                jsr BlockObjectsCore       ;process first block object
0927C 20 84 A4                                jsr MiscObjectsCore        ;process misc objects (hammer, jumping coins)
0927F 20 5D A2                                jsr ProcessCannons         ;process bullet bill cannons
09282                           			  
09282                           			  ;lda FramesMissed
09282                           			  ; beq +
09282                           			  ; dec FramesMissed
09282                           +:			   
09282                           			  ;lda AreaType
09282                           			  ;bne +
09282                                         ;jsr ProcessWhirlpools      ;process whirlpools
09282 AD A8 60                  +:            lda WarpZoneCheck
09285 F0 16                     			  beq +
09287 AD A6 60                  			  lda ScrollLockPageLoc
0928A C5 FA                     			  cmp $fa
0928C D0 0F                     			  bne + 
0928E A5 FF                     			  lda $ff
09290 29 0F                     			  and #$0f
09292 CD A7 60                  			  cmp ScrollLockColumnPos
09295 D0 06                     			  bne +
09297 EE D6 06                  			  inc WarpZoneControl
0929A 20 EC B9                  			  jsr DoWarpZone
0929D AE CC 7F                  +:		      ldx $7fcc
092A0 B5 15                     -:        	  lda Enemy_ID,x
092A2 C9 30                     			  cmp #FlagpoleFlagObject   ;if flagpole flag not found,
092A4 F0 08                     			  beq +             ;branch to leave
092A6 E8                        			  inx
092A7 E0 06                     			  cpx #$06
092A9 90 F5                     			  bcc -
092AB 4C B1 92                  			  jmp ++
092AE 20 4E A1                  +:         	  jsr FlagpoleRoutine        ;process the flagpole
092B1                           ++:			  
092B1                           			  if !(CHEATS && CHEAT_REMOVE_TIMER)
092B1 20 8F A0                                    jsr RunGameTimer           ;count down the game timer
092B4                                         endif
092B4 A5 A7                     			  lda Player_Y_HighPos
092B6 C9 02                                   cmp #$02                   ;if player is below the screen, don't bother with the music
092B8 10 3A                                   bpl NoChgMus
092BA                           			  
092BA AD 28 60                  			  lda PTimer
092BD C9 01                     			  cmp #$01
092BF D0 03                     			  bne +
092C1 20 CB 8F                  			  jsr GetAreaMusic           ;to re-attain appropriate level music
092C4 AD B8 7F                  +:            lda $7fb8
092C7 F0 03                     			  beq +
092C9 20 CB A6                  			  jsr idk
092CC AD 9F 07                  +:			  lda StarInvincibleTimer    ;if star mario invincibility timer at zero,
092CF D0 10                                   bne ++              ;skip this part
092D1 AE 50 60                  			  ldx WaitForReset
092D4 F0 30                     			  beq ClrPlrPal
092D6 A2 00                     			  ldx #$00
092D8 8E 25 60                  			  stx EnemyDefeatPitch
092DB 8E 50 60                  			  stx WaitForReset
092DE 4C 06 93                  			  jmp ClrPlrPal
092E1 C9 01                     ++:			  cmp #$01
092E3 D0 03                     			  bne +
092E5 8D 50 60                  			  sta WaitForReset
092E8 C9 04                     +:            cmp #$04
092EA D0 08                                   bne NoChgMus               ;if not yet at a certain point, continue
092EC AD 7F 07                                lda IntervalTimerControl   ;if interval timer not yet expired,
092EF D0 03                                   bne NoChgMus               ;branch ahead, don't bother with the music
092F1 20 CB 8F                                jsr GetAreaMusic           ;to re-attain appropriate level music
092F4 AC 9F 07                  NoChgMus:     ldy StarInvincibleTimer    ;get invincibility timer
092F7 A5 09                                   lda FrameCounter           ;get frame counter
092F9 C0 04                                   cpy #$04                   ;if timer still above certain point,
092FB B0 02                                   bcs CycleTwo               ;branch to cycle player's palette quickly
092FD 4A                                      lsr                        ;otherwise, divide by 8 to cycle every eighth frame
092FE 4A                                      lsr
092FF 4A                        CycleTwo:     lsr                        ;if branched here, divide by 2 to cycle every other frame
09300 20 BF 98                                jsr CyclePlayerPalette     ;do sub to cycle the palette (note: shares fire flower code)
09303 4C 09 93                                jmp SaveAB                 ;then skip this sub to finish up the game engine
09306 20 D1 98                  ClrPlrPal:    jsr ResetPalStar           ;do sub to clear player's palette bits in attributes
09309 A5 0A                     SaveAB:       lda A_B_Buttons            ;save current A and B button
0930B 85 0D                                   sta PreviousA_B_Buttons    ;into temp variable to be used on next frame
0930D A9 00                                   lda #$00
0930F 85 0C                                   sta Left_Right_Buttons     ;nullify left and right buttons temp variable
09311 AD 73 07                  UpdScrollVar: lda VRAM_Buffer_AddrCtrl
09314 C9 06                                   cmp #$06                   ;if vram address controller set to 6 (one of two $0341s)
09316 F0 32                                   beq ExitEng                ;then branch to leave
09318 AD 1F 07                                lda AreaParserTaskNum      ;otherwise check number of tasks
0931B D0 2A                                   bne RunParser
0931D AD FF 06                  			  lda Player_X_Scroll
09320 30 12                     			  bmi ++
09322 AD 3D 07                  			  lda ScrollThirtyTwo        ;get horizontal scroll in 0-31 or $00-$20 range
09325 C9 20                                   cmp #$20                   ;check to see if exceeded $21
09327 30 21                                   bmi ExitEng                ;branch to leave if not
09329 AD 3D 07                                lda ScrollThirtyTwo
0932C E9 20                                   sbc #$20                   ;otherwise subtract $20 to set appropriately
0932E 8D 3D 07                                sta ScrollThirtyTwo        ;and store
09331 4C 42 93                  			  jmp +
09334 AD 3D 07                  ++:			  lda ScrollThirtyTwo
09337 10 11                     			  bpl ExitEng
09339 AD 3D 07                  			  lda ScrollThirtyTwo
0933C 18                        			  clc
0933D 69 20                     			  adc #$20
0933F 8D 3D 07                  			  sta ScrollThirtyTwo
09342 A9 00                     +:            lda #$00                   ;reset vram buffer offset used in conjunction with
09344 8D E0 64                                sta VRAM_Buffer2_Offset    ;level graphics buffer at $0341-$035f
09347 4C 12 F8                  RunParser:    jmp AreaParserTaskHandler1  ;update the name table with more level graphics
0934A 60                        ExitEng:      rts                        ;and after all that, we're finally done!
0934B                           
0934B                           
0934B                           ;-------------------------------------------------------------------------------------
0934B                           
0934B                           ScrollHandler:
0934B AD FF 06                              lda Player_X_Scroll       ;load value saved here
0934E 18                                    clc
0934F 6D A1 03                              adc Platform_X_Scroll     ;add value used by left/right platforms
09352 6D E8 63                  			adc SideCollisionAdder
09355 8D FF 06                              sta Player_X_Scroll       ;save as new value here to impose force on scroll
09358 D0 03                     			bne +
0935A 8D 75 07                  			sta ScrollAmount
0935D AD 23 07                  +:			lda ScrollLock            ;check scroll lock flag
09360 0D A4 60                  			ora dontscroll
09363 D0 25                                 bne InitScrlAmt1           ;skip a bunch of code here if set
09365 A0 00                     			ldy #$00
09367 AD E0 63                  			lda AutoScrollFlag
0936A F0 25                     		    beq +
0936C A5 0E                     			lda GameEngineSubroutine
0936E C9 05                     			cmp #$05
09370 F0 1F                     			beq +
09372 C9 08                     			cmp #$08
09374 D0 17                     			bne ++
09376 A0 01                     			ldy #$01
09378 8C FF 06                  		    sty Player_X_Scroll
0937B AD 55 07                  			lda Player_Pos_ForScroll
0937E F0 0E                     			beq +++
09380 88                        			dey
09381 C9 FF                     			cmp #$ff
09383 D0 0C                     			bne +
09385 A2 00                     			ldx #$00
09387 4C BE D8                  			jmp KillPlayer
0938A 4C 3E 95                  InitScrlAmt1: jmp InitScrlAmt
0938D 60                        ++:			rts
0938E AC 75 07                  +++: 		ldy ScrollAmount
09391 8C E1 63                  +:			sty AutoScrollFlag2
09394 AD E0 63                  			lda AutoScrollFlag
09397 D0 21                     			bne ++
09399 AD 55 07                              lda Player_Pos_ForScroll
0939C C9 6D                                 cmp #$6d                  ;check player's horizontal screen position
0939E 90 0C                                 bcc +                     ;if less than 80 pixels to the right, branch
093A0 C9 78                     			cmp #$78
093A2 B0 16                     			bcs ++
093A4 4C 8A 93                  			jmp InitScrlAmt1
093A7 AD 85 07                              lda SideCollisionTimer    ;if timer related to player's side collision
093AA D0 DE                                 bne InitScrlAmt1           ;not expired, branch
093AC AC FF 06                  +:          ldy Player_X_Scroll       ;get value and decrement by one
093AF 88                                    dey                       ;if value originally set to zero or otherwise
093B0 10 D8                     			bpl InitScrlAmt1
093B2 A9 00                     			lda #$00
093B4 8D A2 60                  			sta scrolldir
093B7 4C 19 94                  			jmp +++
093BA AC FF 06                  ++:			ldy Player_X_Scroll
093BD 88                        			dey
093BE 30 CA                     			bmi InitScrlAmt1
093C0 A9 01                     			lda #$01
093C2 8D A2 60                  			sta scrolldir
093C5 AD 1A 07                  			lda ScreenLeft_PageLoc
093C8 18                        			clc
093C9 69 67                     			adc #$67
093CB CD A6 60                  			cmp ScrollLockPageLoc
093CE 90 49                     			bcc +++
093D0 F0 02                     			beq ++
093D2 B0 42                     			bcs +
093D4 AD 1C 07                  ++:			lda ScreenLeft_X_Pos
093D7 4A                        			lsr
093D8 4A                        			lsr
093D9 4A                        			lsr
093DA 4A                        			lsr
093DB 29 0F                     			and #$0f
093DD CD A7 60                  			cmp ScrollLockColumnPos
093E0 90 37                     			bcc +++
093E2 AD 70 07                  			lda OperMode
093E5 C9 02                     			cmp #$02
093E7 F0 A1                     			beq InitScrlAmt1
093E9 AD 3F 07                  			lda HorizontalScroll
093EC 29 F0                     			and #$f0
093EE 8D 3F 07                  			sta HorizontalScroll
093F1 8D AD 63                  			sta OldHorizontalScroll
093F4 8D 1C 07                  			sta ScreenLeft_X_Pos
093F7 AD A6 60                  			  lda ScrollLockPageLoc
093FA 38                        			  sec
093FB E9 67                     			  sbc #$67
093FD 8D 1A 07                  			  sta ScreenLeft_PageLoc
09400 AD 1C 07                  			  lda ScreenLeft_X_Pos
09403 18                        			  clc
09404 69 FF                     			  adc #$ff
09406 8D 1D 07                  			  sta ScreenRight_X_Pos
09409 AD 1A 07                  			  lda ScreenLeft_PageLoc
0940C 69 00                     			  adc #$00
0940E 8D 1B 07                  			  sta ScreenRight_PageLoc
09411 A9 00                     			lda #$00
09413 8D 75 07                  			sta ScrollAmount
09416 4C 8A 93                  +:			jmp InitScrlAmt1
09419 A0 00                     +++:		ldy #$00
0941B AD 1A 07                  			lda ScreenEdge_PageLoc
0941E 0D 1B 07                  			ora ScreenRight_PageLoc
09421 D0 0E                     			bne +
09423 AD 1D 07                  			lda ScreenRight_X_Pos
09426 2D 1C 07                  			and ScreenLeft_X_Pos
09429 D0 06                     			bne +
0942B AD FF 06                  			lda Player_X_Scroll
0942E B0 01                     			bcs +
09430 C8                        			iny
09431 8C DF 63                  +:			sty ScrollLeftFlag
09434 AD 1A 07                  			lda ScreenLeft_PageLoc
09437 18                        			clc
09438 69 66                     			adc #$66
0943A CD A9 60                  			cmp ScrollLeftLock
0943D B0 22                     			bcs ++
0943F EE DF 63                  +:			inc ScrollLeftFlag
09442 A9 00                     			lda #$00
09444 8D 3F 07                  			sta HorizontalScroll
09447 8D 75 07                  			sta ScrollAmount
0944A AD A9 60                  			lda ScrollLeftLock
0944D 29 01                     			and #$01
0944F 8D 7B 07                  			sta NameTableSelect
09452 AC FF 06                  +:          ldy Player_X_Scroll       ;get value and decrement by one
09455 88                                    dey                       ;if value originally set to zero or otherwise
09456 10 09                     			bpl ++          	      ;negative for left movement, branch
09458 4C 3E 95                  			jmp InitScrlAmt
0945B 4C 10 95                  oooooooooooooo: jmp llorica
0945E 4C EA 94                  ohnoeswillyrex1: jmp ohnoeswillyrex
09461 A9 00                     ++:         lda #$00
09463 8D DE 63                  			sta WasLocked
09466 C8                        			iny
09467 C0 02                                 cpy #$02                  ;if value $01, branch and do not decrement
09469 90 01                                 bcc ChkNearMid
0946B 88                                    dey                       ;otherwise decrement by one
0946C                           ChkNearMid: 
0946C AC FF 06                              ldy Player_X_Scroll       ;otherwise get original value undecremented
0946F                           
0946F                           ScrollScreen:
0946F                                         ;lda IRQAckFlag
0946F                           			  ;bne ScrollScreen
0946F AD 72 07                  			  lda OperMode_Task
09472 C9 02                     			  cmp #$02
09474 F0 E8                     			  beq ohnoeswillyrex1
09476 AD FF 06                  			  lda Player_X_Scroll
09479 F0 E0                     			  beq oooooooooooooo
0947B 10 E1                     			  bpl ohnoeswillyrex1
0947D 98                        			  tya
0947E 8D 75 07                                sta ScrollAmount          ;save value here
09481 18                                      clc
09482 6D 3D 07                  		      adc ScrollThirtyTwo       ;add to value already set here
09485 8D 3D 07                                sta ScrollThirtyTwo       ;save as new value here
09488 98                                      tya
09489 18                                      clc
0948A 6D 1C 07                  			  adc ScreenLeft_X_Pos      ;add to left side coordinate
0948D 8D 1C 07                                sta ScreenLeft_X_Pos      ;save as new left side coordinate
09490 8D 3F 07                  			  sta HorizontalScroll      ;save here also
09493 AD 1A 07                                lda ScreenLeft_PageLoc
09496 E9 00                                   sbc #$00                  ;add carry to page location for left
09498 8D 1A 07                                sta ScreenLeft_PageLoc    ;side of the screen
0949B 29 01                     			  and #$01                  ;get LSB of page location
0949D 8D 7B 07                                sta NameTableSelect                  ;save as temp variable for PPU register 1 mirror
094A0 AD 1A 07                  			  lda ScreenLeft_PageLoc
094A3 18                        			  clc
094A4 69 66                     			  adc #$66
094A6 CD A9 60                  			  cmp ScrollLeftLock
094A9 B0 27                     			  bcs +++
094AB A9 00                     			  lda #$00
094AD 8D 3F 07                  			  sta HorizontalScroll
094B0 8D 75 07                  			  sta ScrollAmount
094B3 8D 1C 07                  			  sta ScreenLeft_X_Pos
094B6 AD A9 60                  			  lda ScrollLeftLock
094B9 38                        			  sec
094BA E9 66                     			  sbc #$66
094BC 8D 1A 07                  			  sta ScreenLeft_PageLoc
094BF 8D 1B 07                  			  sta ScreenRight_PageLoc
094C2 A9 FF                     			  lda #$ff
094C4 8D 1D 07                  			  sta ScreenRight_X_Pos
094C7 EE DF 63                  			  inc ScrollLeftFlag
094CA AD A9 60                  			  lda ScrollLeftLock
094CD 29 01                     			  and #$01
094CF 8D 7B 07                  			  sta NameTableSelect
094D2 AD 36 60                  +++:          lda ParallaxOffset
094D5 F0 0B                     			  beq +++
094D7 AD 75 07                  			  lda ScrollAmount
094DA F0 0B                     			  beq ++++
094DC CE 36 60                  			  dec ParallaxOffset
094DF 4C E7 94                  			  jmp ++++
094E2 A0 17                     +++:		  ldy #$17
094E4 8C 36 60                  			  sty ParallaxOffset
094E7                           ++++:         ;ldy FramesMissed
094E7                           			  ;beq ++
094E7                           			  ;lda ParallaxOffset
094E7                           			  ;beq ++
094E7                           			  ;lda ScrollAmount
094E7                           			  ;beq ++
094E7                           			  ;dec ParallaxOffset
094E7                           ++:
094E7 4C 10 95                  			  jmp ++    
094EA                           ohnoeswillyrex:			  
094EA 98                        +:			  tya
094EB 8D 75 07                                sta ScrollAmount          ;save value here
094EE 18                                      clc
094EF 6D 3D 07                                adc ScrollThirtyTwo       ;add to value already set here
094F2 8D 3D 07                                sta ScrollThirtyTwo       ;save as new value here
094F5 98                                      tya
094F6 18                                      clc
094F7 6D 1C 07                                adc ScreenLeft_X_Pos      ;add to left side coordinate
094FA 8D 1C 07                                sta ScreenLeft_X_Pos      ;save as new left side coordinate
094FD EE 36 60                  			  inc ParallaxOffset
09500                           			  ;ldy FramesMissed
09500                           			 ;beq +
09500                           			  ;inc ParallaxOffset
09500 8D 3F 07                   +:           sta HorizontalScroll      ;save here also
09503 AD 1A 07                                lda ScreenLeft_PageLoc
09506 69 00                                   adc #$00                  ;add carry to page location for left
09508 8D 1A 07                                sta ScreenLeft_PageLoc    ;side of the screen
0950B 29 01                                   and #$01                  ;get LSB of page location
0950D 8D 7B 07                                sta NameTableSelect                  ;save as temp variable for PPU register 1 mirror
09510                           llorica:
09510 AD 75 07                  ++:			  lda ScrollAmount
09513 F0 15                     			  beq ++
09515 10 06                     			  bpl +
09517 A9 00                     			  lda #$00
09519 38                        			  sec
0951A ED 75 07                  			  sbc ScrollAmount
0951D 8D 34 60                  +:			  sta temp9
09520 AD 98 60                  			  lda ScrollThirtyTwoOG
09523 18                        			  clc
09524 6D 34 60                  			  adc temp9
09527 8D 98 60                  			  sta ScrollThirtyTwoOG
0952A AD 1C 07                  ++:			  lda ScreenLeft_X_Pos    ;get coordinate of screen's left boundary
0952D 18                        			  clc
0952E 69 FF                     			  adc #$ff                ;add 255 pixels
09530 8D 1D 07                  			  sta ScreenRight_X_Pos   ;store as coordinate of screen's right boundary
09533 AD 1A 07                  			  lda ScreenLeft_PageLoc  ;get page number where left boundary is
09536 69 00                     			  adc #$00                ;add carry from before
09538 8D 1B 07                  			  sta ScreenRight_PageLoc ;store as page number where right boundary is
0953B 4C 43 95                                jmp ChkPOffscr            ;skip this part
0953E A9 00                     InitScrlAmt:  lda #$00
09540 8D 75 07                                sta ScrollAmount          ;initialize value here
09543 A2 00                     ChkPOffscr:   ldx #$00                  ;set X for player offset
09545 20 67 AE                                jsr GetXOffscreenBits     ;get horizontal offscreen bits for player
09548 85 00                                   sta $00                   ;save them here
0954A A0 00                                   ldy #$00                  ;load default offset (left side)
0954C 0A                                      asl                       ;if d7 of offscreen bits are set,
0954D B0 07                                   bcs KeepOnscr             ;branch with default offset
0954F C8                                      iny                         ;otherwise use different offset (right side)
09550 A5 00                                   lda $00
09552 29 20                                   and #%00100000              ;check offscreen bits for d5 set
09554 F0 1B                                   beq InitPlatScrl            ;if not set, branch ahead of this part
09556 B9 1C 07                  KeepOnscr:    lda ScreenEdge_X_Pos,y      ;get left or right side coordinate based on offset
09559 38                                      sec
0955A F9 77 95                                sbc X_SubtracterData,y      ;subtract amount based on offset
0955D 85 78                                   sta Player_X_Position       ;store as player position to prevent movement further
0955F B9 1A 07                                lda ScreenEdge_PageLoc,y    ;get left or right page location based on offset
09562 E9 00                                   sbc #$00                    ;subtract borrow
09564 85 5F                                   sta Player_PageLoc          ;save as player's page location
09566 A5 0C                                   lda Left_Right_Buttons      ;check saved controller bits
09568 D9 79 95                                cmp OffscrJoypadBitsData,y  ;against bits based on offset
0956B F0 04                                   beq InitPlatScrl            ;if not equal, branch
0956D A9 00                                   lda #$00
0956F 85 49                                   sta Player_X_Speed          ;otherwise nullify horizontal speed of player
09571 A9 00                     InitPlatScrl: lda #$00                    ;nullify platform force imposed on scroll
09573 8D A1 03                                sta Platform_X_Scroll
09576 60                                      rts
09577                           
09577                           X_SubtracterData:
09577 00 10                           .db $00, $10
09579                           
09579                           OffscrJoypadBitsData:
09579 01 02                           .db $01, $02
0957B                           
0957B                           ;-------------------------------------------------------------------------------------
0957B                           
0957B                           ;-------------------------------------------------------------------------------------
0957B                           
0957B                           GameRoutines:
0957B A5 0E                           lda GameEngineSubroutine  ;run routine based on number (a few of these routines are   
0957D 20 A0 F7                        jsr JumpEngine            ;merely placeholders as conditions for other routines)
09580                           
09580 3C 90                           .dw Entrance_GameTimerSetup 	;00
09582 88 97                           .dw Vine_AutoClimb			;01
09584 25 98                           .dw SideExitPipeEntry			;02
09586 A6 97                           .dw VerticalPipeEntry			;03
09588 DA 98                           .dw FlagpoleSlide				;04
0958A 10 99                           .dw PlayerEndLevel			;05
0958C 54 91                           .dw PlayerLoseLife			;06
0958E 9C 95                           .dw PlayerEntrance			;07
09590 3C 96                           .dw PlayerCtrlRoutine			;08
09592 51 98                           .dw PlayerChangeSize			;09
09594 63 98                           .dw PlayerInjuryBlink			;0a
09596 93 98                           .dw PlayerDeath				;0b
09598 B4 98                           .dw PlayerFireFlower			;0c
0959A D5 97                     	  .dw UpsideDownPipeEntry		;0d
0959C                           	  ;.dw DoorEntry				;0e
0959C                           
0959C                           ;-------------------------------------------------------------------------------------
0959C                           PlayerEntrance:
0959C AD 52 07                              lda AltEntranceControl    ;check for mode of alternate entry
0959F C9 02                                 cmp #$02
095A1 F0 3B                                 beq EntrMode2             ;if found, branch to enter from pipe or with vine
095A3 A9 00                                 lda #$00       
095A5 A4 C0                                 ldy Player_Y_Position     ;if vertical position above a certain
095A7 C0 30                                 cpy #$30                  ;point, nullify controller bits and continue
095A9 90 12                                 bcc AutoControlPlayer1     ;with player movement code, do not return
095AB AD 10 07                              lda PlayerEntranceCtrl    ;check player entry bits from header
095AE C9 06                                 cmp #$06
095B0 F0 04                                 beq ChkBehPipe            ;if set to 6 or 7, execute pipe intro code
095B2 C9 07                                 cmp #$07                  ;otherwise branch to normal entry
095B4 D0 60                                 bne PlayerRdy
095B6 AD C4 03                  ChkBehPipe: lda Player_SprAttrib      ;check for sprite attributes
095B9 D0 15                                 bne IntroEntr             ;branch if found
095BB A9 01                                 lda #$01
095BD                           AutoControlPlayer1:
095BD EE 2D 60                  			inc peo
095C0 AC 2D 60                  			ldy peo
095C3 C8                        			iny
095C4 D0 07                     			bne +
095C6 8C 2D 60                  			sty peo
095C9 A9 08                     			lda #$08
095CB 85 0E                     			sta GameEngineSubroutine
095CD 4C 39 96                  +:          jmp AutoControlPlayer     ;force player to walk to the right
095D0 20 3E 98                  IntroEntr:  jsr EnterSidePipe         ;execute sub to move player to the right
095D3 CE DE 06                              dec ChangeAreaTimer       ;decrement timer for change of area
095D6 D0 60                                 bne ExitEntr              ;branch to exit if not yet expired
095D8 EE 69 07                              inc DisableIntermediate   ;set flag to skip world and lives display
095DB 4C 5C 99                              jmp NextArea              ;jump to increment to next area and set modes
095DE AD 58 07                  EntrMode2:  lda JoypadOverride        ;if controller override bits set here,
095E1 D0 0C                                 bne VineEntr              ;branch to enter with vine
095E3 A9 FF                                 lda #$ff                  ;otherwise, set value here then execute sub
095E5 20 CF 97                              jsr MovePlayerYAxis       ;to move player upwards (note $ff = -1)
095E8 A5 C0                                 lda Player_Y_Position     ;check to see if player is at a specific coordinate
095EA C9 91                                 cmp #$91                  ;if player risen to a certain point (this requires pipes
095EC 90 28                                 bcc PlayerRdy             ;to be at specific height to look/function right) branch
095EE 60                                    rts                       ;to the last part, otherwise leave
095EF AD 99 03                  VineEntr:   lda VineHeight
095F2 C9 60                                 cmp #$60                  ;check vine height
095F4 D0 42                                 bne ExitEntr              ;if vine not yet reached maximum height, branch to leave
095F6 A5 C0                                 lda Player_Y_Position     ;get player's vertical coordinate
095F8 C9 99                                 cmp #$99                  ;check player's vertical coordinate against preset value
095FA A0 00                                 ldy #$00                  ;load default values to be written to 
095FC A9 01                                 lda #$01                  ;this value moves player to the right off the vine
095FE 90 0A                                 bcc OffVine               ;if vertical coordinate < preset value, use defaults
09600 A9 03                                 lda #$03
09602 85 1B                                 sta Player_State          ;otherwise set player state to climbing
09604 C8                                    iny                       ;increment value in Y
09605 A9 08                                 lda #$08                  ;set block in block buffer to cover hole, then 
09607 8D B4 66                              sta Block_Buffer_1+$b4    ;use same value to force player to climb
0960A 8C 16 07                  OffVine:    sty DisableCollisionDet   ;set collision detection disable flag
0960D 20 39 96                              jsr AutoControlPlayer     ;use contents of A to move player up or right, execute sub
09610 A5 78                                 lda Player_X_Position
09612 C9 48                                 cmp #$48                  ;check player's horizontal position
09614 90 22                                 bcc ExitEntr              ;if not far enough to the right, branch to leave
09616 A9 08                     PlayerRdy:  lda #$08                  ;set routine to be executed by game engine next frame
09618 85 0E                                 sta GameEngineSubroutine
0961A A9 01                                 lda #$01                  ;set to face player to the right
0961C 85 31                                 sta PlayerFacingDir
0961E 4A                                    lsr                       ;init A
0961F 8D 52 07                              sta AltEntranceControl    ;init mode of entry
09622 8D 16 07                              sta DisableCollisionDet   ;init collision detection disable flag
09625 8D 58 07                              sta JoypadOverride        ;nullify controller override bits
09628 A9 05                     			lda #$05
0962A 8D 2E 60                  	   	    sta FballCooldown
0962D 8D 7B 60                  			sta EntranceCoolDown
09630 A9 00                     			lda #$00
09632 8D 7C 60                  			sta DontDecPT
09635 8D 2D 60                  			sta peo
09638 60                        ExitEntr:   rts                       ;leave!
09639                           
09639                           ;-------------------------------------------------------------------------------------
09639                           ;$07 - used to hold upper limit of high byte when player falls down hole
09639                           
09639                           AutoControlPlayer:
09639 8D FC 06                        sta SavedJoypadBits         ;override controller bits with contents of A if executing here
0963C                           PlayerCtrlRoutine:
0963C A5 0E                                 lda GameEngineSubroutine    ;check task here
0963E C9 0B                                 cmp #$0b                    ;if certain value is set, branch to skip controller bit loading
09640 F0 44                                 beq SizeChk
09642 AD 04 07                  			lda SwimmingFlag
09645 F0 13                     			beq SaveJoyp
09647 A5 A7                     			lda Player_Y_HighPos
09649 F0 0F                     			beq SaveJoyp
0964B A8                                    tay
0964C 88                                    dey                         ;if not in vertical area between
0964D D0 06                                 bne DisJoyp                 ;status bar and bottom, branch	
0964F A5 C0                                 lda Player_Y_Position
09651 C9 FF                                 cmp #$ff                    ;if nearing the bottom of the screen or
09653 90 05                     			bcc SaveJoyp                ;not in the vertical area between status bar or bottom,
09655 A9 00                     DisJoyp:    lda #$00                    ;disable controller bits
09657 8D FC 06                              sta SavedJoypadBits
0965A AD FC 06                  SaveJoyp:   lda SavedJoypadBits         ;otherwise store A and B buttons in $0a
0965D 29 C0                                 and #%11000000
0965F 85 0A                                 sta A_B_Buttons
09661 AD FC 06                              lda SavedJoypadBits         ;store left and right buttons in $0c
09664 29 03                                 and #%00000011
09666 85 0C                                 sta Left_Right_Buttons
09668 A5 0B                     			lda Up_Down_Buttons
0966A 8D B8 63                  			sta PreviousUp_Down_Buttons
0966D AD FC 06                              lda SavedJoypadBits         ;store up and down buttons in $0b
09670 29 0C                                 and #%00001100
09672 85 0B                                 sta Up_Down_Buttons
09674 29 04                                 and #%00000100              ;check for pressing down
09676 F0 0E                                 beq SizeChk                 ;if not, branch
09678 A5 1B                                 lda Player_State            ;check player's state
0967A D0 0A                                 bne SizeChk                 ;if not on the ground, branch
0967C A4 0C                                 ldy Left_Right_Buttons      ;check left and right
0967E F0 06                                 beq SizeChk                 ;if neither pressed, branch
09680 A9 00                                 lda #$00
09682 85 0C                                 sta Left_Right_Buttons      ;if pressing down while on the ground,
09684 85 0B                                 sta Up_Down_Buttons         ;nullify directional bits
09686 20 8B 99                  SizeChk:    jsr PlayerMovementSubs      ;run movement subroutines
09689 A0 01                                 ldy #$01                    ;is player small?
0968B AD 54 07                              lda PlayerSize
0968E F0 0A                                 beq +
09690 AD 79 60                  			lda CrouchingFlag2
09693 F0 0E                     			beq ChkMoveDir
09695 A0 10                     			ldy #$10
09697 4C A3 96                  			jmp ChkMoveDir
0969A A0 00                     +:          ldy #$00                    ;check for if crouching
0969C AD 14 07                              lda CrouchingFlag
0969F F0 02                                 beq ChkMoveDir              ;if not, branch ahead
096A1 A0 02                                 ldy #$02                    ;if big and crouching, load y with 2
096A3 8C 99 04                  ChkMoveDir: sty Player_BoundBoxCtrl     ;set contents of Y as player's bounding box size control
096A6 A9 01                                 lda #$01                    ;set moving direction to right by default
096A8 A4 49                                 ldy Player_X_Speed          ;check player's horizontal speed
096AA F0 05                                 beq PlayerSubs              ;if not moving at all horizontally, skip this part
096AC 10 01                                 bpl SetMoveDir              ;if moving to the right, use default moving direction
096AE 0A                                    asl                         ;otherwise change to move to the left
096AF 85 42                     SetMoveDir: sta Player_MovingDir        ;set moving direction
096B1 20 4B 93                  PlayerSubs: jsr ScrollHandler           ;move the screen if necessary
096B4 A2 00                                 ldx #$00                 ;set offsets for player-specific variables
096B6 A0 00                                 ldy #$00                 ;and get offscreen information about player
096B8 98                                    tya                         ;save offscreen bits offset to stack for now
096B9 48                        			pha
096BA 20 67 AE                  			jsr GetXOffscreenBits  ;do subroutine here
096BD A8                        			tay
096BE B9 24 BD                  			lda MSBtoLSB,y
096C1 85 00                     			sta $00                ;store here
096C3 20 BB AE                  			jsr GetYOffscreenBits
096C6 A8                        			tay
096C7 B9 24 BE                  		    lda LSBtoMSB,y
096CA 05 00                     			ora $00                     ;mask together with previously saved low nybble
096CC 85 00                     			sta $00                     ;store both here
096CE 68                        			pla                         ;get offscreen bits offset from stack
096CF A8                        			tay
096D0 A5 00                     			lda $00                     ;get value here and store elsewhere
096D2 99 D0 03                  			sta SprObject_OffscrBits,y
096D5 A6 08                     			ldx ObjectOffset
096D7 20 4B AD                              jsr RelativePlayerPosition  ;get coordinates relative to the screen
096DA A2 00                                 ldx #$00                    ;set offset for player object
096DC 20 5F B7                              jsr BoundingBoxCore         ;get player's bounding box coordinates
096DF 20 D4 DE                              jsr PlayerBGCollision       ;do collision detection and process
096E2 AC 04 07                  			ldy SwimmingFlag
096E5 D0 08                     		    bne +
096E7 8C 5E 60                  			sty OldSwim
096EA A0 70                     			ldy #$70
096EC 8C 0A 07                  			sty VerticalForceDown
096EF                           +:		  
096EF A5 C0                                 lda Player_Y_Position
096F1 C9 40                                 cmp #$40                    ;check to see if player is higher than 64th pixel
096F3 90 1A                                 bcc PlayerHole              ;if so, branch ahead
096F5 A5 0E                                 lda GameEngineSubroutine
096F7 C9 05                                 cmp #$05                    ;if running end-of-level routine, branch ahead
096F9 F0 14                                 beq PlayerHole
096FB C9 07                                 cmp #$07                    ;if running player entrance routine, branch ahead
096FD F0 10                                 beq PlayerHole
096FF C9 04                                 cmp #$04                    ;if running routines $00-$03, branch ahead
09701 90 0C                                 bcc PlayerHole
09703 C9 0D                     			cmp #$0d
09705 F0 08                     			beq PlayerHole
09707 AD C4 03                              lda Player_SprAttrib
0970A 29 DF                                 and #%11011111              ;otherwise nullify player's
0970C 8D C4 03                              sta Player_SprAttrib        ;background priority flag
0970F A5 A7                     PlayerHole: lda Player_Y_HighPos        ;check player's vertical high byte
09711 C9 02                                 cmp #$02                    ;for below the screen
09713 30 66                                 bmi ExitCtrl                ;branch to leave if not that far down
09715 AC 04 60                  			ldy GrabFlag
09718 F0 08                     			beq +
0971A 48                        			pha
0971B AE 08 60                  			ldx GrabID
0971E 20 1A C5                  			jsr EraseEnemyObject
09721 68                        			pla
09722 A0 00                     +:          ldy #$00
09724 8C 04 60                  			sty GrabFlag
09727 8C 65 60                  			sty DebugSwim
0972A 8C 30 60                  			sty OldStatus
0972D 8C 53 60                  			sty OnOffBits
09730 8C 28 60                  			sty PTimer
09733 8C 59 60                  			sty LakituRespawning
09736 C8                        			iny
09737 8C B5 63                  			sty DisableScreenFlag2
0973A 8C 23 07                              sty ScrollLock              ;set scroll lock
0973D 8C 69 07                  			sty DisableIntermediate
09740 A0 04                                 ldy #$04
09742 84 07                                 sty $07                     ;set value here
09744 A2 00                                 ldx #$00                    ;use X as flag, and clear for cloud level
09746 AC 59 07                              ldy GameTimerExpiredFlag    ;check game timer expiration flag
09749 D0 05                                 bne HoleDie                 ;if set, branch
0974B AC 43 07                              ldy CloudTypeOverride       ;check for cloud type override
0974E D0 1B                                 bne ChkHoleX                ;skip to last part if found
09750 E8                        HoleDie:    inx                         ;set flag in X for player death
09751 A4 0E                                 ldy GameEngineSubroutine
09753 C0 0B                                 cpy #$0b                    ;check for some other routine running
09755 F0 14                                 beq ChkHoleX                ;if so, branch ahead
09757 A0 FF                     			ldy #$ff
09759 8C 47 07                  			sty TimerControl
0975C AC 12 07                              ldy DeathMusicLoaded        ;check value here
0975F D0 06                                 bne HoleBottom              ;if already set, branch to next part
09761 C8                                    iny
09762 84 ED                                 sty EventMusicQueue         ;otherwise play death music
09764 8C 12 07                              sty DeathMusicLoaded        ;and set value here
09767 A0 06                     HoleBottom: ldy #$06
09769 84 07                                 sty $07                     ;change value here
0976B C5 07                     ChkHoleX:   cmp $07                     ;compare vertical high byte with value set here
0976D 30 0C                                 bmi ExitCtrl                ;if less, branch to leave
0976F CA                                    dex                         ;otherwise decrement flag in X
09770 30 0A                                 bmi CloudExit               ;if flag was clear, branch to set modes and other values
09772 AC CB 05                              ldy EndTimer		        ;check to see if music is still playing
09775 D0 04                                 bne ExitCtrl                ;branch to leave if so
09777 A9 06                                 lda #$06                    ;otherwise set to run lose life routine
09779 85 0E                                 sta GameEngineSubroutine    ;on next frame
0977B 60                        ExitCtrl:   rts                         ;leave
0977C                           
0977C                           CloudExit:
0977C A9 00                           lda #$00
0977E 8D 58 07                        sta JoypadOverride      ;clear controller override bits if any are set
09781 20 9E 97                        jsr SetEntr             ;do sub to set secondary mode
09784 EE 52 07                        inc AltEntranceControl  ;set mode of entry to 3
09787 60                              rts
09788                           
09788                           ;-------------------------------------------------------------------------------------
09788                           
09788                           Vine_AutoClimb:
09788 A5 A7                                lda Player_Y_HighPos   ;check to see whether player reached position
0978A D0 06                                bne AutoClimb          ;above the status bar yet and if so, set modes
0978C A5 C0                                lda Player_Y_Position
0978E C9 E4                                cmp #$e4
09790 90 0C                                bcc SetEntr
09792 A9 08                     AutoClimb: lda #%00001000         ;set controller bits override to up
09794 8D 58 07                             sta JoypadOverride
09797 A0 03                                ldy #$03               ;set player state to climbing
09799 84 1B                                sty Player_State
0979B 4C 39 96                             jmp AutoControlPlayer
0979E A9 02                     SetEntr:   lda #$02               ;set starting position to override
097A0 8D 52 07                             sta AltEntranceControl
097A3 4C 32 98                             jmp ChgAreaMode        ;set modes
097A6                           
097A6                           ;-------------------------------------------------------------------------------------
097A6                           
097A6                           VerticalPipeEntry:
097A6 A9 00                           lda #$00
097A8 8D 04 60                  	  sta GrabFlag
097AB 8D 1D 60                  	  sta GrabDown
097AE 8D 78 60                  	  sta GrabUp
097B1 8D 59 60                  	  sta LakituRespawning
097B4 A9 01                     	  lda #$01             ;set 1 as movement amount
097B6 20 CF 97                        jsr MovePlayerYAxis  ;do sub to move player downwards
097B9 20 4B 93                        jsr ScrollHandler    ;do sub to scroll screen with saved force if necessary
097BC A0 00                           ldy #$00             ;load default mode of entry
097BE AD D6 06                        lda WarpZoneControl  ;check warp zone control variable/flag
097C1 D0 67                           bne ChgAreaPipe      ;if set, branch to use mode 0
097C3 C8                              iny
097C4 AD 4E 07                        lda AreaType         ;check for castle level type
097C7 C9 03                           cmp #$03
097C9 D0 5F                           bne ChgAreaPipe      ;if not castle type level, use mode 1
097CB C8                              iny
097CC 4C 2A 98                        jmp ChgAreaPipe      ;otherwise use mode 2
097CF                           
097CF                           MovePlayerYAxis:
097CF 18                              clc
097D0 65 C0                           adc Player_Y_Position ;add contents of A to player position
097D2 85 C0                           sta Player_Y_Position
097D4 60                              rts
097D5                           	  
097D5                           UpsideDownPipeEntry:
097D5 A9 00                     	  lda #$00
097D7 8D 65 60                  	  sta DebugSwim
097DA 8D 04 60                  	  sta GrabFlag
097DD 8D 1D 60                  	  sta GrabDown
097E0 8D 78 60                  	  sta GrabUp
097E3 8D 59 60                  	  sta LakituRespawning
097E6 20 1D 98                        jsr MovePlayerYAxisUp ;do sub to move player downwards
097E9 20 4B 93                        jsr ScrollHandler    ;do sub to scroll screen with saved force if necessary
097EC A0 00                           ldy #$00             ;load default mode of entry
097EE AD D6 06                        lda WarpZoneControl  ;check warp zone control variable/flag
097F1 D0 37                           bne ChgAreaPipe      ;if set, branch to use mode 0
097F3 C8                              iny
097F4 AD 4E 07                        lda AreaType         ;check for castle level type
097F7 C9 03                           cmp #$03
097F9 D0 2F                           bne ChgAreaPipe      ;if not castle type level, use mode 1
097FB C8                              iny
097FC 4C 2A 98                        jmp ChgAreaPipe      ;otherwise use mode 2
097FF                           DoorEntry:
097FF A9 00                     	  lda #$00
09801 8D 65 60                  	  sta DebugSwim
09804 8D 04 60                  	  sta GrabFlag
09807 8D 59 60                  	  sta LakituRespawning
0980A A0 00                     	  ldy #$00             ;load default mode of entry
0980C AD D6 06                        lda WarpZoneControl  ;check warp zone control variable/flag
0980F D0 19                           bne ChgAreaPipe      ;if set, branch to use mode 0
09811 C8                              iny
09812 AD 4E 07                        lda AreaType         ;check for castle level type
09815 C9 03                           cmp #$03
09817 D0 11                           bne ChgAreaPipe      ;if not castle type level, use mode 1
09819 C8                              iny
0981A 4C 2A 98                        jmp ChgAreaPipe      ;otherwise use mode 2
0981D                           MovePlayerYAxisUp:
0981D A5 C0                           lda Player_Y_Position ;add contents of A to player position
0981F 38                        	  sec
09820 E9 01                     	  sbc #$01
09822 85 C0                           sta Player_Y_Position
09824 60                              rts
09825                           
09825                           ;-------------------------------------------------------------------------------------
09825                           
09825                           SideExitPipeEntry:
09825 20 3E 98                               jsr EnterSidePipe         ;execute sub to move player to the right
09828 A0 02                                  ldy #$02
0982A CE DE 06                  ChgAreaPipe: dec ChangeAreaTimer       ;decrement timer for change of area
0982D D0 0E                                  bne ExitCAPipe
0982F 8C 52 07                               sty AltEntranceControl    ;when timer expires set mode of alternate entry
09832 EE 74 07                  ChgAreaMode: inc DisableScreenFlag     ;set flag to disable screen output
09835 A9 00                                  lda #$00
09837 8D 72 07                               sta OperMode_Task         ;set secondary mode of operation
0983A 8D 22 07                               sta IRQDisable 		   ;disable sprite 0 check
0983D 60                        ExitCAPipe:  rts                       ;leave
0983E                           
0983E                           EnterSidePipe:
0983E A9 08                                lda #$08               ;set player's horizontal speed
09840 85 49                                sta Player_X_Speed
09842 A0 01                                ldy #$01               ;set controller right button by default
09844 A5 78                                lda Player_X_Position  ;mask out higher nybble of player's
09846 29 0F                                and #%00001111         ;horizontal position
09848 D0 03                                bne RightPipe
0984A 85 49                                sta Player_X_Speed     ;if lower nybble = 0, set as horizontal speed
0984C A8                                   tay                    ;and nullify controller bit override here
0984D 98                        RightPipe: tya                    ;use contents of Y to
0984E 4C 39 96                             jmp AutoControlPlayer  ;execute player control routine with ctrl bits nulled
09851                           
09851                           ;-------------------------------------------------------------------------------------
09851                           
09851                           PlayerChangeSize:
09851 AD 47 07                  			 lda TimerControl    ;check master timer control
09854 C9 F8                                  cmp #$f8            ;for specific moment in time
09856 D0 03                                  bne EndChgSize      ;branch if before or after that point
09858 4C 73 98                               jmp InitChangeSize  ;otherwise run code to get growing/shrinking going
0985B C9 C4                     EndChgSize:  cmp #$c4            ;check again for another specific moment
0985D D0 03                                  bne ExitChgSize     ;and branch to leave if before or after that point
0985F 4C AA 98                               jmp DonePlayerTask  ;otherwise do sub to init timer control and set routine
09862 60                        ExitChgSize: rts                 ;and then leave
09863                           
09863                           ;-------------------------------------------------------------------------------------
09863                           
09863                           PlayerInjuryBlink:
09863 AD 47 07                             lda TimerControl       ;check master timer control
09866 C9 F0                                cmp #$f0               ;for specific moment in time
09868 B0 07                                bcs ChangeSiz           ;branch if before that point
0986A C9 C8                                cmp #$c8               ;check again for another specific point
0986C F0 3C                                beq DonePlayerTask     ;branch if at that point, and not before or after
0986E 4C 3C 96                             jmp PlayerCtrlRoutine  ;otherwise run player control routine
09871 D0 1F                     ChangeSiz: bne ExitBoth
09873                           InitChangeSize:
09873 AC 0B 07                  		  ldy PlayerChangeSizeFlag  ;if growing/shrinking flag already set
09876 D0 1A                               bne ExitBoth              ;then branch to leave
09878 8C 0D 07                            sty PlayerAnimCtrl        ;otherwise initialize player's animation frame control
0987B EE 0B 07                  		  inc PlayerChangeSizeFlag
0987E AD 52 60                  		  lda HardModeFlag
09881 D0 07                     		  bne +
09883 AD 30 60                  		  lda OldStatus
09886 C9 02                     		  cmp #$02
09888 F0 08                     		  beq ExitBoth
0988A AD 54 07                  +:		  lda PlayerSize
0988D 49 01                     		  eor #$01
0988F 8D 54 07                  		  sta PlayerSize
09892 60                        ExitBoth: rts                       ;leave
09893                           ;-------------------------------------------------------------------------------------
09893                           ;$00 - used in CyclePlayerPalette to store current palette to cycle
09893                           
09893                           PlayerDeath:
09893 AD 47 07                  	  lda TimerControl       ;check master timer control
09896 C9 F0                           cmp #$f0               ;for specific moment in time
09898 B0 3F                           bcs ExitDeath          ;branch to leave if before that point
0989A A9 01                     	  lda #$01
0989C 8D 69 07                        sta DisableIntermediate
0989F A9 00                     	  lda #$00
098A1 8D 53 60                  	  sta OnOffBits
098A4 8D 28 60                  	  sta PTimer
098A7 4C 3C 96                        jmp PlayerCtrlRoutine  ;otherwise run player control routine
098AA                           
098AA                           DonePlayerTask:
098AA A9 00                           lda #$00
098AC 8D 47 07                        sta TimerControl          ;initialize master timer control to continue timers
098AF A9 08                           lda #$08
098B1 85 0E                           sta GameEngineSubroutine  ;set player control routine to run next frame
098B3 60                              rts                       ;leave
098B4                           
098B4                           PlayerFireFlower: 
098B4 AD 47 07                        lda TimerControl       ;check master timer control
098B7 C9 C0                           cmp #$c0               ;for specific moment in time
098B9 F0 13                           beq ResetPalFireFlower ;branch if at moment, not before or after
098BB A5 09                           lda FrameCounter       ;get frame counter
098BD 4A                              lsr
098BE 4A                              lsr                    ;divide by four to change every four frames
098BF                           
098BF                           CyclePlayerPalette:
098BF 29 03                           and #$03              ;mask out all but d1-d0 (previously d3-d2)
098C1 85 00                           sta $00               ;store result here to use as palette bits
098C3 AD C4 03                        lda Player_SprAttrib  ;get player attributes
098C6 29 FC                           and #%11111100        ;save any other bits but palette bits
098C8 05 00                           ora $00               ;add palette bits
098CA 8D C4 03                        sta Player_SprAttrib  ;store as new player attributes
098CD 60                              rts                   ;and leave
098CE                           
098CE                           ResetPalFireFlower:
098CE 20 AA 98                        jsr DonePlayerTask    ;do sub to init timer control and run player control routine
098D1                           
098D1                           ResetPalStar:
098D1 AD C4 03                        lda Player_SprAttrib  ;get player attributes
098D4 29 FC                           and #%11111100        ;mask out palette bits to force palette 0
098D6 8D C4 03                        sta Player_SprAttrib  ;store as new player attributes
098D9                           
098D9                           ExitDeath:
098D9 60                              rts          ;leave from death routine
098DA                           
098DA                           ;-------------------------------------------------------------------------------------
098DA                           
098DA                           FlagpoleSlide:
098DA AE CC 7F                               ldx $7fcc
098DD B5 15                     			 lda Enemy_ID,x           ;check special use enemy slot
098DF C9 30                                  cmp #FlagpoleFlagObject  ;for flagpole flag object
098E1 D0 22                                  bne NoFPObj              ;if not found, branch to something residual
098E3 A9 04                     			 lda #$04
098E5 8D BA 7F                  			 sta $7fba
098E8 8D B9 7F                  			 sta $7fb9
098EB AD 13 07                               lda FlagpoleSoundQueue   ;load flagpole sound
098EE 85 F0                                  sta Square1SoundQueue    ;into square 1's sfx queue
098F0                           			 ;sta OldSquare1SoundBuffer
098F0 A9 00                                  lda #$00
098F2 8D 13 07                               sta FlagpoleSoundQueue   ;init flagpole sound queue
098F5 A4 C0                                  ldy Player_Y_Position
098F7 C0 9E                                  cpy #$9e                 ;check to see if player has slid down
098F9 B0 07                                  bcs SlidePlayer          ;far enough, and if so, branch with no controller bits set
098FB A9 00                     			 lda #$00
098FD 8D E3 63                  			 sta OldSquare1SoundBuffer
09900 A9 04                                  lda #$04                 ;otherwise force player to climb down (to slide)
09902 4C 39 96                  SlidePlayer: jmp AutoControlPlayer    ;jump to player control routine
09905 E6 0E                     NoFPObj:     inc GameEngineSubroutine ;increment to next routine (this may
09907 60                                     rts                      ;be residual code)
09908                           
09908                           ;-------------------------------------------------------------------------------------
09908                           
09908                           Hidden1UpCoinAmts:
09908 15 23 16 1B 17 18 23 63         .db $15, $23, $16, $1b, $17, $18, $23, $63
09910                           
09910                           PlayerEndLevel:
09910 A9 00                               lda #$00
09912 8D 04 60                  		  sta GrabFlag
09915 8D 9F 07                  		  sta StarInvincibleTimer
09918 8D 28 60                  		  sta PTimer
0991B A9 01                     		  lda #$01                  ;force player to walk to the right
0991D 20 39 96                            jsr AutoControlPlayer
09920 A5 1B                               lda Player_State     ;check player's vertical position
09922 D0 0E                               bne ChkStop               ;if player is not yet off the flagpole, skip this part
09924 AD 23 07                            lda ScrollLock            ;if scroll lock not set, branch ahead to next part
09927 F0 09                               beq ChkStop               ;because we only need to do this part once
09929 A9 20                               lda #EndOfLevelMusic
0992B 85 ED                               sta EventMusicQueue       ;load win level music in event music queue
0992D A9 00                               lda #$00
0992F 8D 23 07                            sta ScrollLock            ;turn off scroll lock to skip this part later
09932 AD 90 04                  ChkStop:  lda Player_CollisionBits  ;get player collision bits
09935 4A                                  lsr                       ;check for d0 set
09936 B0 10                               bcs RdyNextA              ;if d0 set, skip to next part
09938 AD 46 07                            lda StarFlagTaskControl   ;if star flag task control already set,
0993B D0 03                               bne InCastle              ;go ahead with the rest of the code
0993D EE 46 07                            inc StarFlagTaskControl   ;otherwise set task control now (this gets ball rolling!)
09940 A9 20                     InCastle: lda #%00100000            ;set player's background priority bit to
09942 8D C4 03                            sta Player_SprAttrib      ;give illusion of being inside the castle
09945 EE A4 60                  		  inc dontscroll
09948 20 5A CF                  RdyNextA: jsr RunStarFlagObj
0994B AD 46 07                  		  lda StarFlagTaskControl
0994E C9 05                               cmp #$05                  ;if star flag task control not yet set
09950 D0 20                               bne ExitNA                ;beyond last valid task number, branch to leave
09952 EE 5C 07                            inc LevelNumber           ;increment level number used for game logic
09955 AD 5C 07                            lda LevelNumber
09958 C9 03                               cmp #$03                  ;check to see if we have yet reached level -4
0995A D0 00                               bne NextArea              ;and skip this last part here if not
0995C                                     ;inc Hidden1UpFlag         ;otherwise set hidden 1-up box control flag
0995C EE 5D 07                  NextArea: inc Hidden1UpFlag
0995F EE 60 07                  		  inc AreaNumber            ;increment area number used for address loader
09962 20 F1 F7                            jsr LoadAreaPointer       ;get new level pointer
09965 EE 57 07                            inc FetchNewGameTimerFlag ;set flag to load new game timer
09968 20 32 98                            jsr ChgAreaMode           ;do sub to set secondary mode, disable screen and sprite 0
0996B 8D 5B 07                            sta HalfwayPage           ;reset halfway page to 0 (beginning)
0996E A9 80                               lda #Silence
09970 85 ED                               sta EventMusicQueue       ;silence music and leave
09972 60                        ExitNA:   rts
09973                           
09973                           ;-------------------------------------------------------------------------------------
09973                           Testi:
09973 A9 00                     		lda #$00
09975 8D 14 07                  		sta CrouchingFlag
09978 AC 04 60                  		ldy GrabFlag
0997B D0 22                     		bne SetCrouch
0997D A5 1B                     		lda Player_State
0997F D0 24                     		bne ProcMove
09981 A5 0B                     		lda Up_Down_Buttons
09983 29 04                     		and #%00000100
09985 8D 79 60                  		sta CrouchingFlag2
09988 4C A5 99                  		jmp ProcMove
0998B                           PlayerMovementSubs:
0998B A9 00                     		   lda #$00                  ;set A to init crouch flag by default
0998D AC 54 07                             ldy PlayerSize            ;is player small?
09990 D0 E1                                bne Testi                 ;if so, branch
09992 AC 04 60                  		   ldy GrabFlag
09995 D0 08                     		   bne SetCrouch
09997 A5 1B                                lda Player_State          ;check state of player
09999 D0 0A                                bne ProcMove              ;if not on the ground, branch
0999B A5 0B                                lda Up_Down_Buttons       ;load controller bits for up and down
0999D 29 04                                and #%00000100            ;single out bit for down button
0999F 8D 14 07                  SetCrouch: sta CrouchingFlag         ;store value in crouch flag
099A2 8D 79 60                  		   sta CrouchingFlag2
099A5 20 45 9B                  ProcMove:  jsr PlayerPhysicsSub      ;run sub related to jumping and swimming
099A8 AD 0B 07                             lda PlayerChangeSizeFlag  ;if growing/shrinking flag set,
099AB D0 16                                bne NoMoveSub             ;branch to leave
099AD A5 1B                                lda Player_State
099AF C9 03                                cmp #$03                  ;get player state
099B1 F0 05                                beq MoveSubs              ;if climbing, branch ahead, leave timer unset
099B3 A0 18                                ldy #$18
099B5 8C 89 07                             sty ClimbSideTimer        ;otherwise reset timer now
099B8 20 A0 F7                  MoveSubs:  jsr JumpEngine
099BB                           
099BB C4 99                           .dw OnGroundStateSub
099BD 0B 9A                           .dw JumpSwimSub
099BF DC 99                           .dw FallingSub
099C1 75 9A                           .dw ClimbingSub
099C3                           
099C3 60                        NoMoveSub: rts
099C4                           
099C4                           ;-------------------------------------------------------------------------------------
099C4                           ;$00 - used by ClimbingSub to store high vertical adder
099C4                           
099C4                           OnGroundStateSub:
099C4 20 2B 9E                           jsr GetPlayerAnimSpeed     ;do a sub to set animation frame timing
099C7 A5 0C                              lda Left_Right_Buttons
099C9 F0 02                              beq GndMove                ;if left/right controller bits not set, skip instruction
099CB 85 31                              sta PlayerFacingDir        ;otherwise set new facing direction
099CD 20 68 9E                  GndMove: jsr ImposeFriction         ;do a sub to impose friction on player's walk/run
099D0 20 56 AC                           jsr MovePlayerHorizontally ;do another sub to move player horizontally
099D3 48                        		 pha
099D4 20 7E B3                  		 jsr GrabShelltest
099D7 68                        		 pla
099D8 8D FF 06                  		 sta Player_X_Scroll        ;set returned value as player's movement speed for scroll
099DB 60                                 rts
099DC                           
099DC                           ;--------------------------------
099DC                           
099DC                           FallingSub:
099DC AD 0A 07                  	  lda VerticalForceDown
099DF 8D 09 07                        sta VerticalForce      ;dump vertical movement force for falling into main one
099E2 4C 47 9A                        jmp LRAir              ;movement force, then skip ahead to process left/right movement
099E5                           
099E5                           ;--------------------------------
099E5                           ChkWhat:
099E5 AD 5A 60                  		lda WaterCooldown
099E8 D0 1E                     		bne +
099EA A5 0A                     		lda A_B_Buttons
099EC 29 80                     		and #A_Button
099EE F0 18                     		beq +
099F0 25 0D                     		and PreviousA_B_Buttons
099F2 D0 14                     		bne +
099F4 A5 0B                     		lda Up_Down_Buttons
099F6 29 04                     		and #Down_Dir
099F8 F0 04                     		beq +++
099FA A9 FF                     		lda #$ff
099FC 85 91                     		sta Player_Y_Speed
099FE A5 0B                     +++:	lda Up_Down_Buttons
09A00 29 08                     		and #Up_Dir
09A02 F0 04                     		beq +
09A04 A9 FD                     		lda #$fd
09A06 85 91                     		sta Player_Y_Speed
09A08 4C 3E 9A                  +:		jmp ExitMS
09A0B                           JumpSwimSub:
09A0B A4 91                     		  ldy Player_Y_Speed         ;if player's vertical speed zero
09A0D 10 20                               bpl DumpFall               ;or moving downwards, branch to falling
09A0F A5 0A                     		  lda A_B_Buttons
09A11 29 80                               and #A_Button              ;check to see if A button is being pressed
09A13 25 0D                               and PreviousA_B_Buttons    ;and was pressed in previous frame
09A15 D0 1E                               bne ProcSwim               ;if so, branch elsewhere
09A17 AD 04 07                  		  lda SwimmingFlag
09A1A F0 08                     		  beq +
09A1C A9 00                     		  lda #$00
09A1E 8D 14 07                  		  sta CrouchingFlag
09A21 8D 79 60                  		  sta CrouchingFlag2
09A24 AD 08 07                  +:		  lda JumpOrigin_Y_Position  ;get vertical position player jumped from
09A27 38                                  sec
09A28 E5 C0                               sbc Player_Y_Position      ;subtract current from original vertical coordinate
09A2A CD 06 07                            cmp DiffToHaltJump         ;compare to value set here to see if player is in mid-jump
09A2D 90 06                               bcc ProcSwim               ;or just starting to jump, if just starting, skip ahead
09A2F AD 0A 07                  DumpFall: lda VerticalForceDown      ;otherwise dump falling into main fractional
09A32 8D 09 07                            sta VerticalForce
09A35 AD 04 07                  ProcSwim: lda SwimmingFlag           ;if swimming flag not set,
09A38 F0 0D                               beq LRAir                  ;branch ahead to last part
09A3A A5 0B                     		  lda Up_Down_Buttons
09A3C D0 A7                     		  bne ChkWhat
09A3E 20 2B 9E                  ExitMS:   jsr GetPlayerAnimSpeed     ;do a sub to get animation frame timing
09A41 A5 0C                     LRWater:  lda Left_Right_Buttons     ;check left/right controller bits (check for swimming)
09A43 F0 02                               beq LRAir                  ;if not pressing any, skip
09A45 85 31                               sta PlayerFacingDir        ;otherwise set facing direction accordingly
09A47 A5 0C                     LRAir:    lda Left_Right_Buttons     ;check left/right controller bits (check for jumping/falling)
09A49 F0 03                               beq JSMove                 ;if not pressing any, skip
09A4B 20 68 9E                            jsr ImposeFriction         ;otherwise process horizontal movement
09A4E 20 56 AC                  JSMove:   jsr MovePlayerHorizontally ;do a sub to move player horizontally
09A51 8D FF 06                            sta Player_X_Scroll        ;set player's speed here, to be used for scroll later
09A54 A5 0E                               lda GameEngineSubroutine
09A56 C9 0B                               cmp #$0b                   ;check for specific routine selected
09A58 D0 05                               bne ExitMov1               ;branch if not set to run
09A5A A9 28                               lda #$28
09A5C 8D 09 07                            sta VerticalForce          ;otherwise set fractional
09A5F AD 04 60                  ExitMov1: lda GrabFlag
09A62 F0 06                     		  beq +
09A64 20 B8 F4                  		  jsr MovePlayerVertically   ;jump to move player vertically, then grab shell and leave
09A67 4C 7E B3                  		  jmp GrabShelltest
09A6A 4C B8 F4                  +:        jmp MovePlayerVertically   ;jump to move player vertically, then leave
09A6D                           ;--------------------------------
09A6D                           
09A6D                           ClimbAdderLow:
09A6D 0E 04 FC F2                     .db $0e, $04, $fc, $f2
09A71                           ClimbAdderHigh:
09A71 00 00 FF FF                     .db $00, $00, $ff, $ff
09A75                           
09A75                           ClimbingSub:
09A75 AD 16 04                               lda Player_YMF_Dummy
09A78 18                                     clc                      ;add movement force to dummy variable
09A79 6D 33 04                               adc Player_Y_MoveForce   ;save with carry
09A7C 8D 16 04                               sta Player_YMF_Dummy
09A7F A0 00                                  ldy #$00                 ;set default adder here
09A81 A5 91                                  lda Player_Y_Speed       ;get player's vertical speed
09A83 10 01                                  bpl MoveOnVine           ;if not moving upwards, branch
09A85 88                                     dey                      ;otherwise set adder to $ff
09A86 84 00                     MoveOnVine:  sty $00                  ;store adder here
09A88 65 C0                                  adc Player_Y_Position    ;add carry to player's vertical position
09A8A 85 C0                                  sta Player_Y_Position    ;and store to move player up or down
09A8C A5 A7                                  lda Player_Y_HighPos
09A8E 65 00                                  adc $00                  ;add carry to player's page location
09A90 85 A7                                  sta Player_Y_HighPos     ;and store
09A92 A5 0C                     			 lda Left_Right_Buttons		
09A94 29 03                     			 and #%00000011
09A96 C9 03                     			 cmp #$03				  ;prevent l+r
09A98 D0 04                     			 bne +
09A9A A9 00                     			 lda #$00
09A9C 85 0C                     			 sta Left_Right_Buttons
09A9E A5 0C                     +:           lda Left_Right_Buttons   ;compare left/right controller bits
09AA0 2D 90 04                               and Player_CollisionBits ;to collision flag
09AA3 F0 2D                                  beq InitCSTimer          ;if not set, skip to end
09AA5 AC 89 07                               ldy ClimbSideTimer       ;otherwise check timer 
09AA8 D0 27                                  bne ExitCSub             ;if timer not expired, branch to leave
09AAA A0 18                                  ldy #$18
09AAC 8C 89 07                               sty ClimbSideTimer       ;otherwise set timer now
09AAF A2 00                                  ldx #$00                 ;set default offset here
09AB1 A4 31                                  ldy PlayerFacingDir      ;get facing direction
09AB3 4A                                     lsr                      ;move right button controller bit to carry
09AB4 B0 02                                  bcs ClimbFD              ;if controller right pressed, branch ahead
09AB6 E8                                     inx                      ;otherwise increment offset by 2 bytes
09AB7 E8                        			 inx
09AB8 88                        ClimbFD:     dey                      ;check to see if facing right
09AB9 F0 01                                  beq CSetFDir             ;if so, branch, do not increment
09ABB E8                                     inx                      ;otherwise increment by 1 byte
09ABC A5 78                     CSetFDir:    lda Player_X_Position
09ABE 18                                     clc                      ;add or subtract from player's horizontal position
09ABF 7D 6D 9A                               adc ClimbAdderLow,x      ;using value here as adder and X as offset
09AC2 85 78                                  sta Player_X_Position
09AC4 A5 5F                                  lda Player_PageLoc       ;add or subtract carry or borrow using value here
09AC6 7D 71 9A                               adc ClimbAdderHigh,x     ;from the player's page location
09AC9 85 5F                                  sta Player_PageLoc
09ACB A5 0C                                  lda Left_Right_Buttons   ;get left/right controller bits again
09ACD 49 03                                  eor #%00000011           ;invert them and store them while player
09ACF 85 31                                  sta PlayerFacingDir      ;is on vine to face player in opposite direction
09AD1 60                        ExitCSub:    rts                      ;then leave
09AD2 8D 89 07                  InitCSTimer: sta ClimbSideTimer       ;initialize timer here
09AD5 60                                     rts
09AD6                           
09AD6                           ;-------------------------------------------------------------------------------------
09AD6                           ;$00 - used to store offset to friction data
09AD6                           
09AD6                           ; Luigi
09AD6                           Luigi_JumpMForceData:
09AD6 18 18 18 22 22 0D 04            .db $18, $18, $18, $22, $22, $0d, $04
09ADD                           Luigi_FallMForceData:
09ADD 42 42 3E 5D 5D 0A 09            .db $42, $42, $3e, $5d, $5d, $0a, $09
09AE4                           Luigi_FrictionData:
09AE4 B4 68 50                        .db $b4, $68, $50
09AE7                                 ;.db $b4, $68, $a0
09AE7                           
09AE7                           Enemy_PSwitch:
09AE7 AD 04 60                  		  lda GrabFlag
09AEA F0 06                     		  beq +
09AEC EC 08 60                  		  cpx GrabID
09AEF D0 01                     		  bne +
09AF1 60                        		  rts
09AF2 AD 28 60                  +:		  lda PTimer
09AF5 D0 0A                     		  bne +++++
09AF7 AD 53 60                  		  lda OnOffBits
09AFA 29 01                     		  and #%00000001
09AFC 49 02                     		  eor #%00000010
09AFE 8D 53 60                  		  sta OnOffBits
09B01 A9 5F                     +++++:	  lda #$5f
09B03 85 EC                               sta AreaMusicQueue     ;store in queue and leave
09B05 A9 60                               lda #$60
09B07 8D 28 60                  		  sta PTimer
09B0A A9 00                     		  lda #$00
09B0C 95 92                               sta Enemy_Y_Speed,x         ;initialize vertical speed and fractional
09B0E 4C F4 E6                  		  jmp ErACM
09B11                           
09B11                           JumpMForceData:
09B11 20 20 1E 28 28 0D 04            .db $20, $20, $1e, $28, $28, $0d, $04
09B18                           
09B18                           FallMForceData:
09B18 70 70 60 90 90 0A 09            .db $70, $70, $60, $90, $90, $0a, $09
09B1F                           
09B1F                           PlayerYSpdData:
09B1F FC FC FC FB FB FE FF            .db $fc, $fc, $fc, $fb, $fb, $fe, $ff
09B26                           
09B26                           InitMForceData:
09B26 00 00 00 00 00 80 00            .db $00, $00, $00, $00, $00, $80, $00
09B2D                           
09B2D                           MaxLeftXSpdData:
09B2D D8 E8 F0 C8 E8 D0 C1            .db $d8, $e8, $f0, $c8, $e8, $d0, $c1
09B34                           
09B34                           MaxRightXSpdData:
09B34 28 18 10 38 10 30 3F            .db $28, $18, $10, $38, $10, $30, $3f
09B3B 0C                              .db $0c ;used for pipe intros
09B3C                           
09B3C                           FrictionData:
09B3C E4 98 D0                        .db $e4, $98, $d0
09B3F                           
09B3F                           Climb_Y_SpeedData:
09B3F 00 FF 01                        .db $00, $ff, $01
09B42                           
09B42                           Climb_Y_MForceData:
09B42 00 20 FF                        .db $00, $20, $ff
09B45                           
09B45                           PlayerPhysicsSub:
09B45 A5 1B                                lda Player_State          ;check player state
09B47 C9 03                                cmp #$03
09B49 D0 3B                                bne CheckForJumping       ;if not climbing, branch
09B4B A0 00                                ldy #$00
09B4D A5 0B                                lda Up_Down_Buttons       ;get controller bits for up/down
09B4F 2D 90 04                             and Player_CollisionBits  ;check against player's collision detection bits
09B52 F0 06                                beq ProcClimb             ;if not pressing up or down, branch
09B54 C8                                   iny
09B55 29 08                                and #%00001000            ;check for pressing up
09B57 D0 01                                bne ProcClimb
09B59 C8                                   iny
09B5A BE 42 9B                  ProcClimb: ldx Climb_Y_MForceData,y  ;load value here
09B5D 8E 33 04                             stx Player_Y_MoveForce    ;store as vertical movement force
09B60 A9 08                                lda #$08                  ;load default animation timing
09B62 BE 3F 9B                             ldx Climb_Y_SpeedData,y   ;load some other value here
09B65 86 91                     		   stx Player_Y_Speed        ;store as vertical speed
09B67 30 01                                bmi SetCAnim              ;if climbing down, use default animation timing value
09B69 4A                                   lsr                       ;otherwise divide timer setting by 2
09B6A 8D 0C 07                  SetCAnim:  sta PlayerAnimTimerSet    ;store animation timer setting and leave
09B6D                           		  
09B6D AD FC 06                  		   lda SavedJoypad1Bits
09B70 29 80                     		   and #A_Button
09B72 F0 11                     		   beq +
09B74 A5 0D                     		   lda PreviousA_B_Buttons
09B76 29 80                     		   and #A_Button
09B78 D0 0B                     		   bne +
09B7A 8D CE 05                  		   sta PlayerOnVine
09B7D A9 05                     		   lda #$05
09B7F 8D 09 7E                  		   sta VineGrabCooldown
09B82 4C C6 9B                  		   jmp InitJS
09B85 60                        +:         rts
09B86                           
09B86                           CheckForJumping:
09B86 A9 00                             lda #$00
09B88 8D CE 05                  		sta PlayerOnVine
09B8B AD 1F 7E                  		lda DontJump
09B8E D0 0F                     		bne NoJump
09B90 AD 0E 07                  		lda JumpspringAnimCtrl    ;if jumpspring animating, 
09B93 D0 0A                             bne NoJump                ;skip ahead to something else
09B95 A5 0A                             lda A_B_Buttons           ;check for A button press
09B97 29 80                             and #A_Button
09B99 F0 04                             beq NoJump                ;if not, branch to something else
09B9B 25 0D                             and PreviousA_B_Buttons   ;if button not pressed in previous frame, branch
09B9D F0 08                             beq ProcJumping
09B9F A9 00                     NoJump: lda #$00
09BA1 8D 1F 7E                  		sta DontJump
09BA4 4C 6B 9C                  		jmp X_Physics             ;otherwise, jump to something else
09BA7                           ProcJumping:
09BA7 AD 21 7E                  		   lda PCooldown
09BAA D0 1A                     		   bne InitJS
09BAC A5 1B                     		   lda Player_State           ;check player state
09BAE F0 16                                beq InitJS                 ;if on the ground, branch
09BB0 AD 04 07                             lda SwimmingFlag           ;if swimming flag not set, jump to do something else
09BB3 F0 EA                                beq NoJump                 ;to prevent midair jumping, otherwise continue
09BB5 AD 5A 60                  		   lda WaterCooldown
09BB8 D0 E5                     		   bne NoJump
09BBA AD 82 07                             lda JumpSwimTimer          ;if jump/swim timer nonzero, branch
09BBD D0 07                                bne InitJS
09BBF A5 91                                lda Player_Y_Speed         ;check player's vertical speed
09BC1 10 03                                bpl InitJS                 ;if player's vertical speed motionless or down, branch
09BC3 4C 6B 9C                             jmp X_Physics              ;if timer at zero and player still rising, do not swim
09BC6 A9 20                     InitJS:    lda #$20                   ;set jump/swim timer
09BC8 8D 82 07                             sta JumpSwimTimer
09BCB A0 00                                ldy #$00                   ;initialize vertical force and dummy variable
09BCD 8C 16 04                             sty Player_YMF_Dummy
09BD0 8C 33 04                             sty Player_Y_MoveForce
09BD3 A5 A7                                lda Player_Y_HighPos       ;get vertical high and low bytes of jump origin
09BD5 8D 07 07                             sta JumpOrigin_Y_HighPos   ;and store them next to each other here
09BD8 A5 C0                                lda Player_Y_Position
09BDA 8D 08 07                             sta JumpOrigin_Y_Position
09BDD A9 01                                lda #$01                   ;set player state to jumping/swimming
09BDF 85 1B                                sta Player_State
09BE1 AD 00 07                  		   lda Player_XSpeedAbsolute  ;check value related to walking/running speed
09BE4 C9 09                                cmp #$09
09BE6 90 10                                bcc ChkWtr                 ;branch if below certain values, increment Y
09BE8 C8                                   iny                        ;for each amount equal or exceeded
09BE9 C9 10                                cmp #$10
09BEB 90 0B                                bcc ChkWtr
09BED C8                                   iny
09BEE C9 19                                cmp #$19
09BF0 90 06                                bcc ChkWtr
09BF2 C8                                   iny
09BF3 C9 1C                                cmp #$1c
09BF5 90 01                                bcc ChkWtr                 ;note that for jumping, range is 0-4 for Y
09BF7 C8                                   iny
09BF8 A9 01                     ChkWtr:    lda #$01                   ;set value here (apparently always set to 1)
09BFA 8D 06 07                             sta DiffToHaltJump
09BFD AD 04 07                             lda SwimmingFlag           ;if swimming flag disabled, branch
09C00 F0 08                                beq GetYPhy
09C02 A0 05                                ldy #$05                   ;otherwise set Y to 5, range is 5-6
09C04 AD 7D 04                             lda Whirlpool_Flag         ;if whirlpool flag not set, branch
09C07 F0 01                                beq GetYPhy
09C09 C8                                   iny                        ;otherwise increment to 6
09C0A                           GetYPhy:   
09C0A                           if LUIGI_PHYSICS == 1
09C0A AD 53 07                             lda CurrentPlayer          ;check which player is on the screen
09C0D F0 0F                                beq +
09C0F B9 D6 9A                             lda Luigi_JumpMForceData,y       ;store appropriate jump/swim
09C12 8D 09 07                             sta VerticalForce          ;data here
09C15 B9 DD 9A                             lda Luigi_FallMForceData,y
09C18 8D 0A 07                             sta VerticalForceDown
09C1B 4C 2A 9C                             jmp ++
09C1E                           +
09C1E B9 11 9B                             lda JumpMForceData,y       ;store appropriate jump/swim
09C21 8D 09 07                             sta VerticalForce          ;data here
09C24 B9 18 9B                             lda FallMForceData,y
09C27 8D 0A 07                             sta VerticalForceDown
09C2A                           ++
09C2A                           else
09C2A                                      lda JumpMForceData,y       ;store appropriate jump/swim
09C2A                                      sta VerticalForce          ;data here
09C2A                                      lda FallMForceData,y
09C2A                                      sta VerticalForceDown
09C2A                           endif	   
09C2A B9 26 9B                             lda InitMForceData,y
09C2D 8D 33 04                             sta Player_Y_MoveForce
09C30 B9 1F 9B                             lda PlayerYSpdData,y
09C33 85 91                                sta Player_Y_Speed
09C35 AD 02 60                  		   lda SuppressJumpNoise
09C38 D0 17                                bne JumpSubEnd
09C3A AD 04 07                             lda SwimmingFlag           ;if swimming flag disabled, branch
09C3D F0 07                                beq PJumpSnd
09C3F A9 04                                lda #Sfx_EnemyStomp        ;load swim/goomba stomp sound into
09C41 85 F0                                sta Square1SoundQueue      ;square 1's sfx queue
09C43 4C 6B 9C                             jmp X_Physics              ;from swimming above water level
09C46 A9 01                     PJumpSnd:  lda #Sfx_BigJump           ;load big mario's jump sound by default
09C48 AC 54 07                             ldy PlayerSize             ;is mario big?
09C4B F0 02                                beq SJumpSnd
09C4D A9 80                                lda #Sfx_SmallJump         ;if not, load small mario's jump sound
09C4F 85 F0                     SJumpSnd:  sta Square1SoundQueue      ;store appropriate jump sound in square 1 sfx queue
09C51                           JumpSubEnd:
09C51 A9 00                           lda #$00
09C53 8D 02 60                        sta SuppressJumpNoise
09C56 60                              rts
09C57                           GetXPhy1:
09C57 4C 5A 9D                  		jmp GetXPhy
09C5A                           aercono:
09C5A AD 92 60                  		lda pspeeddelay
09C5D D0 03                     		bne +
09C5F 4C A4 9C                  		jmp joe
09C62 CE 92 60                  +:		dec pspeeddelay
09C65 EE 97 60                  		inc dontdecrementagain
09C68 4C CB 9C                  		jmp vaercono
09C6B A0 00                     X_Physics: ldy #$00
09C6D 84 00                                sty $00                    ;init value here
09C6F A5 0E                     		   lda GameEngineSubroutine
09C71 C9 08                                cmp #$08                    ;if not set to run player control routine
09C73 D0 56                                bne +		                 ;on next frame, branch to leave
09C75 AD 91 60                  		   lda pspeed
09C78 F0 51                     		   beq +
09C7A AD 04 07                  		   lda SwimmingFlag
09C7D D0 22                     		   bne ++
09C7F A5 1B                     		   lda Player_State
09C81 D0 10                     		   bne +++
09C83 A5 49                     		   lda Player_X_Speed
09C85 C9 18                     		   cmp #$18
09C87 90 18                     		   bcc ++
09C89 C9 E8                     		   cmp #$e8
09C8B B0 14                     		   bcs ++
09C8D A5 0A                     		   lda A_B_Buttons
09C8F 29 40                     		   and #B_Button
09C91 F0 0E                     		   beq ++		
09C93                           		   ;lda Left_Right_Buttons
09C93                           		   ;and #Left_Dir
09C93                           		   ;bne ++
09C93                           +++:
09C93 AD 91 60                  		   lda pspeed
09C96 C9 07                     		   cmp #$07
09C98 B0 31                     		   bcs +
09C9A A5 1B                     		   lda Player_State
09C9C D0 03                     		   bne ++
09C9E 4C CB 9C                  		   jmp +
09CA1 4C 5A 9C                  ++:		   jmp aercono
09CA4                           joe:
09CA4 A9 05                     		   lda #$05
09CA6 8D 92 60                  		   sta pspeeddelay
09CA9 A5 49                     		   lda Player_X_Speed
09CAB C9 18                     		   cmp #$18
09CAD 90 11                     		   bcc ++
09CAF C9 E8                     		   cmp #$e8
09CB1 B0 0D                     		   bcs ++
09CB3 AD 91 60                  		   lda pspeed
09CB6 C9 07                     		   cmp #$07
09CB8 90 06                     		   bcc ++
09CBA A5 0D                     		   lda PreviousA_B_Buttons
09CBC 29 40                     		   and #B_Button
09CBE D0 0B                     		   bne vaercono
09CC0 A9 15                     ++:		   lda #$15
09CC2 8D 92 60                  		   sta pspeeddelay
09CC5 EE 95 60                  		   inc oldpspeed
09CC8 CE 91 60                  		   dec pspeed
09CCB                           vaercono:
09CCB                           +:        
09CCB                                      ;lda SwimmingFlag
09CCB                           		   ;beq ProcPRun
09CCB A5 1B                     +:         lda Player_State
09CCD F0 0E                     		   beq ProcPRun
09CCF                           		   
09CCF AD 00 07                             lda Player_XSpeedAbsolute  ;check something that seems to be related
09CD2 C9 19                                cmp #$19                   ;to mario's speed
09CD4 B0 81                                bcs GetXPhy1               ;if =>$19 branch here
09CD6 AE 04 07                  		   ldx SwimmingFlag
09CD9 F0 02                     		   beq ProcPRun
09CDB 90 26                                bcc ChkRFast               ;if not branch elsewhere
09CDD C8                        ProcPRun:  iny                        ;if mario on the ground, increment Y
09CDE AD 65 60                  		   lda DebugSwim
09CE1 D0 05                     		   bne +
09CE3 AD 04 07                  		   lda SwimmingFlag
09CE6 D0 1B                     		   bne ChkRFast
09CE8 88                        +:         dey                        ;decrement Y by default for non-water type area
09CE9 A5 0C                                lda Left_Right_Buttons     ;get left/right controller bits
09CEB C5 42                                cmp Player_MovingDir       ;check against moving direction
09CED D0 14                                bne ChkRFast               ;if controller bits <> moving direction, skip this part
09CEF AD 8B 60                  		   lda ClimbingSlope
09CF2 F0 04                     		   beq +
09CF4 88                        		   dey
09CF5 4C 68 9D                  		   jmp GetXPhy2
09CF8 A5 0A                     +:         lda A_B_Buttons            ;check for b button pressed
09CFA 29 40                                and #B_Button
09CFC D0 19                                bne SetRTmr                ;if pressed, skip ahead to set timer
09CFE AD 83 07                  		   lda RunningTimer           ;check for running timer set
09D01 D0 57                                bne GetXPhy                ;if set, branch
09D03 C8                        ChkRFast:  iny                        ;if running timer not set or level type is water, 
09D04 E6 00                                inc $00                    ;increment Y again and temp variable in memory
09D06 AD 03 07                  		   lda RunningSpeed
09D09 D0 07                                bne FastXSp                ;if running speed set here, branch
09D0B AD 00 07                             lda Player_XSpeedAbsolute
09D0E C9 21                                cmp #$21                   ;otherwise check player's walking/running speed
09D10 90 48                                bcc GetXPhy                ;if less than a certain amount, branch ahead
09D12 E6 00                     FastXSp:   inc $00                    ;if running speed set or speed => $21 increment $00
09D14 4C 5A 9D                             jmp GetXPhy                ;and jump ahead
09D17                           SetRTmr:   ;lda PreviousA_B_Buttons
09D17                           		   ;and #B_Button
09D17                           		   ;beq +
09D17 A5 0E                     		   lda GameEngineSubroutine
09D19 C9 08                     		   cmp #$08
09D1B D0 38                     		   bne +++
09D1D A5 1B                     		   lda Player_State
09D1F D0 34                     		   bne +++
09D21 A5 49                     		   lda Player_X_Speed
09D23 C9 18                     		   cmp #$18
09D25 90 2E                     		   bcc +++
09D27 C9 E8                     		   cmp #$e8
09D29 B0 2A                     		   bcs +++
09D2B AD 92 60                  		   lda pspeeddelay
09D2E D0 15                     		   bne ++
09D30 AD 91 60                  		   lda pspeed
09D33 C9 07                     		   cmp #$07
09D35 B0 0B                     		   bcs +
09D37 EE 95 60                  		   inc oldpspeed
09D3A A2 0F                     		   ldx #$0f
09D3C 8E 92 60                  		   stx pspeeddelay
09D3F EE 91 60                  		   inc pspeed
09D42                           +:		   
09D42 4C 55 9D                  		   jmp +++
09D45 AD 97 60                  ++:		   lda dontdecrementagain
09D48 D0 06                     		   bne +
09D4A CE 92 60                  		   dec pspeeddelay
09D4D 4C 55 9D                  		   jmp +++
09D50 A9 00                     +:		   lda #$00
09D52 8D 97 60                  		   sta dontdecrementagain
09D55                           +++:
09D55 A9 0A                     		   lda #$0a                   ;if b button pressed, set running timer
09D57 8D 83 07                             sta RunningTimer
09D5A                           		   
09D5A                           GetXPhy:   
09D5A B9 2D 9B                  		   lda MaxLeftXSpdData,y      ;get maximum speed to the left
09D5D 8D 50 04                             sta MaximumLeftSpeed
09D60 A5 0E                                lda GameEngineSubroutine   ;check for specific routine running
09D62 C9 07                                cmp #$07                   ;(player entrance)
09D64 D0 02                                bne GetXPhy2               ;if not running, skip and use old value of Y
09D66 A0 04                                ldy #$04                   ;otherwise set Y to 3
09D68                           GetXPhy2:  
09D68                           		   
09D68 AD 9F 07                  		   lda StarInvincibleTimer
09D6B F0 50                     		   beq +
09D6D AD 04 07                  		   lda SwimmingFlag
09D70 D0 4B                     		   bne +
09D72 A5 0A                     		   lda A_B_Buttons
09D74 29 40                     		   and #B_Button
09D76 F0 45                     		   beq +
09D78 A5 1B                     		   lda Player_State
09D7A F0 0A                     		   beq ++
09D7C A5 49                     		   lda Player_X_Speed
09D7E C9 18                     		   cmp #$18
09D80 90 3B                     		   bcc +
09D82 C9 F8                     		   cmp #$f8
09D84 B0 37                     		   bcs +
09D86 A0 05                     ++:		   ldy #$05  
09D88 AD 91 60                  		   lda pspeed
09D8B C9 07                     		   cmp #$07
09D8D 90 2B                     		   bcc ++++
09D8F AD 96 60                  		   lda framesfour
09D92 D0 24                     		   bne ++
09D94 AD 07 7F                  		   lda SettingsBits+1
09D97 D0 1F                     		   bne ++
09D99 AD 93 60                  		   lda pspeedsound
09D9C 49 01                     		   eor #$01
09D9E 8D 93 60                  		   sta pspeedsound
09DA1 A9 01                     		   lda #$01
09DA3 8D 94 60                  		   sta tickid
09DA6 A5 0E                     		   lda GameEngineSubroutine
09DA8 C9 08                                cmp #$08                    ;if not set to run player control routine
09DAA D0 0C                                bne ++
09DAC A5 E3                     		   lda Square2SoundBuffer
09DAE F0 04                     		   beq +++
09DB0 C9 10                     		   cmp #Sfx_TimerTick
09DB2 D0 04                     		   bne ++
09DB4 A9 10                     +++:	   lda #Sfx_TimerTick
09DB6 85 EF                     		   sta Square2SoundQueue
09DB8                           ++:		   
09DB8 A0 06                     		   ldy #$06
09DBA 4C F0 9D                  ++++:	   jmp setstoopid
09DBD AD 91 60                  +:		   lda pspeed
09DC0 C9 07                     		   cmp #$07
09DC2 90 32                     		   bcc +
09DC4 AD 96 60                  		   lda framesfour
09DC7 0D 07 7F                  		   ora SettingsBits+1
09DCA 0D 12 07                  		   ora DeathMusicLoaded
09DCD D0 1F                     		   bne ++
09DCF AD 93 60                  		   lda pspeedsound
09DD2 49 01                     		   eor #$01
09DD4 8D 93 60                  		   sta pspeedsound
09DD7 A9 01                     		   lda #$01
09DD9 8D 94 60                  		   sta tickid
09DDC A5 0E                     		   lda GameEngineSubroutine
09DDE C9 08                                cmp #$08                    ;if not set to run player control routine
09DE0 D0 0C                                bne ++
09DE2 A5 E3                     		   lda Square2SoundBuffer
09DE4 F0 04                     		   beq +++
09DE6 C9 10                     		   cmp #Sfx_TimerTick
09DE8 D0 04                     		   bne ++
09DEA A9 10                     +++:	   lda #Sfx_TimerTick
09DEC 85 EF                     		   sta Square2SoundQueue
09DEE A0 03                     ++:		   ldy #$03
09DF0                           setstoopid:
09DF0 B9 2D 9B                  		   lda MaxLeftXSpdData,y
09DF3 8D 50 04                  		   sta MaximumLeftSpeed
09DF6 B9 34 9B                  +:		   lda MaxRightXSpdData,y     ;get maximum speed to the right
09DF9 8D 56 04                             sta MaximumRightSpeed
09DFC A4 00                                ldy $00                    ;get other value in memory
09DFE                                      
09DFE                           if LUIGI_PHYSICS == 1
09DFE AD 70 07                             lda OperMode
09E01 C9 02                     		   cmp #$02
09E03 F0 0B                     		   beq +
09E05 AD 53 07                  		   lda CurrentPlayer          ;check which player is on the screen
09E08 F0 06                                beq +
09E0A B9 E4 9A                             lda Luigi_FrictionData,y         ;get value using value in memory as offset
09E0D 4C 13 9E                             jmp ++
09E10                           +
09E10 B9 3C 9B                             lda FrictionData,y         ;get value using value in memory as offset
09E13                           ++
09E13                           else
09E13                                      lda FrictionData,y         ;get value using value in memory as offset
09E13                           endif
09E13 8D 02 07                             sta FrictionAdderLow
09E16 A9 00                                lda #$00
09E18 8D 01 07                             sta FrictionAdderHigh      ;init something here
09E1B A5 31                                lda PlayerFacingDir
09E1D C5 42                                cmp Player_MovingDir       ;check facing direction against moving direction
09E1F F0 06                                beq ExitPhy                ;if the same, branch to leave
09E21 0E 02 07                             asl FrictionAdderLow       ;otherwise shift d7 of friction adder low into carry
09E24 2E 01 07                             rol FrictionAdderHigh      ;then rotate carry onto d0 of friction adder high
09E27 60                        ExitPhy:   rts                        ;and then leave
09E28                           
09E28                           ;-------------------------------------------------------------------------------------
09E28                           
09E28                           PlayerAnimTmrData:
09E28 02 04 07                        .db $02, $04, $07
09E2B                           
09E2B                           GetPlayerAnimSpeed:
09E2B A0 00                                 ldy #$00                   ;initialize offset in Y
09E2D AD 00 07                              lda Player_XSpeedAbsolute  ;check player's walking/running speed
09E30 C9 1C                                 cmp #$1c                   ;against preset amount
09E32 B0 15                                 bcs SetRunSpd              ;if greater than a certain amount, branch ahead
09E34 C8                                    iny                        ;otherwise increment Y
09E35 C9 0E                                 cmp #$0e                   ;compare against lower amount
09E37 B0 01                                 bcs ChkSkid                ;if greater than this but not greater than first, skip increment
09E39 C8                                    iny                        ;otherwise increment Y again
09E3A AD FC 06                  ChkSkid:    lda SavedJoypadBits        ;get controller bits
09E3D 29 7F                                 and #%01111111             ;mask out A button
09E3F F0 20                                 beq SetAnimSpd             ;if no other buttons pressed, branch ahead of all this
09E41 29 03                                 and #$03                   ;mask out all others except left and right
09E43 C5 42                                 cmp Player_MovingDir       ;check against moving direction
09E45 D0 08                                 bne ProcSkid               ;if left/right controller bits <> moving direction, branch
09E47 A9 00                                 lda #$00                   ;otherwise set zero value here
09E49 8D 03 07                  SetRunSpd:  sta RunningSpeed           ;store zero or running speed here
09E4C 4C 61 9E                              jmp SetAnimSpd
09E4F AD 00 07                  ProcSkid:   lda Player_XSpeedAbsolute  ;check player's walking/running speed
09E52 C9 0B                                 cmp #$0b                   ;against one last amount
09E54 B0 0B                                 bcs SetAnimSpd             ;if greater than this amount, branch
09E56 A5 31                                 lda PlayerFacingDir
09E58 85 42                                 sta Player_MovingDir       ;otherwise use facing direction to set moving direction
09E5A A9 00                                 lda #$00
09E5C 85 49                                 sta Player_X_Speed         ;nullify player's horizontal speed
09E5E 8D 05 07                              sta Player_X_MoveForce     ;and dummy variable for player
09E61 B9 28 9E                  SetAnimSpd: lda PlayerAnimTmrData,y    ;get animation timer setting using Y as offset
09E64 8D 0C 07                              sta PlayerAnimTimerSet
09E67 60                                    rts
09E68                           
09E68                           ;-------------------------------------------------------------------------------------
09E68                           
09E68                           ImposeFriction:
09E68 A4 1B                                ldy Player_State
09E6A F0 07                     		   beq ++
09E6C AC 90 04                  		   ldy Player_CollisionBits
09E6F C0 FF                     		   cpy #$ff
09E71 D0 55                     		   bne +
09E73 2D 90 04                  ++:		   and Player_CollisionBits  ;perform AND between left/right controller bits and collision flag
09E76                                      ;cmp #$00                  ;then compare to zero (this instruction is redundant)
09E76 D0 08                                bne JoypFrict             ;if any bits set, branch to next part
09E78 A5 49                                lda Player_X_Speed
09E7A F0 49                                beq SetAbsSpd             ;if player has no horizontal speed, branch ahead to last part
09E7C 10 23                                bpl RghtFrict             ;if player moving to the right, branch to slow
09E7E 30 03                                bmi LeftFrict             ;otherwise logic dictates player moving left, branch to slow
09E80 4A                        JoypFrict: lsr                       ;put right controller bit into carry
09E81 90 1E                                bcc RghtFrict             ;if left button pressed, carry = 0, thus branch
09E83 AD 05 07                  LeftFrict: lda Player_X_MoveForce    ;load value set here
09E86 18                                   clc
09E87 6D 02 07                             adc FrictionAdderLow      ;add to it another value set here
09E8A 8D 05 07                             sta Player_X_MoveForce    ;store here
09E8D A5 49                                lda Player_X_Speed
09E8F 6D 01 07                             adc FrictionAdderHigh     ;add value plus carry to horizontal speed
09E92 85 49                                sta Player_X_Speed        ;set as new horizontal speed
09E94 CD 56 04                             cmp MaximumRightSpeed     ;compare against maximum value for right movement
09E97 30 23                                bmi XSpdSign              ;if horizontal speed greater negatively, branch
09E99 AD 56 04                             lda MaximumRightSpeed     ;otherwise set preset value as horizontal speed
09E9C 85 49                                sta Player_X_Speed        ;thus slowing the player's left movement down
09E9E 4C C5 9E                             jmp SetAbsSpd             ;skip to the end
09EA1 AD 05 07                  RghtFrict: lda Player_X_MoveForce    ;load value set here
09EA4 38                                   sec
09EA5 ED 02 07                             sbc FrictionAdderLow      ;subtract from it another value set here
09EA8 8D 05 07                             sta Player_X_MoveForce    ;store here
09EAB A5 49                                lda Player_X_Speed
09EAD ED 01 07                             sbc FrictionAdderHigh     ;subtract value plus borrow from horizontal speed
09EB0 85 49                                sta Player_X_Speed        ;set as new horizontal speed
09EB2 CD 50 04                             cmp MaximumLeftSpeed      ;compare against maximum value for left movement
09EB5 10 05                                bpl XSpdSign              ;if horizontal speed greater positively, branch
09EB7 AD 50 04                             lda MaximumLeftSpeed      ;otherwise set preset value as horizontal speed
09EBA 85 49                                sta Player_X_Speed        ;thus slowing the player's right movement down
09EBC C9 00                     XSpdSign:  cmp #$00                  ;if player not moving or moving to the right,
09EBE 10 05                                bpl SetAbsSpd             ;branch and leave horizontal speed value unmodified
09EC0 49 FF                                eor #$ff
09EC2 18                                   clc                       ;otherwise get two's compliment to get absolute
09EC3 69 01                                adc #$01                  ;unsigned walking/running speed
09EC5 8D 00 07                  SetAbsSpd: sta Player_XSpeedAbsolute ;store walking/running speed here and leave
09EC8                           NoFBall3:
09EC8 60                        +:         rts
09EC9                           
09EC9                           ;-------------------------------------------------------------------------------------
09EC9                           ;$00 - used to store downward movement force in FireballObjCore
09EC9                           ;$02 - used to store maximum vertical speed in FireballObjCore
09EC9                           ;$07 - used to store pseudorandom bit in BubbleCheck
09EC9                           ;CheckForACE:
09EC9                           ;	  lda Enemy_X_Position
09EC9                           ;	  sta $7001
09EC9                           ;	  lda Up_Down_Buttons
09EC9                           ;	  and #Up_Dir
09EC9                           ;	  beq +
09EC9                           ;	  lda Up_Down_Buttons
09EC9                           ;	  and #Down_Dir
09EC9                           ;	  beq + 
09EC9                           ;	  jmp $7002
09EC9                           ;+:	  lda A_B_Buttons
09EC9                           ;	  and #B_Button
09EC9                           ;	  beq +
09EC9                           ;	  and PreviousA_B_Buttons
09EC9                           ;	  bne +
09EC9                           ;	  lda Up_Down_Buttons
09EC9                           ;	  and #Up_Dir
09EC9                           ;	  beq +
09EC9                           ;	  ldy $7000
09EC9                           ;	  lda Enemy_X_Position
09EC9                           ;	  sta $7002,y
09EC9                           ;	  inc $7000
09EC9                           ;+:	  rts
09EC9                           ProcFireball_Bubble:
09EC9 A5 0A                     	  lda A_B_Buttons
09ECB 29 40                           and #B_Button              ;check for b button pressed
09ECD F0 38                           beq ProcFireballs          ;branch if not pressed
09ECF 25 0D                           and PreviousA_B_Buttons
09ED1 D0 34                           bne ProcFireballs          ;if button pressed in previous frame, branch
09ED3 AD 2E 60                  	  lda FballCooldown
09ED6 D0 F0                     	  bne NoFBall3
09ED8 AD CE 06                        lda FireballCounter        ;load fireball counter
09EDB 29 01                           and #%00000001             ;get LSB and use as offset for buffer
09EDD AA                              tax
09EDE B5 22                           lda Fireball_State,x       ;load fireball state
09EE0 D0 25                           bne ProcFireballs          ;if not inactive, branch
09EE2 A4 A7                           ldy Player_Y_HighPos       ;if player too high or too low, branch
09EE4 88                              dey
09EE5 D0 20                           bne ProcFireballs
09EE7 AD 14 07                        lda CrouchingFlag          ;if player crouching, branch
09EEA D0 1B                           bne ProcFireballs
09EEC A5 1B                           lda Player_State           ;if player's state = climbing, branch
09EEE C9 03                           cmp #$03
09EF0 F0 15                           beq ProcFireballs
09EF2 A9 20                           lda #Sfx_Fireball          ;play fireball sound effect
09EF4 85 F0                           sta Square1SoundQueue
09EF6 A9 02                           lda #$02                   ;load state
09EF8 95 22                           sta Fireball_State,x
09EFA AC 0C 07                        ldy PlayerAnimTimerSet     ;copy animation frame timer setting
09EFD 8C 11 07                        sty FireballThrowingTimer  ;into fireball throwing timer
09F00 88                              dey
09F01 8C 81 07                        sty PlayerAnimTimer        ;decrement and store in player's animation timer
09F04 EE CE 06                        inc FireballCounter        ;increment fireball counter
09F07                           
09F07                           ProcFireballs:
09F07 A2 00                           ldx #$00
09F09 20 7C 9F                        jsr FireballObjCore  ;process first fireball object
09F0C A2 01                           ldx #$01
09F0E 4C 7C 9F                        jmp FireballObjCore  ;process second fireball object
09F11                               ;then leave
09F11                           ;HammerObjCore:
09F11                           ;         stx ObjectOffset             ;store offset as current object
09F11                           ;RunHam:  txa                          ;add 7 to offset to use
09F11                           ;         clc                          ;as hammer offset for next routines
09F11                           ;         adc #$07
09F11                           ;         tax
09F11                           ;         jsr ImposeGravity            ;do sub here to impose gravity on hammer and move vertically               ;if any bits still set, branch to kill hammer
09F11                           ;         jsr FireballEnemyCollision   ;do hammer to enemy collision detection and deal with collisions
09F11                           ;         jmp DrawHammer               ;draw hammer appropriately and leave
09F11                           ;NoHam:   rts                          ;leave
09F11                           ;ThrowHammers:
09F11                           ;     lda A_B_Buttons
09F11                           ;      and #B_Button              ;check for b button pressed
09F11                           ;      beq ProcHammer          ;branch if not pressed
09F11                           ;      and PreviousA_B_Buttons
09F11                           ;      bne ProcHammer          ;if button pressed in previous frame, branch
09F11                           ;      lda FireballCounter        ;load hammer counter
09F11                           ;      and #%00000001             ;get LSB and use as offset for buffer
09F11                           ;      tax
09F11                           ;      lda Fireball_State,x       ;load hammer state
09F11                           ;      bne ProcHammer          ;if not inactive, branch
09F11                           ;      ldy Player_Y_HighPos       ;if player too high or too low, branch
09F11                           ;      dey
09F11                           ;      bne ProcHammer
09F11                           ;      lda CrouchingFlag          ;if player crouching, branch
09F11                           ;      bne ProcHammer
09F11                           ;     lda Player_State           ;if player's state = climbing, branch
09F11                           ;      cmp #$03
09F11                           ;      beq ProcHammer
09F11                           ;      lda #Sfx_Fireball          ;play fireball sound effect
09F11                           ;      sta Square1SoundQueue
09F11                           ;      lda #$02                   ;load state
09F11                           ;      sta Fireball_State,x
09F11                           ;      ldy PlayerAnimTimerSet     ;copy animation frame timer setting
09F11                           ;      sty FireballThrowingTimer  ;into fireball throwing timer
09F11                           ;      dey
09F11                           ;      sty PlayerAnimTimer        ;decrement and store in player's animation timer
09F11                           ;      inc FireballCounter        ;increment fireball counter
09F11                           
09F11                           ;ProcHammer:
09F11                           ;      ldx #$00
09F11                           ;      jsr HammerObjCore  ;process first fireball object
09F11                           ;      ldx #$01
09F11                           ;      jsr HammerObjCore  ;process second fireball object, then do air bubbles
09F11                           ;	  jmp ProcAirBubbles
09F11                           FireballExplosion:
09F11 20 60 AD                        jsr RelativeFireballPosition
09F14                           DrawExplosion_Fireball:
09F14 BC EC 06                        ldy Alt_SprDataOffset,x  ;get OAM data offset of alternate sort for fireball's explosion
09F17 B5 22                           lda Fireball_State,x     ;load fireball state
09F19 F6 22                           inc Fireball_State,x     ;increment state for next frame
09F1B 4A                              lsr                      ;divide by 2
09F1C 29 07                           and #%00000111           ;mask out all but d3-d1
09F1E C9 03                           cmp #$03                 ;check to see if time to kill fireball
09F20 B0 53                           bcs KillFireBall         ;branch if so, otherwise continue to draw explosion
09F22                           
09F22                           DrawExplosion_Fireworks:
09F22 AA                              tax                         ;use whatever's in A for offset
09F23 BD 2E F9                        lda ExplosionTiles,x        ;get tile number using offset
09F26 C8                              iny                         ;increment Y (contains sprite data offset)
09F27 99 0C 02                        sta Sprite_Data+12,y          ;into second row sprites
09F2A 99 08 02                        sta Sprite_Data+8,y
09F2D 99 04 02                        sta Sprite_Data+4,y           ;and into first row sprites
09F30 99 00 02                        sta Sprite_Data,y             ;and dump into tile number part of sprite data
09F33 88                              dey                         ;decrement Y so we have the proper offset again
09F34 A6 08                           ldx ObjectOffset            ;return enemy object buffer offset to X
09F36 AD BA 03                        lda Fireball_Rel_YPos       ;get relative vertical coordinate
09F39 38                              sec                         ;subtract four pixels vertically
09F3A E9 04                           sbc #$04                    ;for first and third sprites
09F3C 99 00 02                        sta Sprite_Y_Position,y
09F3F 99 08 02                        sta Sprite_Y_Position+8,y
09F42 18                              clc                         ;add eight pixels vertically
09F43 69 08                           adc #$08                    ;for second and fourth sprites
09F45 99 04 02                        sta Sprite_Y_Position+4,y
09F48 99 0C 02                        sta Sprite_Y_Position+12,y
09F4B AD AF 03                        lda Fireball_Rel_XPos       ;get relative horizontal coordinate
09F4E 38                              sec                         ;subtract four pixels horizontally
09F4F E9 04                           sbc #$04                    ;for first and second sprites
09F51 99 03 02                        sta Sprite_X_Position,y
09F54 99 07 02                        sta Sprite_X_Position+4,y
09F57 18                              clc                         ;add eight pixels horizontally
09F58 69 08                           adc #$08                    ;for third and fourth sprites
09F5A 99 0B 02                        sta Sprite_X_Position+8,y
09F5D 99 0F 02                        sta Sprite_X_Position+12,y
09F60 A9 02                           lda #$02                    ;set palette attributes for all sprites, but
09F62 99 02 02                        sta Sprite_Attributes,y     ;set no flip at all for first sprite
09F65 A9 82                           lda #$82
09F67 99 06 02                        sta Sprite_Attributes+4,y   ;set vertical flip for second sprite
09F6A A9 42                           lda #$42
09F6C 99 0A 02                        sta Sprite_Attributes+8,y   ;set horizontal flip for third sprite
09F6F A9 C2                           lda #$c2
09F71 99 0E 02                        sta Sprite_Attributes+12,y  ;set both flips for fourth sprite
09F74 60                              rts                         ;we are done
09F75                           
09F75                           KillFireBall:
09F75 A9 00                           lda #$00                    ;clear fireball state to kill it
09F77 95 22                           sta Fireball_State,x
09F79                           NoFBall2: 
09F79 60                              rts
09F7A                           FireballXSpdData:
09F7A 40 C0                           .db $40, $c0
09F7C                           FireballObjCore:
09F7C 86 08                              stx ObjectOffset             ;store offset as current object
09F7E B5 22                              lda Fireball_State,x         ;check for d7 = 1
09F80 30 8F                              bmi FireballExplosion        ;if so, branch to get relative coordinates and draw explosion
09F82 B4 22                              ldy Fireball_State,x         ;if fireball inactive, branch to leave
09F84 F0 F3                              beq NoFBall2
09F86 88                                 dey                          ;if fireball state set to 1, skip this part and just run it
09F87 F0 27                              beq RunFB
09F89 A5 78                              lda Player_X_Position        ;get player's horizontal position
09F8B 69 04                              adc #$04                     ;add four pixels and store as fireball's horizontal position
09F8D 95 7F                              sta Fireball_X_Position,x
09F8F A5 5F                              lda Player_PageLoc           ;get player's page location
09F91 69 00                              adc #$00                     ;add carry and store as fireball's page location
09F93 95 66                              sta Fireball_PageLoc,x
09F95 A5 C0                              lda Player_Y_Position        ;get player's vertical position and store
09F97 95 C7                              sta Fireball_Y_Position,x
09F99 A9 01                              lda #$01                     ;set high byte of vertical position
09F9B 95 AE                              sta Fireball_Y_HighPos,x
09F9D A4 31                              ldy PlayerFacingDir          ;get player's facing direction
09F9F 88                                 dey                          ;decrement to use as offset here
09FA0 B9 7A 9F                           lda FireballXSpdData,y       ;set horizontal speed of fireball accordingly
09FA3 95 50                              sta Fireball_X_Speed,x
09FA5 A9 04                              lda #$04                     ;set vertical speed of fireball
09FA7 95 98                              sta Fireball_Y_Speed,x
09FA9 A9 07                              lda #$07
09FAB 9D A0 04                           sta Fireball_BoundBoxCtrl,x  ;set bounding box size control for fireball
09FAE D6 22                              dec Fireball_State,x         ;decrement state to 1 to skip this part from now on
09FB0 8A                        RunFB:   txa                          ;add 7 to offset to use
09FB1 18                                 clc                          ;as fireball offset for next routines
09FB2 69 07                              adc #$07
09FB4 AA                                 tax
09FB5 A9 50                              lda #$50                     ;set downward movement force here
09FB7 85 00                              sta $00
09FB9 A9 03                              lda #$03                     ;set maximum speed here
09FBB 85 02                              sta $02
09FBD A9 00                              lda #$00
09FBF 20 9A AC                           jsr ImposeGravity            ;do sub here to impose gravity on fireball and move vertically
09FC2 20 5C AC                           jsr MoveObjectHorizontally   ;do another sub to move it horizontally
09FC5 A6 08                              ldx ObjectOffset             ;return fireball offset to X
09FC7 A0 00                              ldy #$00                     ;set for fireball offsets
09FC9 8A                                 txa                          ;move offset to A
09FCA 18                                 clc
09FCB 79 A1 AD                           adc ObjOffsetData,y          ;add amount of bytes to offset depending on setting in Y
09FCE AA                                 tax  
09FCF A0 02                              ldy #$02
09FD1 B5 C0                     		 lda SprObject_Y_Position,x   ;load vertical coordinate low
09FD3 99 B8 03                           sta SprObject_Rel_YPos,y     ;store here
09FD6 B5 78                              lda SprObject_X_Position,x   ;load horizontal coordinate
09FD8 38                                 sec                          ;subtract left edge coordinate
09FD9 ED 1C 07                           sbc ScreenLeft_X_Pos
09FDC 99 AD 03                           sta SprObject_Rel_XPos,y     ;store result here
09FDF A6 08                              ldx ObjectOffset  
09FE1 A0 00                              ldy #$00             	      ;set for fireball offsets
09FE3 8A                                 txa                 		  ;move offset to A
09FE4 18                                 clc
09FE5 79 A1 AD                           adc ObjOffsetData,y  		  ;add amount of bytes to offset depending on setting in Y
09FE8 AA                                 tax    
09FE9 A0 02                              ldy #$02                     ;set other offset for fireball's offscreen bits
09FEB 98                                 tya                          ;save offscreen bits offset to stack for now
09FEC 48                                 pha
09FED 20 67 AE                           jsr GetXOffscreenBits  	  ;do subroutine here
09FF0 A8                                 tay
09FF1 B9 24 BD                  		 lda MSBtoLSB,y
09FF4 85 00                              sta $00               		  ;store here
09FF6 20 BB AE                           jsr GetYOffscreenBits
09FF9 A8                                 tay
09FFA B9 24 BE                  		 lda LSBtoMSB,y
09FFD 05 00                              ora $00                      ;mask together with previously saved low nybble
09FFF 85 00                              sta $00                      ;store both here
0A001 68                                 pla                          ;get offscreen bits offset from stack
0A002 A8                                 tay
0A003 A5 00                              lda $00                      ;get value here and store elsewhere
0A005 99 D0 03                           sta SprObject_OffscrBits,y
0A008 A6 08                              ldx ObjectOffset
0A00A 8A                                 txa        				  ;add seven bytes to offset
0A00B 18                        		 clc         				  ;to use in routines as offset for fireball
0A00C 69 07                     		 adc #$07
0A00E AA                        		 tax
0A00F A0 02                     		 ldy #$02    				  ;set offset for relative coordinates
0A011 86 00                              stx $00                      ;save offset here
0A013 B9 B8 03                  		 lda SprObject_Rel_YPos,y     ;store object coordinates relative to screen
0A016 85 02                     		 sta $02                      ;vertically and horizontally, respectively
0A018 B9 AD 03                  		 lda SprObject_Rel_XPos,y
0A01B 85 01                     		 sta $01
0A01D 8A                        		 txa                          ;multiply offset by four and save to stack
0A01E 0A                        		 asl
0A01F 0A                        		 asl
0A020 48                        		 pha
0A021 A8                        		 tay                          ;use as offset for Y, X is left alone
0A022 BD 99 04                  		 lda SprObj_BoundBoxCtrl,x    ;load value here to be used as offset for X
0A025 0A                        		 asl                          ;multiply that by four and use as X
0A026 0A                        		 asl
0A027 AA                        		 tax
0A028 A5 01                     		 lda $01                      ;add the first number in the bounding box data to the
0A02A 18                        		 clc                          ;relative horizontal coordinate using enemy object offset
0A02B 7D 72 B6                  		 adc BoundBoxCtrlData,x       ;and store somewhere using same offset * 4
0A02E 99 AC 04                  		 sta BoundingBox_UL_Corner,y  ;store here
0A031 A5 01                     		 lda $01
0A033 18                        		 clc
0A034 7D 74 B6                  		 adc BoundBoxCtrlData+2,x     ;add the third number in the bounding box data to the
0A037 99 AE 04                  		 sta BoundingBox_LR_Corner,y  ;relative horizontal coordinate and store
0A03A E8                        		 inx                          ;increment both offsets
0A03B C8                        		 iny
0A03C A5 02                     		 lda $02                      ;add the second number to the relative vertical coordinate
0A03E 18                        		 clc                          ;using incremented offset and store using the other
0A03F 7D 72 B6                  		 adc BoundBoxCtrlData,x       ;incremented offset
0A042 99 AC 04                  		 sta BoundingBox_UL_Corner,y
0A045 A5 02                     		 lda $02
0A047 18                        		 clc
0A048 7D 74 B6                  		 adc BoundBoxCtrlData+2,x     ;add the fourth number to the relative vertical coordinate
0A04B 99 AE 04                  		 sta BoundingBox_LR_Corner,y  ;and store
0A04E 68                        		 pla                          ;get original offset loaded into $00 * y from stack
0A04F A8                        		 tay                          ;use as Y
0A050 A6 00                     		 ldx $00                      ;get original offset and use as X again
0A052 20 A1 B7                           jsr CheckRightScreenBBox     ;jump to handle any offscreen coordinates
0A055 20 6C F1                           jsr FireballBGCollision      ;do fireball to background collision detection
0A058 AD D2 03                           lda FBall_OffscreenBits      ;get fireball offscreen bits
0A05B 29 CC                              and #%11001100               ;mask out certain bits
0A05D D0 2B                              bne EraseFB                  ;if any bits still set, branch to kill fireball
0A05F 20 75 D3                           jsr FireballEnemyCollision   ;do fireball to enemy collision detection and deal with collisions
0A062 BC F1 06                           ldy FBall_SprDataOffset,x  ;get fireball's sprite data offset
0A065 AD BA 03                           lda Fireball_Rel_YPos      ;get relative vertical coordinate
0A068 99 00 02                           sta Sprite_Y_Position,y    ;store as sprite Y coordinate
0A06B AD AF 03                           lda Fireball_Rel_XPos      ;get relative horizontal coordinate
0A06E 99 03 02                           sta Sprite_X_Position,y    ;store as sprite X coordinate, then do shared code
0A071 A5 09                              lda FrameCounter         ;get frame counter
0A073 4A                                 lsr                      ;divide by four
0A074 4A                                 lsr
0A075 48                                 pha                      ;save result to stack
0A076 29 01                              and #$01                 ;mask out all but last bit
0A078 49 64                              eor #$64                 ;set either tile $64 or $65 as fireball tile
0A07A 99 01 02                           sta Sprite_Tilenumber,y  ;thus tile changes every four frames
0A07D 68                                 pla                      ;get from stack
0A07E 4A                                 lsr                      ;divide by four again
0A07F 4A                                 lsr
0A080 A9 02                              lda #$02                 ;load value $02 to set palette in attrib byte
0A082 90 02                              bcc FireA                ;if last bit shifted out was not set, skip this
0A084 09 C0                              ora #%11000000           ;otherwise flip both ways every eight frames
0A086 99 02 02                  FireA:   sta Sprite_Attributes,y  ;store attribute byte and leave
0A089 60                        		 rts
0A08A A9 00                     EraseFB: lda #$00                     ;erase fireball state
0A08C 95 22                              sta Fireball_State,x
0A08E 60                        NoFBall: rts 
0A08F                           
0A08F                           ;-------------------------------------------------------------------------------------
0A08F                           
0A08F                           RunGameTimer:
0A08F AD 70 07                  		   lda OperMode               ;get primary mode of operation
0A092 F0 FA                                beq NoFBall               ;branch to leave if in title screen mode
0A094 A5 0E                                lda GameEngineSubroutine
0A096 C9 08                                cmp #$08                   ;if routine number less than eight running,
0A098 90 70                                bcc ExGTimer1               ;branch to leave
0A09A C9 0B                                cmp #$0b                   ;if running death routine,
0A09C F0 6C                                beq ExGTimer1               ;branch to leave
0A09E A5 A7                                lda Player_Y_HighPos
0A0A0 C9 02                                cmp #$02                   ;if player below the screen,
0A0A2 10 66                                bpl ExGTimer1               ;branch to leave regardless of level type
0A0A4 AD 87 07                             lda GameTimerCtrlTimer     ;if game timer control not yet expired,
0A0A7 D0 70                                bne ExGTimer               ;branch to leave
0A0A9 AD F8 07                             lda GameTimerDisplay
0A0AC 0D F9 07                             ora GameTimerDisplay+1     ;otherwise check game timer digits
0A0AF 0D FA 07                             ora GameTimerDisplay+2
0A0B2 F0 57                                beq TimeUpOn               ;if game timer digits at 000, branch to time-up code
0A0B4 AD F8 07                             lda GameTimerDisplay       ;otherwise check first digit
0A0B7 D0 10                                bne +                      ;branch to reset game timer control
0A0B9 AD FA 07                  		   lda GameTimerDisplay+2     ;if timer not at 60, branch to reset game timer control
0A0BC D0 0B                     		   bne +
0A0BE AD F9 07                             lda GameTimerDisplay+1     ;otherwise check second and third digits
0A0C1 C9 06                     		   cmp #$06
0A0C3 D0 04                     		   bne + 			          ;branch to reset game timer control
0A0C5 A9 40                                lda #TimeRunningOutMusic
0A0C7 85 ED                                sta EventMusicQueue        ;otherwise load time running out music
0A0C9 AD F8 07                  +:		   lda GameTimerDisplay
0A0CC D0 17                     		   bne ResGTCtrl
0A0CE AC 52 60                  		   ldy HardModeFlag
0A0D1 AD FA 07                  		   lda GameTimerDisplay+2
0A0D4 D9 1A A1                  		   cmp timerthings,y
0A0D7 D0 0C                     		   bne ResGTCtrl
0A0D9 AD F9 07                  		   lda GameTimerDisplay+1
0A0DC C9 05                     		   cmp #$05
0A0DE D0 05                     		   bne ResGTCtrl
0A0E0 A9 01                     		   lda #$01
0A0E2 8D 06 60                  		   sta HurryUp
0A0E5 AC 52 60                  ResGTCtrl: ldy HardModeFlag
0A0E8 B9 1C A1                  		   lda yeah,y                   ;reset game timer control
0A0EB 8D 87 07                             sta GameTimerCtrlTimer
0A0EE AD B2 63                  		   lda timerupthing
0A0F1 49 60                     		   eor #%01100000
0A0F3 8D B2 63                  		   sta timerupthing
0A0F6 A0 23                                ldy #$23                   ;set offset for last digit
0A0F8 A9 FF                                lda #$ff                   ;set value to decrement game timer digit
0A0FA 8D 39 01                             sta DigitModifier+5
0A0FD 20 9C 8D                             jsr DigitsMathRoutine      ;do sub to decrement game timer slowly
0A100 A9 02                     		   lda #$02
0A102 20 6E A6                  		   jsr WriteScoreAndCoinTally ;write player's score and coin tally to screen
0A105 A9 A4                                lda #$a4                   ;set status nybbles to update game timer display
0A107 20 3A 8D                             jsr PrintStatusBarNumbers  ;do sub to update the display
0A10A                           		   ;ldy VRAM_Buffer1_Offset   
0A10A                           		   ;lda VRAM_Buffer1-3,y      ;check highest digit of score
0A10A                                      ;bne ExGTimer1                ;if zero, overwrite with space tile for zero suppression
0A10A                                      ;lda #$24
0A10A                                      ;sta VRAM_Buffer1-3,y
0A10A 60                        ExGTimer1: rts
0A10B AC 20 60                  TimeUpOn:  ldy debug
0A10E D0 09                     		   bne ExGTimer
0A110 8D 56 07                  		   sta PlayerStatus           ;init player status (note A will always be zero here)
0A113 20 EE D8                             jsr ForceInjury            ;do sub to kill the player (note player is small here)
0A116 EE 59 07                             inc GameTimerExpiredFlag   ;set game timer expiration flag
0A119 60                        ExGTimer:  rts                        ;leave
0A11A                           
0A11A                           ;-------------------------------------------------------------------------------------
0A11A 07 05                     timerthings: .db $07, $05
0A11C                           yeah:
0A11C 3B 20                     .db $3b, $20
0A11E                           WarpZoneObject:
0A11E AD 23 07                        lda ScrollLock         ;check for scroll lock flag
0A121 F0 F6                           beq ExGTimer           ;branch if not set to leave
0A123 A5 C0                           lda Player_Y_Position  ;check to see if player's vertical coordinate has
0A125 25 A7                           and Player_Y_HighPos   ;same bits set as in vertical high byte (why?)
0A127 D0 F0                           bne ExGTimer           ;if so, branch to leave
0A129 AD 25 07                  	  lda CurrentPageLoc
0A12C                           	  add #$66
0A12C 18                        	clc
0A12D 69 66                     	adc #$66 ;apparently this sometimes refuses to work correctly lmao
0A12F 8D A6 60                  	  sta ScrollLockPageLoc
0A132 AD 26 07                  	  lda CurrentColumnPos
0A135 8D A7 60                  	  sta ScrollLockColumnPos
0A138 A0 00                     	  ldy #$00
0A13A 8C 23 07                        sty ScrollLock         ;otherwise nullify scroll lock flag
0A13D C8                        	  iny
0A13E 8C A8 60                        sty WarpZoneCheck      ;increment warp zone flag to make warp pipes for warp zone
0A141 4C 1A C5                        jmp EraseEnemyObject   ;kill this object
0A144                           
0A144                           ;-------------------------------------------------------------------------------------
0A144                           
0A144                           FlagpoleScoreMods:
0A144 05 02 08 04 01                  .db $05, $02, $08, $04, $01
0A149                           
0A149                           FlagpoleScoreDigits:
0A149 03 03 04 04 04                  .db $03, $03, $04, $04, $04
0A14E                           
0A14E                           FlagpoleRoutine:
0A14E 86 08                     		   stx ObjectOffset
0A150 A5 0E                     		   lda GameEngineSubroutine
0A152 C9 04                                cmp #$04                  ;if flagpole slide routine not running,
0A154 D0 31                                bne SkipScore             ;branch to near the end of code
0A156 A5 1B                                lda Player_State
0A158 C9 03                                cmp #$03                  ;if player state not climbing,
0A15A D0 2B                                bne SkipScore             ;branch to near the end of code
0A15C B5 C1                                lda Enemy_Y_Position,x    ;check flagpole flag's vertical coordinate
0A15E C9 AA                                cmp #$aa                  ;if flagpole flag down to a certain point,
0A160 B0 28                                bcs GiveFPScr             ;branch to end the level
0A162 A5 C0                                lda Player_Y_Position     ;check player's vertical coordinate
0A164 C9 A2                                cmp #$a2                  ;if player down to a certain point,
0A166 B0 22                                bcs GiveFPScr             ;branch to end the level
0A168 BD 17 04                             lda Enemy_YMF_Dummy,x
0A16B 69 FF                                adc #$ff                  ;add movement amount to dummy variable
0A16D 9D 17 04                             sta Enemy_YMF_Dummy,x     ;save dummy variable
0A170 B5 C1                                lda Enemy_Y_Position,x    ;get flag's vertical coordinate
0A172 69 01                                adc #$01                  ;add 1 plus carry to move flag, and
0A174 95 C1                                sta Enemy_Y_Position,x    ;store vertical coordinate
0A176 AD 0E 01                             lda FlagpoleFNum_YMFDummy
0A179 38                                   sec                       ;subtract movement amount from dummy variable
0A17A E9 FF                                sbc #$ff
0A17C 8D 0E 01                             sta FlagpoleFNum_YMFDummy ;save dummy variable
0A17F AD 0D 01                             lda FlagpoleFNum_Y_Pos
0A182 E9 01                                sbc #$01                  ;subtract one plus borrow to move floatey number,
0A184 8D 0D 01                             sta FlagpoleFNum_Y_Pos    ;and store vertical coordinate here
0A187 4C B2 A1                  SkipScore: jmp FPGfx                 ;jump to skip ahead and draw flag and floatey number
0A18A AC 0F 01                  GiveFPScr: ldy FlagpoleScore         ;get score offset from earlier (when player touched flagpole)
0A18D B9 44 A1                  NoEL4F:    lda FlagpoleScoreMods,y   ;get amount to award player points
0A190 BE 49 A1                             ldx FlagpoleScoreDigits,y ;get digit with which to award points
0A193 9D 34 01                             sta DigitModifier,x       ;store in digit modifier
0A196 C9 05                     		   cmp #$05
0A198 D0 11                                bne NoSc4F
0A19A A9 40                     		   lda #Sfx_ExtraLife
0A19C 85 EF                                sta Square2SoundQueue        ;and play the 1-up sound
0A19E AD 5A 07                  		   lda NumberofLives
0A1A1 C9 63                     		   cmp #$63
0A1A3 F0 06                     		   beq NoSc4F
0A1A5 EE 5A 07                  		   inc NumberofLives
0A1A8 20 18 AD                  		   jsr UpdateLives
0A1AB 20 69 A6                  NoSc4F:    jsr AddToScore            ;do sub to award player points depending on height of collision
0A1AE A9 05                     NoScore:   lda #$05
0A1B0 85 0E                                sta GameEngineSubroutine  ;set to run end-of-level subroutine on next frame
0A1B2 20 63 B0                  FPGfx:     jsr GetEnemyOffscreenBits ;get offscreen information
0A1B5 20 00 AF                             jsr RelativeEnemyPosition ;get relative coordinates
0A1B8 4C AB F3                             jmp FlagpoleGfxHandler    ;draw flagpole flag and floatey number
0A1BB 60                        ExitFlagP: rts
0A1BC                           
0A1BC                           ;-------------------------------------------------------------------------------------
0A1BC                           
0A1BC                           
0A1BC                           ;-------------------------------------------------------------------------------------
0A1BC                           Setup_Vine1:
0A1BC A9 2F                             lda #VineObject          ;load identifier for vine object
0A1BE 95 15                             sta Enemy_ID,x           ;store in buffer
0A1C0 A9 01                             lda #$01
0A1C2 95 0F                             sta Enemy_Flag,x         ;set flag for enemy object buffer
0A1C4 B9 68 00                          lda Block_PageLoc,y
0A1C7 95 60                             sta Enemy_PageLoc,x      ;copy page location from previous object
0A1C9 B9 81 00                          lda Block_X_Position,y
0A1CC 95 79                             sta Enemy_X_Position,x   ;copy horizontal coordinate from previous object
0A1CE B9 C9 00                          lda Block_Y_Position,y
0A1D1 95 C1                             sta Enemy_Y_Position,x   ;copy vertical coordinate from previous object
0A1D3 AC 98 03                          ldy VineFlagOffset       ;load vine flag/offset to next available vine slot
0A1D6 D0 03                             bne NextVO               ;if set at all, don't bother to store vertical
0A1D8 8D 9D 03                          sta VineStart_Y_Position ;otherwise store vertical coordinate here
0A1DB 8A                        NextVO: txa                      ;store object offset to next available vine slot
0A1DC 99 9A 03                          sta VineObjOffset,y      ;using vine flag as offset
0A1DF EE 98 03                          inc VineFlagOffset       ;increment vine flag offset
0A1E2 A9 04                             lda #Sfx_GrowVine
0A1E4 85 EF                             sta Square2SoundQueue    ;load vine grow sound
0A1E6 60                                rts
0A1E7                           ;-------------------------------------------------------------------------------------
0A1E7                           ;$06-$07 - used as address to block buffer data
0A1E7                           ;$02 - used as vertical high nybble of block buffer offset
0A1E7                           
0A1E7                           VineHeightData:
0A1E7 30 60                           .db $30, $60
0A1E9                           
0A1E9                           VineObjectHandler:
0A1E9 EC CD 7F                             cpx $7fcd      ;check enemy offset for special use slot
0A1EC D0 6A                                bne ExitVH                ;if not in last slot, branch to leave
0A1EE AC 98 03                             ldy VineFlagOffset
0A1F1 88                                   dey                       ;decrement vine flag in Y, use as offset
0A1F2 AD 99 03                             lda VineHeight
0A1F5 D9 E7 A1                             cmp VineHeightData,y      ;if vine has reached certain height,
0A1F8 F0 0F                                beq RunVSubs              ;branch ahead to skip this part
0A1FA A5 09                                lda FrameCounter          ;get frame counter
0A1FC 4A                                   lsr                       ;shift d1 into carry
0A1FD 4A                                   lsr
0A1FE 90 09                                bcc RunVSubs              ;if d1 not set (2 frames every 4) skip this part
0A200 B5 C1                                lda Enemy_Y_Position,x
0A202 E9 01                                sbc #$01                  ;subtract vertical position of vine
0A204 95 C1                                sta Enemy_Y_Position,x    ;one pixel every frame it's time
0A206 EE 99 03                             inc VineHeight            ;increment vine height
0A209 AD 99 03                  RunVSubs:  lda VineHeight            ;if vine still very small,
0A20C C9 08                                cmp #$08                  ;branch to leave
0A20E 90 48                                bcc ExitVH
0A210 20 00 AF                             jsr RelativeEnemyPosition ;get relative coordinates of vine,
0A213 20 63 B0                             jsr GetEnemyOffscreenBits ;and any offscreen bits
0A216 A0 00                                ldy #$00                  ;initialize offset used in draw vine sub
0A218 20 CA F2                  VDrawLoop: jsr DrawVine              ;draw vine
0A21B C8                                   iny                       ;increment offset
0A21C CC 98 03                             cpy VineFlagOffset        ;if offset in Y and offset here
0A21F D0 F7                                bne VDrawLoop             ;do not yet match, loop back to draw more vine
0A221 AD D1 03                             lda Enemy_OffscreenBits
0A224 29 0C                                and #%00001100            ;mask offscreen bits
0A226 F0 10                                beq WrCMTile              ;if none of the saved offscreen bits set, skip ahead
0A228 88                                   dey                       ;otherwise decrement Y to get proper offset again
0A229 BE 9A 03                  KillVine:  ldx VineObjOffset,y       ;get enemy object offset for this vine object
0A22C 20 1A C5                             jsr EraseEnemyObject      ;kill this vine object
0A22F 88                                   dey                       ;decrement Y
0A230 10 F7                                bpl KillVine              ;if any vine objects left, loop back to kill it
0A232 8D 98 03                             sta VineFlagOffset        ;initialize vine flag/offset
0A235 8D 99 03                             sta VineHeight            ;initialize vine height
0A238 AD 99 03                  WrCMTile:  lda VineHeight            ;check vine height
0A23B C9 20                                cmp #$20                  ;if vine small (less than 32 pixels tall)
0A23D 90 19                                bcc ExitVH                ;then branch ahead to leave
0A23F AE CD 7F                             ldx $7fcd
0A242 E8                        		   inx
0A243 A9 01                                lda #$01                  ;set A to obtain horizontal in $04, but we don't care
0A245 A0 1B                                ldy #$1b                  ;set Y to offset to get block at ($04, $10) of coordinates
0A247 20 7A F2                             jsr BBChk_E  ;do a sub to get block buffer address set, return contents
0A24A A4 02                                ldy $02
0A24C C0 D0                                cpy #$d0                  ;if vertical high nybble offset beyond extent of
0A24E B0 08                                bcs ExitVH                ;current block buffer, branch to leave, do not write
0A250 B1 F7                                lda ($f7),y               ;otherwise check contents of block buffer at 
0A252 D0 04                                bne ExitVH                ;current offset, if not empty, branch to leave
0A254 A9 26                                lda #$26
0A256 91 F7                                sta ($f7),y               ;otherwise, write climbing metatile to block buffer
0A258 A6 08                     ExitVH:    ldx ObjectOffset          ;get enemy object offset and leave
0A25A 60                                   rts
0A25B                           
0A25B                           ;-------------------------------------------------------------------------------------
0A25B                           
0A25B                           CannonBitmasks:
0A25B 0F 07                           .db %00001111, %00000111
0A25D                           
0A25D                           ProcessCannons:
0A25D                                      ;lda AreaType                ;get area type
0A25D                                      ;beq ExCannon                ;if water type area, branch to leave
0A25D                           		   ;lda SwimmingFlag
0A25D                           		   ;bne ExCannon
0A25D A2 02                                ldx #$02
0A25F 86 08                     ThreeSChk: stx ObjectOffset            ;start at third enemy slot
0A261 B5 0F                                lda Enemy_Flag,x            ;check enemy buffer flag
0A263 D0 6A                                bne Chk_BB                  ;if set, branch to check enemy
0A265 BD A8 07                             lda PseudoRandomBitReg+1,x  ;otherwise get part of LSFR
0A268 AC CC 06                             ldy SecondaryHardMode       ;get secondary hard mode flag, use as offset
0A26B 39 5B A2                             and CannonBitmasks,y        ;mask out bits of LSFR as decided by flag
0A26E C9 06                                cmp #$06                    ;check to see if lower nybble is above certain value
0A270 B0 5D                                bcs Chk_BB                  ;if so, branch to check enemy
0A272 A8                                   tay                         ;transfer masked contents of LSFR to Y as pseudorandom offset
0A273 8C 56 60                  		   sty tempB
0A276 B9 6B 04                             lda Cannon_PageLoc,y        ;get page location
0A279 F0 54                                beq Chk_BB                  ;if not set or on page 0, branch to check enemy
0A27B B9 7D 04                             lda Cannon_Timer,y          ;get cannon timer
0A27E F0 08                                beq FireCannon              ;if expired, branch to fire cannon
0A280 E9 00                                sbc #$00                    ;otherwise subtract borrow (note carry will always be clear here)
0A282 99 7D 04                             sta Cannon_Timer,y          ;to count timer down
0A285 4C CF A2                             jmp Chk_BB                  ;then jump ahead to check enemy
0A288                           
0A288                           FireCannon:
0A288 AD 47 07                            lda TimerControl           ;if master timer control set,
0A28B D0 42                               bne Chk_BB                 ;branch to check enemy
0A28D AD 6B 04                  		  lda Cannon_PageLoc
0A290 A9 0E                               lda #$0e                   ;otherwise we start creating one
0A292 99 7D 04                            sta Cannon_Timer,y         ;first, reset cannon timer
0A295 B9 6B 04                            lda Cannon_PageLoc,y       ;get page location of cannon
0A298 95 60                               sta Enemy_PageLoc,x        ;save as page location of bullet bill
0A29A B9 71 04                            lda Cannon_X_Position,y    ;get horizontal coordinate of cannon
0A29D 95 79                               sta Enemy_X_Position,x     ;save as horizontal coordinate of bullet bill
0A29F B9 77 04                            lda Cannon_Y_Position,y    ;get vertical coordinate of cannon
0A2A2 38                                  sec
0A2A3 E9 08                               sbc #$08                   ;subtract eight pixels (because enemies are 24 pixels tall)
0A2A5 95 C1                               sta Enemy_Y_Position,x     ;save as vertical coordinate of bullet bill
0A2A7                           		  
0A2A7 A9 01                               lda #$01
0A2A9 95 A8                               sta Enemy_Y_HighPos,x      ;set vertical high byte of bullet bill
0A2AB 95 0F                               sta Enemy_Flag,x           ;set buffer flag
0A2AD 4A                                  lsr                        ;shift right once to init A
0A2AE 95 1C                               sta Enemy_State,x          ;then initialize enemy's state
0A2B0 A9 09                               lda #$09
0A2B2 9D 9A 04                            sta Enemy_BoundBoxCtrl,x   ;set bounding box size control for bullet bill
0A2B5 A9 33                               lda #BulletBill_CannonVar
0A2B7 95 15                               sta Enemy_ID,x             ;load identifier for bullet bill (cannon variant)
0A2B9 20 1E D3                  		  jsr OffscreenBoundsCheck
0A2BC B5 0F                     		  lda Enemy_Flag,x
0A2BE D0 0C                     		  bne +
0A2C0 AC 56 60                  		  ldy tempB
0A2C3 B9 0E 7E                  		  lda Cannon_Creator,y
0A2C6 A8                        		  tay
0A2C7 A9 00                     		  lda #$00
0A2C9 99 AC 62                  		  sta Saved_isDefeated,y
0A2CC 4C E2 A2                  +:        jmp Next3Slt               ;move onto next slot
0A2CF B5 15                     Chk_BB:   lda Enemy_ID,x             ;check enemy identifier for bullet bill (cannon variant)
0A2D1 C9 33                               cmp #BulletBill_CannonVar
0A2D3 D0 0D                               bne Next3Slt               ;if not found, branch to get next slot
0A2D5 20 1E D3                            jsr OffscreenBoundsCheck   ;otherwise, check to see if it went offscreen
0A2D8 B5 0F                               lda Enemy_Flag,x           ;check enemy buffer flag
0A2DA F0 06                               beq Next3Slt               ;if not set, branch to get next slot
0A2DC 20 63 B0                            jsr GetEnemyOffscreenBits  ;otherwise, get offscreen information
0A2DF 20 01 A3                            jsr BulletBillHandler      ;then do sub to handle bullet bill
0A2E2 CA                        Next3Slt: dex                        ;move onto next slot
0A2E3 10 01                               bpl ThreeSChk1              ;do this until first three slots are checked
0A2E5 60                        ExCannon: rts                        ;then leave
0A2E6                           
0A2E6                           ;--------------------------------
0A2E6 4C 5F A2                  ThreeSChk1: jmp ThreeSChk
0A2E9                           MoveBulletBill:
0A2E9 B5 1C                              lda Enemy_State,x          ;check bullet bill's enemy object state for d5 set
0A2EB 29 20                              and #%00100000
0A2ED F0 03                              beq NotDefB                ;if not set, continue with movement code
0A2EF 4C E2 AB                           jmp MoveJ_EnemyVertically  ;otherwise jump to move defeated bullet bill downwards
0A2F2 A9 E8                     NotDefB: lda #$e8                   ;set bullet bill's horizontal speed
0A2F4 95 4A                              sta Enemy_X_Speed,x        ;and move it accordingly (note: this bullet bill
0A2F6 4C C9 F4                           jmp MoveEnemyHorizontally  ;object occurs in frenzy object $17, not from cannons)
0A2F9                           
0A2F9                           MoveJumpingEnemy:
0A2F9 20 E2 AB                        jsr MoveJ_EnemyVertically  ;do a sub to impose gravity on green paratroopa
0A2FC 4C C9 F4                        jmp MoveEnemyHorizontally  ;jump to move enemy horizontally
0A2FF                           
0A2FF                           BulletBillXSpdData:
0A2FF 18 E8                           .db $18, $e8
0A301                           
0A301                           BulletBillHandler:
0A301 AD 47 07                  		   lda TimerControl          ;if master timer control set,
0A304 D0 41                                bne RunBBSubs             ;branch to run subroutines except movement sub
0A306 B5 1C                                lda Enemy_State,x
0A308 D0 2E                                bne ChkDSte               ;if bullet bill's state set, branch to check defeated state
0A30A AD D1 03                             lda Enemy_OffscreenBits   ;otherwise load offscreen bits
0A30D 29 0C                                and #%00001100            ;mask out bits
0A30F C9 0C                                cmp #%00001100            ;check to see if all bits are set
0A311 F0 43                                beq KillBB                ;if so, branch to kill this object
0A313 A0 01                                ldy #$01                  ;set to move right by default
0A315 20 69 C6                             jsr PlayerEnemyDiff       ;get horizontal difference between player and bullet bill
0A318 30 01                                bmi SetupBB               ;if enemy to the left of player, branch
0A31A C8                                   iny                       ;otherwise increment to move left
0A31B 94 43                     SetupBB:   sty Enemy_MovingDir,x     ;set bullet bill's moving direction
0A31D 88                                   dey                       ;decrement to use as offset
0A31E B9 FF A2                             lda BulletBillXSpdData,y  ;get horizontal speed based on moving direction
0A321 95 4A                                sta Enemy_X_Speed,x       ;and store it
0A323 A5 00                                lda $00                   ;get horizontal difference
0A325 69 28                                adc #$28                  ;add 40 pixels
0A327 C9 50                                cmp #$50                  ;if less than a certain amount, player is too close
0A329 90 2B                                bcc KillBB                ;to cannon either on left or right side, thus branch
0A32B A9 01                                lda #$01
0A32D 95 1C                                sta Enemy_State,x         ;otherwise set bullet bill's state
0A32F A9 0A                     		   lda #$0a
0A331 9D 8A 07                             sta EnemyFrameTimer,x     ;set enemy frame timer
0A334 A9 08                                lda #Sfx_Blast
0A336 85 EF                                sta Square2SoundQueue     ;play fireworks/gunfire sound
0A338 B5 1C                     ChkDSte:   lda Enemy_State,x         ;check enemy state for d5 set
0A33A 29 20                                and #%00100000
0A33C F0 03                                beq BBFly                 ;if not set, skip to move horizontally
0A33E 20 09 AC                             jsr MoveD_EnemyVertically ;otherwise do sub to move bullet bill vertically
0A341 E8                        BBFly:     inx                         ;increment offset for enemy offset
0A342 20 5C AC                             jsr MoveObjectHorizontally  ;position object horizontally according to
0A345 A6 08                                ldx ObjectOffset            ;counters, return with saved value in A,
0A347 20 63 B0                  RunBBSubs: jsr GetEnemyOffscreenBits ;get offscreen information
0A34A 20 00 AF                             jsr RelativeEnemyPosition ;get relative coordinates
0A34D 20 CC B6                             jsr GetEnemyBoundBox      ;get bounding box coordinates
0A350 20 83 D6                             jsr PlayerEnemyCollision  ;handle player to enemy collisions
0A353                           		   ;jsr EnemiesCollision
0A353 4C 42 F8                             jmp EnemyGfxHandler       ;draw the bullet bill and leave
0A356 4C 1A C5                  KillBB:    jmp EraseEnemyObject      ;kill bullet bill and leave
0A359                           
0A359                           ;-------------------------------------------------------------------------------------
0A359                           HammerEnemyOfsData:
0A359 04 04 04 05 05 05               .db $04, $04, $04, $05, $05, $05
0A35F 06 06 06                        .db $06, $06, $06
0A362                           
0A362                           HammerXSpdData:
0A362 10 F0                           .db $10, $f0
0A364                           
0A364                           SpawnHammerObj:
0A364                           ;          lda PseudoRandomBitReg+1 ;get pseudorandom bits from
0A364                           ;          and #%00000111           ;second part of LSFR
0A364                           ;          bne SetMOfs              ;if any bits are set, branch and use as offset
0A364                           ;          lda PseudoRandomBitReg+1
0A364                           ;          and #%00001000           ;get d3 from same part of LSFR
0A364 A0 08                     		  ldy #$08
0A366 B9 28 00                  -:		  lda Misc_State,y         ;if any values loaded in
0A369 F0 05                               beq +             ;$2a-$32 where offset is then leave with carry clear
0A36B 88                        		  dey
0A36C 10 F8                     		  bpl -
0A36E 18                        		  clc
0A36F 60                        		  rts
0A370                           +:        ;ldx HammerEnemyOfsData,y ;get offset of enemy slot to check using Y as offset
0A370                                     ;lda Enemy_Flag,x         ;check enemy buffer flag at offset
0A370                                     ;bne NoHammer             ;if buffer flag set, branch to leave with carry clear
0A370 A6 08                               ldx ObjectOffset         ;get original enemy object offset
0A372 8A                                  txa
0A373 99 AE 06                            sta HammerEnemyOffset,y  ;save here
0A376 A9 90                               lda #$90
0A378 99 28 00                            sta Misc_State,y         ;save hammer's state here
0A37B A9 0C                               lda #$0c
0A37D 99 A2 04                            sta Misc_BoundBoxCtrl,y  ;set something else entirely, here
0A380 38                                  sec                      ;return with carry set
0A381 60                                  rts
0A382 A6 08                     NoHammer: ldx ObjectOffset         ;get original enemy object offset
0A384 18                                  clc                      ;return with carry clear
0A385 60                                  rts
0A386                           
0A386                           ;--------------------------------
0A386                           ;$00 - used to set downward force
0A386                           ;$01 - used to set upward force (residual)
0A386                           ;$02 - used to set maximum speed
0A386                           
0A386                           ProcHammerObj:
0A386 AD 47 07                            lda TimerControl           ;if master timer control set
0A389 D0 5F                               bne RunHSubs               ;skip all of this code and go to last subs at the end
0A38B B5 28                               lda Misc_State,x           ;otherwise get hammer's state
0A38D 29 7F                               and #%01111111             ;mask out d7
0A38F BC AE 06                            ldy HammerEnemyOffset,x    ;get enemy object offset that spawned this hammer
0A392 C9 02                               cmp #$02                   ;check hammer's state
0A394 F0 1C                               beq SetHSpd                ;if currently at 2, branch
0A396 B0 30                               bcs SetHPos                ;if greater than 2, branch elsewhere
0A398 8A                                  txa
0A399 18                                  clc                        ;add 13 bytes to use
0A39A 69 0D                               adc #$0d                   ;proper misc object
0A39C AA                                  tax                        ;return offset to X
0A39D A9 10                               lda #$10
0A39F 85 00                               sta $00                    ;set downward movement force
0A3A1                                     ;lda #$0f
0A3A1                                     ;sta $01                    ;set upward movement force (not used)
0A3A1 A9 04                               lda #$04
0A3A3 85 02                               sta $02                    ;set maximum vertical speed
0A3A5 A9 00                               lda #$00                   ;set A to impose gravity on hammer
0A3A7 20 9A AC                            jsr ImposeGravity          ;do sub to impose gravity on hammer and move vertically
0A3AA 20 5C AC                            jsr MoveObjectHorizontally ;do sub to move it horizontally
0A3AD A6 08                               ldx ObjectOffset           ;get original misc object offset
0A3AF 4C E7 A3                            jmp RunAllH                ;branch to essential subroutines
0A3B2 A9 FE                     SetHSpd:  lda #$fe
0A3B4 95 9E                               sta Misc_Y_Speed,x         ;set hammer's vertical speed
0A3B6 B9 1C 00                            lda Enemy_State,y          ;get enemy object state
0A3B9 29 F7                               and #%11110111             ;mask out d3
0A3BB 99 1C 00                            sta Enemy_State,y          ;store new state
0A3BE B6 43                               ldx Enemy_MovingDir,y      ;get enemy's moving direction
0A3C0 CA                                  dex                        ;decrement to use as offset
0A3C1 BD 62 A3                            lda HammerXSpdData,x       ;get proper speed to use based on moving direction
0A3C4 A6 08                               ldx ObjectOffset           ;reobtain hammer's buffer offset
0A3C6 95 56                               sta Misc_X_Speed,x         ;set hammer's horizontal speed
0A3C8 D6 28                     SetHPos:  dec Misc_State,x           ;decrement hammer's state
0A3CA B9 79 00                            lda Enemy_X_Position,y     ;get enemy's horizontal position
0A3CD 18                                  clc
0A3CE 69 02                               adc #$02                   ;set position 2 pixels to the right
0A3D0 95 85                               sta Misc_X_Position,x      ;store as hammer's horizontal position
0A3D2 B9 60 00                            lda Enemy_PageLoc,y        ;get enemy's page location
0A3D5 69 00                               adc #$00                   ;add carry
0A3D7 95 6C                               sta Misc_PageLoc,x         ;store as hammer's page location
0A3D9 B9 C1 00                            lda Enemy_Y_Position,y     ;get enemy's vertical position
0A3DC 38                                  sec
0A3DD E9 0A                               sbc #$0a                   ;move position 10 pixels upward
0A3DF 95 CD                               sta Misc_Y_Position,x      ;store as hammer's vertical position
0A3E1 A9 01                               lda #$01
0A3E3 95 B4                               sta Misc_Y_HighPos,x       ;set hammer's vertical high byte
0A3E5 D0 03                               bne RunHSubs               ;unconditional branch to skip first routine
0A3E7 20 C8 D5                  RunAllH:  jsr PlayerHammerCollision  ;handle collisions
0A3EA A0 02                     RunHSubs: ldy #$02                 ;set for misc object offsets
0A3EC 8A                                  txa
0A3ED 18                        		  clc
0A3EE 79 A1 AD                            adc ObjOffsetData,y  ;add amount of bytes to offset depending on setting in Y
0A3F1 AA                                  tax                  ;put back in X and leave
0A3F2 A0 06                               ldy #$06                 ;set other offset for misc object's offscreen bits
0A3F4 98                                  tya                         ;save offscreen bits offset to stack for now
0A3F5 48                                  pha
0A3F6 20 3F AD                            jsr RunOffscrBitsSubs
0A3F9 A8                                  tay
0A3FA B9 24 BE                  		  lda LSBtoMSB,y
0A3FD 05 00                               ora $00                     ;mask together with previously saved low nybble
0A3FF 85 00                               sta $00                     ;store both here
0A401 68                                  pla                         ;get offscreen bits offset from stack
0A402 A8                                  tay
0A403 A5 00                               lda $00                     ;get value here and store elsewhere
0A405 99 D0 03                            sta SprObject_OffscrBits,y
0A408 A6 08                               ldx ObjectOffset
0A40A A0 02                               ldy #$02                ;set for misc object offsets
0A40C 8A                        		  txa
0A40D 18                                  clc
0A40E 79 A1 AD                            adc ObjOffsetData,y  ;add amount of bytes to offset depending on setting in Y
0A411 AA                                  tax      
0A412 A0 06                               ldy #$06
0A414 20 6A AD                            jsr RelWOfs             ;get the coordinates
0A417 8A                                  txa                       ;add nine bytes to offset
0A418 18                                  clc                       ;to use in routines as offset for misc object
0A419 69 09                               adc #$09
0A41B AA                                  tax
0A41C A0 06                               ldy #06                  ;set offset for relative coordinates
0A41E 20 5F B7                  		  jsr BoundingBoxCore       ;get bounding box coordinates
0A421 20 A1 B7                            jsr CheckRightScreenBBox  ;jump to handle any offscreen coordinates
0A424 4C 43 F3                            jmp DrawHammer             ;draw the hammer
0A427                           
0A427                           ;-------------------------------------------------------------------------------------
0A427                           ;$02 - used to store vertical high nybble offset from block buffer routine
0A427                           ;$06 - used to store low byte of block buffer address
0A427                           
0A427                           CoinBlock:
0A427 20 72 A4                        jsr FindEmptyMiscSlot   ;set offset for empty or last misc object buffer slot
0A42A B5 68                           lda Block_PageLoc,x     ;get page location of block object
0A42C 99 6C 00                        sta Misc_PageLoc,y      ;store as page location of misc object
0A42F B5 81                           lda Block_X_Position,x  ;get horizontal coordinate of block object
0A431 09 05                           ora #$05                ;add 5 pixels
0A433 99 85 00                        sta Misc_X_Position,y   ;store as horizontal coordinate of misc object
0A436 B5 C9                           lda Block_Y_Position,x  ;get vertical coordinate of block object
0A438 E9 10                           sbc #$10                ;subtract 16 pixels
0A43A 99 CD 00                        sta Misc_Y_Position,y   ;store as vertical coordinate of misc object
0A43D 4C 5B A4                        jmp JCoinC              ;jump to rest of code as applies to this misc object
0A440                           
0A440                           SetupJumpCoin:
0A440 20 72 A4                          jsr FindEmptyMiscSlot  ;set offset for empty or last misc object buffer slot
0A443 BD EA 03                          lda Block_PageLoc2,x   ;get page location saved earlier
0A446 99 6C 00                          sta Misc_PageLoc,y     ;and save as page location for misc object
0A449 A5 F7                             lda $f7                ;get low byte of block buffer offset
0A44B 0A                                asl
0A44C 0A                                asl                    ;multiply by 16 to use lower nybble
0A44D 0A                                asl
0A44E 0A                                asl
0A44F 09 05                             ora #$05               ;add five pixels
0A451 99 85 00                          sta Misc_X_Position,y  ;save as horizontal coordinate for misc object
0A454 A5 02                             lda $02                ;get vertical high nybble offset from earlier
0A456 69 20                             adc #$20               ;add 32 pixels for the status bar
0A458 99 CD 00                          sta Misc_Y_Position,y  ;store as vertical coordinate
0A45B A9 FB                     JCoinC: lda #$fb
0A45D 99 9E 00                          sta Misc_Y_Speed,y     ;set vertical speed
0A460 EE 48 07                  		inc CoinTallyFor1Ups   ;increment coin tally used to activate 1-up block flag
0A463 A9 01                             lda #$01
0A465 99 B4 00                          sta Misc_Y_HighPos,y   ;set vertical high byte
0A468 99 28 00                          sta Misc_State,y       ;set state for misc object
0A46B 85 EF                             sta Square2SoundQueue  ;load coin grab sound
0A46D 86 08                             stx ObjectOffset       ;store current control bit as misc object offset 
0A46F 4C 19 A6                          jmp GiveOneCoin        ;update coin tally on the screen and coin amount variable
0A472                           
0A472                           FindEmptyMiscSlot:
0A472 A0 08                                ldy #$08                ;start at end of misc objects buffer
0A474 B9 28 00                  FMiscLoop: lda Misc_State,y        ;get misc object state
0A477 F0 07                                beq UseMiscS            ;branch if none found to use current offset
0A479 88                                   dey                     ;decrement offset
0A47A C0 05                                cpy #$05                ;do this for three slots
0A47C D0 F6                                bne FMiscLoop           ;do this until all slots are checked
0A47E A0 08                                ldy #$08                ;if no empty slots found, use last slot
0A480 8C B7 06                  UseMiscS:  sty JumpCoinMiscOffset  ;store offset of misc object buffer here (residual)
0A483 60                                   rts
0A484                           
0A484                           ;-------------------------------------------------------------------------------------
0A484                           
0A484                           MiscObjectsCore:
0A484 A2 08                               ldx #$08          ;set at end of misc object buffer
0A486                           MiscLoop: 
0A486 86 08                     		  stx ObjectOffset  ;store misc object offset here
0A488 B5 28                               lda Misc_State,x  ;check misc object state
0A48A F0 0B                               beq +  ;branch to check next slot
0A48C 30 06                               bmi ++		    ;if d7 not set, jumping coin, thus skip to rest of code here
0A48E 20 25 A5                  		  jsr ProcJumpCoin
0A491 4C 97 A4                  		  jmp +
0A494 20 86 A3                  ++:       jsr ProcHammerObj ;otherwise go to process hammer,
0A497 CA                        +:        dex               ;decrement misc object offset
0A498 86 08                     		  stx ObjectOffset  ;store misc object offset here
0A49A B5 28                               lda Misc_State,x  ;check misc object state
0A49C F0 0B                               beq +  ;branch to check next slot
0A49E 30 06                               bmi ++		    ;if d7 not set, jumping coin, thus skip to rest of code here
0A4A0 20 25 A5                  		  jsr ProcJumpCoin
0A4A3 4C A9 A4                  		  jmp +
0A4A6 20 86 A3                  ++:       jsr ProcHammerObj ;otherwise go to process hammer,
0A4A9 CA                        +:        dex               ;decrement misc object offset
0A4AA 86 08                     		  stx ObjectOffset  ;store misc object offset here
0A4AC B5 28                               lda Misc_State,x  ;check misc object state
0A4AE F0 0B                               beq +  ;branch to check next slot
0A4B0 30 06                               bmi ++		    ;if d7 not set, jumping coin, thus skip to rest of code here
0A4B2 20 25 A5                  		  jsr ProcJumpCoin
0A4B5 4C BB A4                  		  jmp +
0A4B8 20 86 A3                  ++:       jsr ProcHammerObj ;otherwise go to process hammer,
0A4BB CA                        +:        dex               ;decrement misc object offset
0A4BC 86 08                     		  stx ObjectOffset  ;store misc object offset here
0A4BE B5 28                               lda Misc_State,x  ;check misc object state
0A4C0 F0 0B                               beq +  ;branch to check next slot
0A4C2 30 06                               bmi ++		    ;if d7 not set, jumping coin, thus skip to rest of code here
0A4C4 20 25 A5                  		  jsr ProcJumpCoin
0A4C7 4C CD A4                  		  jmp +
0A4CA 20 86 A3                  ++:       jsr ProcHammerObj ;otherwise go to process hammer,
0A4CD CA                        +:        dex               ;decrement misc object offset
0A4CE 86 08                     		  stx ObjectOffset  ;store misc object offset here
0A4D0 B5 28                               lda Misc_State,x  ;check misc object state
0A4D2 F0 0B                               beq +  ;branch to check next slot
0A4D4 30 06                               bmi ++		    ;if d7 not set, jumping coin, thus skip to rest of code here
0A4D6 20 25 A5                  		  jsr ProcJumpCoin
0A4D9 4C DF A4                  		  jmp +
0A4DC 20 86 A3                  ++:       jsr ProcHammerObj ;otherwise go to process hammer,
0A4DF CA                        +:        dex               ;decrement misc object offset
0A4E0 86 08                     		  stx ObjectOffset  ;store misc object offset here
0A4E2 B5 28                               lda Misc_State,x  ;check misc object state
0A4E4 F0 0B                               beq +  ;branch to check next slot
0A4E6 30 06                               bmi ++		    ;if d7 not set, jumping coin, thus skip to rest of code here
0A4E8 20 25 A5                  		  jsr ProcJumpCoin
0A4EB 4C F1 A4                  		  jmp +
0A4EE 20 86 A3                  ++:       jsr ProcHammerObj ;otherwise go to process hammer,
0A4F1 CA                        +:        dex               ;decrement misc object offset
0A4F2 86 08                     		  stx ObjectOffset  ;store misc object offset here
0A4F4 B5 28                               lda Misc_State,x  ;check misc object state
0A4F6 F0 0B                               beq +  ;branch to check next slot
0A4F8 30 06                               bmi ++		    ;if d7 not set, jumping coin, thus skip to rest of code here
0A4FA 20 25 A5                  		  jsr ProcJumpCoin
0A4FD 4C 03 A5                  		  jmp +
0A500 20 86 A3                  ++:       jsr ProcHammerObj ;otherwise go to process hammer,
0A503 CA                        +:        dex               ;decrement misc object offset
0A504 86 08                     		  stx ObjectOffset  ;store misc object offset here
0A506 B5 28                               lda Misc_State,x  ;check misc object state
0A508 F0 0B                               beq +  ;branch to check next slot
0A50A 30 06                               bmi ++		    ;if d7 not set, jumping coin, thus skip to rest of code here
0A50C 20 25 A5                  		  jsr ProcJumpCoin
0A50F 4C 15 A5                  		  jmp +
0A512 20 86 A3                  ++:       jsr ProcHammerObj ;otherwise go to process hammer,
0A515 CA                        +:        dex               ;decrement misc object offset
0A516 86 08                     		  stx ObjectOffset  ;store misc object offset here
0A518 B5 28                               lda Misc_State,x  ;check misc object state
0A51A F0 08                               beq +  ;branch to check next slot
0A51C 30 03                               bmi ++		    ;if d7 not set, jumping coin, thus skip to rest of code here
0A51E 4C 25 A5                  		  jmp ProcJumpCoin
0A521 4C 86 A3                  ++:       jmp ProcHammerObj ;otherwise go to process hammer,
0A524 60                        +: 		  rts
0A525                                     
0A525                           
0A525                           ;--------------------------------
0A525                           ;$00 - used to set downward force
0A525                           ;$01 - used to set upward force (residual)
0A525                           ;$02 - used to set maximum speed
0A525                           
0A525                           ProcJumpCoin:
0A525 B4 28                                ldy Misc_State,x          ;check misc object state
0A527 88                                   dey                       ;decrement to see if it's set to 1
0A528 F0 1B                                beq JCoinRun              ;if so, branch to handle jumping coin
0A52A F6 28                                inc Misc_State,x          ;otherwise increment state to either start off or as timer
0A52C B5 85                                lda Misc_X_Position,x     ;get horizontal coordinate for misc object
0A52E 18                                   clc                       ;whether its jumping coin (state 0 only) or floatey number
0A52F 6D 75 07                             adc ScrollAmount          ;add current scroll speed
0A532 95 85                                sta Misc_X_Position,x     ;store as new horizontal coordinate
0A534 B5 6C                                lda Misc_PageLoc,x        ;get page location
0A536 69 00                                adc #$00                  ;add carry
0A538 95 6C                                sta Misc_PageLoc,x        ;store as new page location
0A53A B5 28                                lda Misc_State,x
0A53C C9 30                                cmp #$30                  ;check state of object for preset value
0A53E D0 24                                bne RunJCSubs             ;if not yet reached, branch to subroutines
0A540 A9 00                                lda #$00
0A542 95 28                                sta Misc_State,x          ;otherwise nullify object state
0A544 60                                   rts
0A545 8A                        JCoinRun:  txa             
0A546 18                                   clc                       ;add 13 bytes to offset for next subroutine
0A547 69 0D                                adc #$0d
0A549 AA                                   tax
0A54A A9 50                                lda #$50                  ;set downward movement amount
0A54C 85 00                                sta $00
0A54E A9 06                                lda #$06                  ;set maximum vertical speed
0A550 85 02                                sta $02
0A552 4A                                   lsr                       ;divide by 2 and set
0A553 85 01                                sta $01                   ;as upward movement amount (apparently residual)
0A555 A9 00                                lda #$00                  ;set A to impose gravity on jumping coin
0A557 20 9A AC                             jsr ImposeGravity         ;do sub to move coin vertically and impose gravity on it
0A55A A6 08                                ldx ObjectOffset          ;get original misc object offset
0A55C B5 9E                                lda Misc_Y_Speed,x        ;check vertical speed
0A55E C9 05                                cmp #$05
0A560 D0 02                                bne RunJCSubs             ;if not moving downward fast enough, keep state as-is
0A562 F6 28                                inc Misc_State,x          ;otherwise increment state to change to floatey number
0A564 A0 02                     RunJCSubs: ldy #$02                ;set for misc object offsets
0A566 8A                        		   txa                  ;move offset to A
0A567 18                        		   clc
0A568 79 A1 AD                  		   adc ObjOffsetData,y  ;add amount of bytes to offset depending on setting in Y
0A56B AA                        		   tax                  ;put back in X and leave
0A56C A0 06                     		   ldy #$06
0A56E B5 C0                     		   lda SprObject_Y_Position,x  ;load vertical coordinate low
0A570 99 B8 03                  		   sta SprObject_Rel_YPos,y    ;store here
0A573 B5 78                     		   lda SprObject_X_Position,x  ;load horizontal coordinate
0A575 38                        		   sec                         ;subtract left edge coordinate
0A576 ED 1C 07                  		   sbc ScreenLeft_X_Pos
0A579 99 AD 03                  		   sta SprObject_Rel_XPos,y    ;store result here
0A57C A6 08                     		   ldx ObjectOffset            ;return original offset
0A57E A0 02                                ldy #$02                 ;set for misc object offsets
0A580 8A                                   txa                  ;move offset to A
0A581 18                                   clc
0A582 79 A1 AD                             adc ObjOffsetData,y  ;add amount of bytes to offset depending on setting in Y
0A585 AA                                   tax                  ;put back in X and leave
0A586 A0 06                                ldy #$06                 ;set other offset for misc object's offscreen bits
0A588 20 81 AD                             jsr GetOffScreenBitsSet  ;and get offscreen information about misc object
0A58B                                      ;jsr GetMiscBoundBox       ;get bounding box coordinates (why?)
0A58B 4C 8E A5                             jmp JCoinGfxHandler       ;draw the coin or floatey number
0A58E                           
0A58E                           		   
0A58E                           JCoinGfxHandler:
0A58E BC F3 06                           ldy Misc_SprDataOffset,x    ;get coin/floatey number's OAM data offset
0A591 B5 28                              lda Misc_State,x            ;get state of misc object
0A593 C9 02                              cmp #$02                    ;if 2 or greater, 
0A595 F0 43                              beq DrawFloateyNumber_Coin  ;branch to draw floatey number
0A597 B0 3E                     		 bcs ExJCGfx
0A599 B5 CD                              lda Misc_Y_Position,x       ;store vertical coordinate as
0A59B 99 00 02                           sta Sprite_Y_Position,y     ;Y coordinate for first sprite
0A59E 18                                 clc
0A59F 69 08                              adc #$08                    ;add eight pixels
0A5A1 99 04 02                           sta Sprite_Y_Position+4,y   ;store as Y coordinate for second sprite
0A5A4 AD B3 03                           lda Misc_Rel_XPos           ;get relative horizontal coordinate
0A5A7 99 03 02                           sta Sprite_X_Position,y
0A5AA 99 07 02                           sta Sprite_X_Position+4,y   ;store as X coordinate for first and second sprites
0A5AD A5 09                              lda FrameCounter            ;get frame counter
0A5AF 4A                                 lsr                         ;divide by 2 to alter every other frame
0A5B0 29 03                              and #%00000011              ;mask out d2-d1
0A5B2 AA                                 tax                         ;use as graphical offset
0A5B3 BD 50 91                           lda JumpingCoinTiles,x      ;load tile number
0A5B6 C8                                 iny                         ;increment OAM data offset to write tile numbers
0A5B7 99 04 02                           sta Sprite_Data+4,y            ;and into first row sprites
0A5BA 99 00 02                  	     sta Sprite_Data,y              ;and do sub to dump into first and second sprites
0A5BD 88                                 dey                         ;decrement to get old offset
0A5BE A9 02                              lda #$02
0A5C0 99 02 02                           sta Sprite_Attributes,y     ;set attribute byte in first sprite
0A5C3 A9 82                              lda #$82
0A5C5 99 06 02                           sta Sprite_Attributes+4,y   ;set attribute byte with vertical flip in second sprite
0A5C8 AD D6 03                  		 lda Misc_OffscreenBits
0A5CB 29 FC                              and #%11111100              ;check offscreen bits
0A5CD F0 08                              beq ExJCGfx               ;if all bits clear, leave object alone
0A5CF A9 F8                              lda #$f8
0A5D1 99 04 02                           sta Sprite_Data+4,y       ;and into first row sprites
0A5D4 99 00 02                           sta Sprite_Data,y
0A5D7 A6 08                     ExJCGfx: ldx ObjectOffset            ;get misc object offset
0A5D9 60                                 rts        
0A5DA                           
0A5DA                           DrawFloateyNumber_Coin:
0A5DA 8A                                  txa
0A5DB 38                        		  sec
0A5DC E9 05                     		  sbc #$05
0A5DE A8                        		  tay
0A5DF A9 01                     		  lda #$01
0A5E1 99 10 01                  		  sta FloateyNum_Control,y ;set number of points control for floatey numbers
0A5E4 A9 20                     		  lda #$20
0A5E6 99 2C 01                  		  sta FloateyNum_Timer,y   ;set timer for floatey numbers
0A5E9 AD D6 03                  		  lda Misc_OffscreenBits
0A5EC 29 FC                               and #%11111100              ;check offscreen bits
0A5EE F0 07                               beq +               		;if all bits clear, leave object alone
0A5F0 A9 00                     		  lda #$00
0A5F2 99 1E 01                  		  sta FloateyNum_Y_Pos,y
0A5F5 F0 05                     		  beq ++
0A5F7 B5 CD                     +:		  lda Misc_Y_Position,x
0A5F9 99 1E 01                  		  sta FloateyNum_Y_Pos,y   ;set vertical coordinate
0A5FC AD B3 03                  ++:		  lda Misc_Rel_XPos
0A5FF 38                        		  sec
0A600 E9 03                     		  sbc #$03
0A602 99 17 01                  		  sta FloateyNum_X_Pos,y   ;set horizontal coordinate and leave
0A605 98                        		  tya
0A606 AA                        		  tax
0A607 A9 20                     		  lda #$20
0A609 9D 1A 7E                  		  sta FloateyShit,x
0A60C A6 08                     		  ldx ObjectOffset 
0A60E 60                        		  rts
0A60F                           ;		  lda FrameCounter          ;get frame counter
0A60F                           ;          lsr                       ;divide by 2
0A60F                           ;          bcs NotRsNum              ;branch if d0 not set to raise number every other frame
0A60F                           ;          dec Misc_Y_Position,x     ;otherwise, decrement vertical coordinate
0A60F                           ;NotRsNum: lda Misc_Y_Position,x     ;get vertical coordinate
0A60F                           ;          sta Sprite_Data+4,y            ;and into first row sprites
0A60F                           ;	      sta Sprite_Data,y              ;and do sub to dump into first and second sprites
0A60F                           ;          lda Misc_Rel_XPos         ;get relative horizontal coordinates
0A60F                           ;		  sta Sprite_X_Position,y
0A60F                           ;          clc
0A60F                           ;          adc #$08                  ;add eight pixels
0A60F                           ;          sta Sprite_X_Position+4,y ;store as X coordinate for second sprite
0A60F                           ;          lda #$02
0A60F                           ;          sta Sprite_Attributes,y   ;store attribute byte in both sprites
0A60F                           ;          sta Sprite_Attributes+4,y
0A60F                           ;          lda #$f6
0A60F                           ;          sta Sprite_Tilenumber,y   ;put tile numbers into both sprites
0A60F                           ;          lda #$fb                  ;that resemble "200"
0A60F                           ;          sta Sprite_Tilenumber+4,y
0A60F                           ;          rts        
0A60F                           ;-------------------------------------------------------------------------------------
0A60F                           CoinTallyOffsets:
0A60F 17 1D 17                        .db $17, $1d, $17
0A612                           
0A612                           ScoreOffsets:
0A612 0B 11 0B                        .db $0b, $11, $0b
0A615                           	  
0A615                           StatusBarNybbles:
0A615 02 13 02 45                     .db $02, $13, $02, $45
0A619                           	  
0A619                           GiveOneCoin:
0A619 A9 01                     	  lda #$01               ;set digit modifier to add 1 coin
0A61B 8D 39 01                        sta DigitModifier+5    ;to the current player's coin tally
0A61E A0 17                           ldy #$17
0A620 20 9C 8D                        jsr DigitsMathRoutine  ;update the coin tally
0A623 EE 5E 07                        inc CoinTally          ;increment onscreen player's coin amount
0A626 AD 5E 07                        lda CoinTally
0A629 C9 64                           cmp #$64               ;does player have 100 coins yet?
0A62B D0 35                           bne CoinPoints         ;if not, skip all of this
0A62D A9 00                           lda #$00
0A62F 8D 5E 07                        sta CoinTally          ;otherwise, reinitialize coin amount
0A632 A9 40                     	  lda #Sfx_ExtraLife
0A634 85 EF                     	  sta Square2SoundQueue        ;and play the 1-up sound
0A636 AD 5A 07                  	  lda NumberofLives
0A639 C9 63                     	  cmp #$63
0A63B F0 25                     	  beq CoinPoints
0A63D EE 5A 07                        inc NumberofLives      ;give the player an extra life
0A640 A6 08                     	  ldx ObjectOffset
0A642 A9 09                     	  lda #$09
0A644 9D 10 01                  	  sta FloateyNum_Control,x ;set number of points control for floatey numbers
0A647 8D 23 60                  	  sta dontinc
0A64A A9 30                     	  lda #$30
0A64C 9D 2C 01                  	  sta FloateyNum_Timer,x   ;set timer for floatey numbers
0A64F A5 C0                     	  lda Player_Y_Position
0A651 9D 1E 01                  	  sta FloateyNum_Y_Pos,x   ;set vertical coordinate
0A654 AD AD 03                  	  lda Player_Rel_XPos
0A657 9D 17 01                  	  sta FloateyNum_X_Pos,x   ;set horizontal coordinate and leave
0A65A 20 18 AD                  	  jsr UpdateLives
0A65D A9 02                     	  lda #$02
0A65F 4C 76 A6                  	  jmp RealUpdateNumber
0A662                           		  
0A662                           CoinPoints:
0A662 A9 01                           lda #$01               ;set digit modifier to award
0A664 8D 38 01                        sta DigitModifier+4    ;200 points to the player
0A667 A6 08                     	  ldx ObjectOffset
0A669                           AddToScore:		
0A669 A0 0B                           ldy #$0b
0A66B 20 9C 8D                        jsr DigitsMathRoutine  ;update the score internally with value in digit modifier
0A66E                           WriteScoreAndCoinTally:
0A66E A9 02                     		lda #$02
0A670                           		;inc bocata3
0A670                           		;ldx ObjectOffset
0A670                           		;rts
0A670                           UpdateNumber:
0A670 20 36 8D                          jsr PSBN				  ;print status bar numbers based on nybbles, whatever they be
0A673 4C 79 A6                  		jmp +
0A676                           		;jmp NoZSup
0A676                           RealUpdateNumber:
0A676 20 3A 8D                  		jsr PrintStatusBarNumbers
0A679 AC 00 64                  +:		ldy VRAM_Buffer1_Offset   
0A67C                                   ;lda VRAM_Buffer1-6,y      ;check highest digit of score
0A67C                                    ;bne NoZSup                ;if zero, overwrite with space tile for zero suppression
0A67C                                    ;lda #$24
0A67C                                   ;sta VRAM_Buffer1-6,y
0A67C A6 08                     NoZSup: ldx ObjectOffset          ;get enemy object buffer offset
0A67E 60                                rts
0A67F                           ;-------------------------------------------------------------------------------------
0A67F                           
0A67F                           SetupPowerUp:
0A67F 8A                        		   txa
0A680 A8                        		   tay
0A681 A2 05                     		   ldx #$05
0A683 B5 0F                     -:		   lda Enemy_Flag,x
0A685 F0 04                     		   beq +
0A687 CA                        		   dex
0A688 10 F9                     		   bpl -
0A68A 60                        		   rts
0A68B A9 2E                     +:		   lda #PowerUpObject        ;load power-up identifier into
0A68D 95 15                                sta Enemy_ID,x            ;special use slot of enemy object buffer
0A68F B9 68 00                             lda Block_PageLoc,y       ;store page location of block object
0A692 95 60                                sta Enemy_PageLoc,x       ;as page location of power-up object
0A694 B9 81 00                             lda Block_X_Position,y    ;store horizontal coordinate of block object
0A697 95 79                                sta Enemy_X_Position,x    ;as horizontal coordinate of power-up object
0A699 A9 01                                lda #$01
0A69B 95 A8                                sta Enemy_Y_HighPos,x     ;set vertical high byte of power-up object
0A69D B9 C9 00                             lda Block_Y_Position,y    ;get vertical coordinate of block object
0A6A0 38                                   sec
0A6A1 E9 08                                sbc #$08                  ;subtract 8 pixels
0A6A3 95 C1                     		   sta Enemy_Y_Position,x    ;and use as vertical coordinate of power-up object
0A6A5 A9 01                     PwrUpJmp:  lda #$01                  ;this is a residual jump point in enemy object jump table
0A6A7 95 1C                                sta Enemy_State,x         ;set power-up object's state
0A6A9 95 0F                                sta Enemy_Flag,x          ;set buffer flag
0A6AB A9 03                                lda #$03
0A6AD 9D 9A 04                             sta Enemy_BoundBoxCtrl,x  ;set bounding box size control for power-up object
0A6B0 A5 39                                lda PowerUpType
0A6B2 C9 02                                cmp #$02                  ;check currently loaded power-up type
0A6B4 B0 08                                bcs StrType               ;if star or 1-up, branch ahead
0A6B6 AD 56 07                             lda PlayerStatus          ;otherwise check player's current status
0A6B9 C9 02                                cmp #$02
0A6BB 90 01                                bcc StrType               ;if player not fiery, use status as power-up type
0A6BD 4A                                   lsr                       ;otherwise shift right to force fire flower type
0A6BE 9D CE 7F                  StrType:   sta $7fce,x         		 ;store type here
0A6C1 A9 20                     PutBehind: lda #%00100000
0A6C3 9D C5 03                             sta Enemy_SprAttrib,x     ;set background priority bit
0A6C6 A9 02                                lda #Sfx_GrowPowerUp
0A6C8 85 EF                                sta Square2SoundQueue     ;load power-up reveal sound and leave
0A6CA 60                        ExitPUp:   rts
0A6CB                           idk:
0A6CB AE B8 7F                  			ldx $7fb8
0A6CE F0 FA                     			beq ExitPUp
0A6D0 CA                        			dex
0A6D1 4C 1A C5                  			jmp EraseEnemyObject
0A6D4                           ;-------------------------------------------------------------------------------------
0A6D4                           
0A6D4                           PowerUpObjHandler:
0A6D4 B5 1C                              lda Enemy_State,x          ;check power-up object's state
0A6D6 F0 F2                              beq ExitPUp                ;if not set, branch to leave
0A6D8 10 2C                              bpl GrowThePowerUp         ;if not set, branch ahead to skip this part
0A6DA AD 47 07                           lda TimerControl           ;if master timer control set,
0A6DD D0 59                              bne RunPUSubs              ;branch ahead to enemy object routines
0A6DF BD CE 7F                           lda $7fce,x                ;check power-up type
0A6E2 F0 15                              beq ShroomM                ;if normal mushroom, branch ahead to move it
0A6E4 C9 03                              cmp #$03
0A6E6 F0 11                              beq ShroomM                ;if 1-up mushroom, branch ahead to move it
0A6E8 C9 02                              cmp #$02
0A6EA D0 4C                              bne RunPUSubs              ;if not star, branch elsewhere to skip movement
0A6EC 20 F9 A2                           jsr MoveJumpingEnemy       ;otherwise impose gravity on star power-up and make it jump
0A6EF A6 08                     		 ldx ObjectOffset
0A6F1 20 7B EF                           jsr EnemyJump              ;note that green paratroopa shares the same code here 
0A6F4 A6 08                     		 ldx ObjectOffset
0A6F6 4C 38 A7                           jmp RunPUSubs              ;then jump to other power-up subroutines
0A6F9 20 FD C5                  ShroomM: jsr MoveNormalEnemy        ;do sub to make mushrooms move
0A6FC A6 08                              ldx ObjectOffset
0A6FE 20 EA E7                  		 jsr EnemyToBGCollisionDet  ;deal with collisions
0A701 A6 08                     		 ldx ObjectOffset			;bug fix: pswitch modifies the x register
0A703 4C 38 A7                           jmp RunPUSubs              ;run the other subroutines
0A706                           
0A706                           GrowThePowerUp:
0A706 A5 09                                lda FrameCounter           ;get frame counter
0A708 29 03                                and #$03                   ;mask out all but 2 LSB
0A70A D0 26                                bne ChkPUSte               ;if any bits set here, branch
0A70C D6 C1                                dec Enemy_Y_Position,x     ;otherwise decrement vertical coordinate slowly
0A70E B5 1C                                lda Enemy_State,x          ;load power-up object state
0A710 F6 1C                                inc Enemy_State,x          ;increment state for next frame (to make power-up rise)
0A712 C9 11                                cmp #$11                   ;if power-up object state not yet past 16th pixel,
0A714 90 1C                                bcc ChkPUSte               ;branch ahead to last part here
0A716 A9 00                     		   lda #$00
0A718 BC CE 7F                  		   ldy $7fce,x
0A71B C0 02                     		   cpy #$02
0A71D D0 02                     		   bne +
0A71F A9 FD                     		   lda #$fd
0A721 95 92                     +:         sta Enemy_Y_Speed,x        ;make the paratroopa jump again
0A723 A9 10                     		   lda #$10
0A725 95 4A                                sta Enemy_X_Speed,x        ;otherwise set horizontal speed
0A727 A9 80                                lda #%10000000
0A729 95 1C                                sta Enemy_State,x          ;and then set d7 in power-up object's state
0A72B 0A                                   asl                        ;shift once to init A
0A72C 9D C5 03                             sta Enemy_SprAttrib,x      ;initialize background priority bit set here
0A72F 2A                                   rol                        ;rotate A to set right moving direction
0A730 95 43                                sta Enemy_MovingDir,x      ;set moving direction
0A732 B5 1C                     ChkPUSte:  lda Enemy_State,x          ;check power-up object's state
0A734 C9 06                                cmp #$06                   ;for if power-up has risen enough
0A736 90 12                                bcc ExitPUp2               ;if not, don't even bother running these routines
0A738 20 00 AF                  RunPUSubs: jsr RelativeEnemyPosition  ;get coordinates relative to screen
0A73B 20 63 B0                             jsr GetEnemyOffscreenBits  ;get offscreen bits
0A73E 20 CC B6                             jsr GetEnemyBoundBox       ;get bounding box coordinates
0A741 20 32 BF                             jsr DrawPowerUp            ;draw the power-up object
0A744 20 83 D6                             jsr PlayerEnemyCollision   ;check for collision with player
0A747 4C 1E D3                             jmp OffscreenBoundsCheck   ;check to see if it went offscreen
0A74A 60                        ExitPUp2:  rts
0A74B                           
0A74B                           
0A74B                           ;-------------------------------------------------------------------------------------
0A74B                           ;These apply to all routines in this section unless otherwise noted:
0A74B                           ;$00 - used to store metatile from block buffer routine
0A74B                           ;$02 - used to store vertical high nybble offset from block buffer routine
0A74B                           ;$05 - used to store metatile stored in A at beginning of PlayerHeadCollision
0A74B                           ;$06-$07 - used as block buffer address indirect
0A74B                           
0A74B                           BlockYPosAdderData:
0A74B 04 12                           .db $04, $12
0A74D                           
0A74D                           PlayerHeadCollision:
0A74D 48                                   pha                      ;store metatile number to stack
0A74E C9 74                     		   cmp #$74
0A750 D0 07                     		   bne +
0A752 AE EE 03                  		   ldx SprDataOffset_Ctrl
0A755 A9 11                     		   lda #$11
0A757 D0 0C                     		   bne DBlockSte
0A759 A9 11                     +:         lda #$11                 ;load unbreakable block object state by default
0A75B AE EE 03                             ldx SprDataOffset_Ctrl   ;load offset control bit here
0A75E AC 54 07                             ldy PlayerSize           ;check player's size
0A761 D0 02                                bne DBlockSte            ;if small, branch
0A763 A9 12                                lda #$12                 ;otherwise load breakable block object state
0A765 95 24                     DBlockSte: sta Block_State,x        ;store into block object buffer
0A767 20 B6 8A                             jsr DestroyBlockMetatile ;store blank metatile in vram buffer to write to name table
0A76A AE EE 03                             ldx SprDataOffset_Ctrl   ;load offset control bit
0A76D A5 02                                lda $02                  ;get vertical high nybble offset used in block buffer routine
0A76F 9D E4 03                             sta Block_Orig_YPos,x    ;set as vertical coordinate for block object
0A772 A8                                   tay
0A773 A5 F7                                lda $f7                  ;get low byte of block buffer address used in same routine
0A775 9D E6 03                             sta Block_BBuf_Low,x     ;save as offset here to be used later
0A778 A5 F8                     		   lda $f8
0A77A 9D 9F 60                  		   sta Block_BBuf_High,x
0A77D 8E 56 60                  		   stx tempB
0A780 B1 F7                                lda ($f7),y              ;get contents of block buffer at old address at $06, $07
0A782 8D 57 60                  		   sta tempC
0A785 AC 4E 07                  		   ldy AreaType
0A788 D0 07                     		   bne +
0A78A AA                        		   tax
0A78B BD FA B8                  		   lda MetatileThingy,x
0A78E AE 56 60                  		   ldx tempB
0A791 20 DF A8                  +:         jsr BlockBumpedChk       ;do a sub to check which block player bumped head on
0A794 85 00                                sta $00                  ;store metatile here
0A796                           		   
0A796 08                        		   php
0A797 C9 74                     		   cmp #$74
0A799 F0 0B                     		   beq ChkBrick
0A79B AC 54 07                  		   ldy PlayerSize           ;check player's size
0A79E D0 06                                bne ChkBrick             ;if small, use metatile itself as contents of A
0A7A0 AC 4E 07                  		   ldy AreaType
0A7A3 B9 74 8A                  		   lda blank,y   			;otherwise init A (note: big = 0)
0A7A6 28                        ChkBrick:  plp
0A7A7 90 33                     		   bcc PutMTileB            ;if no match was found in previous sub, skip ahead
0A7A9 A0 11                                ldy #$11                 ;otherwise load unbreakable state into block object buffer
0A7AB 94 24                                sty Block_State,x        ;note this applies to both player sizes
0A7AD A9 C4                                lda #$c4                 ;load empty block metatile into A for now
0A7AF A4 00                                ldy $00                  ;get metatile from before
0A7B1 C0 58                                cpy #$58                 ;is it brick with coins (with line)?
0A7B3 F0 0C                                beq StartBTmr            ;if so, branch
0A7B5 C0 34                     		   cpy #$34
0A7B7 F0 08                     		   beq StartBTmr
0A7B9 C0 74                     		   cpy #$74
0A7BB F0 1E                     		   beq PutOldMT
0A7BD C0 5D                                cpy #$5d                 ;is it brick with coins (without line)?
0A7BF D0 1B                                bne PutMTileB            ;if not, branch ahead to store empty block metatile
0A7C1 AD BC 06                  StartBTmr: lda BrickCoinTimerFlag   ;check brick coin timer flag
0A7C4 D0 08                                bne ContBTmr             ;if set, timer expired or counting down, thus branch
0A7C6 A9 0A                                lda #$0a
0A7C8 8D B4 63                             sta BrickCoinTimer       ;if not set, set brick coin timer
0A7CB EE BC 06                             inc BrickCoinTimerFlag   ;and set flag linked to it
0A7CE CE B4 63                  ContBTmr:  dec BrickCoinTimer
0A7D1 AD B4 63                  		   lda BrickCoinTimer       ;check brick coin timer
0A7D4 D0 05                                bne PutOldMT             ;if not yet expired, branch to use current metatile
0A7D6 8D BC 06                  		   sta BrickCoinTimerFlag
0A7D9 A0 C4                                ldy #$c4                 ;otherwise use empty block metatile
0A7DB 98                        PutOldMT:  tya                      ;put metatile into A
0A7DC 9D E8 03                  PutMTileB: sta Block_Metatile,x     ;store whatever metatile be appropriate here
0A7DF 20 EA F4                             jsr InitBlock_XY_Pos     ;get block object horizontal coordinates saved
0A7E2 A4 02                                ldy $02                  ;get vertical high nybble offset
0A7E4 B1 F7                     		   lda ($f7),y
0A7E6 9D C1 63                  		   sta OrigMetatile,x
0A7E9 A9 00                     		   lda #$00
0A7EB 9D 9E 06                  		   sta Cbolla,x
0A7EE A9 23                     		   lda #$23
0A7F0 91 F7                     		   sta ($f7),y              ;write blank metatile $23 to block buffer
0A7F2 A9 07                                lda #$07
0A7F4 8D 84 07                             sta BlockBounceTimer     ;set block bounce timer
0A7F7 68                                   pla                      ;pull original metatile from stack
0A7F8 85 05                                sta $05                  ;and save here
0A7FA A0 00                                ldy #$00                 ;set default offset
0A7FC AD 14 07                             lda CrouchingFlag        ;is player crouching?
0A7FF D0 05                                bne SmallBP              ;if so, branch to increment offset
0A801 AD 54 07                             lda PlayerSize           ;is player big?
0A804 F0 04                                beq BigBP                ;if so, branch to use default offset
0A806 C8                        SmallBP:   iny                      ;increment for small or big and crouching
0A807 4C 1B A8                  		   jmp BumpChkRt
0A80A AD 04 07                  BigBP:     lda SwimmingFlag
0A80D 0D 5E 60                  		   ora OldSwim
0A810 F0 09                     		   beq BumpChkRt
0A812 A5 C0                     		   lda Player_Y_Position    ;get player's vertical coordinate
0A814 29 F0                     		   and #$f0
0A816 95 C9                     		   sta Block_Y_Position,x   ;save as vertical coordinate for block object
0A818 4C 25 A8                  		   jmp JumpBack
0A81B                           BumpChkRt: 
0A81B A5 C0                     		   lda Player_Y_Position    ;get player's vertical coordinate
0A81D 18                        		   clc
0A81E 79 4B A7                  		   adc BlockYPosAdderData,y ;add value determined by size
0A821 29 F0                     		   and #$f0                 ;mask out low nybble to get 16-pixel correspondence
0A823 95 C9                                sta Block_Y_Position,x   ;save as vertical coordinate for block object
0A825 B4 24                     JumpBack:  ldy Block_State,x        ;get block object state
0A827 C0 11                                cpy #$11
0A829 F0 0A                                beq Unbreak              ;if set to value loaded for unbreakable, branch
0A82B 20 EB A8                             jsr BrickShatter         ;execute code for breakable brick
0A82E A9 01                     		   lda #$01
0A830 85 91                                sta Player_Y_Speed     ;set vertical speed for player
0A832 4C 38 A8                  		   jmp InvOBit
0A835 20 4A A8                  Unbreak:   jsr BumpBlock            ;execute code for unbreakable brick or question block
0A838 AD EE 03                  InvOBit:   lda SprDataOffset_Ctrl
0A83B 49 01                     		   eor #$01
0A83D 8D EE 03                  		   sta SprDataOffset_Ctrl                  
0A840 60                        		   rts						;leave!
0A841                           UnderWaterBumpChk:
0A841 A5 C0                     			lda Player_Y_Position    ;get player's vertical coordinate
0A843 29 F0                     			and #$f0
0A845 95 C9                     			sta Block_Y_Position,x   ;save as vertical coordinate for block object
0A847 4C 25 A8                           	jmp JumpBack
0A84A                           
0A84A                           
0A84A                           ;--------------------------------
0A84A                           
0A84A                           BumpBlock:
0A84A A5 05                     		   lda $05
0A84C 48                        		   pha
0A84D AC 28 60                  		   ldy PTimer
0A850 D0 03                     		   bne +
0A852 20 2E A9                  		   jsr CheckTopOfBlock     ;check to see if there's a coin directly above this block
0A855 A9 02                     +:         lda #Sfx_Bump
0A857 85 F0                                sta Square1SoundQueue   ;play bump sound
0A859 A9 00                                lda #$00
0A85B 95 52                                sta Block_X_Speed,x     ;initialize horizontal speed for block object
0A85D 9D 3C 04                             sta Block_Y_MoveForce,x ;init fractional movement force
0A860 85 91                                sta Player_Y_Speed      ;init player's vertical speed
0A862 A9 FE                                lda #$fe
0A864 95 9A                                sta Block_Y_Speed,x     ;set vertical speed for block object
0A866 68                                   pla                     ;get original metatile from stack
0A867 20 DF A8                             jsr BlockBumpedChk      ;do a sub to check which block player bumped head on
0A86A 90 53                                bcc ExitBlockChk        ;if no match was found, branch to leave
0A86C 98                                   tya                     ;move block number to A
0A86D C9 16                                cmp #$16                ;if block number was within 0-8 range,
0A86F 90 02                                bcc BlockCode           ;branch to use current number
0A871 E9 09                                sbc #$09                ;otherwise subtract 5 for second set to get proper number
0A873 20 A0 F7                  BlockCode: jsr JumpEngine          ;run appropriate subroutine depending on block number
0A876                           
0A876 A2 A8                           .dw MushFlowerBlock
0A878 27 A4                           .dw CoinBlock
0A87A 27 A4                           .dw CoinBlock
0A87C A8 A8                           .dw ExtraLifeMushBlock
0A87E                           	  
0A87E A5 A8                     	  .dw StarBlock
0A880 A5 A8                     	  .dw StarBlock
0A882 A8 A8                     	  .dw ExtraLifeMushBlock
0A884 A5 A8                     	  .dw StarBlock
0A886                           	  
0A886 A2 A8                           .dw MushFlowerBlock
0A888 B1 A8                           .dw VineBlock
0A88A A5 A8                           .dw StarBlock
0A88C 27 A4                           .dw CoinBlock
0A88E A8 A8                           .dw ExtraLifeMushBlock
0A890                           	  
0A890 A2 A8                     	  .dw MushFlowerBlock
0A892 B1 A8                           .dw VineBlock
0A894 A5 A8                           .dw StarBlock
0A896 27 A4                           .dw CoinBlock
0A898 A8 A8                           .dw ExtraLifeMushBlock
0A89A                           	  
0A89A A2 A8                     	  .dw MushFlowerBlock
0A89C 27 A4                     	  .dw CoinBlock
0A89E A8 A8                     	  .dw ExtraLifeMushBlock
0A8A0 A2 A8                     	  .dw MushFlowerBlock
0A8A2                           	  
0A8A2                           	  
0A8A2                           	  ;.dw HammerMushBlock
0A8A2                           	  ;.dw HammerMushBlock
0A8A2                           	  ;.dw HammerMushBlock
0A8A2                           	  ;.dw MushFlowerBlock
0A8A2                           
0A8A2                           ;--------------------------------
0A8A2                           
0A8A2                           MushFlowerBlock:
0A8A2 A9 00                           lda #$00       ;load mushroom/fire flower into power-up type
0A8A4 2C                              .db $2c        ;BIT instruction opcode
0A8A5                           	  
0A8A5                           StarBlock:
0A8A5 A9 02                           lda #$02       ;load star into power-up type
0A8A7 2C                              .db $2c        ;BIT instruction opcoded
0A8A8                           	  
0A8A8                           ExtraLifeMushBlock:
0A8A8 A9 03                           lda #$03         ;load 1-up mushroom into power-up type
0A8AA 85 39                           sta PowerUpType  ;store correct power-up type
0A8AC A9 00                     	  lda #$00
0A8AE 4C 7F A6                        jmp SetupPowerUp
0A8B1                           
0A8B1                           VineBlock:
0A8B1 20 2A BB                        jsr jmpidk
0A8B4 B0 09                     	  bcs ExitBlockChk
0A8B6 8E CD 7F                  	  stx $7fcd
0A8B9 AC EE 03                        ldy SprDataOffset_Ctrl  ;get control bit
0A8BC 4C BC A1                        jmp Setup_Vine1          ;set up vine object
0A8BF                           
0A8BF                           ExitBlockChk:
0A8BF 60                              rts                     ;leave
0A8C0                           
0A8C0                           ;--------------------------------
0A8C0                           BrickQBlockMetatiles:
0A8C0 C1 C0 5F 60 73 C6 C7 30.. 	  .db $c1, $c0, $5f, $60, $73, $c6, $c7, $30, $31, $32, $33, $34, $35 ;used by question blocks
0A8CD                           
0A8CD                                 ;these two sets are functionally identical, but look different
0A8CD 55 56 57 58 59 6F 29 2A..       .db $55, $56, $57, $58, $59, $6f, $29, $2a, $2b ;, $70, $6f, $c4, $72 ;used by ground level types
0A8D6 5A 5B 5C 5D 5E 6F 29 2A..       .db $5a, $5b, $5c, $5d, $5e, $6f, $29, $2a, $2b ;, $71, $6f, $c4, $72 ;used by other level types
0A8DF                           
0A8DF                           
0A8DF                           ;BrickQBlockMetatiles:
0A8DF                                ;.db $c1, $c2, $c0, $5e, $5f, $60, $61 ;used by question blocks
0A8DF                           
0A8DF                                ;.db $52, $53, $54, $55, $56, $57 ;used by ground level bricks
0A8DF                                ;.db $58, $59, $5a, $5b, $5c, $5d ;used by other level bricks
0A8DF                           
0A8DF                           BlockBumpedChk:
0A8DF A0 1E                                  ldy #$1e                    ;start at end of metatile data
0A8E1 D9 C0 A8                  BumpChkLoop: cmp BrickQBlockMetatiles,y  ;check to see if current metatile matches
0A8E4 F0 04                                  beq MatchBump               ;metatile found in block buffer, branch if so
0A8E6 88                                     dey                         ;otherwise move onto next metatile
0A8E7 10 F8                                  bpl BumpChkLoop             ;do this until all metatiles are checked
0A8E9 18                                     clc                         ;if none match, return with carry clear
0A8EA 60                        MatchBump:   rts                         ;note carry is set if found match
0A8EB                           
0A8EB                           ;--------------------------------
0A8EB                           
0A8EB                           BrickShatter:
0A8EB 20 2E A9                        jsr CheckTopOfBlock    ;check to see if there's a coin directly above this block
0A8EE A9 01                     	  lda #Sfx_BrickShatter
0A8F0 9D EC 03                        sta Block_RepFlag,x    ;set flag for block object to immediately replace metatile
0A8F3 8D 29 60                  	  sta WaterReplace
0A8F6 85 EE                           sta NoiseSoundQueue    ;load brick shatter sound
0A8F8 B5 81                     	  lda Block_X_Position,x     ;set horizontal coordinate of block object
0A8FA 9D F1 03                        sta Block_Orig_XPos,x      ;as original horizontal coordinate here
0A8FD A9 F0                           lda #$f0
0A8FF 95 52                           sta Block_X_Speed,x        ;set horizontal speed for brick chunk objects
0A901 95 54                           sta Block_X_Speed+2,x
0A903 A9 FA                           lda #$fa
0A905 95 9A                           sta Block_Y_Speed,x        ;set vertical speed for one
0A907 A9 FC                           lda #$fc
0A909 95 9C                           sta Block_Y_Speed+2,x      ;set lower vertical speed for the other
0A90B A9 00                           lda #$00
0A90D 9D 3C 04                        sta Block_Y_MoveForce,x    ;init fractional movement force for both
0A910 9D 3E 04                        sta Block_Y_MoveForce+2,x
0A913 B5 68                           lda Block_PageLoc,x
0A915 95 6A                           sta Block_PageLoc+2,x      ;copy page location
0A917 B5 81                           lda Block_X_Position,x
0A919 95 83                           sta Block_X_Position+2,x   ;copy horizontal coordinate
0A91B B5 C9                           lda Block_Y_Position,x
0A91D 18                              clc                        ;add 8 pixels to vertical coordinate
0A91E 69 08                           adc #$08                   ;and save as vertical coordinate for one of them
0A920 95 CB                           sta Block_Y_Position+2,x
0A922 A9 01                           lda #$01
0A924 8D 39 01                        sta DigitModifier+5    ;set digit modifier to give player 50 points
0A927 20 69 A6                        jsr AddToScore         ;do sub to update the score
0A92A AE EE 03                        ldx SprDataOffset_Ctrl ;load control bit and leave
0A92D 60                              rts
0A92E                           
0A92E                           ;--------------------------------
0A92E                           
0A92E                           CheckTopOfBlock:
0A92E AE EE 03                         ldx SprDataOffset_Ctrl  ;load control bit
0A931 A4 02                            ldy $02                 ;get vertical high nybble offset used in block buffer
0A933 F0 26                            beq TopEx               ;branch to leave if set to zero, because we're at the top
0A935 98                               tya                     ;otherwise set to A
0A936 38                               sec
0A937 E9 10                            sbc #$10                ;subtract $10 to move up one row in the block buffer
0A939 85 02                            sta $02                 ;store as new vertical high nybble offset
0A93B A8                               tay 
0A93C B1 F7                            lda ($f7),y             ;get contents of block buffer in same column, one row up
0A93E AE 28 60                  	   ldx PTimer
0A941 D0 18                     	   bne TopEx
0A943 C9 C2                            cmp #$c2                ;is it a coin? (not underwater)
0A945 D0 14                            bne TopEx               ;if not, branch to leave
0A947 AE 4E 07                  	   ldx AreaType
0A94A BD 74 8A                         lda blank,x
0A94D 91 F7                            sta ($f7),y             ;otherwise put blank metatile where coin was
0A94F AE EE 03                  	   ldx SprDataOffset_Ctrl
0A952 20 68 8A                         jsr RemoveCoin_Axe      ;write blank metatile to vram buffer
0A955 AE EE 03                         ldx SprDataOffset_Ctrl  ;get control bit
0A958 4C 40 A4                         jmp SetupJumpCoin       ;create jumping coin object and update coin variable
0A95B                           
0A95B                           ;--------------------------------
0A95B AE EE 03                  TopEx: ldx SprDataOffset_Ctrl
0A95E 60                        		rts
0A95F                           UpdSte2:
0A95F 95 24                     		sta Block_State,x          ;store contents of A in block object state
0A961 60                                rts
0A962                           ;-------------------------------------------------------------------------------------
0A962                           BouncingBlockHandler1:
0A962 4C CD AA                  		jmp BouncingBlockHandler
0A965                           BlockObjectsCore:
0A965 B5 24                             lda Block_State,x           ;get state of block object
0A967 F0 F6                             beq UpdSte2                  ;if not set, branch to leave
0A969 29 0F                             and #$0f                    ;mask out high nybble
0A96B 48                                pha                         ;push to stack
0A96C A8                                tay                         ;put in Y for now
0A96D 8A                                txa
0A96E 18                                clc
0A96F 69 09                             adc #$09                    ;add 9 bytes to offset (note two block objects are created
0A971 AA                                tax                         ;when using brick chunks, but only one offset for both)
0A972 88                                dey                         ;decrement Y to check for solid block state
0A973 F0 ED                             beq BouncingBlockHandler1    ;branch if found, otherwise continue for brick chunks
0A975 A0 01                             ldy #$01       ;set offset for maximum speed
0A977 A9 50                             lda #$50       ;set movement amount here
0A979 85 00                             sta $00
0A97B B9 06 AD                          lda MaxSpdBlockData,y    ;get maximum speed
0A97E 85 02                             sta $02            ;set maximum speed here
0A980 A9 00                             lda #$00           ;set value to move downwards
0A982 20 9A AC                          jsr ImposeGravity  ;jump to the code that actually moves it
0A985 20 5C AC                          jsr MoveObjectHorizontally  ;do another sub to move horizontally
0A988 8A                                txa
0A989 18                                clc                         ;move onto next block object
0A98A 69 02                             adc #$02
0A98C AA                                tax
0A98D A0 01                             ldy #$01       ;set offset for maximum speed
0A98F A9 50                             lda #$50       ;set movement amount here
0A991 85 00                             sta $00
0A993 B9 06 AD                          lda MaxSpdBlockData,y    ;get maximum speed
0A996 85 02                             sta $02            ;set maximum speed here
0A998 A9 00                             lda #$00           ;set value to move downwards
0A99A 20 9A AC                          jsr ImposeGravity  ;jump to the code that actually moves it
0A99D 20 5C AC                          jsr MoveObjectHorizontally  ;do another sub to move horizontally
0A9A0 A6 08                             ldx ObjectOffset            ;get block object offset used for both
0A9A2 4C A6 A9                  		jmp sacrificaopapu
0A9A5                           sacrificaopapu2:
0A9A5 48                        		pha
0A9A6                           sacrificaopapu:
0A9A6 A9 09                     		lda #$09                     ;get coordinates of one block object
0A9A8 A0 04                             ldy #$04                     ;relative to the screen
0A9AA 86 00                             stx $00                     ;store value to add to A here
0A9AC 18                                clc
0A9AD 65 00                             adc $00                     ;add A to value stored
0A9AF AA                                tax                         ;use as enemy offset
0A9B0 B5 C0                             lda SprObject_Y_Position,x  ;load vertical coordinate low
0A9B2 99 B8 03                          sta SprObject_Rel_YPos,y    ;store here
0A9B5 B5 78                             lda SprObject_X_Position,x  ;load horizontal coordinate
0A9B7 38                                sec                         ;subtract left edge coordinate
0A9B8 ED 1C 07                          sbc ScreenLeft_X_Pos
0A9BB 99 AD 03                          sta SprObject_Rel_XPos,y    ;store result here
0A9BE A6 08                             ldx ObjectOffset            ;reload old object offset and leave
0A9C0 E8                                inx                          ;adjust offset for other block object if any
0A9C1 E8                                inx
0A9C2 A9 09                             lda #$09
0A9C4 C8                                iny                          ;adjust other and get coordinates for other one
0A9C5 86 00                     		stx $00                     ;store value to add to A here
0A9C7 18                                clc
0A9C8 65 00                             adc $00                     ;add A to value stored
0A9CA AA                                tax                         ;use as enemy offset
0A9CB B5 C0                             lda SprObject_Y_Position,x  ;load vertical coordinate low
0A9CD 99 B8 03                          sta SprObject_Rel_YPos,y    ;store here
0A9D0 B5 78                             lda SprObject_X_Position,x  ;load horizontal coordinate
0A9D2 38                                sec                         ;subtract left edge coordinate
0A9D3 ED 1C 07                          sbc ScreenLeft_X_Pos
0A9D6 99 AD 03                          sta SprObject_Rel_XPos,y    ;store result here
0A9D9 A6 08                             ldx ObjectOffset            ;reload old object offset and leave
0A9DB A9 09                     		lda #$09
0A9DD A0 04                     		ldy #$04
0A9DF 86 00                             stx $00
0A9E1 18                                clc           ;add contents of X to A to get
0A9E2 65 00                             adc $00       ;appropriate offset, then give back to X
0A9E4 AA                                tax
0A9E5 98                                tya                         ;save offscreen bits offset to stack for now
0A9E6 48                                pha
0A9E7 20 67 AE                          jsr GetXOffscreenBits  ;do subroutine here
0A9EA A8                                tay
0A9EB B9 24 BD                  		lda MSBtoLSB,y
0A9EE 85 00                             sta $00                ;store here
0A9F0 20 BB AE                          jsr GetYOffscreenBits
0A9F3 A8                                tay
0A9F4 B9 24 BE                  		lda LSBtoMSB,y
0A9F7 05 00                             ora $00                     ;mask together with previously saved low nybble
0A9F9 85 00                             sta $00                     ;store both here
0A9FB 68                                pla                         ;get offscreen bits offset from stack
0A9FC A8                                tay
0A9FD A5 00                             lda $00                     ;get value here and store elsewhere
0A9FF 99 D0 03                          sta SprObject_OffscrBits,y
0AA02 A6 08                             ldx ObjectOffset
0AA04 A9 02                             lda #$02                   ;set palette bits here
0AA06 85 00                              sta $00
0AA08 A9 75                              lda #$75                   ;set tile number for ball (something residual, likely)
0AA0A A4 0E                              ldy GameEngineSubroutine
0AA0C C0 05                              cpy #$05                   ;if end-of-level routine running,
0AA0E F0 06                              beq DChunks                ;use palette and tile number assigned
0AA10 A9 03                              lda #$03                   ;otherwise set different palette bits
0AA12 85 00                              sta $00
0AA14 A9 84                              lda #$84                   ;and set tile number for brick chunks
0AA16 BC EC 06                  DChunks: ldy Block_SprDataOffset,x  ;get OAM data offset
0AA19 C8                                 iny                        ;increment to start with tile bytes in OAM
0AA1A 99 0C 02                           sta Sprite_Data+12,y          ;into second row sprites
0AA1D 99 08 02                           sta Sprite_Data+8,y
0AA20 99 04 02                           sta Sprite_Data+4,y           ;and into first row sprites
0AA23 99 00 02                           sta Sprite_Data,y             ;and dump into tile number part of sprite data
0AA26 A5 09                              lda FrameCounter           ;get frame counter
0AA28 0A                                 asl
0AA29 0A                        		 asl
0AA2A 0A                        		 asl
0AA2B 0A                        		 asl
0AA2C 29 C0                              and #$c0                   ;get what was originally d3-d2 of low nybble
0AA2E 05 00                              ora $00                    ;add palette bits
0AA30 C8                                 iny                        ;increment offset for attribute bytes
0AA31 99 0C 02                           sta Sprite_Data+12,y          ;into second row sprites
0AA34 99 08 02                           sta Sprite_Data+8,y
0AA37 99 04 02                           sta Sprite_Data+4,y           ;and into first row sprites
0AA3A 99 00 02                           sta Sprite_Data,y             ;and dump into tile number part of sprite data
0AA3D 88                                 dey
0AA3E 88                                 dey                        ;decrement offset to Y coordinate
0AA3F AD BC 03                           lda Block_Rel_YPos         ;get first block object's relative vertical coordinate
0AA42 99 04 02                           sta Sprite_Data+4,y           ;and into first row sprites
0AA45 99 00 02                           sta Sprite_Data,y             ;and dump into tile number part of sprite data
0AA48 AD B1 03                           lda Block_Rel_XPos         ;get first block object's relative horizontal coordinate
0AA4B 99 03 02                           sta Sprite_X_Position,y    ;save into X coordinate of first sprite
0AA4E BD F1 03                           lda Block_Orig_XPos,x      ;get original horizontal coordinate
0AA51 38                                 sec
0AA52 ED 1C 07                           sbc ScreenLeft_X_Pos       ;subtract coordinate of left side from original coordinate
0AA55 85 00                              sta $00                    ;store result as relative horizontal coordinate of original
0AA57 38                                 sec
0AA58 ED B1 03                           sbc Block_Rel_XPos         ;get difference of relative positions of original - current
0AA5B 65 00                              adc $00                    ;add original relative position to result
0AA5D 69 06                              adc #$06                   ;plus 6 pixels to position second brick chunk correctly
0AA5F 99 07 02                           sta Sprite_X_Position+4,y  ;save into X coordinate of second sprite
0AA62 AD BD 03                           lda Block_Rel_YPos+1       ;get second block object's relative vertical coordinate
0AA65 99 08 02                           sta Sprite_Y_Position+8,y
0AA68 99 0C 02                           sta Sprite_Y_Position+12,y ;dump into Y coordinates of third and fourth sprites
0AA6B AD B2 03                           lda Block_Rel_XPos+1       ;get second block object's relative horizontal coordinate
0AA6E 99 0B 02                           sta Sprite_X_Position+8,y  ;save into X coordinate of third sprite
0AA71 A5 00                              lda $00                    ;use original relative horizontal position
0AA73 38                                 sec
0AA74 ED B2 03                           sbc Block_Rel_XPos+1       ;get difference of relative positions of original - current
0AA77 65 00                              adc $00                    ;add original relative position to result
0AA79 69 06                              adc #$06                   ;plus 6 pixels to position fourth brick chunk correctly
0AA7B 99 0F 02                           sta Sprite_X_Position+12,y ;save into X coordinate of fourth sprite
0AA7E AD D4 03                           lda Block_OffscreenBits    ;get offscreen bits for block object
0AA81 29 08                              and #%00001000                ;check to see if d3 in offscreen bits are set
0AA83 F0 08                              beq +                    ;if not set, branch, otherwise move sprites offscreen
0AA85 A9 F8                              lda #$f8                   ;move offscreen two OAMs
0AA87 99 00 02                           sta Sprite_Y_Position,y    ;on the left side (or two rows of enemy on either side
0AA8A 99 08 02                           sta Sprite_Y_Position+8,y  ;if branched here from enemy graphics handler)
0AA8D AD D4 03                  +:       lda Block_OffscreenBits    ;get offscreen bits again
0AA90 0A                                 asl                        ;shift d7 into carry
0AA91 90 08                              bcc ChnkOfs                ;if d7 not set, branch to last part
0AA93 A9 F8                              lda #$f8
0AA95 99 04 02                           sta Sprite_Data+4,y            ;and into first row sprites
0AA98 99 00 02                  	     sta Sprite_Data,y              ;and do sub to dump into first and second sprites
0AA9B A5 00                     ChnkOfs: lda $00                    ;if relative position on left side of screen,
0AA9D 10 10                              bpl ExBCDr                 ;go ahead and leave
0AA9F B9 03 02                           lda Sprite_X_Position,y    ;otherwise compare left-side X coordinate
0AAA2 D9 07 02                           cmp Sprite_X_Position+4,y  ;to right-side X coordinate
0AAA5 90 08                              bcc ExBCDr                 ;branch to leave if less
0AAA7 A9 F8                              lda #$f8                   ;otherwise move right half of sprites offscreen
0AAA9 99 04 02                           sta Sprite_Y_Position+4,y
0AAAC 99 0C 02                           sta Sprite_Y_Position+12,y
0AAAF 68                        ExBCDr:  pla                         ;get lower nybble of saved state
0AAB0 B4 B0                              ldy Block_Y_HighPos,x       ;check vertical high byte of block object
0AAB2 D0 03                              bne +
0AAB4 95 24                     		 sta Block_State,x          ;store contents of A in block object state
0AAB6 60                                 rts
0AAB7 48                        +:       pha                         ;otherwise save state back into stack
0AAB8 A9 F0                              lda #$f0
0AABA D5 CB                              cmp Block_Y_Position+2,x    ;check to see if bottom block object went
0AABC B0 02                              bcs ChkTop                  ;to the bottom of the screen, and branch if not
0AABE 95 CB                              sta Block_Y_Position+2,x    ;otherwise set offscreen coordinate
0AAC0 B5 C9                     ChkTop:  lda Block_Y_Position,x      ;get top block object's vertical coordinate
0AAC2 C9 F0                              cmp #$f0                    ;see if it went to the bottom of the screen
0AAC4 68                                 pla                         ;pull block object state from stack
0AAC5 B0 03                              bcs +
0AAC7 95 24                     		 sta Block_State,x          ;store contents of A in block object state
0AAC9 60                                 rts
0AACA 4C 4E AB                  +:       jmp KillBlock
0AACD                           BouncingBlockHandler:
0AACD A0 01                                ldy #$01       ;set offset for maximum speed
0AACF A9 50                     		   lda #$50       ;set movement amount here
0AAD1 85 00                     		   sta $00
0AAD3 B9 06 AD                  		   lda MaxSpdBlockData,y    ;get maximum speed
0AAD6 85 02                     		   sta $02            ;set maximum speed here
0AAD8 A9 00                     		   lda #$00           ;set value to move downwards
0AADA 20 9A AC                  		   jsr ImposeGravity  ;jump to the code that actually moves it
0AADD A6 08                                ldx ObjectOffset           ;get block object offset
0AADF A9 09                                lda #$09                     ;get coordinates of one block object
0AAE1 A0 04                     			ldy #$04                     ;relative to the screen
0AAE3 86 00                     			stx $00                     ;store value to add to A here
0AAE5 18                        			clc
0AAE6 65 00                     			adc $00                     ;add A to value stored
0AAE8 AA                        			tax                         ;use as enemy offset
0AAE9 B5 C0                     			lda SprObject_Y_Position,x  ;load vertical coordinate low
0AAEB 99 B8 03                  			sta SprObject_Rel_YPos,y    ;store here
0AAEE B5 78                     			lda SprObject_X_Position,x  ;load horizontal coordinate
0AAF0 38                        			sec                         ;subtract left edge coordinate
0AAF1 ED 1C 07                  			sbc ScreenLeft_X_Pos
0AAF4 99 AD 03                  			sta SprObject_Rel_XPos,y    ;store result here
0AAF7 A6 08                     			ldx ObjectOffset            ;reload old object offset and leave
0AAF9 E8                        			inx                          ;adjust offset for other block object if any
0AAFA E8                        			inx
0AAFB A9 09                     			lda #$09
0AAFD C8                        			iny                          ;adjust other and get coordinates for other one
0AAFE 86 00                     			stx $00                     ;store value to add to A here
0AB00 18                        			clc
0AB01 65 00                     			adc $00                     ;add A to value stored
0AB03 AA                        			tax                         ;use as enemy offset
0AB04 B5 C0                     			lda SprObject_Y_Position,x  ;load vertical coordinate low
0AB06 99 B8 03                  			sta SprObject_Rel_YPos,y    ;store here
0AB09 B5 78                     			lda SprObject_X_Position,x  ;load horizontal coordinate
0AB0B 38                        			sec                         ;subtract left edge coordinate
0AB0C ED 1C 07                  			sbc ScreenLeft_X_Pos
0AB0F 99 AD 03                  			sta SprObject_Rel_XPos,y    ;store result here
0AB12 A6 08                     			ldx ObjectOffset            ;reload old object offset and leave
0AB14 A9 09                                lda #$09
0AB16 A0 04                     		   ldy #$04
0AB18 86 00                     		   stx $00
0AB1A 18                        		   clc           ;add contents of X to A to get
0AB1B 65 00                     		   adc $00       ;appropriate offset, then give back to X
0AB1D AA                        		   tax
0AB1E 98                        		   tya                         ;save offscreen bits offset to stack for now
0AB1F 48                        		   pha
0AB20 20 67 AE                  		   jsr GetXOffscreenBits  ;do subroutine here
0AB23 A8                        		   tay
0AB24 B9 24 BD                  		   lda MSBtoLSB,y
0AB27 85 00                     		   sta $00                ;store here
0AB29 20 BB AE                  		   jsr GetYOffscreenBits
0AB2C A8                        		   tay
0AB2D B9 24 BE                  		   lda LSBtoMSB,y
0AB30 05 00                     		   ora $00                     ;mask together with previously saved low nybble
0AB32 85 00                     		   sta $00                     ;store both here
0AB34 68                        		   pla                         ;get offscreen bits offset from stack
0AB35 A8                        		   tay
0AB36 A5 00                     		   lda $00                     ;get value here and store elsewhere
0AB38 99 D0 03                  		   sta SprObject_OffscrBits,y
0AB3B A6 08                     		   ldx ObjectOffset
0AB3D 20 5C F5                  		   jsr DrawBlock              ;draw the block
0AB40 B5 C9                                lda Block_Y_Position,x     ;get vertical coordinate
0AB42 29 0F                                and #$0f                   ;mask out high nybble
0AB44 C9 05                                cmp #$05                   ;check to see if low nybble wrapped around
0AB46 68                                   pla                        ;pull state from stack
0AB47 B0 07                                bcs UpdSte                 ;if still above amount, not time to kill block yet, thus branch
0AB49 A9 01                                lda #$01
0AB4B 9D EC 03                             sta Block_RepFlag,x        ;otherwise set flag to replace metatile
0AB4E A9 00                     KillBlock: lda #$00                   ;if branched here, nullify object state
0AB50 95 24                     UpdSte:    sta Block_State,x          ;store contents of A in block object state
0AB52 60                                   rts
0AB53                           
0AB53                           ;-------------------------------------------------------------------------------------
0AB53                           ;$02 - used to store offset to block buffer
0AB53                           ;$06-$07 - used to store block buffer address
0AB53                           
0AB53                           BlockObjMT_Updater:
0AB53 A2 01                                 ldx #$01                  ;set offset to start with second block object
0AB55 86 08                     UpdateLoop: stx ObjectOffset          ;set offset here
0AB57 AD 00 64                              lda VRAM_Buffer1_Offset   ;if vram buffer already being used here,
0AB5A C9 20                     			cmp #$20
0AB5C B0 28                                 bcs NextBUpd              ;branch to move onto next block object
0AB5E BD EC 03                              lda Block_RepFlag,x       ;if flag for block object already clear,
0AB61 F0 23                                 beq NextBUpd              ;branch to move onto next block object
0AB63 BD E6 03                              lda Block_BBuf_Low,x      ;get low byte of block buffer
0AB66 85 F7                                 sta $f7                   ;store into block buffer address
0AB68 BD 9F 60                              lda Block_BBuf_High,x
0AB6B 85 F8                                 sta $f8                   ;set high byte of block buffer address
0AB6D BD E4 03                  			lda Block_Orig_YPos,x     ;get original vertical coordinate of block object
0AB70 85 02                                 sta $02                   ;store here and use as offset to block buffer
0AB72 A8                                    tay
0AB73 BD E8 03                  			lda Block_Metatile,x      ;get metatile to be written
0AB76 91 F7                     			sta ($f7),y               ;write it to the block buffer
0AB78 20 98 8A                              jsr ReplaceBlockMetatile2 ;do sub to replace metatile where block object is
0AB7B                                       ;ldy temp8
0AB7B A9 00                     			lda #$00
0AB7D 9D 32 60                  			sta BlockUsed,x
0AB80 8D 29 60                  			sta WaterReplace
0AB83 9D EC 03                              sta Block_RepFlag,x       ;clear block object flag
0AB86 CA                        NextBUpd:   dex                       ;decrement block object offset
0AB87 86 08                                 stx ObjectOffset          ;set offset here
0AB89 AD 00 64                              lda VRAM_Buffer1_Offset   ;if vram buffer already being used here,
0AB8C C9 20                     			cmp #$20
0AB8E B0 28                     			bcs +
0AB90 BD EC 03                              lda Block_RepFlag,x       ;if flag for block object already clear,
0AB93 F0 23                                 beq +                     ;branch to move onto next block object
0AB95 BD E6 03                              lda Block_BBuf_Low,x      ;get low byte of block buffer
0AB98 85 F7                                 sta $f7                   ;store into block buffer address
0AB9A BD 9F 60                              lda Block_BBuf_High,x
0AB9D 85 F8                                 sta $f8                   ;set high byte of block buffer address
0AB9F BD E4 03                              lda Block_Orig_YPos,x     ;get original vertical coordinate of block object
0ABA2 85 02                                 sta $02                   ;store here and use as offset to block buffer
0ABA4 A8                                    tay
0ABA5 BD E8 03                  			lda Block_Metatile,x      ;get metatile to be written
0ABA8 91 F7                     			sta ($f7),y               ;write it to the block buffer
0ABAA 20 98 8A                              jsr ReplaceBlockMetatile2 ;do sub to replace metatile where block object is
0ABAD                                       ;ldy temp8
0ABAD A9 00                     			lda #$00
0ABAF 9D 32 60                  			sta BlockUsed,x
0ABB2 8D 29 60                  			sta WaterReplace
0ABB5 9D EC 03                              sta Block_RepFlag,x       ;clear block object flag
0ABB8 60                        +:          rts                       ;then leave
0ABB9                           
0ABB9                           ;-------------------------------------------------------------------------------------
0ABB9                           ;$00 - used to store high nybble of horizontal speed as adder
0ABB9                           ;$01 - used to store low nybble of horizontal speed
0ABB9                           ;$02 - used to store adder to page location
0ABB9                           
0ABB9                           
0ABB9                           MovePlatformDown:
0ABB9 A9 00                           lda #$00    ;save value to stack (if branching here, execute next
0ABBB 2C                              .db $2c     ;part as BIT instruction)
0ABBC                           
0ABBC                           MovePlatformUp:
0ABBC A9 01                                lda #$01        ;save value to stack
0ABBE 48                                   pha
0ABBF B4 15                                ldy Enemy_ID,x  ;get enemy object identifier
0ABC1 E8                                   inx             ;increment offset for enemy object
0ABC2 A9 05                                lda #$05        ;load default value here
0ABC4 D0 00                                bne SetDplSpd   ;this code, thus unconditional branch here
0ABC6 85 00                     SetDplSpd: sta $00         ;save downward movement amount here
0ABC8 A9 0A                                lda #$0a        ;save upward movement amount here
0ABCA 85 01                                sta $01
0ABCC A9 03                                lda #$03        ;save maximum vertical speed here
0ABCE 85 02                                sta $02
0ABD0 68                                   pla             ;get value from stack
0ABD1 A8                                   tay             ;use as Y, then move onto code shared by red koopa
0ABD2                           
0ABD2                           RedPTroopaGrav:
0ABD2 20 9A AC                        jsr ImposeGravity  ;do a sub to move object gradually
0ABD5 A6 08                           ldx ObjectOffset   ;get enemy object offset and leave
0ABD7 60                              rts
0ABD8                           
0ABD8                           
0ABD8                           MoveDropPlatform:
0ABD8 A0 7F                           ldy #$7f      ;set movement amount for drop platform
0ABDA D0 02                           bne SetMdMax  ;skip ahead of other value set here
0ABDC                           
0ABDC                           MoveEnemySlowVert:
0ABDC A0 0F                               ldy #$0f         ;set movement amount for bowser/other objects
0ABDE A9 02                     SetMdMax: lda #$02         ;set maximum speed in A
0ABE0 D0 04                               bne SetXMoveAmt  ;unconditional branch
0ABE2                           
0ABE2                           ;--------------------------------
0ABE2                           
0ABE2                           MoveJ_EnemyVertically:
0ABE2 A0 1C                                  ldy #$1c                ;set movement amount for podoboo/other objects
0ABE4 A9 03                     SetHiMax:    lda #$03                ;set maximum speed in A
0ABE6 84 00                     SetXMoveAmt: sty $00                 ;set movement amount here
0ABE8 E8                                     inx                     ;increment X for enemy offset
0ABE9 85 02                                  sta $02                 ;set maximum speed here
0ABEB A9 00                                  lda #$00                ;set value to move downwards
0ABED 20 9A AC                               jsr ImposeGravity       ;jump to the code that actually moves it
0ABF0 A6 08                                  ldx ObjectOffset        ;get enemy object buffer offset and leave
0ABF2 60                        HE:			 rts
0ABF3                           
0ABF3                           ;--------------------------------
0ABF3                           
0ABF3                           ;--------------------------------
0ABF3                           
0ABF3                           MoveRedPTroopaDown:
0ABF3 A0 00                           ldy #$00            ;set Y to move downwards
0ABF5 F0 02                           beq MoveRedPTroopa  ;skip to movement routine
0ABF7                           
0ABF7                           MoveRedPTroopaUp:
0ABF7 A0 01                           ldy #$01            ;set Y to move upwards
0ABF9                           
0ABF9                           MoveRedPTroopa:
0ABF9 E8                              inx                 ;increment X for enemy offset
0ABFA A9 03                           lda #$03
0ABFC 85 00                           sta $00             ;set downward movement amount here
0ABFE A9 06                           lda #$06
0AC00 85 01                           sta $01             ;set upward movement amount here
0AC02 A9 02                           lda #$02
0AC04 85 02                           sta $02             ;set maximum speed here
0AC06 98                              tya                 ;set movement direction in A, and
0AC07 10 C9                           bpl RedPTroopaGrav  ;jump to move this thing
0AC09                           
0AC09                           ;--------------------------------
0AC09                           
0AC09                           ;-------------------------------------------------------------------------------------
0AC09                           ;$00 - used to store high nybble of horizontal speed as adder
0AC09                           ;$01 - used to store low nybble of horizontal speed
0AC09                           ;$02 - used to store adder to page location
0AC09                           
0AC09                           
0AC09                           ;--------------------------------
0AC09                           
0AC09                           MoveD_EnemyVertically:
0AC09 A0 3D                           ldy #$3d           ;set quick movement amount downwards
0AC0B B5 1C                           lda Enemy_State,x  ;then check enemy state
0AC0D C9 05                           cmp #$05           ;if not set to unique state for spiny's egg, go ahead
0AC0F D0 02                           bne ContVMove      ;and use, otherwise set different movement amount, continue on
0AC11                           	  
0AC11                           MoveFallingPlatform:
0AC11 A0 20                                ldy #$20       ;set movement amount
0AC13 4C E4 AB                  ContVMove: jmp SetHiMax   ;jump to skip the rest of this
0AC16                           MoveObjectHorizontally1:
0AC16 B5 49                               lda SprObject_X_Speed,x     ;get currently saved value (horizontal
0AC18 A8                                  tay
0AC19 B9 24 BE                  		  lda LSBtoMSB,y
0AC1C 85 01                               sta $01                     ;store result here
0AC1E B5 49                               lda SprObject_X_Speed,x     ;get saved value again
0AC20 A8                                  tay
0AC21 B9 24 BD                  		  lda MSBtoLSB,y
0AC24 C9 08                               cmp #$08                    ;if < 8, branch, do not change
0AC26 90 02                               bcc SaveXSp1
0AC28 09 F0                               ora #%11110000              ;otherwise alter high nybble
0AC2A 85 00                     SaveXSp1: sta $00                     ;save result here
0AC2C A0 00                               ldy #$00                    ;load default Y value here
0AC2E C9 00                               cmp #$00                    ;if result positive, leave Y alone
0AC30 10 01                               bpl UseAdde1
0AC32 88                                  dey                         ;otherwise decrement Y
0AC33 84 02                     UseAdde1: sty $02                     ;save Y here
0AC35 BD 00 04                            lda SprObject_X_MoveForce,x ;get whatever number's here
0AC38 18                                  clc
0AC39 65 01                               adc $01                     ;add low nybble moved to high
0AC3B 9D 00 04                            sta SprObject_X_MoveForce,x ;store result here
0AC3E A9 00                               lda #$00                    ;init A
0AC40 2A                                  rol                         ;rotate carry into d0
0AC41 48                                  pha                         ;push onto stack
0AC42 6A                                  ror                         ;rotate d0 back onto carry
0AC43 B5 78                               lda SprObject_X_Position,x
0AC45 65 00                               adc $00                     ;add carry plus saved value (high nybble moved to low
0AC47                           		  ;ldy FramesMissed
0AC47                           		  ; beq +
0AC47                           		  ; adc $00
0AC47                           +:       
0AC47                           		   
0AC47 95 78                               sta SprObject_X_Position,x  ;plus $f0 if necessary) to object's horizontal position
0AC49 B5 5F                     		  lda SprObject_PageLoc,x
0AC4B 65 02                               adc $02                     ;add carry plus other saved value to the
0AC4D 95 5F                               sta SprObject_PageLoc,x     ;object's page location and save
0AC4F 68                        		  pla
0AC50 18                                  clc                         ;pull old carry from stack and add
0AC51 65 00                               adc $00                     ;to high nybble moved to low
0AC53 A6 08                     ExXMove1: ldx ObjectOffset
0AC55 60                        +:		  rts                         ;and leave
0AC56                           MovePlayerHorizontally:
0AC56 AD 0E 07                        lda JumpspringAnimCtrl  ;if jumpspring currently animating,
0AC59 D0 3E                           bne ExXMove             ;branch to leave
0AC5B AA                              tax                     ;otherwise set zero for offset to use player's stuff
0AC5C                           
0AC5C                           MoveObjectHorizontally:
0AC5C B5 49                               lda SprObject_X_Speed,x     ;get currently saved value (horizontal
0AC5E A8                                  tay
0AC5F B9 24 BE                  		  lda LSBtoMSB,y
0AC62 85 01                               sta $01                     ;store result here
0AC64 B5 49                               lda SprObject_X_Speed,x     ;get saved value again
0AC66 A8                                  tay
0AC67 B9 24 BD                  		  lda MSBtoLSB,y
0AC6A C9 08                               cmp #$08                    ;if < 8, branch, do not change
0AC6C 90 02                               bcc SaveXSpd
0AC6E 09 F0                               ora #%11110000              ;otherwise alter high nybble
0AC70 85 00                     SaveXSpd: sta $00                     ;save result here
0AC72                           		  ;ldy FramesMissed
0AC72                           		  ;beq +
0AC72                           		  ;clc
0AC72                           		  ;adc $00
0AC72                           		  ;sta $00
0AC72                           +:        
0AC72 A0 00                     		  ldy #$00                    ;load default Y value here
0AC74 C9 00                               cmp #$00                    ;if result positive, leave Y alone
0AC76 10 01                               bpl UseAdder
0AC78 88                                  dey                         ;otherwise decrement Y
0AC79 84 02                     UseAdder: sty $02                     ;save Y here
0AC7B BD 00 04                            lda SprObject_X_MoveForce,x ;get whatever number's here
0AC7E 18                                  clc
0AC7F 65 01                               adc $01                     ;add low nybble moved to high
0AC81 9D 00 04                            sta SprObject_X_MoveForce,x ;store result here
0AC84 A9 00                               lda #$00                    ;init A
0AC86 2A                                  rol                         ;rotate carry into d0
0AC87 48                                  pha                         ;push onto stack
0AC88 6A                        		  ror                         ;rotate d0 back onto carry
0AC89 B5 78                               lda SprObject_X_Position,x
0AC8B 65 00                               adc $00                     ;add carry plus saved value (high nybble moved to low
0AC8D 95 78                     		  sta SprObject_X_Position,x  ;plus $f0 if necessary) to object's horizontal position
0AC8F B5 5F                     		  lda SprObject_PageLoc,x
0AC91 65 02                               adc $02                     ;add carry plus other saved value to the
0AC93 95 5F                               sta SprObject_PageLoc,x     ;object's page location and save
0AC95 68                        		  pla
0AC96 18                        		  clc
0AC97                           		  ;ldy FramesMissed
0AC97                           		  ;beq +
0AC97 65 00                     +:        adc $00                     ;to high nybble moved to low
0AC99 60                        ExXMove:  rts                         ;and leave
0AC9A                           
0AC9A                           ;-------------------------------------------------------------------------------------
0AC9A                           ;$00 - used for downward force
0AC9A                           ;$01 - used for upward force
0AC9A                           ;$02 - used for maximum vertical speed
0AC9A                           
0AC9A                           Jumpspring_Y_PosData:
0AC9A                             ;    .db $08, $10, $08, $00
0AC9A                           
0AC9A                           JumpspringHandler:
0AC9A                                ;      jsr GetEnemyOffscreenBits   ;get offscreen information
0AC9A                                 ;     lda TimerControl            ;check master timer control
0AC9A                                   ;   bne DrawJSpr                ;branch to last section if set
0AC9A                                    ;  lda JumpspringAnimCtrl      ;check jumpspring frame control
0AC9A                                  ;; ;   beq DrawJSpr                ;branch to last section if not set
0AC9A                                     ; tay
0AC9A                                   ;   dey                         ;subtract one from frame control,
0AC9A                                      ;tya                         ;the only way a poor nmos 6502 can
0AC9A                                     ; and #%00000010              ;mask out all but d1, original value still in Y
0AC9A                                      ;bne DownJSpr                ;if set, branch to move player up
0AC9A                                      ;inc Player_Y_Position
0AC9A                                    ;  inc Player_Y_Position       ;move player's vertical position down two pixels
0AC9A                                    ;  jmp PosJSpr                 ;skip to next part
0AC9A                           DownJSpr:;  dec Player_Y_Position       ;move player's vertical position up two pixels
0AC9A                                    ;  dec Player_Y_Position
0AC9A                           PosJSpr: ;  lda Jumpspring_FixedYPos,x  ;get permanent vertical position
0AC9A                                    ;  clc
0AC9A                                    ;  adc Jumpspring_Y_PosData,y  ;add value using frame control as offset
0AC9A                                    ;  sta Enemy_Y_Position,x      ;store as new vertical position
0AC9A                                    ;  cpy #$01                    ;check frame control offset (second frame is $00)
0AC9A                                    ;  bcc BounceJS                ;if offset not yet at third frame ($01), skip to next part
0AC9A                                    ;  lda A_B_Buttons
0AC9A                                    ;  and #A_Button               ;check saved controller bits for A button press
0AC9A                                    ;  beq BounceJS                ;skip to next part if A not pressed
0AC9A                                    ;  and PreviousA_B_Buttons     ;check for A button pressed in previous frame
0AC9A                                    ;  bne BounceJS                ;skip to next part if so
0AC9A                                    ;  lda #$f4
0AC9A                                    ;  sta JumpspringForce         ;otherwise write new jumpspring force here
0AC9A                           BounceJS:;  cpy #$03                    ;check frame control offset again
0AC9A                                    ;  bne DrawJSpr                ;skip to last part if not yet at fifth frame ($03)
0AC9A                                    ;  lda JumpspringForce
0AC9A                                    ;  sta Player_Y_Speed          ;store jumpspring force as player's new vertical speed
0AC9A                                    ;  if JUMPSPRING_FIX == 1
0AC9A                                    ;      lda #$40                ;PAL bugfix: Define vertical acceleration on springs (was undefined on NTSC)
0AC9A                                    ;      sta VerticalForce
0AC9A                                    ;  endif
0AC9A                                    ;  lda #$00
0AC9A                                    ;  sta JumpspringAnimCtrl      ;initialize jumpspring frame control
0AC9A                           DrawJSpr:;  jsr RelativeEnemyPosition   ;get jumpspring's relative coordinates
0AC9A                                    ;  jsr EnemyGfxHandler         ;draw jumpspring
0AC9A                                    ;  jsr OffscreenBoundsCheck    ;check to see if we need to kill it
0AC9A                                    ;  lda JumpspringAnimCtrl      ;if frame control at zero, don't bother
0AC9A                                    ;  beq ExJSpring               ;trying to animate it, just leave
0AC9A                                    ;  lda JumpspringTimer
0AC9A                                    ;  bne ExJSpring               ;if jumpspring timer not expired yet, leave
0AC9A                                    ;  lda #$04
0AC9A                                    ;  sta JumpspringTimer         ;otherwise initialize jumpspring timer
0AC9A                                    ;  inc JumpspringAnimCtrl      ;increment frame control to animate jumpspring
0AC9A                           ;ExJSpring: rts                         ;leave
0AC9A                           
0AC9A                           
0AC9A                           ImposeGravity:
0AC9A 48                                 pha                          ;push value to stack
0AC9B BD 16 04                           lda SprObject_YMF_Dummy,x
0AC9E 18                                 clc                          ;add value in movement force to contents of dummy variable
0AC9F 7D 33 04                           adc SprObject_Y_MoveForce,x
0ACA2 9D 16 04                           sta SprObject_YMF_Dummy,x
0ACA5 A0 00                              ldy #$00                     ;set Y to zero by default
0ACA7 B5 91                              lda SprObject_Y_Speed,x      ;get current vertical speed
0ACA9 10 01                     		 bpl AlterYP                  ;if currently moving downwards, do not decrement Y
0ACAB 88                                 dey                          ;otherwise decrement Y
0ACAC 84 07                     AlterYP: sty $07                      ;store Y here
0ACAE 75 C0                              adc SprObject_Y_Position,x   ;add vertical position to vertical speed plus carry
0ACB0                           		 ;ldy FramesMissed
0ACB0                           		 ;  beq +
0ACB0                           		 ;  adc SprObject_Y_Speed,x
0ACB0                           +:       
0ACB0                           		   
0ACB0 95 C0                              sta SprObject_Y_Position,x   ;store as new vertical position
0ACB2 B5 A7                              lda SprObject_Y_HighPos,x
0ACB4 65 07                              adc $07                      ;add carry plus contents of $07 to vertical high byte
0ACB6 95 A7                              sta SprObject_Y_HighPos,x    ;store as new vertical high byte
0ACB8 BD 33 04                           lda SprObject_Y_MoveForce,x
0ACBB 18                                 clc
0ACBC 65 00                              adc $00                      ;add downward movement amount to contents of $0433
0ACBE 9D 33 04                           sta SprObject_Y_MoveForce,x
0ACC1 B5 91                              lda SprObject_Y_Speed,x      ;add carry to vertical speed and store
0ACC3 69 00                              adc #$00
0ACC5 95 91                              sta SprObject_Y_Speed,x 
0ACC7 C5 02                              cmp $02                      ;compare to maximum speed
0ACC9 30 0E                              bmi ChkUpM                   ;if less than preset value, skip this part
0ACCB BD 33 04                           lda SprObject_Y_MoveForce,x
0ACCE 10 09                              bpl ChkUpM
0ACD0 A5 02                              lda $02
0ACD2 95 91                              sta SprObject_Y_Speed,x      ;keep vertical speed within maximum value
0ACD4 A9 00                              lda #$00
0ACD6 9D 33 04                           sta SprObject_Y_MoveForce,x  ;clear fractional
0ACD9 68                        ChkUpM:  pla                          ;get value from stack
0ACDA F0 29                              beq ExVMove                  ;if set to zero, branch to leave
0ACDC A5 02                              lda $02
0ACDE 49 FF                              eor #%11111111               ;otherwise get two's compliment of maximum speed
0ACE0 A8                                 tay
0ACE1 C8                                 iny
0ACE2 84 07                              sty $07                      ;store two's compliment here
0ACE4 BD 33 04                           lda SprObject_Y_MoveForce,x
0ACE7 38                                 sec                          ;subtract upward movement amount from contents
0ACE8 E5 01                              sbc $01                      ;of movement force, note that $01 is twice as large as $00,
0ACEA 9D 33 04                           sta SprObject_Y_MoveForce,x  ;thus it effectively undoes add we did earlier
0ACED B5 91                              lda SprObject_Y_Speed,x
0ACEF E9 00                              sbc #$00                     ;subtract borrow from vertical speed and store
0ACF1 95 91                              sta SprObject_Y_Speed,x
0ACF3 C5 07                              cmp $07                      ;compare vertical speed to two's compliment
0ACF5 10 0E                              bpl ExVMove                  ;if less negatively than preset maximum, skip this part
0ACF7 BD 33 04                           lda SprObject_Y_MoveForce,x
0ACFA 30 09                              bmi ExVMove                  ;and if so, branch to leave
0ACFC A5 07                              lda $07
0ACFE 95 91                              sta SprObject_Y_Speed,x      ;keep vertical speed within maximum value
0AD00 A9 FF                              lda #$ff
0AD02 9D 33 04                           sta SprObject_Y_MoveForce,x  ;clear fractional
0AD05 60                        ExVMove: rts                          ;leave!
0AD06                           
0AD06                           MaxSpdBlockData:
0AD06 06 08                           .db $06, $08
0AD08                           
0AD08                           ImposeGravityBlock:
0AD08 A0 01                           ldy #$01       ;set offset for maximum speed
0AD0A A9 50                           lda #$50       ;set movement amount here
0AD0C 85 00                           sta $00
0AD0E B9 06 AD                        lda MaxSpdBlockData,y    ;get maximum speed
0AD11                           
0AD11                           ImposeGravitySprObj:
0AD11 85 02                           sta $02            ;set maximum speed here
0AD13 A9 00                           lda #$00           ;set value to move downwards
0AD15 4C 9A AC                        jmp ImposeGravity  ;jump to the code that actually moves it
0AD18                           
0AD18                           ;--------------------------------
0AD18                           
0AD18                           
0AD18                           if DPCM
0AD18                               ; DPCM data must be at $C000 or later, aligned to 64 byte boundry
0AD18                               .align 64
0AD18                               ;include code\sound\shmup_dpcm.asm
0AD18                               sample0:
0AD18                                 ;incbin code\sound\vyu.dmc
0AD18                                 incbin code\sound\tim2.dmc
0AD18                               sample0_end:
0AD18                           endif
0AD18                           
0AD18                           if DPCM && TIM_GRUNT
0AD18                               include code\tim.asm
0AD18                           endif
0AD18                           		
0AD18                           UpdateLives:
0AD18 A0 00                     	   ldy #$00
0AD1A 8C FB 07                  	   sty $07fb
0AD1D AD 5A 07                  	   lda NumberofLives         ;otherwise, check number of lives
0AD20                           	   ;iny
0AD20                           	   ;tya
0AD20                           +
0AD20 C9 0A                     	   cmp #10                   ;more than 9 lives?
0AD22 90 13                     	   bcc PutLives2
0AD24 E9 0A                     	   sbc #10                   ;if so, subtract 10 and add one to the 10s digit
0AD26 A0 01                     	   ldy #$01                  ;instead of showing 100 lives, A0 will show, etc.
0AD28 8C FB 07                  	   sty $07fb
0AD2B                           -
0AD2B C9 0A                     	   cmp #10
0AD2D 90 08                     	   bcc PutLives2
0AD2F E9 0A                     	   sbc #10                   ;if so, subtract 10 and add to the digit
0AD31 EE FB 07                  	   inc $07fb                 ;next to the difference
0AD34 4C 2B AD                  	   jmp -
0AD37                           PutLives2: 
0AD37 8D FC 07                  		sta $07fc
0AD3A A9 05                     		lda #$05
0AD3C 4C 3A 8D                  	    jmp PrintStatusBarNumbers
0AD3F                           		
0AD3F                           RunOffscrBitsSubs:
0AD3F 20 67 AE                          jsr GetXOffscreenBits  ;do subroutine here
0AD42 A8                                tay
0AD43 B9 24 BD                  		lda MSBtoLSB,y
0AD46 85 00                             sta $00                ;store here
0AD48 4C BB AE                          jmp GetYOffscreenBits
0AD4B                           RelativePlayerPosition:
0AD4B A2 00                             ldx #$00      ;set offsets for relative cooordinates
0AD4D A0 00                             ldy #$00      ;routine to correspond to player object
0AD4F B5 C0                             lda SprObject_Y_Position,x  ;load vertical coordinate low
0AD51 99 B8 03                           sta SprObject_Rel_YPos,y    ;store here
0AD54 B5 78                              lda SprObject_X_Position,x  ;load horizontal coordinate
0AD56 38                                 sec                         ;subtract left edge coordinate
0AD57 ED 1C 07                           sbc ScreenLeft_X_Pos
0AD5A 99 AD 03                           sta SprObject_Rel_XPos,y    ;store result here
0AD5D A6 08                              ldx ObjectOffset 
0AD5F 60                        		 rts
0AD60                           		 
0AD60                           RelativeFireballPosition:
0AD60 A0 00                              ldy #$00                    ;set for fireball offsets
0AD62 8A                                 txa                  ;move offset to A
0AD63 18                                 clc
0AD64 79 A1 AD                           adc ObjOffsetData,y  ;add amount of bytes to offset depending on setting in Y
0AD67 AA                                 tax                  ;put back in X and leave
0AD68 A0 02                              ldy #$02
0AD6A B5 C0                     RelWOfs: lda SprObject_Y_Position,x  ;load vertical coordinate low
0AD6C 99 B8 03                           sta SprObject_Rel_YPos,y    ;store here
0AD6F B5 78                              lda SprObject_X_Position,x  ;load horizontal coordinate
0AD71 38                                 sec                         ;subtract left edge coordinate
0AD72 ED 1C 07                           sbc ScreenLeft_X_Pos
0AD75 99 AD 03                           sta SprObject_Rel_XPos,y    ;store result here
0AD78 A6 08                              ldx ObjectOffset            ;return original offset
0AD7A 60                                 rts                 ;leave
0AD7B                           		 ;leave
0AD7B                           SetOffscrBitsOffset:
0AD7B 86 00                             stx $00
0AD7D 18                                clc           ;add contents of X to A to get
0AD7E 65 00                             adc $00       ;appropriate offset, then give back to X
0AD80 AA                                tax
0AD81                           GetOffScreenBitsSet:
0AD81 98                                tya                         ;save offscreen bits offset to stack for now
0AD82 48                                pha
0AD83 20 67 AE                          jsr GetXOffscreenBits  ;do subroutine here
0AD86 A8                                tay
0AD87 B9 24 BD                  		lda MSBtoLSB,y
0AD8A 85 00                             sta $00                ;store here
0AD8C 20 BB AE                          jsr GetYOffscreenBits
0AD8F A8                                tay
0AD90 B9 24 BE                  		lda LSBtoMSB,y
0AD93 05 00                             ora $00                     ;mask together with previously saved low nybble
0AD95 85 00                             sta $00                     ;store both here
0AD97 68                                pla                         ;get offscreen bits offset from stack
0AD98 A8                                tay
0AD99 A5 00                             lda $00                     ;get value here and store elsewhere
0AD9B 99 D0 03                          sta SprObject_OffscrBits,y
0AD9E A6 08                             ldx ObjectOffset
0ADA0 60                                rts
0ADA1                           		
0ADA1                           ObjOffsetData:
0ADA1 07 16 0D                          .db $07, $16, $0d
0ADA4                           		
0ADA4                           PlayerGfxTblOffsets:
0ADA4 20 28 C8 18 00 40 50 58         .db $20, $28, $c8, $18, $00, $40, $50, $58
0ADAC 80 88 B8 78 60 A0 B0 B8         .db $80, $88, $b8, $78, $60, $a0, $b0, $b8
0ADB4                           
0ADB4                           PowerUpGfxTable:
0ADB4 76 77 78 79                     .db $76, $77, $78, $79 ;regular mushroom
0ADB8 D6 D6 D9 D9                     .db $d6, $d6, $d9, $d9 ;fire flower
0ADBC 8D 8D E4 E4                     .db $8d, $8d, $e4, $e4 ;star
0ADC0 76 77 78 79                     .db $76, $77, $78, $79 ;1-up mushroom
0ADC4                           	  ;.db $d6, $d6, $d9, $d9 ;hammer suit
0ADC4                           
0ADC4                           PowerUpAttributes:
0ADC4 02 01 02 01 03                  .db $02, $01, $02, $01, $03
0ADC9                           
0ADC9                           ;--------------------------------
0ADC9                           ;-------------------------------------------------------------------------------------
0ADC9                           ;$00-$01 - tile numbers
0ADC9                           ;$02 - Y coordinate
0ADC9                           ;$03 - flip control
0ADC9                           ;$04 - sprite attributes
0ADC9                           ;$05 - X coordinate
0ADC9                           
0ADC9                           
0ADC9                           Player_DifferenceUD:
0ADC9 21 00                     	  .db $21, $00
0ADCB                           MoveUpsideDownPiranhaP:
0ADCB B5 1C                           lda Enemy_State,x           ;check enemy state
0ADCD D0 78                           bne ExMoveUDPP              ;if set at all, branch to leave
0ADCF BD 8A 07                        lda EnemyFrameTimer,x       ;check enemy's timer here
0ADD2 D0 73                           bne ExMoveUDPP              ;branch to end if not yet expired
0ADD4 B5 92                           lda PiranhaPlant_MoveFlag,x ;check movement flag
0ADD6 D0 3A                           bne SetupToMoveUDPPlant     ;if moving, skip to part ahead
0ADD8 B5 4A                           lda PiranhaPlant_Y_Speed,x  ;if currently rising, branch 
0ADDA 10 2B                           bpl ReverseUPlantSpeed      ;to move enemy upwards out of pipe
0ADDC B5 79                           lda Enemy_X_Position,x      ;get distance between enemy object's
0ADDE 38                              sec                         ;horizontal coordinate and the player's
0ADDF E5 78                           sbc Player_X_Position       ;horizontal coordinate
0ADE1 85 00                           sta $00                     ;and store here
0ADE3 B5 60                           lda Enemy_PageLoc,x
0ADE5 E5 5F                           sbc Player_PageLoc          ;subtract borrow, then leave
0ADE7 10 09                           bpl ChkPlayerNearPipe1      ;piranha plant, and branch if enemy to right of player
0ADE9 A5 00                           lda $00                     ;otherwise get saved horizontal difference
0ADEB 49 FF                           eor #$ff
0ADED 18                              clc                         ;and change to two's compliment
0ADEE 69 01                           adc #$01
0ADF0 85 00                           sta $00                     ;save as new horizontal difference
0ADF2                           
0ADF2                           ChkPlayerNearPipe1:
0ADF2 B5 15                     	  lda Enemy_ID,x
0ADF4 C9 22                     	  cmp #RUDPiranhaPlant
0ADF6 D0 05                     	  bne +
0ADF8 A0 01                     	  ldy #$01
0ADFA 4C 00 AE                  	  jmp ++
0ADFD AC 52 60                  +:    ldy HardModeFlag
0AE00 A5 00                     ++:	  lda $00                     ;get saved horizontal difference
0AE02 D9 C9 AD                        cmp Player_DifferenceUD,y
0AE05 90 40                           bcc ExMoveUDPP               ;if player within a certain distance, branch to leave
0AE07                           	  
0AE07                           ReverseUPlantSpeed:
0AE07 B5 4A                           lda PiranhaPlant_Y_Speed,x  ;get vertical speed
0AE09 49 FF                           eor #$ff
0AE0B 18                              clc                         ;change to two's compliment
0AE0C 69 01                           adc #$01
0AE0E 95 4A                           sta PiranhaPlant_Y_Speed,x  ;save as new vertical speed
0AE10 F6 92                           inc PiranhaPlant_MoveFlag,x ;increment to set movement flag
0AE12                           
0AE12                           SetupToMoveUDPPlant:
0AE12 BD 17 04                        lda PiranhaPlantUpYPos,x    ;get original vertical coordinate (lowest point)
0AE15 B4 4A                           ldy PiranhaPlant_Y_Speed,x  ;get vertical speed
0AE17 30 03                           bmi RiseFallUDPiranhaPlant    ;branch if moving downwards
0AE19 BD 34 04                        lda PiranhaPlantDownYPos,x  ;otherwise get other vertical coordinate (highest point)
0AE1C                           
0AE1C                           RiseFallUDPiranhaPlant:
0AE1C 85 00                            sta $00                     ;save vertical coordinate here
0AE1E AD 52 60                  	   lda HardModeFlag
0AE21 D0 0B                     	   bne +
0AE23 B5 15                     	   lda Enemy_ID,x
0AE25 C9 22                     	   cmp #RUDPiranhaPlant
0AE27 F0 05                     	   beq +
0AE29 A5 09                     	   lda FrameCounter            ;get frame counter
0AE2B 4A                               lsr
0AE2C 90 19                            bcc ExMoveUDPP               ;branch to leave if d0 set (execute code every other frame)
0AE2E AD 47 07                  +:     lda TimerControl            ;get master timer control
0AE31 D0 14                            bne ExMoveUDPP              ;branch to leave if set (likely not necessary)
0AE33 B5 C1                            lda Enemy_Y_Position,x      ;get current vertical coordinate
0AE35 18                               clc
0AE36 75 4A                            adc PiranhaPlant_Y_Speed,x  ;add vertical speed to move up or down
0AE38 95 C1                            sta Enemy_Y_Position,x      ;save as new vertical coordinate
0AE3A C5 00                            cmp $00                     ;compare against low or high coordinate
0AE3C D0 09                            bne ExMoveUDPP              ;branch to leave if not yet reached
0AE3E A9 00                            lda #$00
0AE40 95 92                            sta PiranhaPlant_MoveFlag,x ;otherwise clear movement flag
0AE42 A9 40                            lda #$40
0AE44 9D 8A 07                         sta EnemyFrameTimer,x       ;set timer to delay piranha plant movement
0AE47                           ExMoveUDPP:
0AE47 60                               rts
0AE48                           
0AE48                           
0AE48                           PlayerNamesOffset:
0AE48 00 05                         .db MarioName-PlayerNames,LuigiName-PlayerNames
0AE4A                           
0AE4A                           PlayerNames:
0AE4A                           MarioName:
0AE4A 16 0A 1B 12 18              .db "MARIO"-55
0AE4F                           LuigiName:
0AE4F 15 1E 12 10 12              .db "LUIGI"-55
0AE54                           if GAME_OVER_MENU == 1
0AE54                           endif
0AE54                           
0AE54                           XOffscreenBitsData:
0AE54 7F 3F 1F 0F 07 03 01 00           .db $7f, $3f, $1f, $0f, $07, $03, $01, $00
0AE5C 80 C0 E0 F0 F8 FC FE FF           .db $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
0AE64                           
0AE64                           DefaultXOnscreenOfs:
0AE64 07 0F 07                          .db $07, $0f, $07
0AE67                           
0AE67                           GetXOffscreenBits:
0AE67 86 04                               stx $04                     ;save position in buffer to here
0AE69 A0 01                               ldy #$01                    ;start with right side of screen
0AE6B B9 1C 07                  XOfsLoop: lda ScreenEdge_X_Pos,y      ;get pixel coordinate of edge
0AE6E 38                                  sec                         ;get difference between pixel coordinate of edge
0AE6F F5 78                               sbc SprObject_X_Position,x  ;and pixel coordinate of object position
0AE71 85 07                               sta $07                     ;store here
0AE73 B9 1A 07                            lda ScreenEdge_PageLoc,y    ;get page location of edge
0AE76 F5 5F                               sbc SprObject_PageLoc,x     ;subtract from page location of object position
0AE78 BE 64 AE                            ldx DefaultXOnscreenOfs,y   ;load offset value here
0AE7B C9 00                               cmp #$00      
0AE7D 30 21                               bmi XLdBData                ;if beyond right edge or in front of left edge, branch
0AE7F BE 65 AE                            ldx DefaultXOnscreenOfs+1,y ;if not, load alternate offset value here
0AE82 C9 01                               cmp #$01      
0AE84 10 1A                               bpl XLdBData                ;if one page or more to the left of either edge, branch
0AE86 A9 38                               lda #$38                    ;if no branching, load value here and store
0AE88 85 06                               sta $06
0AE8A A9 08                               lda #$08                    ;load some other value and execute subroutine
0AE8C 85 05                               sta $05       ;store current value in A here
0AE8E A5 07                               lda $07       ;get pixel difference
0AE90 C5 06                               cmp $06       ;compare to preset value
0AE92 B0 0C                               bcs ExDivPD   ;if pixel difference >= preset value, branch
0AE94 4A                                  lsr           ;divide by eight
0AE95 4A                                  lsr
0AE96 4A                                  lsr
0AE97 29 07                               and #$07      ;mask out all but 3 LSB
0AE99 C0 01                               cpy #$01      ;right side of the screen or top?
0AE9B B0 02                               bcs SetOscrO  ;if so, branch, use difference / 8 as offset
0AE9D 65 05                               adc $05       ;if not, add value to difference / 8
0AE9F AA                        SetOscrO: tax           ;use as offset
0AEA0                           ExDivPD:  
0AEA0 BD 54 AE                  XLdBData: lda XOffscreenBitsData,x    ;get bits here
0AEA3 A6 04                               ldx $04                     ;reobtain position in buffer
0AEA5 C9 00                               cmp #$00                    ;if bits not zero, branch to leave
0AEA7 D0 03                               bne ExXOfsBS
0AEA9 88                                  dey                         ;otherwise, do left side of screen now
0AEAA 10 BF                               bpl XOfsLoop                ;branch if not already done with left side
0AEAC 60                        ExXOfsBS: rts
0AEAD                           YOffscreenBitsData:
0AEAD 00 08 0C 0E                       .db $00, $08, $0c, $0e
0AEB1 0F 07 03 01                       .db $0f, $07, $03, $01
0AEB5 00                                .db $00
0AEB6                           
0AEB6                           DefaultYOnscreenOfs:
0AEB6 04 00 04                          .db $04, $00, $04
0AEB9                           
0AEB9                           HighPosUnitData:
0AEB9 FF 00                             .db $ff, $00
0AEBB                           
0AEBB                           GetYOffscreenBits:
0AEBB 86 04                               stx $04                      ;save position in buffer to here
0AEBD A0 01                               ldy #$01                     ;start with top of screen
0AEBF B9 B9 AE                  YOfsLoop: lda HighPosUnitData,y        ;load coordinate for edge of vertical unit
0AEC2 38                                  sec
0AEC3 F5 C0                               sbc SprObject_Y_Position,x   ;subtract from vertical coordinate of object
0AEC5 85 07                               sta $07                      ;store here
0AEC7 A9 01                               lda #$01                     ;subtract one from vertical high byte of object
0AEC9 F5 A7                               sbc SprObject_Y_HighPos,x
0AECB BE B6 AE                            ldx DefaultYOnscreenOfs,y    ;load offset value here
0AECE C9 00                               cmp #$00
0AED0 30 21                               bmi YLdBData                 ;if under top of the screen or beyond bottom, branch
0AED2 BE B7 AE                            ldx DefaultYOnscreenOfs+1,y  ;if not, load alternate offset value here
0AED5 C9 01                               cmp #$01
0AED7 10 1A                               bpl YLdBData                 ;if one vertical unit or more above the screen, branch
0AED9 A9 20                               lda #$20                     ;if no branching, load value here and store
0AEDB 85 06                               sta $06
0AEDD A9 04                               lda #$04                     ;load some other value and execute subroutine
0AEDF 85 05                               sta $05       ;store current value in A here
0AEE1 A5 07                               lda $07       ;get pixel difference
0AEE3 C5 06                               cmp $06       ;compare to preset value
0AEE5 B0 0C                               bcs ExDivPD1   ;if pixel difference >= preset value, branch
0AEE7 4A                                  lsr           ;divide by eight
0AEE8 4A                                  lsr
0AEE9 4A                                  lsr
0AEEA 29 07                               and #$07      ;mask out all but 3 LSB
0AEEC C0 01                               cpy #$01      ;right side of the screen or top?
0AEEE B0 02                               bcs SetOscrO1  ;if so, branch, use difference / 8 as offset
0AEF0 65 05                               adc $05       ;if not, add value to difference / 8
0AEF2 AA                        SetOscrO1: tax           ;use as offset
0AEF3                           ExDivPD1:  
0AEF3 BD AD AE                  YLdBData: lda YOffscreenBitsData,x     ;get offscreen data bits using offset
0AEF6 A6 04                               ldx $04                      ;reobtain position in buffer
0AEF8 C9 00                               cmp #$00
0AEFA D0 03                               bne ExYOfsBS                 ;if bits not zero, branch to leave
0AEFC 88                                  dey                          ;otherwise, do bottom of the screen now
0AEFD 10 C0                               bpl YOfsLoop
0AEFF 60                        ExYOfsBS: rts
0AF00                           		
0AF00                           		
0AF00                           RelativeEnemyPosition:
0AF00 A9 01                             lda #$01                     ;get coordinates of enemy object 
0AF02 A0 01                             ldy #$01                     ;relative to the screen
0AF04 86 00                     		stx $00                     ;store value to add to A here
0AF06 18                                clc
0AF07 65 00                             adc $00                     ;add A to value stored
0AF09 AA                                tax                         ;use as enemy offset
0AF0A B5 C0                             lda SprObject_Y_Position,x  ;load vertical coordinate low
0AF0C 99 B8 03                          sta SprObject_Rel_YPos,y    ;store here
0AF0F B5 78                             lda SprObject_X_Position,x  ;load horizontal coordinate
0AF11 38                                sec                         ;subtract left edge coordinate
0AF12 ED 1C 07                          sbc ScreenLeft_X_Pos
0AF15 99 AD 03                          sta SprObject_Rel_XPos,y    ;store result here
0AF18 A6 08                             ldx ObjectOffset            ;reload old object offset and leave
0AF1A 60                        		rts
0AF1B                           
0AF1B                           		
0AF1B                           ShrinkPlayer:
0AF1B 98                                tya                          ;add ten bytes to frame control as offset
0AF1C 18                                clc
0AF1D 69 0A                             adc #$0a                     ;this thing apparently uses two of the swimming frames
0AF1F AA                                tax                          ;to draw the player shrinking
0AF20 A0 09                             ldy #$09                     ;load offset for small player swimming
0AF22 BD 7B C2                          lda ChangeSizeOffsetAdder,x  ;get what would normally be offset adder
0AF25 D0 02                             bne ShrPlF                   ;and branch to use offset if nonzero
0AF27 A0 01                             ldy #$01                     ;otherwise load offset for big player swimming
0AF29 B9 A4 AD                  ShrPlF: lda PlayerGfxTblOffsets,y    ;get offset to graphics table based on offset loaded
0AF2C 60                                rts                          ;and leave
0AF2D                           
0AF2D                           
0AF2D                           ChkForPlayerAttrib:
0AF2D AC E4 06                             ldy Player_SprDataOffset    ;get sprite data offset
0AF30 A5 0E                                lda GameEngineSubroutine
0AF32 C9 0B                                cmp #$0b                    ;if executing specific game engine routine,
0AF34 F0 13                                beq KilledAtt               ;branch to change third and fourth row OAM attributes
0AF36 AD D5 06                             lda PlayerGfxOffset         ;get graphics table offset
0AF39 C9 50                                cmp #$50
0AF3B F0 1E                                beq C_S_IGAtt               ;if crouch offset, either standing offset,
0AF3D C9 B8                                cmp #$b8                    ;or intermediate growing offset,
0AF3F F0 1A                                beq C_S_IGAtt               ;go ahead and execute code to change 
0AF41 C9 C0                                cmp #$c0                    ;fourth row OAM attributes only
0AF43 F0 16                                beq C_S_IGAtt
0AF45 C9 C8                                cmp #$c8
0AF47 D0 24                                bne ExPlyrAt                ;if none of these, branch to leave
0AF49 B9 12 02                  KilledAtt: lda Sprite_Attributes+16,y
0AF4C 29 3F                                and #%00111111              ;mask out horizontal and vertical flip bits
0AF4E 99 12 02                             sta Sprite_Attributes+16,y  ;for third row sprites and save
0AF51 B9 16 02                             lda Sprite_Attributes+20,y
0AF54 29 3F                                and #%00111111  
0AF56 09 40                                ora #%01000000              ;set horizontal flip bit for second
0AF58 99 16 02                             sta Sprite_Attributes+20,y  ;sprite in the third row
0AF5B B9 1A 02                  C_S_IGAtt: lda Sprite_Attributes+24,y
0AF5E 29 3F                                and #%00111111              ;mask out horizontal and vertical flip bits
0AF60 99 1A 02                             sta Sprite_Attributes+24,y  ;for fourth row sprites and save
0AF63 B9 1E 02                             lda Sprite_Attributes+28,y
0AF66 29 3F                                and #%00111111
0AF68 09 40                                ora #%01000000              ;set horizontal flip bit for second
0AF6A 99 1E 02                             sta Sprite_Attributes+28,y  ;sprite in the fourth row
0AF6D 60                        ExPlyrAt:  rts                         ;leave
0AF6E                           ShrinkPlayer2:
0AF6E 4C 1B AF                  		jmp ShrinkPlayer
0AF71                           
0AF71                           HandleChangeSize:
0AF71 AC 0D 07                  		 ldy PlayerAnimCtrl           ;get animation frame control
0AF74 A5 09                              lda FrameCounter
0AF76 29 03                              and #%00000011               ;get frame counter and execute this code every
0AF78 D0 0D                              bne GorSLog                  ;fourth frame, otherwise branch ahead
0AF7A C8                                 iny                          ;increment frame control
0AF7B C0 0A                              cpy #$0a                     ;check for preset upper extent
0AF7D 90 05                              bcc CSzNext                  ;if not there yet, skip ahead to use
0AF7F A0 00                              ldy #$00                     ;otherwise initialize both grow/shrink flag
0AF81 8C 0B 07                           sty PlayerChangeSizeFlag     ;and animation frame control
0AF84 8C 0D 07                  CSzNext: sty PlayerAnimCtrl           ;store proper frame control
0AF87 AD 30 60                  GorSLog: lda OldStatus
0AF8A C9 02                     		 cmp #$02
0AF8C D0 04                     		 bne +
0AF8E AD D5 06                  		 lda PlayerGfxOffset
0AF91 60                        		 rts
0AF92 AD 54 07                  +:		 lda PlayerSize               ;get player's size
0AF95 D0 D7                              bne ShrinkPlayer2             ;if player small, skip ahead to next part
0AF97 B9 7B C2                           lda ChangeSizeOffsetAdder,y  ;get offset adder based on frame control as offset
0AF9A A0 0F                              ldy #$0f                     ;load offset for player growing
0AF9C                           
0AF9C                           GetOffsetFromAnimCtrl:
0AF9C 0A                                asl                        ;multiply animation frame control
0AF9D 0A                                asl                        ;by eight to get proper amount
0AF9E 0A                                asl                        ;to add to our offset
0AF9F 79 A4 AD                          adc PlayerGfxTblOffsets,y  ;add to offset to graphics table
0AFA2 60                                rts                        ;and return with result in A
0AFA3                           ProcessPlayerAction:
0AFA3 A5 1B                             lda Player_State      ;get player's state
0AFA5 C9 03                             cmp #$03
0AFA7 F0 63                             beq ActionClimbing    ;if climbing, branch here
0AFA9 C9 02                             cmp #$02
0AFAB F0 4F                             beq ActionFalling     ;if falling, branch here
0AFAD C9 01                             cmp #$01
0AFAF D0 11                             bne ProcOnGroundActs  ;if not jumping, branch here
0AFB1 AD 04 07                          lda SwimmingFlag
0AFB4 D0 62                             bne ActionSwimming    ;if swimming flag set, branch elsewhere
0AFB6 A0 06                             ldy #$06              ;load offset for crouching
0AFB8 AD 14 07                          lda CrouchingFlag     ;get crouching flag
0AFBB D0 33                             bne NonAnimatedActs   ;if set, branch to get offset for graphics table
0AFBD A0 00                             ldy #$00              ;otherwise load offset for jumping
0AFBF 4C F0 AF                          jmp NonAnimatedActs   ;go to get offset to graphics table
0AFC2                           
0AFC2                           if SKID_SFX
0AFC2                               ProcOnGroundActs:
0AFC2 A0 06                                 ldy #$06                   ;load offset for crouching
0AFC4 AD 14 07                              lda CrouchingFlag          ;get crouching flag
0AFC7 D0 27                                 bne NonAnimatedActs        ;if set, branch to get offset for graphics table
0AFC9 A0 02                                 ldy #$02                   ;load offset for standing
0AFCB A5 49                                 lda Player_X_Speed         ;check player's horizontal speed
0AFCD 05 0C                                 ora Left_Right_Buttons     ;and left/right controller bits
0AFCF 0D E1 63                  			ora AutoScrollFlag2
0AFD2 F0 1C                                 beq NonAnimatedActs        ;if no speed or buttons pressed, use standing offset
0AFD4 AD 00 07                              lda Player_XSpeedAbsolute  ;load walking/running speed
0AFD7 C9 09                                 cmp #$09
0AFD9 90 29                                 bcc ActionWalkRun          ;if less than a certain amount, branch, too slow to skid
0AFDB A5 42                                 lda Player_MovingDir       ;otherwise check to see if moving direction
0AFDD 25 31                                 and PlayerFacingDir        ;and facing direction are the same
0AFDF D0 23                                 bne ActionWalkRun          ;if moving direction = facing direction, branch, don't skid
0AFE1 A5 0E                                 lda GameEngineSubroutine
0AFE3 C9 0D                     			cmp #$0d
0AFE5 F0 04                     			beq +
0AFE7 C9 09                                 cmp #$09                   ;if running the change size, fire flower, injure
0AFE9 B0 04                                 bcs NoSkidS                ;or death game engine subroutines, skip this
0AFEB A9 80                     +:          lda #$80                   ;otherwise play skid sound
0AFED 85 EE                                 sta NoiseSoundQueue
0AFEF C8                            NoSkidS: iny                        ;increment to skid offset ($03)
0AFF0                           else
0AFF0                               ProcOnGroundActs:
0AFF0                                       ldy #$06                   ;load offset for crouching
0AFF0                                       lda CrouchingFlag          ;get crouching flag
0AFF0                                       bne NonAnimatedActs        ;if set, branch to get offset for graphics table
0AFF0                                       ldy #$02                   ;load offset for standing
0AFF0                                       lda Player_X_Speed         ;check player's horizontal speed
0AFF0                                       ora Left_Right_Buttons     ;and left/right controller bits
0AFF0                           			ora AutoScrollFlag2
0AFF0                                       beq NonAnimatedActs        ;if no speed or buttons pressed, use standing offset
0AFF0                                       lda Player_XSpeedAbsolute  ;load walking/running speed
0AFF0                                       cmp #$09
0AFF0                                       bcc ActionWalkRun          ;if less than a certain amount, branch, too slow to skid
0AFF0                                       lda Player_MovingDir       ;otherwise check to see if moving direction
0AFF0                                       and PlayerFacingDir        ;and facing direction are the same
0AFF0                                       bne ActionWalkRun          ;if moving direction = facing direction, branch, don't skid
0AFF0                                       iny                        ;otherwise increment to skid offset ($03)
0AFF0                           endif
0AFF0                           
0AFF0                           NonAnimatedActs:
0AFF0 20 58 B0                          jsr GetGfxOffsetAdder      ;do a sub here to get offset adder for graphics table
0AFF3 A9 00                             lda #$00
0AFF5 8D 0D 07                          sta PlayerAnimCtrl         ;initialize animation frame control
0AFF8 B9 A4 AD                          lda PlayerGfxTblOffsets,y  ;load offset to graphics table using size as offset
0AFFB 60                                rts
0AFFC                           
0AFFC                           ActionFalling:
0AFFC A0 04                             ldy #$04                  ;load offset for walking/running
0AFFE 20 58 B0                          jsr GetGfxOffsetAdder     ;get offset to graphics table
0B001 4C 29 B0                          jmp GetCurrentAnimOffset  ;execute instructions for falling state
0B004                           
0B004                           ActionWalkRun:
0B004 A0 04                             ldy #$04               ;load offset for walking/running
0B006 20 58 B0                          jsr GetGfxOffsetAdder  ;get offset to graphics table
0B009 4C 2F B0                          jmp FourFrameExtent    ;execute instructions for normal state
0B00C                           
0B00C                           ActionClimbing:
0B00C A0 05                             ldy #$05               ;load offset for climbing
0B00E A5 91                             lda Player_Y_Speed     ;check player's vertical speed
0B010 F0 DE                             beq NonAnimatedActs    ;if no speed, branch, use offset as-is
0B012 20 58 B0                          jsr GetGfxOffsetAdder  ;otherwise get offset for graphics table
0B015 4C 34 B0                          jmp ThreeFrameExtent   ;then skip ahead to more code
0B018                           
0B018                           ActionSwimming:
0B018 A0 01                             ldy #$01               ;load offset for swimming
0B01A 20 58 B0                          jsr GetGfxOffsetAdder
0B01D AD 82 07                          lda JumpSwimTimer      ;check jump/swim timer
0B020 0D 0D 07                          ora PlayerAnimCtrl     ;and animation frame control
0B023 D0 0A                             bne FourFrameExtent    ;if any one of these set, branch ahead
0B025 A5 0A                             lda A_B_Buttons
0B027 30 06                             bmi FourFrameExtent    ;branch to same place if A button pressed
0B029                           
0B029                           GetCurrentAnimOffset:
0B029 AD 0D 07                          lda PlayerAnimCtrl         ;get animation frame control
0B02C 4C 9C AF                          jmp GetOffsetFromAnimCtrl  ;jump to get proper offset to graphics table
0B02F                           
0B02F                           FourFrameExtent:
0B02F A9 03                             lda #$03              ;load upper extent for frame control
0B031 4C 36 B0                          jmp AnimationControl  ;jump to get offset and animate player object
0B034                           
0B034                           ThreeFrameExtent:
0B034 A9 02                             lda #$02              ;load upper extent for frame control for climbing
0B036                           
0B036                           AnimationControl:
0B036 85 00                               sta $00                   ;store upper extent here
0B038 20 29 B0                            jsr GetCurrentAnimOffset  ;get proper offset to graphics table
0B03B 48                                  pha                       ;save offset to stack
0B03C AD 81 07                            lda PlayerAnimTimer       ;load animation frame timer
0B03F D0 15                               bne ExAnimC               ;branch if not expired
0B041 AD 0C 07                            lda PlayerAnimTimerSet    ;get animation frame timer amount
0B044 8D 81 07                            sta PlayerAnimTimer       ;and set timer accordingly
0B047 AD 0D 07                            lda PlayerAnimCtrl
0B04A 18                                  clc                       ;add one to animation frame control
0B04B 69 01                               adc #$01
0B04D C5 00                               cmp $00                   ;compare to upper extent
0B04F 90 02                               bcc SetAnimC              ;if frame control + 1 < upper extent, use as next
0B051 A9 00                               lda #$00                  ;otherwise initialize frame control
0B053 8D 0D 07                  SetAnimC: sta PlayerAnimCtrl        ;store as new animation frame control
0B056 68                        ExAnimC:  pla                       ;get offset to graphics table from stack and leave
0B057 60                                  rts
0B058                           
0B058                           GetGfxOffsetAdder:
0B058 AD 54 07                          lda PlayerSize  ;get player's size
0B05B F0 05                             beq SzOfs       ;if player big, use current offset as-is
0B05D 98                                tya             ;for big player
0B05E 18                                clc             ;otherwise add eight bytes to offset
0B05F 69 08                             adc #$08        ;for small player
0B061 A8                                tay
0B062 60                        SzOfs:  rts             ;go back
0B063                           ;-------------------------------------------------------------------------------------
0B063                           ;$00 - used in adding to get proper offset
0B063                           GetEnemyOffscreenBits:
0B063 A9 01                             lda #$01                 ;set A to add 1 byte in order to get enemy offset
0B065 A8                                tay
0B066 4C 7B AD                          jmp SetOffscrBitsOffset
0B069                           
0B069                           ChkLandedEnemyState:
0B069 B5 1C                     		   lda Enemy_State,x         ;if enemy in normal state, branch back to jump here
0B06B D0 03                     		   bne +
0B06D 4C 88 EA                             jmp SChkA
0B070 C9 05                     +:         cmp #$05                  ;if in state used by spiny's egg
0B072 D0 03                     		   bne +
0B074 4C 8E EA                             jmp ProcEnemyDirection    ;then branch elsewhere
0B077 C9 03                     +:         cmp #$03                  ;if already in state used by koopas and buzzy beetles
0B079 B0 35                                bcs ExSteChk              ;or in higher numbered state, branch to leave
0B07B                                      ;lda Enemy_State,x         ;load enemy state again (why?)
0B07B C9 02                                cmp #$02                  ;if not in $02 state (used by koopas and buzzy beetles)
0B07D F0 03                     		   beq +
0B07F 4C 8E EA                             jmp ProcEnemyDirection    ;then branch elsewhere
0B082 A9 10                     +:		   lda #$10                  ;load default timer here
0B084 B4 15                                ldy Enemy_ID,x            ;check enemy identifier for spiny
0B086 C0 12                                cpy #Spiny
0B088 D0 02                                bne SetForStn             ;branch if not found
0B08A A9 00                                lda #$00                  ;set timer for $00 if spiny
0B08C 9D 96 07                  SetForStn: sta EnemyIntervalTimer,x  ;set timer here
0B08F A9 04                                lda #$04                  ;set state here, apparently used to render
0B091 95 1C                                sta Enemy_State,x         ;upside-down koopas and buzzy beetles
0B093 A9 00                                lda #$00                    ;initialize vertical speed
0B095 95 92                                sta Enemy_Y_Speed,x         ;and movement force
0B097 9D F0 05                  		   sta EnemyOnSlope,x
0B09A EC 08 60                  		   cpx GrabID
0B09D D0 06                     		   bne +
0B09F 8D 1D 60                  		   sta GrabDown
0B0A2 8D 78 60                  		   sta GrabUp
0B0A5 9D 34 04                  +:         sta Enemy_Y_MoveForce,x            ;do something here to vertical speed and something else
0B0A8 B5 C1                                lda Enemy_Y_Position,x
0B0AA 29 F0                     		   and #%11110000          ;save high nybble of vertical coordinate, and
0B0AC 09 08                     		   ora #%00001000          ;set d3, then store, probably used to set enemy object
0B0AE 95 C1                     		   sta Enemy_Y_Position,x  ;neatly on whatever it's landing on
0B0B0 60                        ExSteChk:  rts                       ;then leave
0B0B1                           include code\titleScreen.asm
0B0B1                           DrawTitleScreen:
0B0B1                                       if SKIP_TITLE
0B0B1                                           inc ScreenRoutineTask
0B0B1                                           rts
0B0B1                                       endif
0B0B1                           
0B0B1                           
0B0B1 AD 70 07                              lda OperMode                 ;are we in title screen mode?
0B0B4 F0 03                                 beq +
0B0B6 4C B3 88                              jmp IncModeTask_B            ;if not, exit
0B0B9                           +
0B0B9 A9 64                                 lda #$64                     ;put address $0300 into
0B0BB 85 01                                 sta $01                      ;the indirect at $00
0B0BD A0 00                                 ldy #$00
0B0BF 84 00                                 sty $00
0B0C1                           
0B0C1 A9 E5                                 lda #<titleScreenData
0B0C3 85 02                                 sta $02
0B0C5 A9 B0                                 lda #>titleScreenData
0B0C7 85 03                                 sta $03
0B0C9                           OutputTScr:
0B0C9 B1 02                                 lda ($02),y
0B0CB 91 00                                 sta ($00),y
0B0CD 85 04                     			sta $04
0B0CF C8                                    iny
0B0D0 D0 04                                 bne ChkHiByte
0B0D2 E6 01                                 inc $01
0B0D4 E6 03                                 inc $03
0B0D6                           ChkHiByte:
0B0D6 A5 04                                 lda $04                                         ;check high byte?
0B0D8 C9 FF                                 cmp #$ff							    			;at $0400?
0B0DA D0 ED                                 bne OutputTScr                                  ;if not, loop back and do another
0B0DC C0 4C                                 cpy #<(titleScreenDataEnd-titleScreenData)      ;check if offset points past end of data (This is #$3a normally).
0B0DE 90 E9                                 bcc OutputTScr                                  ;if not, loop back and do another
0B0E0 A9 05                                 lda #$05                                        ;set buffer transfer control to $0300,
0B0E2 4C 46 87                              jmp SetVRAMAddr_B                               ;increment task and exit
0B0E5                           
0B0E5                           
0B0E5                           titleScreenData:
0B0E5                           ;.incbin data\SMB Annoyance.nes, TitleScreenDataOffset + $8000 + $10, $13a      ; does not work
0B0E5                           ;.incbin data\SMB Annoyance.nes, $1ec0 + $8000 + $10, $13a                      ; does not work
0B0E5                           ;.incbin SMBAnnoyance.nes, $9ed0                                                ; works
0B0E5                           ;.incbin "SMB Annoyance.nes", $9ed0                                             ; works
0B0E5                           ;.incbin data\SMB Annoyance.nes, $9ed0                                          ; does not work
0B0E5                           ;.incbin SMBAnnoyance.nes, $1ec0 + $8000 + $10, $13a                            ; works
0B0E5                           ;.incbin SMBAnnoyance.nes, TitleScreenDataOffset + $8000 + $10, $13a            ; assembles, does not work
0B0E5                           ;.incbin "data\SMB Annoyance.nes", TitleScreenDataOffset + $8000 + $10, $13a    ; works
0B0E5                           ;.incbin "data/SMB Annoyance.nes", TitleScreenDataOffset + $8000 + $10, $13a    ; works
0B0E5                           ;.incbin data\SMB Annoyance.nes, $8000 + $10, $13a + TitleScreenDataOffset      ; does not work
0B0E5                           ;.incbin SMBAnnoyance.nes, $8000 + $10, $13a + TitleScreenDataOffset            ; does not work
0B0E5                           
0B0E5                           
0B0E5 20 87 01 44 20 88 50 48.. .db $20, $87, $01, $44, $20, $88, $50, $48, $20, $98, $01, $49, $20, $a7, $c9, $46, $20, $a8, $0a, $d0, $d1, $d8, $d8, $de, $d1, $d0, $da, $de, $d1, $20, $b2, $46, $26, $20, $b8, $c9, $4a, $20, $c8, $0a, $d2, $d3, $db, $db, $db, $d9, $db, $dc, $db, $df, $20, $d2, $46, $26, $20, $e8, $0a, $d4, $d5, $d4, $d9, $db, $e2, $d4, $da, $db, $e3, $20, $f2, $46, $26, $21, $08, $0a, $d6, $d7, $d6, $d7, $e1, $26, $d6, $dd, $e1, $e1, $21, $12, $46, $26, $21, $28, $11, $d0, $d1, $d8, $26, $de, $da, $26, $de, $d1, $de, $d1, $d0, $d1, $d0, $d1, $26, $4a, $21, $48, $c2, $db, $21, $49, $10, $42, $db, $26, $db, $dd, $26, $db, $42, $db, $42, $db, $42, $db, $42, $26, $4a, $21, $69, $42, $db, $21, $6b, $c2, $26, $21, $6c, $0d, $de, $da, $26, $de, $df, $de, $df, $db, $db, $e4, $e5, $26, $4a, $21, $88, $11, $de, $43, $db, $26, $db, $dd, $26, $db, $e3, $db, $42, $db, $db, $e6, $e3, $26, $4a, $21, $a8, $11, $db, $42, $de, $da, $de, $da, $26, $de, $d9, $db, $db, $d4, $d9, $d4, $d9, $e7, $4a, $21, $c7, $12, $5f, $95, $95, $95, $cd, $95, $cd, $78, $95, $98, $95, $95, $97, $98, $97, $98, $95, $7a, $21, $e7, $06, $1b, $0e, $0d, $1e, $21, $2b, $21, $f2, $06, $cf, $24, $02, $00, $02, $01, $22, $11, $08, $0a, $15, $0e, $0f, $1e, $17, $14, $22, $22, $4b, $08, $17, $0e, $20, $24, $10, $0a, $16, $0e, $22, $8b, $09, $0c, $18, $1e, $17, $1d, $12, $17, $1e, $0e, $22, $ec, $04, $1d, $18, $19, $28, $22, $f6, $01, $00, $23, $c9, $56, $55, $23, $e2, $05, $95, $a5, $a5, $a5, $05, $23, $ea, $04, $99, $aa, $aa, $aa
0B20F                           
0B20F                           ;.db $20, $a6, $54, $26, $20, $c6, $54, $26, $20, $e6, $54, $26, $21, $06, $54, $26
0B20F                           ;.db $20, $85, $01, $44, $20, $86, $54, $48, $20, $9a, $01, $49, $20, $a5, $c9, $46
0B20F                           ;.db $20, $ba, $c9, $4a, $20, $a6, $0a, $d0, $d1, $d8, $d8, $de, $d1, $d0, $da, $de
0B20F                           ;.db $d1, $20, $c6, $0a, $d2, $d3, $db, $db, $db, $d9, $db, $dc, $db, $df, $20, $e6
0B20F                           ;.db $0a, $d4, $d5, $d4, $d9, $db, $e2, $d4, $da, $db, $e0, $21, $06, $0a, $d6, $d7
0B20F                           ;.db $d6, $d7, $e1, $26, $d6, $dd, $e1, $e1, $21, $26, $14, $d0, $e8, $d1, $d0, $d1
0B20F                           ;.db $de, $d1, $d8, $d0, $d1, $26, $de, $d1, $de, $d1, $d0, $d1, $d0, $d1, $26, $21
0B20F                           ;.db $46, $14, $db, $42, $42, $db, $42, $db, $42, $db, $db, $42, $26, $db, $42, $db
0B20F                           ;.db $42, $db, $42, $db, $42, $26, $21, $66, $46, $db, $21, $6c, $0e, $df, $db, $db
0B20F                           ;.db $db, $26, $db, $df, $db, $df, $db, $db, $e4, $e5, $26, $21, $86, $14, $db, $db
0B20F                           ;.db $db, $de, $43, $db, $e0, $db, $db, $db, $26, $db, $e3, $db, $e0, $db, $db, $e6
0B20F                           ;.db $e3, $26, $21, $a6, $14, $db, $db, $db, $db, $42, $db, $db, $db, $d4, $d9, $26
0B20F                           ;.db $db, $d9, $db, $db, $d4, $d9, $d4, $d9, $e7, $21, $c5, $16, $5f, $95, $95, $95
0B20F                           ;.db $95, $95, $95, $95, $95, $97, $98, $78, $95, $96, $95, $95, $97, $98, $97, $98
0B20F                           ;.db $95, $7a;, $21, $ed, $0e, $cf, $01, $09, $08, $05, $24, $17, $12, $17, $1d, $0e, $17, $0d, $18, 
0B20F 22 4B 0D 17 0E 20 24 10.. .db $22, $4b, $0d, "NEW"-55, $24, "GAME"-55, $24, $24
0B21C 24 24 24 22 8B 0D 0C 18.. .db $24, $24, $24, $22, $8b, $0d, "CONTINUE"-55, $24, $24
0B22C 24 24 24                  .db $24, $24, $24 ;$22, $ec, $04, $1d, $18, $19, $28, $22, $f6, $01, $00, $23, $c9
0B22F                           ;.db $56, $55, $23, $e2, $04, $99, $aa, $aa, $aa, $23, $ea, $04, $99, $aa, $aa, $aa
0B22F                           ;.db $00, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
0B22F                           ;.db $21, $ed, $0e, $cf, $02, $00, $02, $01, $24, "ALEFUNKY"-55
0B22F 00 FF                     .db $00, $ff
0B231                           ;.db $22, $0a
0B231                           ;.db titleMessageEnd-titleMessageStart
0B231                           ;titleMessageStart:
0B231                           ;.db "SCANLINE-TEST"-$37
0B231                           ;titleMessageEnd:
0B231                           titleScreenDataEnd:
0B231                           
0B231                           
0B231                           include code\pause.asm
0B231                           PauseRoutine:
0B231 AD 70 07                  			   lda OperMode           ;are we in victory mode?
0B234 C9 02                                    cmp #VictoryModeValue  ;if so, go ahead
0B236 F0 1F                                    beq ChkPauseTimer
0B238 C9 01                                    cmp #GameModeValue     ;are we in game mode?
0B23A D0 26                                    bne ExitPause1          ;if not, leave
0B23C AD 72 07                                 lda OperMode_Task      ;if we are in game mode, are we running game engine?
0B23F C9 03                                    cmp #$03
0B241 D0 1F                                    bne ExitPause1          ;if not, leave
0B243 AD C1 05                  			   lda TextboxID
0B246 D0 1A                     			   bne ExitPause1
0B248 AD 76 07                  			   lda GamePauseStatus
0B24B 29 01                     			   and #$01
0B24D F0 08                     			   beq ChkPauseTimer
0B24F                           			   
0B24F AD B7 63                  			   lda SetupPause
0B252 D0 03                     			   bne ChkPauseTimer
0B254                           			   
0B254 8D 76 07                  			   sta GamePauseStatus
0B257                           ChkPauseTimer: 
0B257                           			   ;lda debug			  ;check if debug mode is enabled		  
0B257                           			   ;beq +				  ;skip the debug routine if not
0B257 20 EA B2                  			   jsr DebugModeRoutine	
0B25A                           +:			   
0B25A AD 77 07                                 lda GamePauseTimer     ;check if pause timer is still counting down
0B25D F0 04                                    beq ChkStart
0B25F CE 77 07                                 dec GamePauseTimer     ;if so, decrement and leave
0B262                           ExitPause1:
0B262 60                                       rts
0B263 AD FC 06                  ChkStart:      lda SavedJoypad1Bits   ;check to see if start is pressed
0B266 29 10                                    and #Start_Button      ;on controller 1
0B268 F0 77                                    beq ClrPauseTimer
0B26A AD CF 05                  			   lda OldSavedJoypadBits
0B26D 29 10                     			   and #Start_Button
0B26F D0 70                     			   bne ClrPauseTimer
0B271 A5 0E                     			   lda GameEngineSubroutine
0B273 C9 08                     			   cmp #$08
0B275 D0 72                     			   bne ExitPause
0B277 AD 70 07                  			   lda OperMode
0B27A C9 02                     			   cmp #$02
0B27C F0 6B                     			   beq ExitPause
0B27E AD 76 07                  			   lda GamePauseStatus
0B281 D0 1A                     			   bne +
0B283 A0 03                     			   ldy #$03               ;set pause timer
0B285 8C 77 07                                 sty GamePauseTimer
0B288 88                        			   dey
0B289 8C 44 07                  			   sty BackgroundColorCtrl  ;is set to less than 4
0B28C 88                        			   dey
0B28D 8C B7 63                  			   sty SetupPause
0B290 88                        			   dey
0B291 8C B2 07                  			   sty PauseSoundBuffer
0B294 20 CD 86                  			   jsr GetPlayerColors
0B297 20 DB F7                  			   jsr MoveSpritesOffscreen
0B29A 4C C5 F7                  			   jmp RunPauseMenu
0B29D                           UnPause:
0B29D                           +:             
0B29D A9 00                     			   lda #$00
0B29F 8D AD 63                  			   sta OldHorizontalScroll
0B2A2 8D B2 07                  			   sta PauseSoundBuffer
0B2A5 8D B7 63                  			   sta SetupPause
0B2A8                           			   
0B2A8 AC 4E 07                  			   ldy AreaType
0B2AB 88                        			   dey
0B2AC D0 03                     			   bne +
0B2AE AD BC 63                  			   lda BackgroundColorCtrlFP
0B2B1 8D 44 07                  +:			   sta BackgroundColorCtrl
0B2B4                           			   ;lda Mirror_PPU_CTRL_REG2
0B2B4                           			   ;eor #%01100000
0B2B4                           			   ;sta Mirror_PPU_CTRL_REG2
0B2B4                           			   ;sta PPU_CTRL_REG2
0B2B4                           			   
0B2B4                           			   
0B2B4 AD 5F 07                  			   lda WorldNumber
0B2B7 C9 04                     			   cmp #$04
0B2B9 D0 0C                     			   bne +
0B2BB AD 60 07                  			   lda AreaNumber
0B2BE C9 03                     			   cmp #$03
0B2C0 D0 05                     			   bne +
0B2C2 A9 01                     			   lda #$01
0B2C4 8D 44 07                  			   sta BackgroundColorCtrl
0B2C7                           			   
0B2C7                           +:			   
0B2C7                           			
0B2C7                           	
0B2C7                           			   
0B2C7 20 CD 86                  			   jsr GetPlayerColors
0B2CA A9 02                     			   lda #$02
0B2CC 8D AE 63                  			   sta OldNameTableSelect
0B2CF A9 03                     			   lda #$03               ;set pause timer
0B2D1 8D 77 07                                 sta GamePauseTimer
0B2D4 AD 76 07                                 lda GamePauseStatus
0B2D7 A8                                       tay
0B2D8 C8                                       iny                    ;set pause sfx queue for next pause mode
0B2D9 84 EB                                    sty PauseSoundQueue
0B2DB 49 01                                    eor #%00000001         ;invert d0 and set d7
0B2DD 09 80                                    ora #%10000000
0B2DF D0 05                                    bne SetPause           ;unconditional branch
0B2E1 AD 76 07                  ClrPauseTimer: lda GamePauseStatus    ;clear timer flag if timer is at zero and start button
0B2E4 29 7F                                    and #%01111111         ;is not pressed
0B2E6 8D 76 07                  SetPause:      sta GamePauseStatus
0B2E9 60                        ExitPause:     rts
0B2EA                           DebugModeRoutine:
0B2EA                           		
0B2EA AD FC 06                          lda SavedJoypad1Bits    ;check to see if SELECT is pressed
0B2ED 29 20                             and #Select_Button      ;on controller 1
0B2EF F0 58                             beq Ex					;if not don't bother checking more
0B2F1                           
0B2F1 AD CF 05                  		lda OldSavedJoypadBits
0B2F4 29 20                     		and #Select_Button
0B2F6 D0 51                     		bne Ex
0B2F8                           		
0B2F8 A5 0B                     		lda Up_Down_Buttons		;check to see if UP is pressed
0B2FA 29 08                     		and #Up_Dir				;on controller 1
0B2FC D0 4E                     		bne SetSwim
0B2FE                           		
0B2FE A5 0B                     		lda Up_Down_Buttons		;check to see if DOWN is pressed
0B300 29 04                     		and #Down_Dir			;on controller 1
0B302 D0 33                     		bne SetRunOutMusic
0B304                           		
0B304 A5 0A                     		lda A_B_Buttons         ;check to see if B is pressed
0B306 29 40                             and #B_Button           ;on controller 1
0B308 D0 47                     		bne ChangePower
0B30A                           		
0B30A A5 0A                     		lda A_B_Buttons         ;check to see if A is pressed
0B30C 29 80                             and #A_Button           ;on controller 1
0B30E D0 28                     		bne Inour
0B310                           		;lda #$01
0B310                           		;sta	TextboxID
0B310                           		;rts
0B310                           		
0B310 AE 08 60                  		ldx	GrabID
0B313 95 0F                     		sta Enemy_Flag,x
0B315 BC C4 63                  		ldy SavedOffset,x
0B318 A9 00                     		lda #$00
0B31A 99 AC 62                  		sta Saved_isDefeated,y
0B31D                           		
0B31D                           		;lda GameEngineSubroutine
0B31D                           		;cmp #$08
0B31D                           		;bne Ex
0B31D AD 76 07                          lda GamePauseStatus
0B320 29 01                     		and #$01
0B322 D0 25                     		bne Ex
0B324                           		
0B324 AD 15 07                  		lda GameTimerSetting    ;check if timer setting is 0 to detect pipe intro
0B327 D0 03                             bne Soweback
0B329 CE 5C 07                          dec LevelNumber         ;decrement LevelNumber so we end up on the same level for next area
0B32C                           		
0B32C                           Soweback:
0B32C A9 01                             lda #$01
0B32E 8D 69 07                          sta DisableIntermediate
0B331                           
0B331 EE 5C 07                          inc LevelNumber			;increment level number
0B334 4C 5C 99                          jmp NextArea
0B337                           SetRunOutMusic:
0B337                           		;lda #TimeRunningOutMusic
0B337                                   ;sta EventMusicQueue     ;load time running out music
0B337                           		;inc HurryUp
0B337 60                        		rts
0B338                           Inour:
0B338 AD A1 07                  		lda WorldEndTimer       ;check to see if world end timer expired
0B33B D0 0C                             bne Ex				    ;this doesnt do anything (fix?) 
0B33D A5 0C                     		lda Left_Right_Buttons
0B33F 29 02                     		and #Left_Dir
0B341 F0 03                     		beq +
0B343 EE 5F 07                  		inc WorldNumber
0B346 4C 63 84                  +:      jmp Tumama
0B349 60                        Ex:		rts
0B34A                           Swam:
0B34A 70 0A                     	.db $70, $0a
0B34C                           SetSwim:
0B34C                           	
0B34C A9 FA                     	lda #$fa
0B34E 85 91                     	sta Player_Y_Speed
0B350                           	;sta DebugSwim				;also store here because collision routine sets swimming flag to zero every frame
0B350                           	;tay
0B350                           	;lda Swam,y
0B350                           	;sta VerticalForceDown
0B350 60                        	rts
0B351                           	
0B351                           ChangePower:
0B351 AD 56 07                  		lda PlayerStatus		;load player powerup status
0B354 C9 02                     		cmp #$02				;if fiery, set to small
0B356 F0 16                     		beq FiretoSmall			
0B358                           		
0B358 EE 56 07                  		inc PlayerStatus		;otherwise increment
0B35B AD 56 07                  		lda PlayerStatus		;load mario status
0B35E 8D 30 60                  		sta OldStatus			;store here to prevent size change animation when hit in fiery mario
0B361 AD 56 07                  		lda PlayerStatus		;load again (to compare if zero)
0B364 F0 E3                     		beq Ex					;branch if small
0B366 A9 00                     		lda #$00
0B368 8D 54 07                  		sta PlayerSize			;set size to big
0B36B 4C CD 86                  		jmp GetPlayerColors		;jump to change colors
0B36E                           		
0B36E                           FiretoSmall:
0B36E A9 00                     		lda #$00
0B370 8D 56 07                  		sta PlayerStatus		;set status to small
0B373 8D 30 60                  		sta OldStatus
0B376 A9 01                     		lda #$01				;set size to small
0B378 8D 54 07                  		sta PlayerSize
0B37B 4C CD 86                  		jmp GetPlayerColors		;jump to change colors
0B37E                           		
0B37E                           GrabShelltest:
0B37E AE 08 60                  		ldx GrabID
0B381 AD 04 60                  		lda GrabFlag
0B384 F0 1B                     		beq +
0B386 B5 15                     		lda Enemy_ID,x
0B388 C9 19                     	    cmp #RedKoopaShell
0B38A F0 15                     	    beq +
0B38C C9 05                     	    cmp #$05
0B38E 90 11                     	    bcc +
0B390 BD 91 04                  	    lda Enemy_CollisionBits,x
0B393 09 01                     	    ora #$01
0B395 9D 91 04                  	    sta Enemy_CollisionBits,x
0B398 A5 0A                     	    lda A_B_Buttons
0B39A 29 40                     	    and #B_Button
0B39C D0 03                     	    bne +
0B39E 8D 04 60                  	    sta GrabFlag
0B3A1 AD 04 60                  +:	    lda GrabFlag			;check if mario is holding anything
0B3A4 F0 A3                     		beq Ex					;if not, branch to exit
0B3A6 A9 00                     		lda #$00
0B3A8 8D 78 60                  		sta GrabUp
0B3AB 8D 1D 60                  		sta GrabDown
0B3AE 4C 42 D8                  		jmp GSLoop				;jump to grab routine
0B3B1                           		
0B3B1                           if DPCM
0B3B1                               SampleStart: ;sample start addresses LUT
0B3B1                                 .db <(sample0 >> 6)
0B3B1                           
0B3B1                               SampleLength: ;sample lengths LUT
0B3B1                                 .db <((sample0_end - sample0) >> 4)
0B3B1                           endif
0B3B1                           
0B3B1                           sndTest:
0B3B1                                   
0B3B1                           ;        lda 
0B3B1                           ;        dpcm_sample_SD2ddx2002d909Snare
0B3B1                                   
0B3B1                           ;        lda <dpcm_sample_SD2ddx2002d909Snare
0B3B1                           ;        lsr
0B3B1                           ;        lsr
0B3B1                           ;        lsr
0B3B1                           ;        lsr
0B3B1                           ;        lsr
0B3B1                           ;        lsr
0B3B1                           ;        sta $00
0B3B1                           ;        lda >dpcm_sample_SD2ddx2002d909Snare
0B3B1                           ;        asl
0B3B1                           ;        asl
0B3B1                           ;        clc
0B3B1                           ;        adc $00
0B3B1                           ;        sta $4012
0B3B1                                   
0B3B1                           ;        lda #$8f
0B3B1                           ;        sta $4013
0B3B1                                   
0B3B1                           ;        lda #$80
0B3B1                           ;        sta $4010
0B3B1                           ;        ldx #$00
0B3B1                           
0B3B1                           ;  ldx #$00
0B3B1                           ;  stx $2000
0B3B1                           ;  stx $2001
0B3B1                           ;  stx $4010
0B3B1                           
0B3B1                           
0B3B1                           ;SND_SQUARE1_REG       = $4000
0B3B1                           ;SND_SQUARE2_REG       = $4004
0B3B1                           ;SND_TRIANGLE_REG      = $4008
0B3B1                           ;SND_NOISE_REG         = $400c
0B3B1                           ;SND_DELTA_REG         = $4010
0B3B1                           ;SND_MASTERCTRL_REG    = $4015
0B3B1                           
0B3B1                           ;        ldx #$00                ;if end of sfx reached, clear buffer
0B3B1                           ;        stx Square1SoundBuffer  ;and stop making the sfx
0B3B1                           ;        ldx #$0e
0B3B1                           ;        stx SND_MASTERCTRL_REG
0B3B1                           ;        ldx #$0f
0B3B1                           ;        stx SND_MASTERCTRL_REG
0B3B1                           
0B3B1                           
0B3B1                           ;  lda #$fe
0B3B1                           ;  sta SND_MASTERCTRL_REG
0B3B1                           ;  lda #$ff
0B3B1                           ;  sta SND_MASTERCTRL_REG
0B3B1                           
0B3B1                           
0B3B1                           if 0
0B3B1                                 ldx #$00 ;load sample number into X
0B3B1                                 ldy #$0F ;load pitch ($00-$0F) into Y
0B3B1                                 ldy #$0c
0B3B1                                 lda #$40 ;load starting level ($00-$7F) into a temp variable
0B3B1                                 sta $7222
0B3B1                           
0B3B1                                 lda #$0F
0B3B1                                 sta $4015 ;DPCM disable
0B3B1                                 sty $4010 ;Y = pitch
0B3B1                                 lda $7222
0B3B1                                 sta $4011 ;temp = starting sample level
0B3B1                                 lda SampleStart,X
0B3B1                                 sta $4012 ;X = sample number
0B3B1                                 lda SampleLength,X
0B3B1                                 sta $4013
0B3B1                                 lda #$1F ;DPCM enable (plays sample)
0B3B1                                 sta $4015
0B3B1                                 
0B3B1                                 
0B3B1                                 ;- jmp -
0B3B1                                 
0B3B1                                  rts
0B3B1                           
0B3B1                           endif
0B3B1                           	
0B3B1                           include code\spriteRoutines.asm
0B3B1                           ;-------------------------------------------------------------------------------------
0B3B1                           ;$00 - used for preset value
0B3B1                           
0B3B1                           SpriteShuffler:
0B3B1                                          ;ldy AreaType               ;load level type, likely residual code
0B3B1                                          ;lda #$28                    ;load preset value which will put it at
0B3B1                                          ;sta $00                     ;sprite #10
0B3B1 A2 0E                                    ldx #$0e                    ;start at the end of OAM data offsets
0B3B3 BD E4 06                  ShuffleLoop:   lda SprDataOffset,x         ;check for offset value against
0B3B6 C9 28                                    cmp #$28                     ;the preset value
0B3B8 90 0F                                    bcc NextSprOffset           ;if less, skip this part
0B3BA AC E0 06                                 ldy SprShuffleAmtOffset     ;get current offset to preset value we want to add
0B3BD 18                                       clc
0B3BE 79 E1 06                                 adc SprShuffleAmt,y         ;get shuffle amount, add to current sprite offset
0B3C1 90 03                                    bcc StrSprOffset            ;if not exceeded $ff, skip second add
0B3C3 18                                       clc
0B3C4 69 28                                    adc #$28                     ;otherwise add preset value $28 to offset
0B3C6 9D E4 06                  StrSprOffset:  sta SprDataOffset,x         ;store new offset here or old one if branched to here
0B3C9 CA                        NextSprOffset: dex                         ;move backwards to next one
0B3CA 10 E7                                    bpl ShuffleLoop
0B3CC AE E0 06                                 ldx SprShuffleAmtOffset     ;load offset
0B3CF E8                                       inx
0B3D0 E0 03                                    cpx #$03                    ;check if offset + 1 goes to 3
0B3D2 D0 02                                    bne SetAmtOffset            ;if offset + 1 not 3, store
0B3D4 A2 00                                    ldx #$00                    ;otherwise, init to 0
0B3D6 8E E0 06                  SetAmtOffset:  stx SprShuffleAmtOffset
0B3D9 A2 08                                    ldx #$08                    ;load offsets for values and storage
0B3DB A0 02                                    ldy #$02
0B3DD B9 E9 06                  SetMiscOffset: lda SprDataOffset+5,y       ;load one of three OAM data offsets
0B3E0 9D F1 06                                 sta Misc_SprDataOffset-2,x  ;store first one unmodified, but
0B3E3 18                                       clc                         ;add eight to the second and eight
0B3E4 69 08                                    adc #$08                    ;more to the third one
0B3E6 9D F2 06                                 sta Misc_SprDataOffset-1,x  ;note that due to the way X is set up,
0B3E9 18                                       clc                         ;this code loads into the misc sprite offsets
0B3EA 69 08                                    adc #$08
0B3EC 9D F3 06                                 sta Misc_SprDataOffset,x        
0B3EF CA                                       dex
0B3F0 CA                                       dex
0B3F1 CA                                       dex
0B3F2 88                                       dey
0B3F3 10 E8                                    bpl SetMiscOffset           ;do this until all misc spr offsets are loaded
0B3F5 60                                       rts
0B3F6                           
0B3F6                           ;-------------------------------------------------------------------------------------
0B3F6                           
0B3F6                           
0B3F6                           
0B3F6                           ;BitchTable:
0B3F6                           ;		.db $08, $09, $0a, $0b, $0c, $0d, $0e, $0f
0B3F6                           ;		.db $00, $01, $02, $03, $04, $05, $06, $07
0B3F6                           ;AnotherBitchTable:
0B3F6                           ;		.db $0f, $0e, $0d, $0c, $0b, $0a, $09, $08
0B3F6                           ;		.db $07, $06, $05, $04, $03, $02, $01, $00
0B3F6                           ;PutEnemyOnSlope:
0B3F6                           ;		lda Enemy_Y_Position,x
0B3F6                           ;		sec
0B3F6                           ;		sbc #$08
0B3F6                           ;		sta tempD
0B3F6                           ;		lda Enemy_X_Position,x
0B3F6                           ;		and #$0f
0B3F6                           ;		tay
0B3F6                           ;		lda BitchTable,y
0B3F6                           ;		sta tempC
0B3F6                           ;+:		lda tempD
0B3F6                           ;		and #$0f
0B3F6                           ;		tay
0B3F6                           ;		lda AnotherBitchTable,y
0B3F6                           ;		cmp tempC
0B3F6                           ;		beq ++
0B3F6                           ;		bcs +
0B3F6                           ;++:		lda tempD
0B3F6                           ;		clc
0B3F6                           ;		adc #$10
0B3F6                           ;		and #$f0
0B3F6                           ;		clc
0B3F6                           ;		adc #$08
0B3F6                           ;		sec
0B3F6                           ;		sbc tempC
0B3F6                           ;		sta Enemy_Y_Position,x
0B3F6                           ;		lda Enemy_State,x      
0B3F6                           ;        and #%01000000          ;branch if d6 in enemy state is set
0B3F6                           ;        bne LandEnemyInitState2
0B3F6                           ;        lda Enemy_State,x
0B3F6                           ;        asl                     ;branch if d7 in enemy state is not set
0B3F6                           ;        bcs +
0B3F6                           ;	    jsr ChkLandedEnemyState
0B3F6                           ;	    lda tempD
0B3F6                           ;		clc
0B3F6                           ;		adc #$10
0B3F6                           ;		and #$f0
0B3F6                           ;		clc
0B3F6                           ;		adc #$08
0B3F6                           ;		sec
0B3F6                           ;		sbc tempC
0B3F6                           ;		sta Enemy_Y_Position,x
0B3F6                           ;		lda #$01
0B3F6                           ;		.db $2c
0B3F6                           ;+:		lda #$00
0B3F6                           ;		sta EnemyOnSlope,x
0B3F6                           ;		rts
0B3F6                           
0B3F6                           
0B3F6 4C C4 EA                  LandEnemyInitState2: jmp LandEnemyInitState
0B3F9                           PutOnSlope:	
0B3F9                           ;		sty tempD
0B3F9                           ;		lda Player_X_Position
0B3F9                           ;		and #$0f
0B3F9                           ;		tay
0B3F9                           ;		lda BitchTable,y
0B3F9                           ;		sta tempC
0B3F9                           ;		lda GroundedTimer
0B3F9                           ;		cmp #$08
0B3F9                           ;		bcc ++
0B3F9                           ;+:		lda Player_Y_Position
0B3F9                           ;		and #$0f
0B3F9                           ;		tay
0B3F9                           ;		lda AnotherBitchTable,y
0B3F9                           ;		sec
0B3F9                           ;		sbc tempC
0B3F9                           ;		bpl +
0B3F9                           ;++:		lda Player_Y_Position
0B3F9                           ;		clc 
0B3F9                           ;		adc #$0f
0B3F9                           ;		adc tempD
0B3F9                           ;		and #$f0
0B3F9                           ;		sec
0B3F9                           ;		sbc tempC
0B3F9                           ;		sta Player_Y_Position
0B3F9                           ;		lda #$00
0B3F9                           ;		sta Player_State
0B3F9                           ;		lda #$ff
0B3F9                           ;		sta GroundedTimer
0B3F9                           ;		ldy Player_MovingDir
0B3F9                           ;		dey
0B3F9                           ;		beq +
0B3F9                           ;		lda #$01
0B3F9                           ;		sta Player_Y_Speed
0B3F9                           ;+:		inc GroundedTimer
0B3F9                           ;SlopeExit:		
0B3F9                           ;		rts
0B3F9                           Chorizo:
0B3F9 B5 C0                     		lda SprObject_Y_Position,x
0B3FB 29 F0                     		and #%11110000
0B3FD 38                        		sec
0B3FE ED 51 60                  		sbc tempA
0B401 18                        		clc
0B402 69 02                     		adc #$02
0B404 95 C0                     		sta SprObject_Y_Position,x
0B406                           		;jmp GoBack
0B406 4C E8 EA                  Adio:	jmp ChkForRedKoopa
0B409                           JmpToBreakblock: 
0B409 A9 00                     		lda #$00
0B40B 95 92                     		sta Enemy_Y_Speed,x
0B40D 4C 1B ED                  		jmp BreakBlock
0B410                           JmpGetBlockCoin: 
0B410 68                        		pla
0B411 4C BA EC                  		jmp GetBlockCoin
0B414                           DoSide2: 
0B414 B5 92                     		lda Enemy_Y_Speed,x
0B416 10 EE                     		bpl Adio
0B418 B5 C1                     		lda Enemy_Y_Position,x
0B41A C9 1F                     		cmp #$1f
0B41C 90 E8                     		bcc Adio
0B41E C9 D6                     		cmp #$d6
0B420 B0 E4                     		bcs Adio
0B422 B5 A8                     		lda Enemy_Y_HighPos,x
0B424 F0 E0                     		beq Adio
0B426 C9 02                     		cmp #$02
0B428 F0 DC                     		beq Adio
0B42A 20 5F F1                  		jsr ChkAboveEnemy
0B42D F0 D7                     		beq Adio
0B42F C9 91                     		cmp #$91
0B431 F0 D3                     		beq Adio
0B433 AC 28 60                  		ldy PTimer
0B436 F0 1E                     		beq NoPe2
0B438 C9 51                     		cmp #$51
0B43A F0 CA                     		beq Adio
0B43C 48                        		pha
0B43D C9 52                     		cmp #$52
0B43F F0 CF                     		beq JmpGetBlockCoin
0B441 68                        		pla
0B442 C9 28                     		cmp #$28
0B444 F0 66                     		beq +
0B446 C9 27                     		cmp #$27
0B448 F0 62                     		beq +
0B44A C9 91                     		cmp #$91
0B44C F0 5E                     		beq +
0B44E C9 C2                     		cmp #$c2
0B450 F0 B7                     		beq JmpToBreakblock
0B452 C9 72                     		cmp #$72
0B454 F0 53                     		beq Boi2
0B456 AC 28 60                  NoPe2:  ldy PTimer
0B459 D0 0A                     		bne NoPe3
0B45B C9 72                     		cmp #$72
0B45D F0 4D                     	    beq +
0B45F 48                        		pha
0B460 C9 C2                     		cmp #$c2       ;regular coin?
0B462 F0 AC                     		beq JmpGetBlockCoin
0B464 68                        		pla
0B465 C9 26                     NoPe3:  cmp #$26       ;blank metatile used for vines?
0B467 F0 43                     		beq +
0B469 48                        		pha
0B46A EC 08 60                  		cpx GrabID
0B46D D0 05                     		bne +++
0B46F AC 78 60                  		ldy GrabUp
0B472 F0 04                     		beq ++++
0B474 B5 1C                     +++:	lda Enemy_State,x
0B476 10 00                     		bpl ++
0B478                           ++++:	
0B478                           ++: 
0B478 68                        		pla	
0B479 C9 C2                     	    cmp #$c2       ;regular coin?
0B47B F0 2F                     		beq +
0B47D C9 C5                     		cmp #$c5
0B47F F0 2B                          	beq +
0B481 C9 63                     		cmp #$63
0B483 F0 27                     		beq +
0B485 C9 88                     		cmp #$88
0B487 F0 23                     		beq +
0B489 C9 60                     		cmp #$60
0B48B F0 1F                     		beq +
0B48D C9 25                     		cmp #$25
0B48F F0 1B                     		beq +
0B491 C9 70                     		cmp #$70
0B493 F0 17                     		beq +
0B495 C9 91                     		cmp #$91
0B497 F0 13                     		beq +
0B499 AC 54 60                  		ldy OnOffFlag
0B49C F0 07                     		beq Oetu2
0B49E C9 8F                     		cmp #$8f
0B4A0 F0 0A                     		beq +
0B4A2 4C AF B4                  		jmp Webos
0B4A5 C9 8E                     Oetu2: 	cmp #$8e
0B4A7 F0 03                     		beq +
0B4A9 4C AF B4                  Boi2:	jmp Webos
0B4AC 4C E8 EA                  +:   	jmp ChkForRedKoopa
0B4AF 48                        Webos:  pha
0B4B0 C9 5F                     		cmp #$5f       ;hidden coin block?
0B4B2 F0 10                     		beq +
0B4B4 C9 71                     		cmp #$71
0B4B6 F0 0C                     		beq +
0B4B8 C9 74                     		cmp #$74
0B4BA F0 08                     		beq +
0B4BC C9 30                     		cmp #$30
0B4BE F0 04                     		beq +
0B4C0 C9 6F                     		cmp #$6f
0B4C2 D0 1F                     		bne ++
0B4C4 68                        +:		pla
0B4C5 EC 08 60                  		cpx GrabID
0B4C8 D0 0A                     		bne jod
0B4CA 48                        		pha
0B4CB AD 78 60                  		lda GrabUp
0B4CE F0 0F                     		beq +
0B4D0 4C E3 B4                  		jmp ++
0B4D3 68                        +++:    pla
0B4D4 48                        jod:	pha
0B4D5 B5 1C                             lda Enemy_State,x
0B4D7 10 06                     		bpl +
0B4D9 B5 15                     		lda Enemy_ID,x
0B4DB C9 2E                     		cmp #PowerUpObject
0B4DD D0 04                     		bne ++
0B4DF 68                        +:		pla
0B4E0 4C E8 EA                  		jmp ChkForRedKoopa
0B4E3 68                        ++:		pla
0B4E4 48                        		pha
0B4E5 A9 02                     		lda #$02
0B4E7 95 92                     		sta Enemy_Y_Speed,x
0B4E9 9D 34 04                  		sta Enemy_Y_MoveForce,x
0B4EC EC 08 60                  		cpx GrabID
0B4EF D0 09                     		bne +
0B4F1 AD 78 60                  		lda GrabUp
0B4F4 F0 04                     		beq +
0B4F6 68                        		pla
0B4F7 4C 05 EE                  		jmp Webos2
0B4FA B5 1C                     +:		lda Enemy_State,x
0B4FC 10 0D                     		bpl +
0B4FE B5 15                     		lda Enemy_ID,x
0B500 C9 2E                     		cmp #PowerUpObject
0B502 F0 07                     		beq +
0B504 68                        		pla
0B505 EE 78 60                  		inc GrabUp
0B508 4C 05 EE                  		jmp Webos2
0B50B 68                        +:		pla
0B50C 4C E8 EA                  		jmp ChkForRedKoopa
0B50F                           SolidMTileUpperExt:
0B50F 10 61 88 C4                  .db $10, $61, $88, $c4
0B513                           PlayerKilled2:
0B513 4C AE B5                  		jmp PlayerKilled
0B516                           DoChangeSize2:
0B516 4C F4 B8                  		jmp DoChangeSize
0B519                           FindPlayerAction2:
0B519 4C EE B8                  		jmp FindPlayerAction
0B51C                           PlayerGfxHandler:
0B51C AD 9E 07                          lda InjuryTimer             ;if player's injured invincibility timer
0B51F F0 06                             beq CntPl                   ;not set, skip checkpoint and continue code
0B521 A5 09                             lda FrameCounter
0B523 29 02                             and #%00000010					;otherwise check frame counter and branch
0B525 D0 3E                             bne ExPGH                   ;to leave on every other frame (when d0 is set)
0B527 A5 0E                     CntPl:  lda GameEngineSubroutine    ;if executing specific game engine routine,
0B529 C9 0B                             cmp #$0b                    ;branch ahead to some other part
0B52B F0 E6                             beq PlayerKilled2
0B52D AD 0B 07                          lda PlayerChangeSizeFlag    ;if grow/shrink flag set
0B530 D0 E4                             bne DoChangeSize2            ;then branch to some other code
0B532 AC 04 07                          ldy SwimmingFlag            ;if swimming flag set, branch to
0B535 F0 E2                             beq FindPlayerAction2        ;different part, do not return
0B537 A5 1B                             lda Player_State
0B539                                   ;cmp #$00                    ;if player status normal,
0B539 F0 DE                             beq FindPlayerAction2        ;branch and do not return
0B53B 20 EE B8                          jsr FindPlayerAction        ;otherwise jump and return
0B53E A5 09                             lda FrameCounter
0B540 29 04                             and #%00000100              ;check frame counter for d2 set (8 frames every
0B542 D0 21                             bne ExPGH                   ;eighth frame), and branch if set to leave
0B544 AA                                tax                         ;initialize X to zero
0B545 AC E4 06                          ldy Player_SprDataOffset    ;get player sprite data offset
0B548 A5 31                             lda PlayerFacingDir         ;get player's facing direction
0B54A 4A                                lsr
0B54B B0 04                             bcs SwimKT                  ;if player facing to the right, use current offset
0B54D C8                                iny
0B54E C8                                iny                         ;otherwise move to next OAM data
0B54F C8                                iny
0B550 C8                                iny
0B551 AD 54 07                  SwimKT: lda PlayerSize              ;check player's size
0B554 F0 09                             beq BigKTS                  ;if big, use first tile
0B556 B9 19 02                          lda Sprite_Tilenumber+24,y  ;check tile number of seventh/eighth sprite
0B559 CD B4 B8                          cmp SwimTileRepOffset       ;against tile number in player graphics table
0B55C F0 07                             beq ExPGH                   ;if spr7/spr8 tile number = value, branch to leave
0B55E E8                                inx                         ;otherwise increment X for second tile
0B55F BD 04 B8                  BigKTS: lda SwimKickTileNum,x       ;overwrite tile number in sprite 7/8
0B562 99 19 02                          sta Sprite_Tilenumber+24,y  ;to animate player's feet when swimming
0B565 60                        ExPGH:  rts                         ;then leave
0B566                           	  
0B566                           DrawOneSprite:
0B566 A5 00                             lda $00
0B568 99 01 02                          sta Sprite_Tilenumber,y
0B56B A5 02                             lda $02
0B56D 99 00 02                          sta Sprite_Y_Position,y
0B570 A5 05                             lda $05
0B572 99 03 02                          sta Sprite_X_Position,y
0B575 A5 04                             lda $04
0B577 99 02 02                          sta Sprite_Attributes,y
0B57A 98                                tya                        ;add eight to the offset in Y to
0B57B 18                                clc                        ;move to the next two sprites
0B57C 69 04                             adc #$04
0B57E A8                                tay
0B57F 60                        		rts
0B580                           		
0B580                           RenderPlayerSub:
0B580 85 07                             sta $07                      ;store number of rows of sprites to draw
0B582 AD AD 03                          lda Player_Rel_XPos
0B585 8D 55 07                          sta Player_Pos_ForScroll     ;store player's relative horizontal position
0B588 85 05                             sta $05                      ;store it here also
0B58A AD B8 03                          lda Player_Rel_YPos
0B58D 85 02                             sta $02                      ;store player's vertical position
0B58F A5 31                             lda PlayerFacingDir
0B591 85 03                             sta $03                      ;store player's facing direction
0B593 AD C4 03                          lda Player_SprAttrib
0B596 85 04                             sta $04                      ;store player's sprite attributes
0B598 AE D5 06                          ldx PlayerGfxOffset          ;load graphics table offset
0B59B AC E4 06                          ldy Player_SprDataOffset     ;get player's sprite data offset
0B59E                           
0B59E                           DrawPlayerLoop:
0B59E BD 16 B8                          lda PlayerGraphicsTable,x    ;load player's left side
0B5A1 85 00                             sta $00
0B5A3 BD 17 B8                          lda PlayerGraphicsTable+1,x  ;now load right side
0B5A6 20 09 F5                          jsr DrawOneSpriteRow
0B5A9 C6 07                             dec $07                      ;decrement rows of sprites to draw
0B5AB D0 F1                             bne DrawPlayerLoop           ;do this until all rows are drawn
0B5AD                           
0B5AD                           ;        lda #$75                ; tile
0B5AD                           ;        sta $00
0B5AD                                   
0B5AD                           ;        lda $02                 ; load stored y position
0B5AD                           ;        sec                     ; set carry bit
0B5AD                           ;        sbc #$20                ; subtract 32
0B5AD                           ;        sta $02                 ; store it again
0B5AD                                   
0B5AD                           ;        lda #$00
0B5AD                           ;        sta $04                 ; attributes
0B5AD                                   
0B5AD                           ;        jsr DrawOneSprite
0B5AD                           
0B5AD                           ;        lda $05                 ; load stored x position
0B5AD                           ;        clc                     ; clear carry bit
0B5AD                           ;        adc #$0b                ; add 12
0B5AD                           ;        sta $05                 ; store it again
0B5AD                                   
0B5AD                           ;        jsr DrawOneSprite
0B5AD 60                                rts
0B5AE                           
0B5AE                           PlayerKilled:
0B5AE A0 0E                           ldy #$0e                      ;load offset for player killed
0B5B0 B9 A4 AD                        lda PlayerGfxTblOffsets,y     ;get offset to graphics table
0B5B3                           
0B5B3                           PlayerGfxProcessing:
0B5B3 8D D5 06                         sta PlayerGfxOffset           ;store offset to graphics table here
0B5B6 A9 04                            lda #$04
0B5B8 20 80 B5                         jsr RenderPlayerSub           ;draw player based on offset loaded
0B5BB 20 2D AF                         jsr ChkForPlayerAttrib        ;set horizontal flip bits as necessary
0B5BE AD 11 07                         lda FireballThrowingTimer
0B5C1 F0 25                            beq PlayerOffscreenChk        ;if fireball throw timer not set, skip to the end
0B5C3 A0 00                            ldy #$00                      ;set value to initialize by default
0B5C5 AD 81 07                         lda PlayerAnimTimer           ;get animation frame timer
0B5C8 CD 11 07                         cmp FireballThrowingTimer     ;compare to fireball throw timer
0B5CB 8C 11 07                         sty FireballThrowingTimer     ;initialize fireball throw timer
0B5CE B0 18                            bcs PlayerOffscreenChk        ;if animation frame timer => fireball throw timer skip to end
0B5D0 8D 11 07                         sta FireballThrowingTimer     ;otherwise store animation timer into fireball throw timer
0B5D3 A0 07                            ldy #$07                      ;load offset for throwing
0B5D5 B9 A4 AD                         lda PlayerGfxTblOffsets,y     ;get offset to graphics table
0B5D8 8D D5 06                         sta PlayerGfxOffset           ;store it for use later
0B5DB A0 04                            ldy #$04                      ;set to update four sprite rows by default
0B5DD A5 49                            lda Player_X_Speed
0B5DF 05 0C                            ora Left_Right_Buttons        ;check for horizontal speed or left/right button press
0B5E1 F0 01                            beq SUpdR                     ;if no speed or button press, branch using set value in Y
0B5E3 88                               dey                           ;otherwise set to update only three sprite rows
0B5E4 98                        SUpdR: tya                           ;save in A for use
0B5E5 20 80 B5                         jsr RenderPlayerSub           ;in sub, draw player object again
0B5E8                           
0B5E8                           PlayerOffscreenChk:
0B5E8 AD D0 03                             lda Player_OffscreenBits      ;get player's offscreen bits
0B5EB 4A                                   lsr
0B5EC 4A                                   lsr                           ;move vertical bits to low nybble
0B5ED 4A                                   lsr
0B5EE 4A                                   lsr
0B5EF 85 00                                sta $00                       ;store here
0B5F1 A2 03                                ldx #$03                      ;check all four rows of player sprites
0B5F3 AD E4 06                             lda Player_SprDataOffset      ;get player's sprite data offset
0B5F6 18                                   clc
0B5F7 69 18                                adc #$18                      ;add 24 bytes to start at bottom row
0B5F9 A8                                   tay                           ;set as offset here
0B5FA A9 F8                     PROfsLoop: lda #$f8                      ;load offscreen Y coordinate just in case
0B5FC 46 00                                lsr $00                       ;shift bit into carry
0B5FE 90 06                                bcc NPROffscr                 ;if bit not set, skip, do not move sprites
0B600 99 04 02                             sta Sprite_Data+4,y            ;and into first row sprites
0B603 99 00 02                  	       sta Sprite_Data,y              ;and do sub to dump into first and second sprites
0B606 98                        NPROffscr: tya
0B607 38                                   sec                           ;subtract eight bytes to do
0B608 E9 08                                sbc #$08                      ;next row up
0B60A A8                                   tay
0B60B CA                                   dex                           ;decrement row counter
0B60C 10 EC                                bpl PROfsLoop                 ;do this until all sprite rows are checked
0B60E 60                                   rts                           ;then we are done!
0B60F                           
0B60F                           		;-------------------------------------------------------------------------------------
0B60F                           ;$06 - second object's offset
0B60F                           ;$07 - counter
0B60F                           
0B60F                           PlayerCollisionCore:
0B60F A2 00                           ldx #$00     ;initialize X to use player's bounding box for comparison
0B611                           
0B611                           SprObjectCollisionCore:
0B611 84 06                           sty $06      ;save contents of Y here
0B613 A9 01                           lda #$01
0B615 85 07                           sta $07      ;save value 1 here as counter, compare horizontal coordinates first
0B617                           
0B617                           CollisionCoreLoop:
0B617 B9 AC 04                        lda BoundingBox_UL_Corner,y  ;compare left/top coordinates
0B61A DD AC 04                        cmp BoundingBox_UL_Corner,x  ;of first and second objects' bounding boxes
0B61D B0 2A                           bcs FirstBoxGreater          ;if first left/top => second, branch
0B61F DD AE 04                        cmp BoundingBox_LR_Corner,x  ;otherwise compare to right/bottom of second
0B622 90 12                           bcc SecondBoxVerticalChk     ;if first left/top < second right/bottom, branch elsewhere
0B624 F0 42                           beq CollisionFound           ;if somehow equal, collision, thus branch
0B626 B9 AE 04                        lda BoundingBox_LR_Corner,y  ;if somehow greater, check to see if bottom of
0B629 D9 AC 04                        cmp BoundingBox_UL_Corner,y  ;first object's bounding box is greater than its top
0B62C 90 3A                           bcc CollisionFound           ;if somehow less, vertical wrap collision, thus branch
0B62E DD AC 04                        cmp BoundingBox_UL_Corner,x  ;otherwise compare bottom of first bounding box to the top
0B631 B0 35                           bcs CollisionFound           ;of second box, and if equal or greater, collision, thus branch
0B633 A4 06                           ldy $06                      ;otherwise return with carry clear and Y = $0006
0B635 60                              rts                          ;note horizontal wrapping never occurs
0B636                           
0B636                           SecondBoxVerticalChk:
0B636 BD AE 04                        lda BoundingBox_LR_Corner,x  ;check to see if the vertical bottom of the box
0B639 DD AC 04                        cmp BoundingBox_UL_Corner,x  ;is greater than the vertical top
0B63C 90 2A                           bcc CollisionFound           ;if somehow less, vertical wrap collision, thus branch
0B63E B9 AE 04                        lda BoundingBox_LR_Corner,y  ;otherwise compare horizontal right or vertical bottom
0B641 DD AC 04                        cmp BoundingBox_UL_Corner,x  ;of first box with horizontal left or vertical top of second box
0B644 B0 22                           bcs CollisionFound           ;if equal or greater, collision, thus branch
0B646 A4 06                           ldy $06                      ;otherwise return with carry clear and Y = $0006
0B648 60                              rts
0B649                           
0B649                           FirstBoxGreater:
0B649 DD AC 04                        cmp BoundingBox_UL_Corner,x  ;compare first and second box horizontal left/vertical top again
0B64C F0 1A                           beq CollisionFound           ;if first coordinate = second, collision, thus branch
0B64E DD AE 04                        cmp BoundingBox_LR_Corner,x  ;if not, compare with second object right or bottom edge
0B651 90 15                           bcc CollisionFound           ;if left/top of first less than or equal to right/bottom of second
0B653 F0 13                           beq CollisionFound           ;then collision, thus branch
0B655 D9 AE 04                        cmp BoundingBox_LR_Corner,y  ;otherwise check to see if top of first box is greater than bottom
0B658 90 0A                           bcc NoCollisionFound         ;if less than or equal, no collision, branch to end
0B65A F0 08                           beq NoCollisionFound
0B65C B9 AE 04                        lda BoundingBox_LR_Corner,y  ;otherwise compare bottom of first to top of second
0B65F DD AC 04                        cmp BoundingBox_UL_Corner,x  ;if bottom of first is greater than top of second, vertical wrap
0B662 B0 04                           bcs CollisionFound           ;collision, and branch, otherwise, proceed onwards here
0B664                           
0B664                           NoCollisionFound:
0B664 18                              clc          ;clear carry, then load value set earlier, then leave
0B665 A4 06                           ldy $06      ;like previous ones, if horizontal coordinates do not collide, we do
0B667 60                              rts          ;not bother checking vertical ones, because what's the point?
0B668                           
0B668                           CollisionFound:
0B668 E8                              inx                    ;increment offsets on both objects to check
0B669 C8                              iny                    ;the vertical coordinates
0B66A C6 07                           dec $07                ;decrement counter to reflect this
0B66C 10 A9                           bpl CollisionCoreLoop  ;if counter not expired, branch to loop
0B66E 38                              sec                    ;otherwise we already did both sets, therefore collision, so set carry
0B66F A4 06                           ldy $06                ;load original value set here earlier, then leave
0B671 60                              rts
0B672                           
0B672                           ;-------------------------------------------------------------------------------------
0B672                           ;$00 - used to hold one of bitmasks, or offset
0B672                           ;$01 - used for relative X coordinate, also used to store middle screen page location
0B672                           ;$02 - used for relative Y coordinate, also used to store middle screen coordinate
0B672                           
0B672                           ;this data added to relative coordinates of sprite objects
0B672                           ;stored in order: left edge, top edge, right edge, bottom edge
0B672                           BoundBoxCtrlData:
0B672 02 08 0E 20                     .db $02, $08, $0e, $20 ;00
0B676 03 14 0D 20                     .db $03, $14, $0d, $20 ;01
0B67A 02 14 0E 20                     .db $02, $14, $0e, $20 ;02
0B67E 02 09 0E 15                     .db $02, $09, $0e, $15 ;03
0B682 00 00 18 06                     .db $00, $00, $18, $06 ;04
0B686 00 00 20 0D                     .db $00, $00, $20, $0d ;05
0B68A 00 00 30 0D                     .db $00, $00, $30, $0d ;06
0B68E 00 00 08 08                     .db $00, $00, $08, $08 ;07
0B692 06 04 0A 08                     .db $06, $04, $0a, $08 ;08
0B696                                 if BOUNDBOX_FIX != 1
0B696 03 0C 0D 16                           .db $03, $0c, $0d, $16 ;PAL diff: some enemies (Piranha, Bullet Bill, Goomba, Spiny, Blooper, Cheep Cheep) has larger hitbox
0B69A                                 else
0B69A                                       .db $03, $0e, $0d, $16 ;09
0B69A                                 endif
0B69A                                 
0B69A 00 02 10 15                     .db $00, $02, $10, $15 ;0a
0B69E 04 04 0C 1C                     .db $04, $04, $0c, $1c ;0b
0B6A2 04 06 0C 0C               	  .db $04, $06, $0c, $0c ;0c
0B6A6 04 02 14 08               	  .db $04, $02, $14, $08 ;0d
0B6AA 02 0C 0E 14               	  .db $02, $0c, $0e, $14 ;0e
0B6AE 02 09 0E 16               	  .db $02, $09, $0e, $16 ;0f
0B6B2 03 17 0D 20               	  .db $03, $17, $0d, $20 ;10
0B6B6                           
0B6B6                           GetFireballBoundBox:
0B6B6 8A                              txa         ;add seven bytes to offset
0B6B7 18                              clc         ;to use in routines as offset for fireball
0B6B8 69 07                           adc #$07
0B6BA AA                              tax
0B6BB A0 02                           ldy #$02    ;set offset for relative coordinates
0B6BD D0 07                           bne FBallB  ;unconditional branch
0B6BF                           
0B6BF                           GetMiscBoundBox:
0B6BF 8A                                txa                       ;add nine bytes to offset
0B6C0 18                                clc                       ;to use in routines as offset for misc object
0B6C1 69 09                             adc #$09
0B6C3 AA                                tax
0B6C4 A0 06                             ldy #$06                  ;set offset for relative coordinates
0B6C6 20 5F B7                  FBallB: jsr BoundingBoxCore       ;get bounding box coordinates
0B6C9 4C A1 B7                          jmp CheckRightScreenBBox  ;jump to handle any offscreen coordinates
0B6CC                           
0B6CC                           GetEnemyBoundBox:
0B6CC A0 48                           ldy #$48                 ;store bitmask here for now
0B6CE 84 00                           sty $00
0B6D0 A0 44                           ldy #$44                 ;store another bitmask here for now and jump
0B6D2 4C DB B6                        jmp GetMaskedOffScrBits
0B6D5                           
0B6D5                           SmallPlatformBoundBox:
0B6D5 A0 08                           ldy #$08                 ;store bitmask here for now
0B6D7 84 00                           sty $00
0B6D9 A0 04                           ldy #$04                 ;store another bitmask here for now
0B6DB                           
0B6DB                           GetMaskedOffScrBits:
0B6DB B5 79                             lda Enemy_X_Position,x      ;get enemy object position relative
0B6DD 38                                sec                         ;to the left side of the screen
0B6DE ED 1C 07                          sbc ScreenLeft_X_Pos
0B6E1 85 01                             sta $01                     ;store here
0B6E3 B5 60                             lda Enemy_PageLoc,x         ;subtract borrow from current page location
0B6E5 ED 1A 07                          sbc ScreenLeft_PageLoc      ;of left side
0B6E8 30 06                             bmi CMBits                  ;if enemy object is beyond left edge, branch
0B6EA 05 01                             ora $01
0B6EC F0 02                             beq CMBits                  ;if precisely at the left edge, branch
0B6EE A4 00                             ldy $00                     ;if to the right of left edge, use value in $00 for A
0B6F0 98                        CMBits: tya                         ;otherwise use contents of Y
0B6F1 2D D1 03                          and Enemy_OffscreenBits     ;preserve bitwise whatever's in here
0B6F4 9D D8 03                          sta EnemyOffscrBitsMasked,x ;save masked offscreen bits here
0B6F7 D0 53                             bne MoveBoundBoxOffscreen   ;if anything set here, branch
0B6F9 4C 05 B7                          jmp SetupEOffsetFBBox       ;otherwise, do something else
0B6FC                           		
0B6FC                           LargePlatformBoundBox:
0B6FC E8                              inx                        ;increment X to get the proper offset
0B6FD 20 67 AE                        jsr GetXOffscreenBits      ;then jump directly to the sub for horizontal offscreen bits
0B700 CA                              dex                        ;decrement to return to original offset
0B701 C9 FE                           cmp #$fe                   ;if completely offscreen, branch to put entire bounding
0B703 B0 47                           bcs MoveBoundBoxOffscreen  ;box offscreen, otherwise start getting coordinates
0B705                           
0B705                           SetupEOffsetFBBox:
0B705 E8                              inx
0B706 A0 01                           ldy #$01                    ;load 1 as offset here, same reason
0B708 86 00                           stx $00                     ;save offset here
0B70A B9 B8 03                        lda SprObject_Rel_YPos,y    ;store object coordinates relative to screen
0B70D 85 02                           sta $02                     ;vertically and horizontally, respectively
0B70F B9 AD 03                        lda SprObject_Rel_XPos,y
0B712 85 01                           sta $01
0B714 8A                              txa                         ;multiply offset by four and save to stack
0B715 0A                              asl
0B716 0A                              asl
0B717 48                              pha
0B718 A8                              tay                         ;use as offset for Y, X is left alone
0B719 BD 99 04                        lda SprObj_BoundBoxCtrl,x   ;load value here to be used as offset for X
0B71C 0A                              asl                         ;multiply that by four and use as X
0B71D 0A                              asl
0B71E AA                              tax
0B71F A5 01                           lda $01                     ;add the first number in the bounding box data to the
0B721 18                              clc                         ;relative horizontal coordinate using enemy object offset
0B722 7D 72 B6                        adc BoundBoxCtrlData,x      ;and store somewhere using same offset * 4
0B725 99 AC 04                        sta BoundingBox_UL_Corner,y ;store here
0B728 A5 01                           lda $01
0B72A 18                              clc
0B72B 7D 74 B6                        adc BoundBoxCtrlData+2,x    ;add the third number in the bounding box data to the
0B72E 99 AE 04                        sta BoundingBox_LR_Corner,y ;relative horizontal coordinate and store
0B731 E8                              inx                         ;increment both offsets
0B732 C8                              iny
0B733 A5 02                           lda $02                     ;add the second number to the relative vertical coordinate
0B735 18                              clc                         ;using incremented offset and store using the other
0B736 7D 72 B6                        adc BoundBoxCtrlData,x      ;incremented offset
0B739 99 AC 04                        sta BoundingBox_UL_Corner,y
0B73C A5 02                           lda $02
0B73E 18                              clc
0B73F 7D 74 B6                        adc BoundBoxCtrlData+2,x    ;add the fourth number to the relative vertical coordinate
0B742 99 AE 04                        sta BoundingBox_LR_Corner,y ;and store
0B745 68                              pla                         ;get original offset loaded into $00 * y from stack
0B746 A8                              tay                         ;use as Y
0B747 A6 00                           ldx $00                     ;get original offset and use as X again
0B749 4C A1 B7                        jmp CheckRightScreenBBox   ;jump to handle offscreen coordinates of bounding box
0B74C                           
0B74C                           MoveBoundBoxOffscreen:
0B74C 8A                              txa                            ;multiply offset by 4
0B74D 0A                              asl
0B74E 0A                              asl
0B74F A8                              tay                            ;use as offset here
0B750 A9 FF                           lda #$ff
0B752 99 B0 04                        sta EnemyBoundingBoxCoord,y    ;load value into four locations here and leave
0B755 99 B1 04                        sta EnemyBoundingBoxCoord+1,y
0B758 99 B2 04                        sta EnemyBoundingBoxCoord+2,y
0B75B 99 B3 04                        sta EnemyBoundingBoxCoord+3,y
0B75E 60                              rts
0B75F                           
0B75F                           BoundingBoxCore:
0B75F 86 00                           stx $00                     ;save offset here
0B761 B9 B8 03                        lda SprObject_Rel_YPos,y    ;store object coordinates relative to screen
0B764 85 02                           sta $02                     ;vertically and horizontally, respectively
0B766 B9 AD 03                        lda SprObject_Rel_XPos,y
0B769 85 01                           sta $01
0B76B 8A                              txa                         ;multiply offset by four and save to stack
0B76C 0A                              asl
0B76D 0A                              asl
0B76E 48                              pha
0B76F A8                              tay                         ;use as offset for Y, X is left alone
0B770 BD 99 04                        lda SprObj_BoundBoxCtrl,x   ;load value here to be used as offset for X
0B773 0A                              asl                         ;multiply that by four and use as X
0B774 0A                              asl
0B775 AA                              tax
0B776 A5 01                           lda $01                     ;add the first number in the bounding box data to the
0B778 18                              clc                         ;relative horizontal coordinate using enemy object offset
0B779 7D 72 B6                        adc BoundBoxCtrlData,x      ;and store somewhere using same offset * 4
0B77C 99 AC 04                        sta BoundingBox_UL_Corner,y ;store here
0B77F A5 01                           lda $01
0B781 18                              clc
0B782 7D 74 B6                        adc BoundBoxCtrlData+2,x    ;add the third number in the bounding box data to the
0B785 99 AE 04                        sta BoundingBox_LR_Corner,y ;relative horizontal coordinate and store
0B788 E8                              inx                         ;increment both offsets
0B789 C8                              iny
0B78A A5 02                           lda $02                     ;add the second number to the relative vertical coordinate
0B78C 18                              clc                         ;using incremented offset and store using the other
0B78D 7D 72 B6                        adc BoundBoxCtrlData,x      ;incremented offset
0B790 99 AC 04                        sta BoundingBox_UL_Corner,y
0B793 A5 02                           lda $02
0B795 18                              clc
0B796 7D 74 B6                        adc BoundBoxCtrlData+2,x    ;add the fourth number to the relative vertical coordinate
0B799 99 AE 04                        sta BoundingBox_LR_Corner,y ;and store
0B79C 68                              pla                         ;get original offset loaded into $00 * y from stack
0B79D A8                              tay                         ;use as Y
0B79E A6 00                           ldx $00                     ;get original offset and use as X again
0B7A0 60                              rts
0B7A1                           
0B7A1                           CheckRightScreenBBox:
0B7A1 AD 1C 07                         lda ScreenLeft_X_Pos       ;add 128 pixels to left side of screen
0B7A4 18                               clc                        ;and store as horizontal coordinate of middle
0B7A5 69 80                            adc #$80
0B7A7 85 02                            sta $02
0B7A9 AD 1A 07                         lda ScreenLeft_PageLoc     ;add carry to page location of left side of screen
0B7AC 69 00                            adc #$00                   ;and store as page location of middle
0B7AE 85 01                            sta $01
0B7B0 B5 78                            lda SprObject_X_Position,x ;get horizontal coordinate
0B7B2 C5 02                            cmp $02                    ;compare against middle horizontal coordinate
0B7B4 B5 5F                            lda SprObject_PageLoc,x    ;get page location
0B7B6 E5 01                            sbc $01                    ;subtract from middle page location
0B7B8 90 15                            bcc CheckLeftScreenBBox    ;if object is on the left side of the screen, branch
0B7BA B9 AE 04                         lda BoundingBox_DR_XPos,y  ;check right-side edge of bounding box for offscreen
0B7BD 30 0D                            bmi NoOfs                  ;coordinates, branch if still on the screen
0B7BF A9 FF                            lda #$ff                   ;load offscreen value here to use on one or both horizontal sides
0B7C1 BE AC 04                         ldx BoundingBox_UL_XPos,y  ;check left-side edge of bounding box for offscreen
0B7C4 30 03                            bmi SORte                  ;coordinates, and branch if still on the screen
0B7C6 99 AC 04                         sta BoundingBox_UL_XPos,y  ;store offscreen value for left side
0B7C9 99 AE 04                  SORte: sta BoundingBox_DR_XPos,y  ;store offscreen value for right side
0B7CC A6 08                     NoOfs: ldx ObjectOffset           ;get object offset and leave
0B7CE 60                               rts
0B7CF                           
0B7CF                           CheckLeftScreenBBox:
0B7CF B9 AC 04                          lda BoundingBox_UL_XPos,y  ;check left-side edge of bounding box for offscreen
0B7D2 10 11                             bpl NoOfs2                 ;coordinates, and branch if still on the screen
0B7D4 C9 A0                             cmp #$a0                   ;check to see if left-side edge is in the middle of the
0B7D6 90 0D                             bcc NoOfs2                 ;screen or really offscreen, and branch if still on
0B7D8 A9 00                             lda #$00
0B7DA BE AE 04                          ldx BoundingBox_DR_XPos,y  ;check right-side edge of bounding box for offscreen
0B7DD 10 03                             bpl SOLft                  ;coordinates, branch if still onscreen
0B7DF 99 AE 04                          sta BoundingBox_DR_XPos,y  ;store offscreen value for right side
0B7E2 99 AC 04                  SOLft:  sta BoundingBox_UL_XPos,y  ;store offscreen value for left side
0B7E5 A6 08                     NoOfs2: ldx ObjectOffset           ;get object offset and leave
0B7E7 60                                rts
0B7E8                           
0B7E8                           ;$06 - RAM address low
0B7E8                           ;$07 - RAM address high
0B7E8                           
0B7E8                           _InitializeMemory:
0B7E8 A2 07                                   ldx #$07          ;set initial high byte to $0700-$07ff
0B7EA A9 00                                   lda #$00          ;set initial low byte to start of page (at $00 of page)
0B7EC 85 06                                   sta $06
0B7EE 86 07                     InitPageLoop: stx $07
0B7F0 E0 01                     InitByteLoop: cpx #$01          ;check to see if we're on the stack ($0100-$01ff)
0B7F2 D0 04                                   bne InitByte      ;if not, go ahead anyway
0B7F4 C0 60                                   cpy #$60          ;otherwise, check to see if we're at $0160-$01ff
0B7F6 B0 02                                   bcs SkipByte      ;if so, skip write
0B7F8 91 06                     InitByte:     sta ($06),y       ;otherwise, initialize byte with current low byte in Y
0B7FA 88                        SkipByte:     dey
0B7FB C0 FF                                   cpy #$ff          ;do this until all bytes in page have been erased
0B7FD D0 F1                                   bne InitByteLoop
0B7FF CA                                      dex               ;go onto the next page
0B800 10 EC                                   bpl InitPageLoop  ;do this until all pages of memory have been erased
0B802                           			
0B802 60                        			  rts 
0B803                                         ; set default chr banks
0B803                                         
0B803 60                                      rts
0B804                           	
0B804                           
0B804                           SwimKickTileNum:
0B804 31 46                           .db $31, $46
0B806                           
0B806                           		
0B806                           LakituDiffAdj:
0B806 15 30 40                        .db $15, $30, $40
0B809                           	  
0B809                           HammerThrowTmrData:
0B809 30 10                           .db $30, $10
0B80B                           
0B80B                           XSpeedAdderData:
0B80B 00 FA 00 05                     .db $00, $fa, $00, $05
0B80F                           
0B80F                           RevivedXSpeed:
0B80F 08 F8 0E F1                     .db $08, $f8, $0e, $f1
0B813                           	  
0B813                           SwimSpeed: 
0B813 03 FD 03                  	  .db $03, $fd, $03
0B816                           	   
0B816                           PlayerGraphicsTable:
0B816                           ;big player table
0B816 00 01 02 03 04 05 06 07         .db $00, $01, $02, $03, $04, $05, $06, $07 ;walking frame 1
0B81E 08 09 0A 0B 0C 0D 0E 0F         .db $08, $09, $0a, $0b, $0c, $0d, $0e, $0f ;        frame 2
0B826 10 11 12 13 14 15 16 17         .db $10, $11, $12, $13, $14, $15, $16, $17 ;        frame 3
0B82E 18 19 1A 1B 1C 1D 1E 1F         .db $18, $19, $1a, $1b, $1c, $1d, $1e, $1f ;skidding
0B836 20 21 22 23 24 25 26 27         .db $20, $21, $22, $23, $24, $25, $26, $27 ;jumping
0B83E 08 09 28 29 2A 2B 2C 2D         .db $08, $09, $28, $29, $2a, $2b, $2c, $2d ;swimming frame 1
0B846 08 09 0A 0B 0C 30 2C 2D         .db $08, $09, $0a, $0b, $0c, $30, $2c, $2d ;         frame 2
0B84E 08 09 0A 0B 2E 2F 2C 2D         .db $08, $09, $0a, $0b, $2e, $2f, $2c, $2d ;         frame 3
0B856 08 09 28 29 2A 2B 5C 5D         .db $08, $09, $28, $29, $2a, $2b, $5c, $5d ;climbing frame 1
0B85E 08 09 0A 0B 0C 0D 5E 5F         .db $08, $09, $0a, $0b, $0c, $0d, $5e, $5f ;         frame 2
0B866 FC FC 08 09 58 59 5A 5A         .db $fc, $fc, $08, $09, $58, $59, $5a, $5a ;crouching
0B86E 08 09 28 29 2A 2B 0E 0F         .db $08, $09, $28, $29, $2a, $2b, $0e, $0f ;fireball throwing
0B876                           
0B876                           ;small player table
0B876 FC FC FC FC 32 33 34 35         .db $fc, $fc, $fc, $fc, $32, $33, $34, $35 ;walking frame 1
0B87E FC FC FC FC 36 37 38 39         .db $fc, $fc, $fc, $fc, $36, $37, $38, $39 ;        frame 2
0B886 FC FC FC FC 3A 37 3B 3C         .db $fc, $fc, $fc, $fc, $3a, $37, $3b, $3c ;        frame 3
0B88E FC FC FC FC 3D 3E 3F 40         .db $fc, $fc, $fc, $fc, $3d, $3e, $3f, $40 ;skidding
0B896 FC FC FC FC 32 41 42 43         .db $fc, $fc, $fc, $fc, $32, $41, $42, $43 ;jumping
0B89E FC FC FC FC 32 33 44 45         .db $fc, $fc, $fc, $fc, $32, $33, $44, $45 ;swimming frame 1
0B8A6 FC FC FC FC 32 33 44 47         .db $fc, $fc, $fc, $fc, $32, $33, $44, $47 ;         frame 2
0B8AE FC FC FC FC 32 33 48 49         .db $fc, $fc, $fc, $fc, $32, $33, $48, $49 ;         frame 3
0B8B6 FC FC FC FC 32 33 90 91         .db $fc, $fc, $fc, $fc, $32, $33, $90, $91 ;climbing frame 1
0B8BE FC FC FC FC 3A 37 92 93         .db $fc, $fc, $fc, $fc, $3a, $37, $92, $93 ;         frame 2
0B8C6 FC FC FC FC 9E 9E 9F 9F         .db $fc, $fc, $fc, $fc, $9e, $9e, $9f, $9f ;killed
0B8CE                           
0B8CE                           ;used by both player sizes
0B8CE FC FC FC FC 3A 37 5B 4F         .db $fc, $fc, $fc, $fc, $3a, $37, $5b, $4f ;small player standing
0B8D6 FC FC 00 01 4C 4D 4E 4E         .db $fc, $fc, $00, $01, $4c, $4d, $4e, $4e ;intermediate grow frame
0B8DE 00 01 4C 4D 75 4A 4B 4B         .db $00, $01, $4c, $4d, $75, $4a, $4b, $4b ;big player standing
0B8E6 FC FC FC FC 3A 37 5B 4F   	  .db $fc, $fc, $fc, $fc, $3a, $37, $5b, $4f ;crouching
0B8EE                           FindPlayerAction:
0B8EE 20 A3 AF                        jsr ProcessPlayerAction       ;find proper offset to graphics table by player's actions
0B8F1 4C B3 B5                        jmp PlayerGfxProcessing       ;draw player, then process for fireball throwing
0B8F4                           DoChangeSize:
0B8F4 20 71 AF                  	  jsr HandleChangeSize          ;find proper offset to graphics table for grow/shrink
0B8F7 4C B3 B5                        jmp PlayerGfxProcessing       ;draw player, then process for fireball throwing
0B8FA                           	  
0B8FA                           		  
0B8FA                           MetatileThingy:	;this table specifies the metatile id that each metatile acts like, for example, a metatile which acts like metatile id $54, acts like the ground, thus solid
0B8FA 00 00 00 00 00 00 00 00.. 	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0B90A 10 11 54 54 54 54 88 88.. 	.db $10, $11, $54, $54, $54, $54, $88, $88, $88, $88, $88, $88, $1c, $54, $54, $1f
0B91A 54 54 54 23 25 25 26 52.. 	.db $54, $54, $54, $23, $25, $25, $26, $52, $52, $5f, $60, $6f, $54, $54, $2e, $2f
0B92A 30 31 32 33 34 35 54 54.. 	.db $30, $31, $32, $33, $34, $35, $54, $54, $5f, $60, $6f, $30, $c0, $54, $54, $00
0B93A                           	
0B93A 00 00 00 00 00 00 00 00.. 	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0B94A 00 52 52 53 54 55 56 57.. 	.db $00, $52, $52, $53, $54, $55, $56, $57, $58, $59, $5a, $5b, $5c, $5d, $5e, $5f
0B95A 60 54 54 63 54 54 54 67.. 	.db $60, $54, $54, $63, $54, $54, $54, $67, $67, $54, $6a, $6b, $6c, $6d, $6e, $6f
0B96A 70 71 72 73 74 00 00 00.. 	.db $70, $71, $72, $73, $74, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0B97A                           	
0B97A 00 00 00 00 00 00 86 87.. 	.db $00, $00, $00, $00, $00, $00, $86, $87, $88, $88, $8a, $8b, $8c, $8d, $8e, $8f
0B98A 91 91 92 00 00 00 00 00.. 	.db $91, $91, $92, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0B99A 00 00 00 00 00 00 00 00.. 	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0B9AA 00 00 00 00 00 00 00 00.. 	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0B9BA                           	
0B9BA C0 C1 C2 C3 54 C5 C6 C7.. 	.db $c0, $c1, $c2, $c3, $54, $c5, $c6, $c7, $54, $54, $54, $54, $54, $54, $54, $54
0B9CA 54 54 00 00 00 00 54 54.. 	.db $54, $54, $00, $00, $00, $00, $54, $54, $54, $00, $00, $00, $54, $54, $54, $88
0B9DA 88 88 54 54 8A 00 54 00.. 	.db $88, $88, $54, $54, $8a, $00, $54, $00, $54, $00, $00, $00, $00, $00, $00, $00	
0B9EA 70 00                     	.db $70, $00
0B9EC                           DoWarpZone:
0B9EC A9 00                     		 lda #$00
0B9EE 8D A8 60                  		 sta WarpZoneCheck
0B9F1 A2 04                     		 ldx #$04            ;load value of 4 for game text routine as default
0B9F3 AD 5F 07                           lda WorldNumber     ;warp zone (4-3-2), then check world number
0B9F6 F0 0C                              beq WarpNum
0B9F8 E8                                 inx                 ;if world number > 1, increment for next warp zone (5)
0B9F9 E8                        		 inx
0B9FA E8                        		 inx
0B9FB AC 4E 07                           ldy AreaType        ;check area type
0B9FE 88                                 dey
0B9FF D0 03                              bne WarpNum         ;if ground area type, increment for last warp zone emanems
0BA01 CA                        		 dex
0BA02 CA                        		 dex
0BA03 E8                                 inx                 ;(8-7-6) and move on
0BA04 8A                        WarpNum: txa
0BA05 8D D6 06                           sta WarpZoneControl ;store number here to be used by warp zone routine
0BA08 20 5D 89                           jsr WriteGameText   ;print text and warp zone numbers
0BA0B A9 0D                              lda #PiranhaPlant
0BA0D 4C 10 BA                           jmp KillEnemies     ;load identifier for piranha plants and do sub
0BA10                           		 
0BA10                           
0BA10                           KillEnemies:
0BA10 85 00                                sta $00           ;store identifier here
0BA12 A9 00                                lda #$00
0BA14 A2 04                                ldx #$04          ;check for identifier in enemy object buffer
0BA16 B4 15                     KillELoop: ldy Enemy_ID,x
0BA18 C4 00                                cpy $00           ;if not found, branch
0BA1A D0 02                                bne NoKillE
0BA1C 95 0F                                sta Enemy_Flag,x  ;if found, deactivate enemy object flag
0BA1E CA                        NoKillE:   dex               ;do this until all slots are checked
0BA1F 10 F5                                bpl KillELoop
0BA21 60                                   rts
0BA22                           
0BA22                           if BATTERY
0BA22                               include code\save.asm
0BA22                           save_Validate = $7fbf
0BA22                           save_Validate_value = $42
0BA22                           save_TopScore = $7f00
0BA22                           
0BA22                           
0BA22                           LoadBattery:
0BA22 20 AF F8                          jsr ReadJoypads
0BA25                           
0BA25 A2 05                             ldx #$05
0BA27                           -
0BA27 BD 00 7F                          lda save_TopScore,x
0BA2A 9D D7 07                          sta TopScoreDisplay,x
0BA2D CA                                dex
0BA2E 10 F7                             bpl -
0BA30                           
0BA30 60                        rts
0BA31                           SaveBattery:
0BA31 A2 05                             ldx #$05
0BA33                           -
0BA33 BD D7 07                          lda TopScoreDisplay,x
0BA36 9D 00 7F                          sta save_TopScore,x
0BA39 CA                                dex
0BA3A 10 F7                             bpl -
0BA3C 60                        rts
0BA3D                           endif
0BA3D                           
0BA3D                           FirebarPosLookupTbl:
0BA3D 00 01 03 04 05 06 07 07..       .db $00, $01, $03, $04, $05, $06, $07, $07, $08
0BA46 00 03 06 09 0B 0D 0E 0F..       .db $00, $03, $06, $09, $0b, $0d, $0e, $0f, $10
0BA4F 00 04 09 0D 10 13 16 17..       .db $00, $04, $09, $0d, $10, $13, $16, $17, $18
0BA58 00 06 0C 12 16 1A 1D 1F..       .db $00, $06, $0c, $12, $16, $1a, $1d, $1f, $20
0BA61 00 07 0F 16 1C 21 25 27..       .db $00, $07, $0f, $16, $1c, $21, $25, $27, $28
0BA6A 00 09 12 1B 21 27 2C 2F..       .db $00, $09, $12, $1b, $21, $27, $2c, $2f, $30
0BA73 00 0B 15 1F 27 2E 33 37..       .db $00, $0b, $15, $1f, $27, $2e, $33, $37, $38
0BA7C 00 0C 18 24 2D 35 3B 3E..       .db $00, $0c, $18, $24, $2d, $35, $3b, $3e, $40
0BA85 00 0E 1B 28 32 3B 42 46..       .db $00, $0e, $1b, $28, $32, $3b, $42, $46, $48
0BA8E 00 0F 1F 2D 38 42 4A 4E..       .db $00, $0f, $1f, $2d, $38, $42, $4a, $4e, $50
0BA97 00 11 22 31 3E 49 51 56..       .db $00, $11, $22, $31, $3e, $49, $51, $56, $58
0BAA0                           
0BAA0                           FirebarMirrorData:
0BAA0 01 03 02 00                     .db $01, $03, $02, $00
0BAA4                           
0BAA4                           FirebarTblOffsets:
0BAA4 00 09 12 1B 24 2D               .db $00, $09, $12, $1b, $24, $2d
0BAAA 36 3F 48 51 5A 63               .db $36, $3f, $48, $51, $5a, $63
0BAB0                           
0BAB0                           FirebarYPos:
0BAB0 0C 18                           .db $0c, $18
0BAB2                           
0BAB2                           
0BAB2                           BlockBufferAdderData:
0BAB2 00 07 0E                        .db $00, $07, $0e
0BAB5                           
0BAB5                           BlockBuffer_X_Adder:
0BAB5 08 03 0C 02 02 0D 0D 08         .db $08, $03, $0c, $02, $02, $0d, $0d, $08 ;00-07
0BABD 03 0C 02 02 0D 0D 08 03         .db $03, $0c, $02, $02, $0d, $0d, $08, $03 ;08-0f
0BAC5 0C 02 02 0D 0D 08 00 10         .db $0c, $02, $02, $0d, $0d, $08, $00, $10 ;10-17
0BACD 04 14 04 04 03 0C 03 0C         .db $04, $14, $04, $04, $03, $0c, $03, $0c ;18-1f
0BAD5 08 08 08 0C 08 08 08      	  .db $08, $08, $08, $0c, $08, $08, $08
0BADC                           
0BADC                           BlockBuffer_Y_Adder:
0BADC 04 20 20 08 18 08 18 02         .db $04, $20, $20, $08, $18, $08, $18, $02
0BAE4 20 20 08 18 08 18 12 20         .db $20, $20, $08, $18, $08, $18, $12, $20
0BAEC 20 18 18 18 18 18 14 14         .db $20, $18, $18, $18, $18, $18, $14, $14
0BAF4 06 06 08 10 12 12 04 04         .db $06, $06, $08, $10, $12, $12, $04, $04
0BAFC 09 09 20 1F 17 12 17      	  .db $09, $09, $20, $1f, $17, $12, $17
0BB03                           
0BB03                           BlockBuffer_Y_Adder3:
0BB03 E4 00 00 E8 F8 E8 F8 E2         .db $e4, $00, $00, $e8, $f8, $e8, $f8, $e2
0BB0B 00 00 08 F8 E8 F8 F2 00         .db $00, $00, $08, $f8, $e8, $f8, $f2, $00
0BB13 00 F8 F8 F8 F8 F8 F4 F4         .db $00, $f8, $f8, $f8, $f8, $f8, $f4, $f4
0BB1B E6 E6 E8 F0 F2 F2 E4 E4         .db $e6, $e6, $e8, $f0, $f2, $f2, $e4, $e4
0BB23 E9 E9 00 EF E7 E2 F7      	  .db $e9, $e9, $00, $ef, $e7, $e2, $f7
0BB2A                           
0BB2A                           jmpidk:
0BB2A A2 05                     		ldx #$05
0BB2C 18                        		clc
0BB2D B5 0F                     		lda Enemy_Flag,x
0BB2F F0 13                     		beq +
0BB31 20 46 BB                  		jsr QUe
0BB34 90 0E                     		bcc +
0BB36 AC 57 60                  +++:	ldy tempC
0BB39 B9 C1 63                  		lda OrigMetatile,y
0BB3C 99 E8 03                  		sta Block_Metatile,y
0BB3F 99 9E 06                  		sta Cbolla,y
0BB42 38                        		sec
0BB43 60                        		rts
0BB44 18                        +:		clc
0BB45 60                        		rts
0BB46                           QUe:	
0BB46 A2 00                     		ldx #$00
0BB48 18                        -:		clc
0BB49 B5 0F                     		lda Enemy_Flag,x
0BB4B F0 05                     		beq +
0BB4D E8                        		inx
0BB4E E0 05                     		cpx #$05
0BB50 D0 F6                     		bne -
0BB52 60                        +:		rts
0BB53                           
0BB53                           
0BB53                           ImpedePlayerMove:
0BB53 A5 0E                     	   lda GameEngineSubroutine
0BB55 C9 0A                     	   cmp #$0a
0BB57 F0 60                     	   beq EXPM
0BB59 A9 00                     	   lda #$00                  ;initialize value here
0BB5B A4 49                            ldy Player_X_Speed        ;get player's horizontal speed
0BB5D A6 00                            ldx $00                   ;check value set earlier for
0BB5F CA                               dex                       ;left side collision
0BB60 D0 0C                            bne RImpd                 ;if right side collision, skip this part
0BB62 E8                               inx                       ;return value to X
0BB63 C0 00                            cpy #$00                  ;if player moving to the left,
0BB65 30 02                            bmi +	                 ;branch to invert bit and leave
0BB67 A0 00                     	   ldy #$00 
0BB69 A9 FF                     +:     lda #$ff                  ;otherwise load A with value to be used later
0BB6B 4C 78 BB                         jmp NXSpd                 ;and jump to affect movement
0BB6E A2 02                     RImpd: ldx #$02                  ;return $02 to X
0BB70 C0 01                            cpy #$01                  ;if player moving to the right
0BB72 10 02                     	   bpl +
0BB74 A0 00                     	   ldy #$00
0BB76 A9 01                     +:	   lda #$01                  ;otherwise load A with value to be used here
0BB78 84 01                     NXSpd: sty $01
0BB7A A0 10                     	   ldy #$10
0BB7C 8C 85 07                         sty SideCollisionTimer    ;set timer of some sort
0BB7F A4 01                            ldy $01
0BB81 84 49                            sty Player_X_Speed        ;nullify player's horizontal speed
0BB83 A0 00                     	   ldy #$00
0BB85 C9 00                            cmp #$00                  ;if value set in A not set to $ff,
0BB87 10 01                            bpl PlatF                 ;branch ahead, do not decrement Y
0BB89 88                               dey                       ;otherwise decrement Y now
0BB8A 84 00                     PlatF: sty $00                   ;store Y as high bits of horizontal adder
0BB8C 8D E8 63                  	   sta SideCollisionAdder
0BB8F 18                        	   clc
0BB90 65 78                            adc Player_X_Position     ;add contents of A to player's horizontal
0BB92 85 78                            sta Player_X_Position     ;position to move player left or right
0BB94 A5 5F                     	   lda Player_PageLoc
0BB96 65 00                            adc $00                   ;add high bits and carry to
0BB98 85 5F                            sta Player_PageLoc        ;page location if necessary
0BB9A A5 1B                     	   lda Player_State
0BB9C D0 04                     	   bne ExIPM
0BB9E A9 00                     	   lda #$00
0BBA0 85 49                     	   sta Player_X_Speed
0BBA2                           
0BBA2 8A                        ExIPM: txa                       ;invert contents of X
0BBA3 49 FF                            eor #$ff
0BBA5 2D 90 04                         and Player_CollisionBits  ;mask out bit that was set here
0BBA8 8D 90 04                         sta Player_CollisionBits  ;store to clear bit
0BBAB C9 FD                     	   cmp #$fd
0BBAD D0 0A                     	   bne EXPM
0BBAF AD 65 07                  	   lda Player_OldCollisionBits
0BBB2 C9 FD                     	   cmp #$fd
0BBB4 D0 03                     	   bne EXPM
0BBB6 EE 1F 7E                  	   inc DontJump
0BBB9 60                        EXPM:  rts
0BBBA                           
0BBBA                           
0BBBA                           SixSpriteStacker:
0BBBA A2 06                            ldx #$06           ;do six sprites
0BBBC 99 00 02                  StkLp: sta Sprite_Data,y  ;store X or Y coordinate into OAM data
0BBBF 18                               clc
0BBC0 69 08                            adc #$08           ;add eight pixels
0BBC2 C8                               iny
0BBC3 C8                               iny                ;move offset four bytes forward
0BBC4 C8                               iny
0BBC5 C8                               iny
0BBC6 CA                               dex                ;do another sprite
0BBC7 D0 F3                            bne StkLp          ;do this until all sprites are done
0BBC9 A4 02                            ldy $02            ;get saved OAM data offset and leave
0BBCB 60                               rts
0BBCC                           
0BBCC                           if CHEEPCHEEP_FIX == 1
0BBCC                               MoveFlyingCheepCheep:             ;PAL diff: reworked movement function for Cheep Cheeps
0BBCC                                      ldy #$20
0BBCC                                      lda Enemy_State,x          ;check cheep-cheep's enemy state
0BBCC                                      and #%00100000             ;for d5 set
0BBCC                                      bne FlyCC
0BBCC                                      inx                         ;increment offset for enemy offset
0BBCC                                      jsr MoveObjectHorizontally  ;position object horizontally according to
0BBCC                                      ldx ObjectOffset            ;counters, return with saved value in A,
0BBCC                                      ldy #$17
0BBCC                           
0BBCC                               FlyCC: lda #$05
0BBCC                                      jmp SetXMoveAmt
0BBCC                           else
0BBCC                               MoveFlyingCheepCheep:
0BBCC B5 1C                                 lda Enemy_State,x          ;check cheep-cheep's enemy state
0BBCE 29 20                                 and #%00100000             ;for d5 set
0BBD0 F0 08                                 beq FlyCC                  ;branch to continue code if not set
0BBD2 A9 00                                 lda #$00
0BBD4 9D C5 03                              sta Enemy_SprAttrib,x      ;otherwise clear sprite attributes
0BBD7 4C E2 AB                              jmp MoveJ_EnemyVertically  ;and jump to move defeated cheep-cheep downwards
0BBDA E8                            FlyCC:  inx                         ;increment offset for enemy offset                       ;increment offset for enemy offset
0BBDB 20 5C AC                              jsr MoveObjectHorizontally  ;position object horizontally according to
0BBDE                                       ;ldx ObjectOffset            ;counters, return with saved value in A,
0BBDE A6 08                                 ldx ObjectOffset            ;counters, return with saved value in A,
0BBE0 A0 0D                                 ldy #$0d                   ;set vertical movement amount
0BBE2 A9 05                                 lda #$05                   ;set maximum speed
0BBE4 20 E6 AB                              jsr SetXMoveAmt            ;branch to impose gravity on flying cheep-cheep
0BBE7 BD 34 04                              lda Enemy_Y_MoveForce,x
0BBEA 4A                                    lsr                        ;get vertical movement force and
0BBEB 4A                                    lsr                        ;move high nybble to low
0BBEC 4A                                    lsr
0BBED 4A                                    lsr
0BBEE A8                                    tay                        ;save as offset (note this tends to go into reach of code)
0BBEF B5 C1                                 lda Enemy_Y_Position,x     ;get vertical position
0BBF1 38                                    sec                        ;subtract pseudorandom value based on offset from position
0BBF2 F9 D5 CA                              sbc PRandomSubtracter,y
0BBF5 10 05                                 bpl AddCCF                  ;if result within top half of screen, skip this part
0BBF7 49 FF                                 eor #$ff
0BBF9 18                                    clc                        ;otherwise get two's compliment
0BBFA 69 01                                 adc #$01
0BBFC C9 08                         AddCCF: cmp #$08                   ;if result or two's compliment greater than eight,
0BBFE B0 0E                                 bcs BPGet                  ;skip to the end without changing movement force
0BC00 BD 34 04                              lda Enemy_Y_MoveForce,x
0BC03 18                                    clc
0BC04 69 10                                 adc #$10                   ;otherwise add to it
0BC06 9D 34 04                              sta Enemy_Y_MoveForce,x
0BC09 4A                                    lsr                        ;move high nybble to low again
0BC0A 4A                                    lsr
0BC0B 4A                                    lsr
0BC0C 4A                                    lsr
0BC0D A8                                    tay
0BC0E B9 DA CA                      BPGet:  lda FlyCCBPriority,y       ;load bg priority data and store (this is very likely
0BC11 9D C5 03                              sta Enemy_SprAttrib,x      ;broken or residual code, value is overwritten before
0BC14 60                                    rts                        ;drawing it next frame), then leave
0BC15                           endif
0BC15                           
0BC15                           BlockBufferAdderData1:
0BC15 00 07 0E                        .db $00, $07, $0e
0BC18                           
0BC18                           BlockBuffer_X_Adder1:
0BC18 08 03 0C 02 02 0D 0D 08         .db $08, $03, $0c, $02, $02, $0d, $0d, $08 ;00-07
0BC20 03 0C 02 02 0D 0D 08 03         .db $03, $0c, $02, $02, $0d, $0d, $08, $03 ;08-0f
0BC28 0C 02 02 0D 0D 08 00 10         .db $0c, $02, $02, $0d, $0d, $08, $00, $10 ;10-17
0BC30 04 14 04 04 03 0C 03 0C         .db $04, $14, $04, $04, $03, $0c, $03, $0c ;18-1f
0BC38 08 08 08 08 08 08         	  .db $08, $08, $08, $08, $08, $08
0BC3E                           
0BC3E                           BlockBuffer_Y_Adder1:
0BC3E 04 20 20 08 18 08 18 02         .db $04, $20, $20, $08, $18, $08, $18, $02
0BC46 20 20 08 18 08 18 12 20         .db $20, $20, $08, $18, $08, $18, $12, $20
0BC4E 20 18 18 18 18 18 14 14         .db $20, $18, $18, $18, $18, $18, $14, $14
0BC56 06 06 08 10 12 12 04 04         .db $06, $06, $08, $10, $12, $12, $04, $04
0BC5E 09 09 20 1F 17 14         	  .db $09, $09, $20, $1f, $17, $14
0BC64                           	  
0BC64                           BlockBuffer_Y_Adder2:
0BC64 E4 00 00 E8 F8 E8 F8 E2         .db $e4, $00, $00, $e8, $f8, $e8, $f8, $e2
0BC6C 00 00 08 F8 E8 F8 F2 00         .db $00, $00, $08, $f8, $e8, $f8, $f2, $00
0BC74 00 F8 F8 F8 F8 F8 F4 F4         .db $00, $f8, $f8, $f8, $f8, $f8, $f4, $f4
0BC7C E6 E6 E8 F0 F2 F2 E4 E4         .db $e6, $e6, $e8, $f0, $f2, $f2, $e4, $e4
0BC84 E9 E9 00 FF F7 F4         	  .db $e9, $e9, $00, $ff, $f7, $f4
0BC8A                           	  
0BC8A                           BlockBufferAddr1:
0BC8A 00 00                           .db <Block_Buffer_1, <Block_Buffer_2
0BC8C 66 67                           .db >Block_Buffer_1, >Block_Buffer_2
0BC8E                           
0BC8E                           BlockBufferColli_Feet:
0BC8E                                  ;inc PlayerFoot
0BC8E C8                        	   iny            ;if branched here, increment to next set of adders
0BC8F                           
0BC8F                           BlockBufferColli_Head:
0BC8F A9 00                            lda #$00       ;set flag to return vertical coordinate
0BC91 2C                               .db $2c        ;BIT instruction opcode
0BC92                           
0BC92                           BlockBufferColli_Side:
0BC92 A9 01                            lda #$01       ;set flag to return horizontal coordinate
0BC94                                  ;ldx #$00       ;set offset for player object
0BC94                           
0BC94                           BlockBufferCollision:
0BC94 48                               pha                         ;save contents of A to stack
0BC95 84 04                            sty $04                     ;save contents of Y here
0BC97 B9 18 BC                         lda BlockBuffer_X_Adder1,y   ;add horizontal coordinate
0BC9A 18                               clc                         ;of object to value obtained using Y as offset
0BC9B 65 78                            adc SprObject_X_Position
0BC9D 85 05                            sta $05                     ;store here
0BC9F A5 5F                     	   lda SprObject_PageLoc    ;of indirect here
0BCA1 69 66                     	   adc #$66
0BCA3 85 F8                     	   sta $f8
0BCA5 8D AA 60                  	   sta Player_X_Column
0BCA8                           	   ;lda SprObject_PageLoc       ;get LSB, mask out all other bits
0BCA8                                  ;lsr                         ;move to carry
0BCA8 A4 05                            ldy $05
0BCAA B9 24 BD                  	   lda MSBtoLSB,y
0BCAD 85 F7                     	   sta $f7                     ;store here and leave
0BCAF A4 04                            ldy $04                     ;get old contents of Y
0BCB1                           	   
0BCB1                           	   ;jsr TheLagMaker			   ;if need to lag the game to an unplayable level, uncomment this
0BCB1                           	   
0BCB1 A5 C0                            lda SprObject_Y_Position  ;get vertical coordinate of object
0BCB3 18                               clc
0BCB4 79 64 BC                         adc BlockBuffer_Y_Adder2,y   ;add it to value obtained using Y as offset
0BCB7 29 F0                            and #%11110000              ;mask out low nybble
0BCB9 85 02                            sta $02                     ;store result here
0BCBB A8                               tay                         ;use as offset for block buffer
0BCBC B1 F7                            lda ($f7),y                 ;check current content of block buffer
0BCBE 85 03                            sta $03                     ;and store here
0BCC0 A4 04                            ldy $04                     ;get old contents of Y again
0BCC2 68                               pla                         ;pull A from stack
0BCC3 D0 0C                            bne RetXC                   ;if A = 1, branch
0BCC5 A5 C0                            lda SprObject_Y_Position  ;if A = 0, load vertical coordinate
0BCC7 29 0F                            and #%00001111              ;and mask out high nybble
0BCC9 85 04                            sta $04                     ;store masked out result here
0BCCB A6 03                            ldx $03                     ;get saved content of block buffer
0BCCD BD FA B8                  	   lda MetatileThingy,x
0BCD0 60                               rts  					   ;and leave, again...
0BCD1 A5 78                     RetXC: lda SprObject_X_Position  ;otherwise load horizontal coordinate
0BCD3 29 0F                            and #%00001111              ;and mask out high nybble
0BCD5 85 04                            sta $04                     ;store masked out result here
0BCD7 A6 03                            ldx $03                     ;get saved content of block buffer
0BCD9 BD FA B8                  	   lda MetatileThingy,x
0BCDC 60                               rts                         ;and leave
0BCDD                           
0BCDD                           KillPlant:
0BCDD BC C4 63                  	  ldy SavedOffset,x
0BCE0 A9 02                     	  lda #$02
0BCE2 99 AC 62                  	  sta Saved_isDefeated,y
0BCE5 AD 9F 07                  	  lda StarInvincibleTimer
0BCE8 F0 22                     	  beq +
0BCEA EE 1F 60                  	  inc StarChainCounter
0BCED B5 1C                     	  lda Enemy_State,x
0BCEF 29 1F                           and #%00011111            ;mask out 2 MSB of enemy object's state
0BCF1 09 20                           ora #%00100000            ;set d5 to defeat enemy and save as new state
0BCF3 95 1C                           sta Enemy_State,x
0BCF5 A9 08                     	  lda #Sfx_EnemySmack      ;play smack enemy sound
0BCF7 0D 51 60                  	  ora tempA
0BCFA 85 F0                           sta Square1SoundQueue
0BCFC AD 25 60                  	  lda EnemyDefeatPitch     ;get chain counter for shell
0BCFF C9 0B                     	  cmp #$0b
0BD01 F0 03                     	  beq ++
0BD03 EE 25 60                  	  inc EnemyDefeatPitch
0BD06                           ++:
0BD06 AD 1F 60                  	  lda StarChainCounter
0BD09 4C 02 DB                  	  jmp SetupFloateyNumber
0BD0C B5 1C                     +:    lda Enemy_State,x
0BD0E 29 1F                           and #%00011111            ;mask out 2 MSB of enemy object's state
0BD10 09 20                           ora #%00100000            ;set d5 to defeat enemy and save as new state
0BD12 95 1C                           sta Enemy_State,x
0BD14 A9 08                     	  lda #Sfx_EnemySmack      ;play smack enemy sound
0BD16 0D 51 60                  	  ora tempA
0BD19 85 F0                           sta Square1SoundQueue
0BD1B A9 00                     	  lda #$00
0BD1D 95 0F                     	  sta Enemy_Flag,x
0BD1F A9 02                     	  lda #$02
0BD21 4C 02 DB                  	  jmp SetupFloateyNumber
0BD24                           
0BD24                           MSBtoLSB:
0BD24 00 00 00 00 00 00 00 00.. 	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
0BD34 01 01 01 01 01 01 01 01.. 	.db $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
0BD44 02 02 02 02 02 02 02 02.. 	.db $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
0BD54 03 03 03 03 03 03 03 03.. 	.db $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03
0BD64                           	
0BD64 04 04 04 04 04 04 04 04.. 	.db $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04
0BD74 05 05 05 05 05 05 05 05.. 	.db $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05, $05
0BD84 06 06 06 06 06 06 06 06.. 	.db $06, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06, $06
0BD94 07 07 07 07 07 07 07 07.. 	.db $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07, $07
0BDA4                           	
0BDA4 08 08 08 08 08 08 08 08.. 	.db $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08, $08
0BDB4 09 09 09 09 09 09 09 09.. 	.db $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09, $09
0BDC4 0A 0A 0A 0A 0A 0A 0A 0A.. 	.db $0a, $0a, $0a, $0a, $0a, $0a, $0a, $0a, $0a, $0a, $0a, $0a, $0a, $0a, $0a, $0a
0BDD4 0B 0B 0B 0B 0B 0B 0B 0B.. 	.db $0b, $0b, $0b, $0b, $0b, $0b, $0b, $0b, $0b, $0b, $0b, $0b, $0b, $0b, $0b, $0b
0BDE4                           
0BDE4 0C 0C 0C 0C 0C 0C 0C 0C.. 	.db $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
0BDF4 0D 0D 0D 0D 0D 0D 0D 0D.. 	.db $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d
0BE04 0E 0E 0E 0E 0E 0E 0E 0E.. 	.db $0e, $0e, $0e, $0e, $0e, $0e, $0e, $0e, $0e, $0e, $0e, $0e, $0e, $0e, $0e, $0e
0BE14 0F 0F 0F 0F 0F 0F 0F 0F.. 	.db $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f, $0f
0BE24                           	  
0BE24                           LSBtoMSB:
0BE24 00 10 20 30 40 50 60 70.. 	.db $00, $10, $20, $30, $40, $50, $60, $70, $80, $90, $a0, $b0, $c0, $d0, $e0, $f0
0BE34 00 10 20 30 40 50 60 70.. 	.db $00, $10, $20, $30, $40, $50, $60, $70, $80, $90, $a0, $b0, $c0, $d0, $e0, $f0
0BE44 00 10 20 30 40 50 60 70.. 	.db $00, $10, $20, $30, $40, $50, $60, $70, $80, $90, $a0, $b0, $c0, $d0, $e0, $f0
0BE54 00 10 20 30 40 50 60 70.. 	.db $00, $10, $20, $30, $40, $50, $60, $70, $80, $90, $a0, $b0, $c0, $d0, $e0, $f0
0BE64                           	
0BE64 00 10 20 30 40 50 60 70.. 	.db $00, $10, $20, $30, $40, $50, $60, $70, $80, $90, $a0, $b0, $c0, $d0, $e0, $f0
0BE74 00 10 20 30 40 50 60 70.. 	.db $00, $10, $20, $30, $40, $50, $60, $70, $80, $90, $a0, $b0, $c0, $d0, $e0, $f0
0BE84 00 10 20 30 40 50 60 70.. 	.db $00, $10, $20, $30, $40, $50, $60, $70, $80, $90, $a0, $b0, $c0, $d0, $e0, $f0
0BE94 00 10 20 30 40 50 60 70.. 	.db $00, $10, $20, $30, $40, $50, $60, $70, $80, $90, $a0, $b0, $c0, $d0, $e0, $f0
0BEA4                           	
0BEA4 00 10 20 30 40 50 60 70.. 	.db $00, $10, $20, $30, $40, $50, $60, $70, $80, $90, $a0, $b0, $c0, $d0, $e0, $f0
0BEB4 00 10 20 30 40 50 60 70.. 	.db $00, $10, $20, $30, $40, $50, $60, $70, $80, $90, $a0, $b0, $c0, $d0, $e0, $f0
0BEC4 00 10 20 30 40 50 60 70.. 	.db $00, $10, $20, $30, $40, $50, $60, $70, $80, $90, $a0, $b0, $c0, $d0, $e0, $f0
0BED4 00 10 20 30 40 50 60 70.. 	.db $00, $10, $20, $30, $40, $50, $60, $70, $80, $90, $a0, $b0, $c0, $d0, $e0, $f0
0BEE4                           	
0BEE4 00 10 20 30 40 50 60 70.. 	.db $00, $10, $20, $30, $40, $50, $60, $70, $80, $90, $a0, $b0, $c0, $d0, $e0, $f0
0BEF4 00 10 20 30 40 50 60 70.. 	.db $00, $10, $20, $30, $40, $50, $60, $70, $80, $90, $a0, $b0, $c0, $d0, $e0, $f0
0BF04 00 10 20 30 40 50 60 70.. 	.db $00, $10, $20, $30, $40, $50, $60, $70, $80, $90, $a0, $b0, $c0, $d0, $e0, $f0
0BF14 00 10 20 30 40 50 60 70.. 	.db $00, $10, $20, $30, $40, $50, $60, $70, $80, $90, $a0, $b0, $c0, $d0, $e0, $f0
0BF24                           
0BF24                           
0BF24                           BridgeCollapseData:
0BF24 1A                              .db $1a ;axe
0BF25 98 96 94 92 90 8E 8C            .db $98, $96, $94, $92, $90, $8e, $8c ;bridge
0BF2C 8A 88 86 84 82 80               .db $8a, $88, $86, $84, $82, $80
0BF32                           ;-------------------------------------------------------------------------------------
0BF32                           ;$00-$01 - used to hold tiles for drawing the power-up, $00 also used to hold power-up type
0BF32                           ;$02 - used to hold bottom row Y position
0BF32                           ;$03 - used to hold flip control (not used here)
0BF32                           ;$04 - used to hold sprite attributes
0BF32                           ;$05 - used to hold X position
0BF32                           ;$07 - counter
0BF32                           
0BF32                           ;tiles arranged in top left, right, bottom left, right order
0BF32                           DrawPowerUp:
0BF32 BD C5 03                        lda Enemy_SprAttrib,x  ;get power-up's sprite data offset
0BF35 8D B5 7F                  	  sta $7fb5
0BF38 8E B6 7F                  	  stx $7fb6
0BF3B BC E5 06                        ldy Enemy_SprDataOffset,x
0BF3E 8C B4 7F                  	  sty $7fb4
0BF41 AD B9 03                  	  lda Enemy_Rel_YPos         ;get relative vertical coordinate
0BF44 18                              clc
0BF45 69 08                           adc #$08                   ;add eight pixels
0BF47 85 02                           sta $02                    ;store result here
0BF49 AD AE 03                        lda Enemy_Rel_XPos         ;get relative horizontal coordinate
0BF4C 85 05                           sta $05                    ;store here
0BF4E BD CE 7F                  	  lda $7fce,x
0BF51 AA                        	  tax
0BF52                                 ;ldx PowerUpType            ;get power-up type
0BF52 BD C4 AD                        lda PowerUpAttributes,x    ;get attribute data for power-up type
0BF55 0D B5 7F                        ora $7fb5     			 ;add background priority bit if set
0BF58 85 04                           sta $04                    ;store attributes here
0BF5A 8A                              txa
0BF5B 48                              pha                        ;save power-up type to the stack
0BF5C 0A                              asl
0BF5D 0A                              asl                        ;multiply by four to get proper offset
0BF5E AA                              tax                        ;use as X
0BF5F A9 01                           lda #$01
0BF61 85 07                           sta $07                    ;set counter here to draw two rows of sprite object
0BF63 AD B8 7F                        lda $7fb8
0BF66 F0 08                     	  beq +
0BF68 E0 14                     	  cpx #$14
0BF6A F0 06                     	  beq PUpDrawLoop
0BF6C E0 24                     	  cpx #$24
0BF6E F0 02                     	  beq PUpDrawLoop
0BF70 85 03                     +:	  sta $03                    ;init d1 of flip control
0BF72                           PUpDrawLoop:
0BF72 BD B4 AD                          lda PowerUpGfxTable,x      ;load left tile of power-up object
0BF75 85 00                             sta $00
0BF77 BD B5 AD                          lda PowerUpGfxTable+1,x    ;load right tile
0BF7A 20 09 F5                          jsr DrawOneSpriteRow       ;branch to draw one row of our power-up object
0BF7D C6 07                             dec $07                    ;decrement counter
0BF7F 10 F1                             bpl PUpDrawLoop            ;branch until two rows are drawn
0BF81 AC B4 7F                          ldy $7fb4  				   ;get sprite data offset again
0BF84 68                                pla                        ;pull saved power-up type from the stack
0BF85 F0 2F                             beq PUpOfs                 ;if regular mushroom, branch, do not change colors or flip
0BF87 C9 03                             cmp #$03
0BF89 F0 2B                             beq PUpOfs                 ;if 1-up mushroom, branch, do not change colors or flip
0BF8B 85 00                             sta $00                    ;store power-up type here now
0BF8D A5 09                             lda FrameCounter           ;get frame counter
0BF8F 4A                                lsr                        ;divide by 2 to change colors every two frames
0BF90 29 03                             and #%00000011             ;mask out all but d1 and d0 (previously d2 and d1)
0BF92 0D B5 7F                          ora $7fb5      			   ;add background priority bit if any set
0BF95 99 02 02                          sta Sprite_Attributes,y    ;set as new palette bits for top left and
0BF98 99 06 02                          sta Sprite_Attributes+4,y  ;top right sprites for fire flower and star
0BF9B A6 00                             ldx $00
0BF9D CA                                dex                        ;check power-up type for fire flower
0BF9E F0 06                             beq FlipPUpRightSide       ;if found, skip this part
0BFA0 99 0A 02                          sta Sprite_Attributes+8,y  ;otherwise set new palette bits  for bottom left
0BFA3 99 0E 02                          sta Sprite_Attributes+12,y ;and bottom right sprites as well for star only
0BFA6                           
0BFA6                           FlipPUpRightSide:
0BFA6 B9 06 02                          lda Sprite_Attributes+4,y
0BFA9 09 40                             ora #%01000000             ;set horizontal flip bit for top right sprite
0BFAB 99 06 02                          sta Sprite_Attributes+4,y
0BFAE B9 0E 02                          lda Sprite_Attributes+12,y
0BFB1 09 40                             ora #%01000000             ;set horizontal flip bit for bottom right sprite
0BFB3 99 0E 02                          sta Sprite_Attributes+12,y ;note these are only done for fire flower and star power-ups
0BFB6 4C 6A F6                  PUpOfs: jmp SprObjectOffscrChk     ;jump to check to see if power-up is offscreen at all, then leave
0BFB9                           
0BFB9                                
0BFB9                           
0BFB9 00 00 00 00 00 00 00 00.. pad $c000
0C000                           
0C000                           ; bank 01 -- custom code
0C000                           base $8000
08000 01                        .db $01                     ; bank identifier
08001                           include code\bank01.asm
08001                           
08001                           
08001                           
08001                           
08001                           
08001                           ; THIS CODE SUCKS!!!!!!!!! :))))))
08001                           
08001                           
08001                           
08001                           
08001                           
08001                           
08001                           include code\mmc3.asm
08001                           MMC3Setup:
08001 A9 80                              lda #$80
08003 8D C5 05                           sta Old8000
08006 8D 00 80                  		 sta $8000
08009 A9 00                     		 lda #$00
0800B 8D 01 80                           sta $8001
0800E 8D 00 A0                           sta $a000
08011                           		 ;lda #$1f
08011                                    ;sta $c000
08011                           		 ;lda #$00
08011 8D 01 C0                           sta $c001
08014 8D 00 E0                           sta $e000
08017 A9 80                     		 lda #%10000000
08019 8D 01 A0                  		 sta $a001
0801C A9 01                     		 lda #$01				;set on block by default
0801E 8D 53 60                  		 sta OnOffBits
08021 8D 74 89                  		 sta OnOffCb
08024 A2 05                              ldx #$05
08026 A0 85                     		 ldy #$85
08028                           LoopMMC3Setup:
08028 8C C5 05                  		 sty Old8000
0802B 8C 00 80                           sty $8000
0802E BD 8F 80                           lda MMC3SetupTable,x
08031 8D 01 80                           sta $8001
08034 88                        		 dey
08035 CA                                 dex
08036 10 F0                              bpl LoopMMC3Setup
08038 A9 60                     		 lda #$60
0803A 85 01                     		 sta $01
0803C A9 00                     		 lda #$00
0803E 85 00                     		 sta $00
08040 A2 1E                     		 ldx #$1e
08042 A0 00                     		 ldy #$00
08044 91 00                     -:		 sta ($00),y
08046 C8                        		 iny
08047 D0 FB                     		 bne -
08049 E6 01                     		 inc $01
0804B CA                        		 dex
0804C 10 F6                     		 bpl -
0804E A9 66                     		 lda #$66
08050 85 F8                     		 sta $f8
08052 A9 02                     		 lda #$02
08054 8D B9 63                  		 sta SettingSelec
08057 AD BC 7F                  		 lda SavedWord
0805A C9 69                     		 cmp #$69
0805C D0 0F                     		 bne +
0805E AD BD 7F                  		 lda SavedWord+1
08061 C9 42                     		 cmp #$42
08063 D0 08                     		 bne +
08065 AD BE 7F                  		 lda SavedWord+2
08068 C9 45                     		 cmp #69
0806A D0 01                     		 bne +
0806C                           		 ;lda #$20
0806C                           		 ;sta $7f03
0806C                           		 ;lda #$80
0806C                           		 ;sta $ff
0806C 60                        		 rts
0806D A2 00                     +:		 ldx #$00	 
0806F A9 00                     -:		 lda #$00
08071 9D 00 7F                  		 sta SavedScore,x
08074 E8                        		 inx
08075 D0 F8                     		 bne -
08077 A9 69                     		 lda #$69
08079 8D BC 7F                  		 sta SavedWord
0807C A9 42                     		 lda #$42
0807E 8D BD 7F                  		 sta SavedWord+1
08081 A9 45                     		 lda #69
08083 8D BE 7F                  		 sta SavedWord+2
08086 A9 02                     		 lda #$02
08088 8D 0B 7E                  		 sta FirstFrame
0808B EE 0C 7E                  		 inc FirstBootFlag
0808E 60                        		 rts
0808F                           MMC3SetupTable:
0808F 00 02 04 05 06 07               .db $00, $02, $04, $05, $06, $07
08095                           
08095                           ;setMirroring:
08095                           ;    sta $a000
08095                           ;    rts
08095                               
08095                           ; setLeftCHR sets both left CHR banks
08095                           ; setRightCHR sets all 4 right CHR banks
08095                           ;
08095                           ; The chr is divided like this (but it can be 
08095                           ; inverted to switch which side gets 2 and which
08095                           ; side gets 4 banks).
08095                           ;
08095                           ;______________________  ______________________
08095                           ;| 0                  |  | 2                  |
08095                           ;|                    |  |____________________|
08095                           ;|                    |  | 3                  |
08095                           ;|____________________|  |____________________|
08095                           ;| 1                  |  | 4                  |
08095                           ;|                    |  |____________________|
08095                           ;|                    |  | 5                  |
08095                           ;|____________________|  |____________________|
08095                           
08095                           ; The values used are as if they were all 2k banks.
08095                           ; An example of the values is:
08095                           ; CHR0: 0
08095                           ; CHR1: 2
08095                           ; CHR2: 4
08095                           ; CHR3: 5
08095                           ; CHR4: 6
08095                           ; CHR5: 7
08095                           
08095                           setCHR:
08095                               ;lda #$00
08095                               ;sta Old8000
08095                            ;sta $8000
08095                               ;lda CHR0
08095                               ;sta $8001
08095                           
08095                               ;lda #$01
08095                               ;sta Old8000
08095                           ; sta $8000
08095                               ;lda CHR1
08095                               ;sta $8001
08095                               
08095                               ;lda #$02
08095                               ;sta Old8000
08095                            ;sta $8000
08095                               ;lda CHR2
08095                               ;sta $8001
08095                           
08095 A9 83                         lda #$83
08097 8D C5 05                      sta Old8000
0809A 8D 00 80                  	sta $8000
0809D AD 03 7E                      lda CHR3
080A0 8D CC 05                  	sta LastCHR3
080A3 8D 01 80                      sta $8001
080A6                           
080A6                               ;lda #$84
080A6                               ;;sta $8000
080A6                               ;lda CHR4
080A6                               ;sta $8001
080A6                           
080A6 AE 53 60                  	ldx OnOffBits
080A9 AD 4E 07                  	lda AreaType
080AC D0 03                     	bne +
080AE AA                        	tax
080AF CB FC                     	axs #-4
080B1 BD 74 89                  +:	lda OnOffCb,x	;load depending of on block and pswitch flag
080B4 A8                        	tay
080B5 A9 85                     	lda #$85
080B7 8D C5 05                  	sta Old8000
080BA 8D 00 80                   sta $8000
080BD 98                        	tya
080BE 8D 01 80                  	sta $8001
080C1                           
080C1                               ;lda #$05
080C1                               ;sta Old8000
080C1                            ;sta $8000
080C1                               ;lda CHR5
080C1                               ;sta $8001
080C1 60                        	rts
080C2                               
080C2                           setLeftCHR:
080C2 AA                            tax
080C3 8E 00 7E                      stx CHR0
080C6 E8                            inx
080C7 E8                            inx
080C8 8E 01 7E                      stx CHR1
080CB 4C 95 80                      jmp setCHR
080CE                           
080CE                           setRightCHR:
080CE AA                            tax
080CF 8E 02 7E                      stx CHR2
080D2 E8                            inx
080D3 8E 03 7E                      stx CHR3
080D6 E8                            inx
080D7 8E 04 7E                      stx CHR4
080DA E8                            inx
080DB 8E 05 7E                      stx CHR5
080DE 4C 95 80                      jmp setCHR
080E1                               
080E1                           setLeftCHRDirect:
080E1 AA                            tax
080E2 A9 80                         lda #$80
080E4 8D C5 05                      sta Old8000
080E7 8D 00 80                   sta $8000
080EA 8E 01 80                      stx $8001
080ED                           
080ED A9 81                         lda #$81
080EF 8D C5 05                      sta Old8000
080F2 8D 00 80                   sta $8000
080F5 E8                            inx
080F6 E8                            inx
080F7 8E 01 80                      stx $8001
080FA 60                        	rts
080FB                           
080FB                           
080FB                           setRightCHRDirect:
080FB AA                            tax
080FC A9 82                         lda #$82
080FE 8D C5 05                      sta Old8000
08101 8D 00 80                   sta $8000
08104 8E 01 80                      stx $8001
08107                               
08107 A9 83                         lda #$83
08109 8D C5 05                      sta Old8000
0810C 8D 00 80                  	sta $8000
0810F E8                            inx
08110 8E 01 80                      stx $8001
08113                               
08113 A9 84                         lda #$84
08115 8D C5 05                      sta Old8000
08118 8D 00 80                   sta $8000
0811B E8                            inx
0811C 8E 01 80                      stx $8001
0811F                               
0811F A9 85                         lda #$85
08121 8D C5 05                      sta Old8000
08124 8D 00 80                   sta $8000
08127 E8                            inx
08128 8E 01 80                      stx $8001
0812B 60                        	rts0812C                           ;include code\lagmaker.asm
0812C                           
0812C                           MessageBoxData_Low:
0812C 2E                        	.db <MessageBoxData
0812D                           MessageBoxData_High:
0812D 81                        	.db >MessageBoxData
0812E                           MessageBoxData:
0812E 25 26 26 26 26 26 26 26.. .db $25, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $26, $2a
0814E 2B 24 24 24 24 24 24 24.. .db $2b, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $2c
0816E 2B 24 24 24 24 24 24 24.. .db $2b, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $2c
0818E 2B 24 24 24 24 24 24 24.. .db $2b, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $2c
081AE 2B 24 24 24 24 24 24 24.. .db $2b, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $2c
081CE 2B 24 24 24 24 24 24 24.. .db $2b, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $2c
081EE 2B 24 24 24 24 24 24 24.. .db $2b, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $2c
0820E 2B 24 24 24 24 24 24 24.. .db $2b, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $2c
0822E 2B 24 24 24 24 24 24 24.. .db $2b, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $2c
0824E 2B 24 24 24 24 24 24 24.. .db $2b, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $24, $2c
0826E 28 27 27 27 27 27 27 27.. .db $28, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $27, $29
0828E FF                        .db $ff
0828F                           ASCII2CHR:
0828F 24 5B 80 5D 5E 5F 81 82.. 	.db $24, $5b, $80, $5d, $5e, $5f, $81, $82, $60, $61, $83, $62, $2d, $63, $2e, $84, $00, $01, $02, $03, $04, $05
082A5 06 07 08 09 3A 3B 64 66.. 	.db $06, $07, $08, $09, $3a, $3b, $64, $66, $65, $5a, $5c, $0a, $0b, $0c, $0d, $0e, $0f, $10, $11, $12, $13
082BA 14 15 16 17 18 19 1A 1B.. 	.db $14, $15, $16, $17, $18, $19, $1a, $1b, $1c, $1d, $1e, $1f, $20, $21, $22, $23, $80, $81, $82, $6d, $6f
082CF 84 40 41 42 43 44 45 46.. 	.db $84, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $4a, $4b, $4c, $4d, $4e, $4f, $50, $51, $52, $53
082E4 54 55 56 57 58 59 7B 7C.. 	.db $54, $55, $56, $57, $58, $59, $7b, $7c, $7d
082ED                           
082ED 6E 69 6A 6B 6C 67 68      	.db $6e, $69, $6a, $6b, $6c, $67, $68 ;button emojis
082F4                           
082F4 48 65 6C 6C 6F 21 20 57.. TestText: .db "Hello! Welcome to this world.", $fc, "In this world you can go", $fc ,"backwards and grab shells!", $ff ;01
08346 49 66 20 79 6F 75 20 70.. ID01:	.db "If you pause, you can save", $fc, "your game. Just select quit", $fc, "and save and then you can", $fc, "continue playing later.", $ff ;02
083AF 49 66 20 79 6F 75 20 68.. VeryLongText: .db "If you hold ", UP, " when releasing a", $fc, "shell, you will throw it", $fc, "upwards and if you hold ", DOWN, " you will release the shell gently", $fc, "on the floor." ,$ff ;03
08431 57 65 6C 63 6F 6D 65 20.. Jigas: .db "Welcome to the beach! Come", $fc, "here and relax a bit.", $ff ;04
08462 59 6F 75 20 63 61 6E 20.. ID05: .db "You can swim in water in this hack! Use ", UP , " + ", Abutton, " to exit the", $fc, "water.", $ff ;05
084A3 49 6E 20 74 68 69 73 20.. Structured: .db "In this video I will be", $fc, "explaining exactly what I do", $fc, "to collect Watch for Rolling", $fc, "Rocks in 0.5xA presses.", $fd, "But first, we need to clear", $fc, "something up.", $ff ;06
08537 59 6F 75 20 77 69 6C 6C.. Firefox: .db "You will never reach the", $fc, "princess! Bwahahaha", $fc, "                       -Bowser", $ff ;07
08583                           
08583                           Textbox_Low:
08583 F4 46 AF 31 62 A3 37      	.dl TestText, ID01, VeryLongText, Jigas, ID05, Structured, Firefox
0858A                           Textbox_High:
0858A 82 83 83 84 84 84 85      	.dh TestText, ID01, VeryLongText, Jigas, ID05, Structured, Firefox
08591                           
08591 60                        -:  rts
08592                           SetupTextbox:
08592 AD 2C 81                  	lda MessageBoxData_Low
08595 85 FD                     	sta $fd
08597 AD 2D 81                  	lda MessageBoxData_High
0859A 85 FE                     	sta $fe
0859C                           	
0859C AD 02 20                  	lda PPU_STATUS	
0859F AD 78 07                  	lda Mirror_PPU_CTRL_REG1
085A2 29 EB                     	and #%11101011            ;only increment by 1
085A4 8D 00 20                  	sta PPU_CTRL_REG1         ;write contents of A to PPU register 1
085A7 8D 78 07                      sta Mirror_PPU_CTRL_REG1  ;and its mirror
085AA                           	
085AA A9 2C                     	lda #$2c
085AC 8D 06 20                  	sta PPU_ADDRESS
085AF A9 00                     	lda #$00
085B1 8D 01 20                  	sta PPU_CTRL_REG2
085B4 8D 06 20                  	sta PPU_ADDRESS
085B7 A0 00                     	ldy #$00
085B9 B1 FD                     -:	lda ($fd),y
085BB C9 FF                     	cmp #$ff
085BD F0 13                     	beq +
085BF 8D 07 20                  	sta PPU_DATA
085C2 A5 FD                     	lda $fd
085C4 18                        	clc
085C5 69 01                     	adc #$01
085C7 85 FD                     	sta $fd
085C9 A5 FE                     	lda $fe
085CB 69 00                     	adc #$00
085CD 85 FE                     	sta $fe
085CF 4C B9 85                  	jmp -
085D2 A9 1E                     +:	lda #%00011110
085D4 8D 79 07                  	sta Mirror_PPU_CTRL_REG2
085D7 A9 20                     	lda #$20                  ;sets vram address to $3f00
085D9 8D 06 20                      sta PPU_ADDRESS
085DC A9 A0                         lda #$a0
085DE 8D 06 20                      sta PPU_ADDRESS
085E1 A9 00                     	lda #$00
085E3 A8                        	tay				;set y to 0 :)
085E4 88                        -:	dey
085E5 99 00 64                  	sta $6400,y
085E8 D0 FA                     	bne -
085EA 60                        	rts
085EB 4C 05 87                  -:  jmp ScrollTextBox
085EE                           	
085EE                           	
085EE                           ; DisplayTextbox
085EE                           DisplayTextbox:
085EE A9 81                     ++:	lda #$81
085F0 8D C6 05                  	sta StartedTextBox
085F3 8D 76 07                      sta GamePauseStatus
085F6 AD C3 05                  	lda IncrementedTxtHAdd
085F9 D0 0D                     	bne +
085FB AC C1 05                  	ldy TextboxID
085FE B9 82 85                  	lda Textbox_Low-1,y
08601 85 FD                     	sta $fd
08603 B9 89 85                  	lda Textbox_High-1,y
08606 85 FE                     	sta $fe
08608                           +:	
08608 AD C9 05                  	lda ScrollText
0860B D0 DE                     	bne -
0860D AC C2 05                  	ldy CurrentChar
08610 B1 FD                     	lda ($fd),y
08612 C9 FF                     	cmp #$ff
08614 F0 7C                     	beq NeedsWaitForInputAndEnd
08616 C9 FE                     	cmp #$fe
08618 F0 7B                     	beq NeedsContinueChar
0861A C9 FD                     	cmp #$fd
0861C F0 7D                     	beq NeedsWaitAndScrollNoDec
0861E C9 FC                     	cmp #$fc
08620 F0 7F                     	beq NewLineChar
08622 AD C2 05                  	lda CurrentChar
08625 18                        	clc
08626 69 01                     	adc #$01
08628 8D C2 05                  	sta CurrentChar
0862B 90 05                     	bcc	+
0862D E6 FE                     	inc $fe
0862F EE C3 05                  	inc IncrementedTxtHAdd
08632 48                        +:	pha
08633 AE 00 64                  	ldx VRAM_Buffer1_Offset
08636 A9 2C                     	lda #$2c
08638 9D 01 64                  	sta VRAM_Buffer1,x
0863B AD C2 05                  	lda CurrentChar
0863E 18                        	clc
0863F 69 20                     	adc #$20
08641 18                        	clc
08642 6D C7 05                  	adc SomeOffset
08645 C9 20                     	cmp #$20
08647 90 4F                     	bcc NeedsNewLine
08649 C9 9E                     	cmp #$9e
0864B F0 51                     	beq NeedsWaitAndScroll
0864D C9 9F                     	cmp #$9f
0864F B0 47                     	bcs NeedsNewLine
08651 A0 06                     	ldy #$06
08653 D9 0E 88                  -:	cmp TableOfCompares,y
08656 F0 40                     	beq NeedsNewLine
08658 88                        	dey
08659 10 F8                     	bpl -
0865B 9D 02 64                  	sta VRAM_Buffer1+1,x
0865E A9 01                     	lda #$01
08660 9D 03 64                  	sta VRAM_Buffer1+2,x
08663 68                        	pla
08664 A8                        	tay
08665 88                        	dey
08666 C0 FE                     	cpy #$fe
08668 D0 05                     	bne +
0866A C8                        	iny
0866B B1 FD                     	lda ($fd),y
0866D 88                        	dey
0866E 2C                        	.db $2c
0866F B1 FD                     +:	lda ($fd),y
08671 D0 02                     	bne +
08673 A9 20                     	lda #$20
08675 38                        +:	sec
08676 E9 20                     	sbc #$20					;substract lowest ascii char for smaller table
08678 8E CC 63                  	stx tempE
0867B AA                        	tax
0867C BD 8F 82                  	lda ASCII2CHR,x
0867F AE CC 63                  	ldx tempE
08682 9D 04 64                  	sta VRAM_Buffer1+3,x
08685 A9 00                     	lda #$00
08687 9D 05 64                  	sta VRAM_Buffer1+4,x
0868A 8A                        	txa
0868B 18                        	clc
0868C 69 04                     	adc #$04
0868E 8D 00 64                  	sta VRAM_Buffer1_Offset
08691 60                        	rts
08692 4C C2 87                  NeedsWaitForInputAndEnd: jmp WaitForInputAndEnd
08695 4C 15 88                  NeedsContinueChar: jmp ContinueChar
08698 4C B2 87                  NeedsNewLine: jmp NewLine
0869B 4C CA 86                  NeedsWaitAndScrollNoDec: jmp WaitAndScrollNoDec
0869E 4C E7 86                  NeedsWaitAndScroll:	jmp WaitAndScroll
086A1                           NewLineChar:
086A1 AD C2 05                  	lda CurrentChar
086A4 18                        	clc
086A5 69 20                     	adc #$20
086A7 18                        	clc
086A8 6D C7 05                  	adc SomeOffset
086AB C9 80                     	cmp #$80
086AD B0 1B                     	bcs WaitAndScrollNoDec
086AF                           -:
086AF AD C2 05                  	lda CurrentChar
086B2 18                        	clc
086B3 69 20                     	adc #$20
086B5 18                        	clc
086B6 6D C7 05                  	adc SomeOffset
086B9 29 1F                     	and #$1f
086BB F0 06                     	beq +
086BD EE C7 05                  	inc SomeOffset
086C0 4C AF 86                  	jmp -
086C3                           	
086C3 CE C7 05                  +:	dec SomeOffset
086C6 EE C2 05                  	inc CurrentChar
086C9 60                        	rts
086CA                           
086CA                           	
086CA                           WaitAndScrollNoDec:
086CA AD C9 05                  	lda ScrollText
086CD D0 36                     	bne ScrollTextBox
086CF 20 15 88                  	jsr ContinueChar
086D2 AD E7 63                  	lda tempG
086D5 38                        	sec 
086D6 ED E6 63                  	sbc tempF
086D9 F0 08                     	beq +
086DB 30 06                     	bmi +
086DD EE C9 05                  	inc ScrollText
086E0 EE C2 05                  	inc CurrentChar
086E3 CE C2 05                  +:	dec CurrentChar
086E6 60                        	rts
086E7                           WaitAndScroll:
086E7 68                        	pla
086E8 AD C9 05                  	lda ScrollText
086EB D0 18                     	bne ScrollTextBox
086ED 20 15 88                  	jsr ContinueChar
086F0 AD E7 63                  	lda tempG
086F3 38                        	sec 
086F4 ED E6 63                  	sbc tempF
086F7 F0 08                     	beq +
086F9 30 06                     	bmi +
086FB EE C9 05                  	inc ScrollText
086FE CE C2 05                  	dec CurrentChar
08701 CE C2 05                  +:	dec CurrentChar
08704 60                        	rts
08705                           ScrollTextBox:	
08705 AD C8 05                  	lda TextBoxYScroll
08708 29 F8                     	and #%11111000
0870A F0 38                     	beq +++
0870C 4A                        	lsr
0870D 4A                        	lsr
0870E 4A                        	lsr
0870F A8                        	tay
08710 B9 8B 87                  	lda TextBoxYClearTable,y
08713 8D 57 60                  	sta tempC
08716 AE 00 64                  	ldx VRAM_Buffer1_Offset
08719 A9 2C                     	lda #$2c
0871B 9D 01 64                  	sta VRAM_Buffer1,x
0871E A9 20                     	lda #$20
08720 18                        	clc 
08721 6D 57 60                  	adc tempC
08724 9D 02 64                  	sta VRAM_Buffer1+1,x
08727 A9 20                     	lda #$20
08729 9D 03 64                  	sta VRAM_Buffer1+2,x
0872C A0 1F                     	ldy #$1f
0872E                           -:	
0872E B9 92 87                  	lda ScrollLineTable,y
08731 9D 04 64                  	sta VRAM_Buffer1+3,x
08734 E8                        	inx
08735 88                        	dey
08736 10 F6                     	bpl -
08738 A9 00                     	lda #$00
0873A 9D 05 64                  	sta VRAM_Buffer1+4,x
0873D 8A                        	txa
0873E 18                        	clc
0873F 69 04                     	adc #$04
08741 8D 00 64                  	sta VRAM_Buffer1_Offset
08744                           +++:
08744 AD C8 05                  	lda TextBoxYScroll
08747 18                        	clc
08748 69 02                     	adc #$02
0874A 8D C8 05                  	sta TextBoxYScroll
0874D C9 24                     	cmp #$24
0874F 90 25                     	bcc ++
08751 A9 00                     	lda #$00
08753 8D C8 05                  	sta TextBoxYScroll
08756 8D C9 05                  	sta ScrollText
08759 AD C7 05                  	lda SomeOffset
0875C 18                        	clc
0875D 69 83                     	adc #$83
0875F 8D C7 05                  	sta SomeOffset
08762 AD C2 05                  -:	lda CurrentChar
08765 18                        	clc
08766 69 20                     	adc #$20
08768 18                        	clc
08769 6D C7 05                  	adc SomeOffset
0876C C9 21                     	cmp #$21
0876E F0 06                     	beq ++
08770 EE C7 05                  	inc SomeOffset
08773 4C 62 87                  	jmp -
08776 AD C2 05                  ++:	lda CurrentChar
08779 18                        	clc
0877A 69 20                     	adc #$20
0877C 18                        	clc
0877D 6D C7 05                  	adc SomeOffset
08780 A8                        	tay
08781 B1 FD                     	lda ($fd),y
08783 C9 24                     	cmp #$24
08785 F0 03                     	beq +
08787 CE C7 05                  	dec SomeOffset
0878A                           +:	
0878A                           ++: 	
0878A                           +:		
0878A 60                        	rts
0878B                           TextBoxYClearTable:
0878B 00 00 20 40 60 80 A0      	.db $00, $00, $20, $40, $60, $80, $a0
08792                           ScrollLineTable:
08792 2C 24 24 24 24 24 24 24   	.db $2c, $24, $24, $24, $24, $24, $24, $24
0879A 24 24 24 24 24 24 24 24   	.db $24, $24, $24, $24, $24, $24, $24, $24
087A2 24 24 24 24 24 24 24 24   	.db $24, $24, $24, $24, $24, $24, $24, $24
087AA 24 24 24 24 24 24 24 2B   	.db $24, $24, $24, $24, $24, $24, $24, $2b
087B2                           NewLine:
087B2 68                        	pla
087B3 A8                        	tay
087B4 88                        	dey
087B5 EE C7 05                  	inc SomeOffset
087B8 B1 FD                     	lda ($fd),y
087BA C9 24                     	cmp #$24
087BC F0 4D                     	beq +
087BE CE C2 05                  	dec CurrentChar
087C1 60                        	rts
087C2                           WaitForInputAndEnd:
087C2 A5 0A                     	lda A_B_Buttons
087C4 85 0D                     	sta PreviousA_B_Buttons
087C6 4A                        	lsr
087C7 8D E6 63                  	sta tempF
087CA AD FC 06                  	lda SavedJoypadBits         
087CD 29 C0                     	and #%11000000
087CF 85 0A                     	sta A_B_Buttons
087D1 4A                        	lsr
087D2 8D E7 63                  	sta tempG
087D5 38                        	sec 
087D6 ED E6 63                  	sbc tempF
087D9 F0 30                     	beq +
087DB 30 2E                     	bmi +
087DD A0 00                     	ldy #$00
087DF 8C C1 05                  	sty TextboxID
087E2 8C C2 05                  	sty CurrentChar
087E5 8C C3 05                  	sty IncrementedTxtHAdd
087E8 8C C7 05                  	sty SomeOffset
087EB 8C CD 05                  	sty TimesScrolled
087EE 8C C6 05                  	sty StartedTextBox
087F1 A0 06                     	ldy #$06
087F3 8C 02 06                  	sty OldTextboxID
087F6 A9 80                     	lda #$80
087F8 8D 76 07                  	sta GamePauseStatus
087FB A5 0A                     	lda A_B_Buttons
087FD 85 0D                     	sta PreviousA_B_Buttons		;set so no jumping after closing
087FF A9 00                     	lda #$00
08801 A8                        	tay				;set y to 0 :)
08802 88                        -:	dey
08803 99 00 64                  	sta $6400,y
08806 D0 FA                     	bne -
08808 EE 00 06                  	inc ClearRemainings
0880B 60                        +:	rts
0880C                           ContinueThingy:
0880C 2F 24                     	.db $2f, $24
0880E                           TableOfCompares:
0880E 20 40 60 80 3F 5F 7F      	.db $20, $40, $60, $80, $3f, $5f, $7f
08815                           ContinueChar:
08815 A5 0A                     	lda A_B_Buttons
08817 85 0D                     	sta PreviousA_B_Buttons
08819 4A                        	lsr
0881A 8D E6 63                  	sta tempF
0881D AD FC 06                  	lda SavedJoypadBits         
08820 29 C0                     	and #%11000000
08822 85 0A                     	sta A_B_Buttons
08824 4A                        	lsr
08825 8D E7 63                  	sta tempG
08828 38                        	sec 
08829 ED E6 63                  	sbc tempF
0882C F0 29                     	beq +
0882E 30 27                     	bmi +
08830 EE C2 05                  	inc CurrentChar
08833 AE 00 64                  ++:	ldx VRAM_Buffer1_Offset
08836 A9 2C                     	lda #$2c
08838 9D 01 64                  	sta VRAM_Buffer1,x
0883B A9 9E                     	lda #$9e
0883D 9D 02 64                  	sta VRAM_Buffer1+1,x
08840 A9 01                     	lda #$01
08842 9D 03 64                  	sta VRAM_Buffer1+2,x
08845 A9 24                     	lda #$24
08847 9D 04 64                  	sta VRAM_Buffer1+3,x
0884A A9 00                     	lda #$00
0884C 9D 05 64                  	sta VRAM_Buffer1+4,x
0884F 8A                        	txa
08850 18                        	clc
08851 69 04                     	adc #$04
08853 8D 00 64                  	sta VRAM_Buffer1_Offset
08856 60                        	rts
08857                           +:	
08857 AE 00 64                  	ldx VRAM_Buffer1_Offset
0885A A9 2C                     	lda #$2c
0885C 9D 01 64                  	sta VRAM_Buffer1,x
0885F A9 9E                     	lda #$9e
08861 9D 02 64                  	sta VRAM_Buffer1+1,x
08864 A9 01                     	lda #$01
08866 9D 03 64                  	sta VRAM_Buffer1+2,x
08869 A5 09                     	lda FrameCounter
0886B 29 10                     	and #%00010000
0886D 4A                        	lsr
0886E 4A                        	lsr
0886F 4A                        	lsr
08870 4A                        	lsr
08871 A8                        	tay
08872 B9 0C 88                  	lda ContinueThingy,y
08875 9D 04 64                  	sta VRAM_Buffer1+3,x
08878 A9 00                     	lda #$00
0887A 9D 05 64                  	sta VRAM_Buffer1+4,x
0887D 8A                        	txa
0887E 18                        	clc
0887F 69 04                     	adc #$04
08881 8D 00 64                  	sta VRAM_Buffer1_Offset
08884 60                        	rts
08885                           
08885                           
08885                           
08885                           CustomText_AddrTable_Low:
08885 8F C5 CA D4 14                  .db <CustomText0, <Livestext, <WellOk, <MessageCrash1, <EndOfDemo
0888A                           CustomText_AddrTable_High:
0888A 88 88 88 88 89                  .db >CustomText0, >Livestext, >WellOk, >MessageCrash1, >EndOfDemo
0888F                           
0888F                           CustomText0: 
0888F 22 23 59 4F 55 20 43 4F..       .db $22, $23, "YOU COLLECTED 1000 COINS", $af, "            ENJOY WORLD 9", $2b, $00
088C5                           Livestext:
088C5 20 4D 16 29 00            	  .db $20, $4d, $16, $29, $00
088CA                           WellOk:
088CA 22 2C 57 45 4C 4C 20 4F.. 	  .db $22, $2c, "WELL OK", $00
088D4                           MessageCrash1:
088D4 22 02 54 48 49 53 20 47.. 	.db $22, $02, "THIS GAME ONLY RUNS IN FCEUX", $af,"   MESEN OR BIZHAWK NESHAWK CORE", $00
08914                           EndOfDemo:
08914 22 22 54 48 49 53 20 49.. 	.db $22, $22, "THIS IS THE END OF THE DEMO         THANKS FOR PLAYING", $00
0894D                           ; $00 - used to hold low byte of custom text address
0894D                           ; $01 - used to hold high byte of custom text address
0894D                           ; $03 - used to hold ascii handling state
0894D                           ExitHere:
0894D 60                        	rts
0894E                           
0894E 60                        			   rts
0894F                           CustomCode:
0894F                           skipCustomOperModeTask:
0894F AD 72 07                  		 lda OperMode_Task
08952 C9 01                              cmp #$01
08954 D0 1D                              bne xd
08956 AD 3C 07                           lda ScreenRoutineTask                  ; load ScreenRoutineTask
08959 CD 11 60                           cmp $6011                              ; compare it to our stored ScreenRoutineTask
0895C 8D 11 60                           sta $6011                              ; store ScreenRoutineTask
0895F F0 12                              beq xd       ; branch if they're the same
08961                           		 
08961                           		 
08961 AD 5F 07                  		 lda WorldNumber
08964 D0 0D                     		 bne xd
08966 AD 5C 07                  		 lda LevelNumber
08969 C9 03                     		 cmp #$03
0896B D0 06                     		 bne xd
0896D                           		 ;lda FinishedDemo
0896D                           		 ;cmp #$ff
0896D                           		 ;beq xd
0896D                           		 ;inc FinishedDemo
0896D                           		 ;lda FinishedDemo
0896D                           		 ;cmp #$04
0896D                           		 ;bcs xd
0896D                           		 ;lda #$04
0896D                           		 ;jmp LoadCustomText
0896D                                    ; here we run code when ScreenRoutineTask modes are initially set
0896D                                   ; Display a message on intermediate screen
0896D                                   if DEMO_FEATURES == 1
0896D C9 07                                 cmp #$07                               ; check ScreenRoutineTask for DisplayIntermediate
0896F D0 02                                 bne xd                                 ; branch if not
08971                           			
08971 A9 00                                 lda #$00                               ; load message
08973                                       ;jmp LoadCustomText
08973                                   endif
08973                           xd:
08973 60                        		rts
08974                           OnOffCb:
08974 07 0F 87 CF               	.db %00000111, %00001111, %10000111, %11001111 ;Off, On, pswitchOff, pswitchoOn
08978                           OnOffCbW:
08978 17 1F 77 7F               	.db %00010111, %00011111, %01110111, %01111111 ;Off, On, pswitchOff, pswitchoOn (water area)
0897C                           OnOffCHR:
0897C AE 53 60                  		ldx OnOffBits
0897F AD 4E 07                  		lda AreaType
08982 D0 04                     		bne +
08984 E8                        		inx
08985 E8                        		inx
08986 E8                        		inx
08987 E8                        		inx
08988 BD 74 89                  +:		lda OnOffCb,x	;load CHR bank depending if block is on or pswitch is triggered
0898B A8                        		tay
0898C A9 85                     		lda #$85
0898E 8D C5 05                          sta Old8000
08991 8D 00 80                  		sta $8000
08994 98                                tya
08995 8D 01 80                          sta $8001
08998 60                        		rts
08999                           TitleScreenCHR:
08999 A9 01                     		lda #$01	
0899B 8D 01 60                  		sta ChangeBankRDelay
0899E AD 38 60                  		lda StartTimer
089A1 F0 03                     		beq Est					;if loading level, decrement
089A3 CE 38 60                  		dec StartTimer
089A6 A9 82                     Est:	lda #$82
089A8 8D C5 05                  		sta Old8000
089AB 8D 00 80                  		sta $8000
089AE A9 04                     		lda #%00000100
089B0 8D 01 80                  		sta $8001
089B3 A9 8C                     		lda #%10001100
089B5 20 CE 80                  		jsr setRightCHR
089B8 A9 84                     		lda #$84
089BA 8D C5 05                  		sta Old8000
089BD 8D 00 80                  		sta $8000
089C0 A9 8E                     		lda #%10001110
089C2 8D 01 80                  		sta $8001
089C5 A9 85                     		lda #$85
089C7 8D C5 05                  		sta Old8000
089CA 8D 00 80                  		sta $8000
089CD A9 8F                     		lda #%10001111
089CF 8D 01 80                  		sta $8001
089D2 60                        EE:		rts
089D3                           Force:
089D3 70 0A                     		.db $70, $0a
089D5                           		
089D5                           		
089D5                           		
089D5                           		
089D5                           		;the start
089D5                           		
089D5                           		        
089D5                           jmpik:
089D5 A2 05                     		ldx #$05
089D7 18                        -:		clc
089D8 B5 0F                     		lda Enemy_Flag,x
089DA F0 04                     		beq +
089DC CA                        		dex
089DD 90 F8                     		bcc -
089DF 38                        		sec
089E0 60                        +:		rts
089E1 4C CA 8C                  emin: jmp emkn
089E4 FF 01                     vaina: .db $ff, $01
089E6                           
089E6                           
089E6                           ClearRemainings2:
089E6 AD 01 06                  	lda TextBoxYScroll1
089E9 A8                        	tay
089EA B9 8B 87                  	lda TextBoxYClearTable,y
089ED 8D 57 60                  	sta tempC
089F0 AE 00 64                  	ldx VRAM_Buffer1_Offset
089F3 A9 2C                     	lda #$2c
089F5 9D 01 64                  	sta VRAM_Buffer1,x
089F8 A9 20                     	lda #$20
089FA 18                        	clc 
089FB 6D 57 60                  	adc tempC
089FE 9D 02 64                  	sta VRAM_Buffer1+1,x
08A01 A9 20                     	lda #$20
08A03 9D 03 64                  	sta VRAM_Buffer1+2,x
08A06 A0 1F                     	ldy #$1f
08A08                           -:	
08A08 B9 92 87                  	lda ScrollLineTable,y
08A0B 9D 04 64                  	sta VRAM_Buffer1+3,x
08A0E E8                        	inx
08A0F 88                        	dey
08A10 10 F6                     	bpl -
08A12 A9 00                     	lda #$00
08A14 9D 05 64                  	sta VRAM_Buffer1+4,x
08A17 8A                        	txa
08A18 18                        	clc
08A19 69 04                     	adc #$04
08A1B 8D 00 64                  	sta VRAM_Buffer1_Offset
08A1E                           +++:
08A1E EE 01 06                  	inc TextBoxYScroll1
08A21 AD 01 06                  	lda TextBoxYScroll1
08A24 C9 08                     	cmp #$08
08A26 D0 0B                     	bne +
08A28 A0 00                     	ldy #$00
08A2A 8C 00 06                  	sty ClearRemainings
08A2D 8C 01 06                  	sty TextBoxYScroll1
08A30 4C 34 8A                  	jmp ClearVRAM
08A33 60                        +:	rts
08A34                           
08A34                           ClearVRAM:
08A34 A9 00                     	lda #$00
08A36 A8                        	tay
08A37 88                        -:  dey
08A38 99 00 64                  	sta $6400,y
08A3B D0 FA                     	bne -
08A3D 60                        -:	rts
08A3E                           
08A3E                           WorldCHRTable:
08A3E 04 04 04 04 0C 14 1C 24.. 	.db %00000100, %00000100, %00000100, %00000100, %00001100, %00010100, %00011100, %00100100, %00101100
08A47                           ;---------------------------------------------
08A47                           ;
08A47                           ;			START OF BANK 01
08A47                           ;
08A47                           ;---------------------------------------------
08A47                           WorldPalHigh:
08A47 8A 8A 8A 8A               	.db >World4Pal, >World6Pal, >World7Pal, >World8Pal
08A4B                           	
08A4B                           WorldPalLow:
08A4B 4F 6F 8F AF               	.db <World4Pal, <World6Pal, <World7Pal, <World8Pal
08A4F                           	
08A4F                           World4Pal:
08A4F 22 29 1A 0F               	.db $22, $29, $1a, $0f
08A53 22 37 27 17                   .db $22, $37, $27, $17
08A57 22 30 12 0F                   .db $22, $30, $12, $0f
08A5B 22 27 17 0F                   .db $22, $27, $17, $0f
08A5F 22 16 27 18                   .db $22, $16, $27, $18
08A63 22 1A 30 27                   .db $22, $1a, $30, $27
08A67 22 16 30 27                   .db $22, $16, $30, $27
08A6B 22 17 37 27                   .db $22, $17, $37, $27
08A6F                           World6Pal:
08A6F 22 20 32 0F               	.db $22, $20, $32, $0f
08A73 22 20 32 0F                   .db $22, $20, $32, $0f
08A77 22 30 21 0F                   .db $22, $30, $21, $0f
08A7B 22 27 17 0F                   .db $22, $27, $17, $0f
08A7F 22 16 27 18                   .db $22, $16, $27, $18
08A83 22 1A 30 27                   .db $22, $1a, $30, $27
08A87 22 16 30 27                   .db $22, $16, $30, $27
08A8B 22 0F 20 32                   .db $22, $0f, $20, $32
08A8F                           World7Pal:
08A8F 22 27 17 07               	.db $22, $27, $17, $07
08A93 22 37 27 17                   .db $22, $37, $27, $17
08A97 22 30 12 0F                   .db $22, $30, $12, $0f
08A9B 22 27 17 0F                   .db $22, $27, $17, $0f
08A9F 22 16 27 18                   .db $22, $16, $27, $18
08AA3 22 1A 30 27                   .db $22, $1a, $30, $27
08AA7 22 16 30 27                   .db $22, $16, $30, $27
08AAB 22 07 27 17                   .db $22, $07, $27, $17
08AAF                           World8Pal:
08AAF 22 29 1A 0F               	.db $22, $29, $1a, $0f
08AB3 22 36 17 0F                   .db $22, $36, $17, $0f
08AB7 22 30 21 0F                   .db $22, $30, $21, $0f
08ABB 22 27 17 0F                   .db $22, $27, $17, $0f
08ABF 22 16 27 18                   .db $22, $16, $27, $18
08AC3 22 1A 30 27                   .db $22, $1a, $30, $27
08AC7 22 16 30 27                   .db $22, $16, $30, $27
08ACB 22 0F 36 17                   .db $22, $0f, $36, $17
08ACF                               
08ACF                           
08ACF                           ChangeBankRunner:		
08ACF                           		
08ACF AD 21 7E                  		lda PCooldown
08AD2 F0 03                     		beq +
08AD4                           
08AD4 CE 21 7E                  		dec PCooldown
08AD7                           +:		
08AD7 A9 00                     		lda #$00
08AD9 8D 20 7E                  		sta BowserGotHit
08ADC                           		
08ADC AD 13 7E                  		lda WorldPalette
08ADF F0 49                     	    beq +
08AE1 AC 13 7E                  			ldy WorldPalette
08AE4 88                        			dey
08AE5 B9 4B 8A                  			lda WorldPalLow,y
08AE8 85 00                     			sta $00
08AEA B9 47 8A                  			lda WorldPalHigh,y
08AED 85 01                     			sta $01
08AEF AE 00 64                  			ldx VRAM_Buffer1_Offset
08AF2 A9 3F                     			lda #$3f
08AF4 9D 01 64                  			sta VRAM_Buffer1,x
08AF7 E8                        			inx
08AF8 A9 00                     			lda #$00
08AFA 9D 01 64                  			sta VRAM_Buffer1,x
08AFD E8                        			inx
08AFE A9 20                     			lda #$20
08B00 9D 01 64                  			sta VRAM_Buffer1,x
08B03 A0 FF                     			ldy #$ff
08B05 E8                        --:			inx
08B06 C8                        			iny
08B07 B1 00                     			lda ($00),y
08B09 9D 01 64                  			sta VRAM_Buffer1,x
08B0C C0 08                     			cpy #$08
08B0E 90 0A                     			bcc ++
08B10 C0 0C                     			cpy #$0c
08B12 B0 06                     			bcs ++
08B14 99 0D 7E                  			sta OldPal3-8,y
08B17 EE 14 7E                  			inc TheresPal3
08B1A C0 1F                     ++:			cpy #$1f
08B1C D0 E7                     			bne --
08B1E E8                        			inx
08B1F A9 00                     			lda #$00
08B21 9D 01 64                  			sta VRAM_Buffer1,x
08B24 8E 00 64                  			stx VRAM_Buffer1_Offset
08B27 8D 13 7E                  			sta WorldPalette
08B2A                           +:
08B2A AD 04 06                  		lda clearVRAM
08B2D F0 08                     		beq +
08B2F A9 00                     			lda #$00
08B31 8D 04 06                  			sta clearVRAM
08B34 20 34 8A                  			jsr ClearVRAM
08B37                           
08B37 AD 00 06                  +:		lda ClearRemainings
08B3A F0 08                     		beq +
08B3C AD 1F 07                  		lda AreaParserTaskNum
08B3F D0 03                     		bne +
08B41 20 E6 89                  			jsr ClearRemainings2
08B44                           +:		
08B44                           
08B44 AD C1 05                  		lda TextboxID
08B47 F0 06                     		beq +
08B49 20 14 96                  			jsr ColorRotation
08B4C 20 EE 85                  			jsr DisplayTextbox
08B4F                           		
08B4F                           +:		
08B4F A5 09                     		lda FrameCounter
08B51 29 01                     		and #$01
08B53 D0 08                     		bne +
08B55 AD CB 05                  			lda EndTimer
08B58 F0 03                     			beq +
08B5A CE CB 05                  				dec EndTimer
08B5D                           +:
08B5D AD 02 06                  		lda OldTextboxID
08B60 F0 03                     		beq +
08B62 CE 02 06                  			dec OldTextboxID
08B65                           +:		
08B65 A9 84                     		lda #$84
08B67 8D C5 05                  		sta Old8000
08B6A 8D 00 80                  		sta $8000
08B6D                           		
08B6D                           		
08B6D AD 4E 07                  		lda AreaType
08B70 F0 04                     		beq ++
08B72 C9 03                     		cmp #$03
08B74 D0 04                     		bne +
08B76 A2 46                     ++			ldx #%01000110
08B78 D0 09                     			bne ++ 			
08B7A AC 5F 07                  +:		ldy WorldNumber
08B7D B9 3E 8A                  		lda WorldCHRTable,y
08B80 AA                        		tax
08B81 E8                        		inx
08B82 E8                        		inx
08B83 8E 01 80                  ++:		stx $8001
08B86                           		
08B86                           		
08B86 AD 76 07                  		lda GamePauseStatus       ;if in pause mode, do not bother with sprites at all
08B89 4A                                lsr
08B8A B0 3D                             bcs WebosJoder
08B8C AD 70 07                  		lda OperMode              			;check mode of operation
08B8F C9 00                             cmp #TitleScreenModeValue
08B91 F0 3D                             beq EnemyLoadingRoutine            ;if in title screen mode, branch to lock score
08B93 AD E9 07                  		lda PlayerCoinDisplay-2 							;fifth digit of coin
08B96 0D EA 07                  		ora PlayerCoinDisplay-1
08B99 F0 13                     		beq +
08B9B A9 09                     		lda #$09
08B9D 8D EB 07                  		sta PlayerCoinDisplay
08BA0 8D EC 07                  		sta PlayerCoinDisplay+1
08BA3 8D ED 07                  		sta PlayerCoinDisplay+2
08BA6 8D EE 07                  		sta PlayerCoinDisplay+3
08BA9 A9 01                     		lda #$01
08BAB 8D E9 07                  		sta PlayerCoinDisplay-2
08BAE AD DD 63                  +:		lda Averveamos
08BB1 F0 1D                     		beq EnemyLoadingRoutine
08BB3 A9 09                     		lda #$09
08BB5 8D DD 07                  		sta PlayerScoreDisplay
08BB8 8D DE 07                  		sta PlayerScoreDisplay+1
08BBB 8D DF 07                  		sta PlayerScoreDisplay+2
08BBE 8D E0 07                  		sta PlayerScoreDisplay+3
08BC1 8D E1 07                  		sta PlayerScoreDisplay+4
08BC4 8D E2 07                  		sta PlayerScoreDisplay+5
08BC7 D0 07                     		bne EnemyLoadingRoutine ;unconditional
08BC9 60                        WebosJoder: rts
08BCA 4C CA 8C                  -: jmp emkn
08BCD                           --:
08BCD 4C DC 8C                  ExitThere: jmp ExitTher
08BD0                           EnemyLoadingRoutine:		
08BD0 AE A2 60                  		  ldx scrolldir
08BD3 D0 16                     		  bne +
08BD5 AD 1C 07                  		  lda ScreenLeft_X_Pos    ;get horizontal coordinate for left side of screen
08BD8 38                        		  sec
08BD9 E9 1F                     		  sbc #$1f
08BDB 29 F0                     		  and #$f0
08BDD 8D 58 60                            sta tempD                 ;store result here
08BE0 AD 1A 07                            lda ScreenLeft_PageLoc
08BE3 E9 00                     		  sbc #$00
08BE5 8D CC 63                            sta tempE                 ;store result here
08BE8 4C FE 8B                  		  jmp ++
08BEB                           		  
08BEB AD 1D 07                  +:		  lda ScreenRight_X_Pos    ;get horizontal coordinate for left side of screen
08BEE 18                        		  clc
08BEF 69 1F                     		  adc #$1f
08BF1 29 F0                     		  and #$f0
08BF3 8D 58 60                            sta tempD                 ;store result here
08BF6 AD 1B 07                            lda ScreenRight_PageLoc
08BF9 69 00                     		  adc #$00
08BFB 8D CC 63                            sta tempE                 ;store result here
08BFE                           ++:		  
08BFE AA                        		  tax
08BFF BD D2 05                  		  lda EnemyOffsetPage,x
08C02 A8                        		  tay
08C03 8C 57 60                  LoopEL:	  sty tempC
08C06 B9 AC 62                  		  lda Saved_isDefeated,y
08C09 D0 BF                     		  bne -						;if defeated don't load anymore
08C0B B9 AC 61                  		  lda Saved_PageLoc,y
08C0E CD CC 63                  		  cmp tempE
08C11 D0 B7                     		  bne -
08C13 B9 AC 60                  		  lda Saved_X_Position,y
08C16 29 F0                     		  and #$f0
08C18 CD 58 60                  		  cmp tempD
08C1B D0 AD                     		  bne -
08C1D                           
08C1D                           +:
08C1D                           +++:	
08C1D B9 4C 63                  		lda Saved_ID,y
08C20 F0 AB                     		beq --
08C22 C9 41                     		cmp #Sign+1   			;sign ID + 1
08C24 F0 04                     		beq ++++
08C26 C9 2F                     		cmp #PowerUpObject+1	;power up ID + 1
08C28 D0 0C                     		bne ++
08C2A                           ++++:		
08C2A A5 14                     		lda Enemy_Flag+5
08C2C D0 02                     		bne +++
08C2E A2 05                     		ldx #$05
08C30 B9 4C 63                  +++:	lda Saved_ID,y
08C33 4C 4A 8C                  		jmp +
08C36                           ++:		
08C36 A2 04                     		ldx #$04
08C38 B5 0F                     -:		lda Enemy_Flag,x
08C3A F0 0E                     		beq +
08C3C BD C4 63                  		lda SavedOffset,x
08C3F CD 57 60                  		cmp tempC
08C42 F0 89                     		beq --
08C44 CA                        		dex
08C45 10 F1                     		bpl -
08C47 4C CD 8B                  		jmp --
08C4A B9 4C 63                  +:		lda Saved_ID,y
08C4D 38                        		sec
08C4E E9 01                     		sbc #$01
08C50 95 15                     		sta Enemy_ID,x
08C52 48                        		pha
08C53 A9 01                     		lda #$01
08C55 95 A8                     		sta Enemy_Y_HighPos,x
08C57 B9 AC 60                  		lda Saved_X_Position,y
08C5A 95 79                     		sta Enemy_X_Position,x
08C5C B9 4C 61                  		lda Saved_Y_Position,y
08C5F 95 C1                     		sta Enemy_Y_Position,x
08C61 B9 AC 61                  		lda Saved_PageLoc,y
08C64 95 60                     		sta Enemy_PageLoc,x
08C66 68                        		pla
08C67 C9 0D                     		cmp #PiranhaPlant
08C69 F0 0C                     		beq +
08C6B C9 20                     		cmp #RedPiranhaPlant
08C6D F0 08                     		beq +
08C6F C9 21                     		cmp #UDPiranhaPlant
08C71 F0 04                     		beq +
08C73 C9 22                     		cmp #RUDPiranhaPlant
08C75 D0 21                     		bne +++
08C77 B9 01 05                  +:		lda ExtraShit,y
08C7A 9D 17 04                  		sta PiranhaPlantUpYPos,x
08C7D B9 41 05                  		lda ExtraShit2,y
08C80 9D 34 04                  		sta PiranhaPlantDownYPos,x
08C83 B9 81 05                  		lda ExtraShit3,y
08C86 95 92                     		sta PiranhaPlant_MoveFlag,x
08C88 B9 A1 05                  		lda ExtraShit4,y
08C8B 95 4A                     		sta PiranhaPlant_Y_Speed,x
08C8D AC 52 60                  		ldy HardModeFlag
08C90 B9 35 95                          lda PPhitbox1,y
08C93 D0 07                     		bne ++++
08C95                           															_LoopEL: 	
08C95 4C 03 8C                  																	jmp LoopEL
08C98 A8                        +++:	tay
08C99 B9 FE 94                  		lda Hitboxes,y
08C9C 9D 9A 04                  ++++:	sta Enemy_BoundBoxCtrl,x
08C9F AC 57 60                  		ldy tempC
08CA2 B5 15                     		lda Enemy_ID,x
08CA4 C9 40                     		cmp #Sign
08CA6 F0 04                     		beq ++
08CA8 C9 2E                     		cmp #PowerUpObject
08CAA D0 09                     		bne +
08CAC B9 01 05                  ++:		lda ExtraShit,y
08CAF 9D CE 7F                  		sta $7fce,x
08CB2 A9 00                     		lda #$00
08CB4 2C                        		.db $2c
08CB5 A9 00                     +:		lda #$00
08CB7 95 1C                     		sta Enemy_State,x
08CB9 A9 01                     		lda #$01
08CBB 99 AC 62                  		sta Saved_isDefeated,y
08CBE 95 0F                     		sta Enemy_Flag,x
08CC0 AC 57 60                  		ldy tempC
08CC3 98                        		tya
08CC4 9D C4 63                  		sta SavedOffset,x
08CC7 20 28 F8                  		jsr InitEnemyRoutines1
08CCA                           emkn:
08CCA AC 57 60                  ++:	    ldy tempC
08CCD 88                        		dey						;check for next saved enemy
08CCE 30 0C                     		bmi ExitTher
08CD0 98                        		tya
08CD1 AE CC 63                  		ldx tempE
08CD4 CA                        		dex
08CD5 DD D2 05                  		cmp EnemyOffsetPage,x
08CD8 F0 02                     		beq ExitTher
08CDA B0 B9                     		bcs _LoopEL
08CDC                           +:	
08CDC                           ExitTher:
08CDC AD B7 63                  		lda SetupPause
08CDF F0 03                     		beq +
08CE1 20 7B 91                  			jsr PauseMenu
08CE4                           +:		
08CE4 AD B1 63                  		lda PlatformTimer
08CE7 F0 08                     		beq +
08CE9 CE B1 63                  			dec PlatformTimer
08CEC                           		;jmp ++
08CEC                           		
08CEC AD A2 60                  		lda scrolldir
08CEF D0 00                     		bne +
08CF1                           +:		;dec GlobalSaveOffset
08CF1 4C F4 8C                  		jmp ++
08CF4                           +++:	;inc GlobalSaveOffset
08CF4 A5 FA                     ++:		lda $fa
08CF6 8D AC 63                  		sta OldPageLoc
08CF9                           
08CF9                           
08CF9 A5 42                     		lda Player_MovingDir
08CFB D0 02                     		bne +
08CFD E6 42                     		inc Player_MovingDir
08CFF AD 96 60                  +:		lda framesfour
08D02 D0 0B                     		bne +
08D04 A9 03                     		lda #$03
08D06 8D 96 60                  		sta framesfour
08D09 4C 12 8D                  		jmp PSpeedHud
08D0C 4C 2C 8E                  NoPlease2: jmp NoPlease
08D0F CE 96 60                  +:		dec framesfour
08D12                           		
08D12                           PSpeedHud:		
08D12 AD 95 60                  		lda oldpspeed
08D15 F0 29                     		beq +
08D17 A9 00                     		lda #$00
08D19 8D 95 60                  		sta oldpspeed
08D1C AC 00 64                  		ldy VRAM_Buffer1_Offset
08D1F A9 20                     		lda #$20
08D21 99 01 64                  		sta VRAM_Buffer1,y
08D24 A9 49                     		lda #$49
08D26 99 02 64                  		sta VRAM_Buffer1+1,y
08D29 A9 01                     		lda #$01
08D2B 99 03 64                  		sta VRAM_Buffer1+2,y
08D2E AD 91 60                  		lda pspeed
08D31 99 04 64                  		sta VRAM_Buffer1+3,y
08D34 A9 00                     		lda #$00
08D36 99 05 64                  		sta VRAM_Buffer1+4,y
08D39 98                        		tya
08D3A 18                        		clc
08D3B 69 04                     		adc #$04
08D3D 8D 00 64                  		sta VRAM_Buffer1_Offset
08D40                           		
08D40 AD 84 60                  +:		lda ContinueWriting
08D43 F0 C7                     		beq NoPlease2
08D45                           		;lda WorldNumber
08D45                           		;asl
08D45                           		;asl
08D45                           		;add LevelNumber
08D45                           		;tay
08D45 AC 85 60                  		ldy CurrentText
08D48                           		
08D48 AD 86 60                  		lda OldWriting
08D4B D0 2C                     		bne ++
08D4D 98                        		tya
08D4E 48                        		pha
08D4F                           		;ldy LevelNumber
08D4F                           		
08D4F A9 00                     		lda #$00
08D51 85 FD                     		sta $fd
08D53 B9 B5 90                  		lda Text_AddrTable_High,y
08D56 85 FE                     		sta $fe
08D58 B9 AD 90                  		lda Text_AddrTable_Low,y
08D5B 8D C5 7F                  		sta $7fc5
08D5E                           		
08D5E AC C5 7F                  		ldy $7fc5
08D61 B1 FD                     		lda ($fd),y
08D63 8D C3 7F                  		sta $7fc3
08D66 C8                        		iny
08D67 B1 FD                     		lda ($fd),y
08D69 8D C4 7F                  		sta $7fc4
08D6C C8                        		iny
08D6D 8C C5 7F                  		sty $7fc5
08D70 D0 02                     		bne +
08D72 E6 FE                     		inc $fe
08D74 68                        +:		pla
08D75 A8                        		tay
08D76 4C 88 8D                  		jmp +
08D79                           
08D79 A5 FE                     ++:		lda $fe
08D7B D0 0B                     		bne +
08D7D                           	
08D7D B9 B5 90                  		lda Text_AddrTable_High,y
08D80 85 FE                     		sta $fe
08D82 B9 AD 90                  		lda Text_AddrTable_Low,y
08D85 8D C5 7F                  		sta $7fc5
08D88                           		
08D88 AE C0 7F                  +:		ldx $7fc0
08D8B AC 00 64                  		ldy VRAM_Buffer1_Offset
08D8E AD C3 7F                  		lda $7fc3
08D91 99 01 64                  		sta VRAM_Buffer1,y
08D94 AD C4 7F                  		lda $7fc4
08D97 99 02 64                  		sta VRAM_Buffer1+1,y
08D9A A9 01                     		lda #$01
08D9C 99 03 64                  		sta VRAM_Buffer1+2,y
08D9F 86 00                     		stx $00
08DA1 84 01                     		sty $01
08DA3 A4 00                     		ldy $00
08DA5 A6 01                     		ldx $01
08DA7 AC C5 7F                  		ldy $7fc5
08DAA B1 FD                     		lda ($fd),y
08DAC C9 FF                     		cmp #$ff
08DAE D0 0A                     		bne ++
08DB0 A9 00                     		lda #$00
08DB2 8D 84 60                  		sta ContinueWriting
08DB5 8D 86 60                  		sta OldWriting
08DB8 A9 24                     		lda #$24
08DBA C9 F6                     ++:		cmp #$f6
08DBC D0 05                     		bne +
08DBE A9 28                     		lda #$28
08DC0 4C D2 8D                  		jmp WriteDat
08DC3 C9 F7                     +:		cmp #$f7
08DC5 D0 05                     		bne +
08DC7 A9 AF                     		lda #$af
08DC9 4C D2 8D                  		jmp WriteDat
08DCC C9 E9                     +:		cmp #$e9
08DCE D0 02                     		bne +
08DD0 A9 24                     		lda #$24
08DD2                           WriteDat:
08DD2 9D 04 64                  +:		sta VRAM_Buffer1+3,x
08DD5 86 00                     		stx $00
08DD7 84 01                     		sty $01
08DD9 A4 00                     		ldy $00
08DDB A6 01                     		ldx $01
08DDD A9 00                     		lda #$00
08DDF 99 05 64                  		sta VRAM_Buffer1+4,y
08DE2 98                        		tya
08DE3 18                        		clc
08DE4 69 04                     		adc #$04
08DE6 8D 00 64                  		sta VRAM_Buffer1_Offset
08DE9 AD C5 7F                  		lda $7fc5
08DEC 18                        		clc
08DED 69 01                     		adc #$01
08DEF 8D C5 7F                  		sta $7fc5
08DF2 A5 FE                     		lda $fe
08DF4 69 00                     		adc #$00
08DF6 85 FE                     		sta $fe
08DF8 AD C4 7F                  		lda $7fc4
08DFB 18                        		clc
08DFC 69 01                     		adc #$01
08DFE 8D C4 7F                  		sta $7fc4
08E01 AD C3 7F                  		lda $7fc3
08E04 69 00                     		adc #$00
08E06 8D C3 7F                  		sta $7fc3
08E09                           		;lda $7f03
08E09 C9 24                     		cmp #$24
08E0B 90 05                     		bcc +
08E0D A9 20                     		lda #$20
08E0F 8D C3 7F                  		sta $7fc3
08E12 AD C3 7F                  +:	    lda $7fc3
08E15 C9 23                     	    cmp #$23
08E17 F0 04                     		beq +
08E19 C9 27                     		cmp #$27
08E1B D0 0F                     		bne ++
08E1D AD C4 7F                  +:		lda $7fc4
08E20 C9 C0                     		cmp #$c0
08E22 90 08                     		bcc ++
08E24 A9 00                     		lda #$00
08E26 8D C4 7F                  		sta $7fc4
08E29 EE C3 7F                  		inc $7fc3
08E2C                           ++:		
08E2C                           NoPlease:
08E2C AD 84 60                  		lda ContinueWriting
08E2F 8D 86 60                  		sta OldWriting
08E32 A9 00                     		lda #$00
08E34 8D 5F 60                  		sta bocata
08E37 8D 60 60                  		sta bocata2
08E3A AD 61 60                  		lda bocata3
08E3D F0 37                     		beq +
08E3F AD 00 64                  		lda VRAM_Buffer1_Offset
08E42 C9 20                     		cmp #$20
08E44 B0 30                     		bcs +
08E46 CE 61 60                  		dec bocata3
08E49 A9 02                     ++:		lda #$02
08E4B 20 4B 90                  		jsr bocataprint
08E4E                           		;ldy VRAM_Buffer1_Offset   
08E4E                                   ;lda VRAM_Buffer1-6,y      ;check highest digit of score
08E4E                                   ;bne +++	                  ;if zero, overwrite with space tile for zero suppression
08E4E                                   ;lda #$24
08E4E                                   ;sta VRAM_Buffer1-6,y
08E4E                           		;jmp ++
08E4E                           +++:
08E4E AD DD 63                  		lda Averveamos
08E51 F0 23                     		beq +
08E53 AE 00 64                  		ldx VRAM_Buffer1_Offset
08E56 A9 20                     		lda #$20
08E58 9D 01 64                  		sta VRAM_Buffer1,x
08E5B A9 68                     		lda #$68
08E5D 9D 02 64                  		sta VRAM_Buffer1+1,x
08E60 A9 01                     		lda #$01
08E62 9D 03 64                  		sta VRAM_Buffer1+2,x
08E65 A9 09                     		lda #$09
08E67 9D 04 64                  		sta VRAM_Buffer1+3,x	  ;change the last 0 to a 9
08E6A A9 00                     		lda #$00
08E6C 9D 05 64                  		sta VRAM_Buffer1+4,x
08E6F 8A                        		txa
08E70 18                        		clc
08E71 69 04                     		adc #$04
08E73 8D 00 64                  		sta VRAM_Buffer1_Offset
08E76                           	
08E76                           +:		;jmp +
08E76                           		;lda IntervalTimerControl
08E76                           		;bne +
08E76                           		;
08E76                           		;lda FrameCaunter+2
08E76                           		;add #$01
08E76                           		;sta FrameCaunter+2
08E76                           		;lda FrameCaunter+1
08E76                           		;adc #$00
08E76                           		;sta FrameCaunter+1
08E76                           		;lda FrameCaunter
08E76                           		;adc #$00
08E76                           		;sta FrameCaunter
08E76                           		;
08E76                           		;ldx VRAM_Buffer1_Offset
08E76                           		;lda #$20
08E76                           		;sta VRAM_Buffer1,x
08E76                           		;inx
08E76                           		;lda #$00
08E76                           		;sta VRAM_Buffer1,x
08E76                           		;inx
08E76                           		;lda #$06
08E76                           		;sta VRAM_Buffer1,x
08E76                           		;inx
08E76                           		;lda FrameCaunter
08E76                           		;and #$f0
08E76                           		;lsr
08E76                           		;lsr
08E76                           		;lsr
08E76                           		;lsr
08E76                           		;sta VRAM_Buffer1,x
08E76                           		;inx
08E76                           		;lda FrameCaunter
08E76                           		;and #$0f
08E76                           		;sta VRAM_Buffer1,x
08E76                           		;inx
08E76                           		;lda FrameCaunter+1
08E76                           		;and #$f0
08E76                           		;lsr
08E76                           		;lsr
08E76                           		;lsr
08E76                           		;lsr
08E76                           		;sta VRAM_Buffer1,x
08E76                           		;inx
08E76                           		;lda FrameCaunter+1
08E76                           		;and #$0f
08E76                           		;sta VRAM_Buffer1,x
08E76                           		;inx
08E76                           		;lda FrameCaunter+2
08E76                           		;and #$f0
08E76                           		;lsr
08E76                           		;lsr
08E76                           		;lsr
08E76                           		;lsr
08E76                           		;sta VRAM_Buffer1,x
08E76                           		;inx
08E76                           		;lda FrameCaunter+2
08E76                           		;and #$0f
08E76                           		;sta VRAM_Buffer1,x
08E76                           		;inx
08E76                           		;lda #$00
08E76                           		;sta VRAM_Buffer1,x
08E76                           		;stx VRAM_Buffer1_Offset
08E76                           		++:
08E76                           +:		;lda EvenFrame
08E76                           		;eor #$01
08E76                           		;sta EvenFrame
08E76                           		;ldx $07eb					;load first digit of coin counter
08E76                           		;dex
08E76                           		;bne ++
08E76                           		;inc UnlockWorld9			;unlock world 9
08E76                           ++:
08E76 AD 81 60                  		lda TimerWa
08E79 F0 06                     		beq ++
08E7B CE 81 60                  			dec TimerWa
08E7E 4C 97 8E                  		jmp CldPlt
08E81                           ++:		
08E81                           	  
08E81                           
08E81 AD 70 07                  		lda OperMode               	;get primary mode of operation
08E84 F0 09                             beq ++         				;branch to set title screen CHR
08E86 C9 03                             cmp #GameOverModeValue      ;are we in game over mode?
08E88 F0 0D                             beq CldPlt                  ;if so, proceed change platform sprite to the coin heaven one
08E8A AD 38 60                  		lda StartTimer				;check timer to change CHR
08E8D F0 03                     		beq +						;branch if zero
08E8F 4C 99 89                  ++:		jmp TitleScreenCHR
08E92 AD 43 07                  +:		lda CloudTypeOverride		
08E95 F0 10                             beq NrmlPl		      		;if cloud level override flag not set, use normal platform CHR
08E97                           CldPlt:	
08E97 A0 81                     	    ldy #$81
08E99 8C C5 05                  		sty Old8000
08E9C 8C 00 80                  		sty $8000
08E9F A0 12                     		ldy #%00010010				;set cloud platform sprite
08EA1 8C 01 80                  		sty $8001
08EA4 4C B4 8E                  		jmp FireballCooldown		;skip to FireballCooldown
08EA7 A0 81                     NrmlPl:	ldy #$81					
08EA9 8C C5 05                  		sty Old8000
08EAC 8C 00 80                  		sty $8000
08EAF A0 0A                     		ldy #%00001010				;set normal platform sprite
08EB1 8C 01 80                  		sty $8001
08EB4                           		
08EB4                           FireballCooldown:
08EB4 AD 2E 60                  		lda FballCooldown			;if fireball cooldown set, don't decrement
08EB7 F0 0B                     		beq +++++
08EB9 CE 2E 60                  		dec FballCooldown
08EBC AD 7B 60                  		lda EntranceCoolDown
08EBF F0 03                     		beq +++++
08EC1 CE 7B 60                  		dec EntranceCoolDown
08EC4 AD 5A 60                  +++++:  lda WaterCooldown
08EC7 F0 03                     		beq +
08EC9 CE 5A 60                  		dec WaterCooldown
08ECC AD 04 60                  +:		lda GrabFlag				;check grabflag
08ECF F0 11                     		beq +++						;branch if not
08ED1 A9 80                     		lda #$80					
08ED3 8D C5 05                          sta Old8000
08ED6 8D 00 80                  		sta $8000
08ED9 A9 08                             lda #%00001000
08EDB 8D 01 80                          sta $8001					;set grabbing sprite
08EDE 4C 0E 8F                  		jmp ++++
08EE1                           
08EE1 60                        Chavo:  rts
08EE2                           
08EE2 AD 79 60                  +++:	lda CrouchingFlag2
08EE5 F0 1A                     		beq +
08EE7 AD 54 07                  		lda PlayerSize
08EEA F0 10                     		beq ++
08EEC A9 80                     		lda #$80
08EEE 8D C5 05                  		sta Old8000
08EF1 8D 00 80                  		sta $8000
08EF4 A9 10                     		lda #%00010000
08EF6 8D 01 80                  		sta $8001
08EF9 4C 0E 8F                  		jmp ++++
08EFC A9 00                     ++:		lda #$00
08EFE 8D 79 60                  		sta CrouchingFlag2
08F01 A9 80                     +:		lda #$80					;set normal sprite
08F03 8D C5 05                          sta Old8000
08F06 8D 00 80                  		sta $8000
08F09 A9 01                             lda #%00000001
08F0B 8D 01 80                          sta $8001
08F0E AD 91 60                  ++++:	lda pspeed
08F11 C9 07                     		cmp #$07
08F13 D0 23                     		bne +
08F15 A5 1B                     		lda Player_State
08F17 D0 04                     		bne ++
08F19 A5 49                     		lda Player_X_Speed
08F1B F0 1B                     		beq +
08F1D AD 04 07                  ++:		lda SwimmingFlag
08F20 0D 04 60                  		ora GrabFlag
08F23 0D 14 07                  		ora CrouchingFlag
08F26 0D 79 60                  		ora CrouchingFlag2
08F29 D0 0D                     		bne +
08F2B A9 80                     		lda #$80					
08F2D 8D C5 05                          sta Old8000
08F30 8D 00 80                  		sta $8000
08F33 A9 18                             lda #%0011000
08F35 8D 01 80                          sta $8001					;set grabbing sprite
08F38                           +:		
08F38 AD 47 07                  		lda TimerControl			
08F3B D0 A4                     		bne Chavo					;do not animate if master timer set
08F3D AD 06 60                  		lda HurryUp					
08F40 F0 17                     		beq ++						;branch if not under 60 seconds
08F42 AD 07 60                  		lda UnknownHurryUp			
08F45 D0 0F                     		bne +
08F47 EE 07 60                  		inc UnknownHurryUp
08F4A AD 00 60                  		lda ChangeBankR
08F4D C9 08                     		cmp #$08					;check if last animation CHR bank
08F4F 90 05                     		bcc +						;if not, skip this
08F51 A9 09                     		lda #$09
08F53 8D 00 60                  		sta ChangeBankR				;set first animation CHR bank and
08F56 4C 01 90                  +:		jmp HurryUpChg				;jump to speed up animation
08F59                           ++:		
08F59 AE 01 60                  		ldx ChangeBankRDelay
08F5C F0 07                     		beq +
08F5E CA                        		dex
08F5F 8E 01 60                  		stx ChangeBankRDelay
08F62 F0 01                     		beq +
08F64 60                        		rts
08F65                           		
08F65 EE 01 60                  +:		inc ChangeBankRDelay
08F68 AD B3 63                  		lda ChangeBankRDelay2
08F6B F0 04                     		beq +
08F6D CE B3 63                  		dec ChangeBankRDelay2
08F70 60                        		rts
08F71                           		
08F71 A9 05                     +:		lda #$05
08F73 8D B3 63                  		sta ChangeBankRDelay2
08F76                           		
08F76 AC 28 60                  		ldy PTimer
08F79 88                        		dey
08F7A D0 08                     		bne +
08F7C 20 E6 F7                  		jsr _GetAreaMusic
08F7F A9 06                     		lda #$06
08F81 8D 00 60                  		sta ChangeBankR
08F84 AD 28 60                  +:		lda PTimer					;check ptimer
08F87 D0 1E                     		bne PSwitchBank				;branch to set if set
08F89                           		
08F89                           							        ;if ptimer is 0
08F89 AD 53 60                  		lda OnOffBits				
08F8C 29 01                     		and #%00000001				;then save only bit 0
08F8E 8D 53 60                  		sta OnOffBits
08F91 8D 54 60                  		sta OnOffFlag
08F94                           		
08F94 AC 4E 07                  		ldy AreaType				
08F97 B9 F9 8F                  		lda AreaAdder,y				;load animation depending of the area type
08F9A EE 00 60                  		inc ChangeBankR				;increment bank timer
08F9D AE 00 60                  		ldx ChangeBankR		
08FA0 E0 08                     		cpx #$08
08FA2 F0 42                     		beq BankR
08FA4 4C DF 8F                  		jmp Bank1
08FA7                           PSwitchBank:
08FA7 AD 7C 60                  		lda DontDecPT
08FAA 0D 47 07                  		ora TimerControl
08FAD D0 03                     		bne +
08FAF CE 28 60                  		dec PTimer
08FB2 AE 4E 07                  +:		ldx AreaType
08FB5 BD FD 8F                  		lda AreaAdderP,x
08FB8 20 CE 80                  		jsr setRightCHR
08FBB A9 04                     		lda #$04
08FBD 8D 01 60                  		sta ChangeBankRDelay
08FC0 AE 53 60                  Fuk:	ldx OnOffBits
08FC3 AD 4E 07                  		lda AreaType
08FC6 D0 06                     		bne @e
08FC8 BD 78 89                  		lda OnOffCbW,x
08FCB 4C D1 8F                  		jmp @i
08FCE BD 74 89                  @e:		lda OnOffCb,x	
08FD1                           @i:		
08FD1 A8                        		tay
08FD2 A9 85                     		lda #$85
08FD4 8D C5 05                          sta Old8000
08FD7 8D 00 80                  		sta $8000
08FDA 98                                tya
08FDB 8D 01 80                          sta $8001
08FDE 60                        		rts
08FDF                           Bank1:
08FDF 18                        		clc
08FE0 7D F1 8F                  		adc AnimAdder,x
08FE3 4C CE 80                  		jmp setRightCHR
08FE6                           BankR:
08FE6 A2 00                     		ldx #$00
08FE8 8E 00 60                  		stx ChangeBankR		;reset bank change
08FEB 4C DF 8F                  		jmp Bank1			
08FEE                           PSwitchBank1:
08FEE 4C A7 8F                  		jmp PSwitchBank
08FF1                           AnimAdder:
08FF1 04 0C 14 1C 24 2C 34 3C   	.db %00000100, %00001100, %00010100, %00011100, %00100100, %00101100, %00110100, %00111100
08FF9                           AreaAdder:
08FF9 40 00 00 00               	.db $40, $00, $00, $00
08FFD                           AreaAdderP:
08FFD DC 84 84 84               	.db %11011100, %10000100, %10000100, %10000100
09001                           HurryUpChg:
09001 AD 01 60                  		lda ChangeBankRDelay
09004 D0 08                     		bne +
09006                           		;lda PTimer
09006                           		;bne PSwitchBank1
09006                           		;lda #$01
09006                           		;sta ChangeBankRDelay
09006                           ;+:		 dec ChangeBankRDelay
09006 AD 28 60                  		lda PTimer
09009 D0 E3                     		bne PSwitchBank1
0900B 4C 11 90                  		jmp ++
0900E CE 01 60                  +:		dec ChangeBankRDelay
09011 AD 28 60                  ++:		lda PTimer
09014 F0 0C                     		beq ++
09016 AE 4E 07                  		ldx AreaType
09019 BD FD 8F                  		lda AreaAdderP,x
0901C                           		;add #%01000100
0901C 20 CE 80                  		jsr setRightCHR
0901F 4C C0 8F                  		jmp Fuk
09022                           ++:							;if ptimer not set
09022 AD 53 60                  		lda OnOffBits				
09025 29 01                     		and #%00000001				;save only bit 0
09027 8D 53 60                  		sta OnOffBits
0902A AD B3 63                  		lda ChangeBankRDelay2
0902D F0 04                     		beq +
0902F CE B3 63                  		dec ChangeBankRDelay2
09032 60                        		rts
09033 A9 02                     +:		lda #$02
09035 8D B3 63                  		sta ChangeBankRDelay2
09038                           		
09038 AC 4E 07                  		ldy AreaType
0903B B9 F9 8F                  		lda AreaAdder,y
0903E EE 00 60                  		inc ChangeBankR				;increment bank timer
09041 AE 00 60                  		ldx ChangeBankR		
09044 E0 08                     		cpx #$08
09046 F0 9E                     		beq BankR
09048 4C DF 8F                  		jmp Bank1
0904B                           bocataprint:
0904B 85 00                     	  sta $00            ;store player-specific offset
0904D 20 56 90                        jsr OutputNumbers1  ;use first nybble to print the coin display
09050 A5 00                           lda $00            ;move high nybble to low
09052 4A                              lsr                ;and print to score display
09053 4A                              lsr
09054 4A                              lsr
09055 4A                              lsr
09056                           
09056                           OutputNumbers1:
09056 18                                     clc                      ;add 1 to low nybble
09057 69 01                                  adc #$01
09059 29 0F                                  and #%00001111           ;mask out high nybble
0905B C9 07                                  cmp #$07
0905D B0 48                                  bcs ExitOutput1
0905F 48                                     pha                      ;save incremented value to stack for now and
09060 0A                                     asl                      ;shift to left and use as offset
09061 A8                                     tay
09062 AE 00 64                               ldx VRAM_Buffer1_Offset  ;get current buffer pointer
09065 E0 20                     			 cpx #$20
09067 B0 3F                     			 bcs +
09069 A9 20                     			 lda #$20                 ;put at top of screen by default
0906B C0 00                                  cpy #$00                 ;are we writing top score on title screen?
0906D D0 02                                  bne SetupNums1
0906F A9 22                                  lda #$22                 ;if so, put further down on the screen
09071 9D 01 64                  SetupNums1:  sta VRAM_Buffer1,x
09074 B9 97 F8                               lda StatusBarData,y      ;write low vram address and length of thing
09077 9D 02 64                               sta VRAM_Buffer1+1,x     ;we're printing to the buffer
0907A B9 98 F8                               lda StatusBarData+1,y
0907D 9D 03 64                               sta VRAM_Buffer1+2,x
09080 85 03                                  sta $03                  ;save length byte in counter
09082 86 02                                  stx $02
09084 68                                     pla                      ;pull original incremented value from stack
09085 AA                                     tax
09086 BD A5 F8                               lda StatusBarOffset,x    ;load offset to value we want to write
09089 38                                     sec
0908A F9 98 F8                               sbc StatusBarData+1,y    ;subtract from length byte we read before
0908D A8                                     tay                      ;use value as offset to display digits
0908E A6 02                                  ldx $02
09090 B9 D7 07                  DigitPLoop1: lda DisplayDigits,y      ;write digits to the buffer
09093 9D 04 64                               sta VRAM_Buffer1+3,x    
09096 E8                                     inx
09097 C8                                     iny
09098 C6 03                                  dec $03                  ;do this until all the digits are written
0909A D0 F4                                  bne DigitPLoop1
0909C A9 00                     			 lda #$00                 ;put null terminator at end
0909E 9D 04 64                               sta VRAM_Buffer1+3,x
090A1 E8                                     inx                      ;increment buffer pointer by 3
090A2 E8                                     inx
090A3 E8                                     inx
090A4 8E 00 64                               stx VRAM_Buffer1_Offset  ;store it in case we want to use it again
090A7 60                        ExitOutput1: rts
090A8 68                        +:			 pla
090A9 EE 61 60                  			 inc bocata3
090AC 60                        		     rts
090AD                           			 
090AD                           Text_AddrTable_Low:
090AD BD DA EE 08 1F 34 4F 67         .db <MuchoTexto, <PocoTexto, <Studs, <pending, <hellfire, <smbarena, <obviouslyme, <ElPepe
090B5                           Text_AddrTable_High:
090B5 90 90 90 91 91 91 91 91         .db >MuchoTexto, >PocoTexto, >Studs, >pending, >hellfire, >smbarena, >obviouslyme, >ElPepe
090BD                           
090BD                           MuchoTexto:
090BD 20 43 1D 11 0A 17 14 1C.. 	.db $20, $43, "THANKS FOR PLAYING MY HACK"-55, $ff
090DA                           PocoTexto:
090DA 20 C8 1C 19 0E 0C 12 0A.. 	.db $20, $C8, "SPECIAL THANKS TO"-55, $ff
090EE                           Studs:
090EE 21 25 1C 1D 1E 0D 1C 21.. 	.db $21, $25, "STUDSX - TECHNICAL HELP"-55, $ff
09108                           pending:
09108 21 68 15 1E 0C 0A 1C E9.. 	.db $21, $68, "LUCAS - TITLE SCREEN"-55, $ff
0911F                           hellfire:
0911F 21 A7 11 0E 15 15 0F 12.. 	.db $21, $a7, "HELLFIRE - ARTWORK"-55, $ff
09134                           smbarena:
09134 21 E4 1C 16 0B E9 0A 1B.. 	.db $21, $e4, "SMB ARENA DISCORD SERVER"-55, $ff
0914F                           obviouslyme:
0914F 22 86 11 0A 0C 14 E9 16.. 	.db $22, $86, "HACK MADE BY ALEFUNKY"-55, $ff
09167                           ElPepe:
09167 23 6E 19 1B 0E 1C 1C E9.. 	.db $23, $6e, "PRESS BUTTON B..."-55, $ff
0917B                           
0917B                           PauseMenu:
0917B AD B7 63                  	   lda SetupPause
0917E 20 A0 F7                  	   jsr JumpEngine
09181                           
09181 C2 91                     		.dw Noth
09183 C3 91                     		.dw DisplayPauseMenu
09185 A4 91                     		.dw Some
09187 AB 91                     		.dw SetPauseBG
09189 9E 91                     		.dw DrawMenuCursorj
0918B 97 91                     		.dw Clear6400
0918D 67 92                     		.dw DisplayMenuText
0918F 91 91                     		.dw UnPauses
09191                           UnPauses:
09191 A9 00                     	lda #$00
09193 8D B7 63                  	sta SetupPause
09196 60                        	rts
09197                           Clear6400:
09197 20 34 8A                  	jsr ClearVRAM
0919A EE B7 63                  	inc SetupPause
0919D 60                        	rts
0919E                           DrawMenuCursorj:
0919E EE B7 63                  	inc SetupPause
091A1 4C CF 93                  	jmp DrawMenuCursor
091A4                           Some:
091A4 20 1B 93                  	jsr PSoundSetting
091A7 EE B7 63                  	inc SetupPause
091AA 60                        	rts
091AB                           SetPauseBG:
091AB AD B9 63                  	   lda SettingSelec
091AE C9 02                     	   cmp #$02
091B0 D0 02                     	   bne +
091B2 A9 03                     	   lda #$03
091B4 8D BA 63                  +:	   sta OldSettingSelec
091B7 A9 02                     	   lda #$02
091B9 8D B9 63                  	   sta SettingSelec
091BC EE B7 63                  	   inc SetupPause
091BF 4C EC 92                  	   jmp MusicSetting
091C2 60                        Noth:  rts
091C3                           
091C3                           DisplayPauseMenu:
091C3 AD 76 07                  	  lda GamePauseStatus
091C6 A8                        	  tay
091C7 C8                        	  iny                    ;set pause sfx queue for next pause mode
091C8 84 EB                     	  sty PauseSoundQueue
091CA A9 81                     	  lda #$81
091CC 8D 76 07                  	  sta GamePauseStatus
091CF EE B7 63                  	  inc SetupPause
091D2 AE 00 64                  	  ldx VRAM_Buffer1_Offset
091D5 A0 00                     	  ldy #$00
091D7 B9 44 92                  -:	  lda RestartText,y
091DA 9D 01 64                  	  sta VRAM_Buffer1,x
091DD C8                        	  iny
091DE E8                        	  inx
091DF C0 10                     	  cpy #$10
091E1 90 F4                     	  bcc -
091E3 8E 00 64                  	  stx VRAM_Buffer1_Offset
091E6 A0 00                     	  ldy #$00
091E8 B9 55 92                  -:	  lda QTTSText,y
091EB 9D 01 64                  	  sta VRAM_Buffer1,x
091EE C8                        	  iny
091EF E8                        	  inx
091F0 C0 11                     	  cpy #$11
091F2 90 F4                     	  bcc -
091F4 8E 00 64                  	  stx VRAM_Buffer1_Offset
091F7 60                        	  rts
091F8 28 A3 0B 16 1E 1C 12 0C.. MusicMutetxt: .db $28, $a3, $0b, "MUSIC"-55, $24, $28, $24, "ON"-55, $24, $00
09207 28 A3 0B 16 1E 1C 12 0C.. MusicMuteON:  .db $28, $a3, $0b, "MUSIC"-55, $24, $28, $24, "OFF"-55, $00
09216 28 E3 13 19 24 1C 19 0E.. PSoundtxt: .db $28, $e3, $13, "P"-55, $24, "SPEED"-55, $24, "SOUND"-55, $24, $28, $24, "ON"-55, $24, $00
0922D 28 E3 13 19 24 1C 19 0E.. PSoundON:  .db $28, $e3, $13, "P"-55, $24, "SPEED"-55, $24, "SOUND"-55, $24, $28, $24, "OFF"-55, $00
09244 29 23 0D 1B 0E 1C 1D 0A.. RestartText:  .db $29, $23, $0d, "RESTART"-55, $24, "LEVEL"-55, $00
09255 29 63 0E 1A 1E 12 1D 24.. QTTSText:  	  .db $29, $63, $0e, "QUIT"-55, $24, "AND"-55, $24, "SAVE"-55, $24, $00
09267                           DisplayMenuText:
09267                           	  ;$28a2
09267 A5 0A                     	  lda A_B_Buttons
09269 85 0D                     	  sta PreviousA_B_Buttons
0926B AD FC 06                  	  lda SavedJoypadBits         ;otherwise store A and B buttons in $0a
0926E 29 C0                     	  and #%11000000
09270 85 0A                     	  sta A_B_Buttons
09272 AD FC 06                  	  lda SavedJoypadBits         ;store left and right buttons in $0c
09275 29 03                     	  and #%00000011
09277 85 0C                     	  sta Left_Right_Buttons
09279 A5 0B                     	  lda Up_Down_Buttons
0927B 8D B8 63                  	  sta PreviousUp_Down_Buttons
0927E AD FC 06                  	  lda SavedJoypadBits         ;store up and down buttons in $0b
09281 29 0C                     	  and #%00001100
09283 85 0B                     	  sta Up_Down_Buttons
09285                           	  
09285 A5 0A                     	  lda A_B_Buttons
09287 29 80                     	  and #A_Button
09289 F0 14                     	  beq +
0928B 25 0D                     	  and PreviousA_B_Buttons
0928D D0 10                     	  bne +
0928F AE B9 63                  	  ldx SettingSelec
09292 CA                        	  dex
09293 CA                        	  dex
09294 BD 06 7F                  	  lda SettingsBits,x
09297 49 01                     	  eor #$01
09299 9D 06 7F                  	  sta SettingsBits,x
0929C 4C DB 92                  	  jmp WhenTheSus
0929F A5 0B                     +:	  lda Up_Down_Buttons
092A1 29 08                     	  and #Up_Dir
092A3 F0 18                     	  beq +
092A5 2D B8 63                  	  and PreviousUp_Down_Buttons
092A8 D0 13                     	  bne +
092AA AD B9 63                  	  lda SettingSelec
092AD C9 02                     	  cmp #$02
092AF F0 69                     	  beq PauseMenuExit
092B1                           	  
092B1 AD B9 63                  	  lda SettingSelec
092B4 8D BA 63                  	  sta OldSettingSelec
092B7 CE B9 63                  	  dec SettingSelec
092BA 4C CF 93                  	  jmp DrawMenuCursor
092BD A5 0B                     +:	  lda Up_Down_Buttons
092BF 29 04                     	  and #Down_Dir
092C1 F0 57                     	  beq PauseMenuExit
092C3 2D B8 63                  	  and PreviousUp_Down_Buttons
092C6 D0 52                     	  bne PauseMenuExit
092C8 AD B9 63                  	  lda SettingSelec
092CB C9 05                     	  cmp #$05
092CD F0 4B                     	  beq PauseMenuExit
092CF AD B9 63                  	  lda SettingSelec
092D2 8D BA 63                  	  sta OldSettingSelec
092D5 EE B9 63                  	  inc SettingSelec
092D8 4C CF 93                  	  jmp DrawMenuCursor
092DB                           WhenTheSus:
092DB AE B9 63                  	  ldx SettingSelec
092DE CA                        	  dex
092DF CA                        	  dex
092E0 8A                        	  txa
092E1                           	  ;cmp #$05
092E1                           	  ;bcs ++
092E1 20 A0 F7                  	  jsr JumpEngine
092E4                           	  
092E4 EC 92                     	  .dw MusicSetting
092E6 1B 93                     	  .dw PSoundSetting
092E8 4A 93                     	  .dw RestartSetting
092EA 87 93                     	  .dw QuitToTitleScreen
092EC                           	  
092EC                           MusicSetting:
092EC AD 06 7F                  	  lda SettingsBits
092EF D0 15                     	  bne +
092F1                           	  
092F1 AE 00 64                  	  ldx VRAM_Buffer1_Offset
092F4 A0 00                     	  ldy #$00
092F6 B9 F8 91                  -:	  lda MusicMutetxt,y
092F9 9D 01 64                  	  sta VRAM_Buffer1,x
092FC C8                        	  iny
092FD E8                        	  inx
092FE C0 0F                     	  cpy #$0f
09300 90 F4                     	  bcc -
09302 8E 00 64                  	  stx VRAM_Buffer1_Offset
09305 60                        ++:	  rts
09306                           +:	  
09306 AE 00 64                  	  ldx VRAM_Buffer1_Offset
09309 A0 00                     	  ldy #$00
0930B B9 07 92                  -:	  lda MusicMuteON,y
0930E 9D 01 64                  	  sta VRAM_Buffer1,x
09311 C8                        	  iny
09312 E8                        	  inx
09313 C0 0F                     	  cpy #$0f
09315 90 F4                     	  bcc -
09317 8E 00 64                  	  stx VRAM_Buffer1_Offset
0931A 60                        PauseMenuExit: rts	  
0931B                           PSoundSetting:
0931B AD 07 7F                  	  lda SettingsBits+1
0931E D0 15                     	  bne +
09320                           	  
09320 AE 00 64                  	  ldx VRAM_Buffer1_Offset
09323 A0 00                     	  ldy #$00
09325 B9 16 92                  -:	  lda PSoundtxt,y
09328 9D 01 64                  	  sta VRAM_Buffer1,x
0932B C8                        	  iny
0932C E8                        	  inx
0932D C0 17                     	  cpy #$17
0932F 90 F4                     	  bcc -
09331 8E 00 64                  	  stx VRAM_Buffer1_Offset
09334 60                        	  rts
09335                           +:	  
09335 AE 00 64                  	  ldx VRAM_Buffer1_Offset
09338 A0 00                     	  ldy #$00
0933A B9 2D 92                  -:	  lda PSoundON,y
0933D 9D 01 64                  	  sta VRAM_Buffer1,x
09340 C8                        	  iny
09341 E8                        	  inx
09342 C0 17                     	  cpy #$17
09344 90 F4                     	  bcc -
09346 8E 00 64                  	  stx VRAM_Buffer1_Offset
09349 60                        	  rts
0934A                           RestartSetting:
0934A                           	 ;inc FetchNewGameTimerFlag ;set flag to load new game timer
0934A                                ;inc DisableScreenFlag     ;set flag to disable screen output
0934A A9 00                     	 lda #$00
0934C 8D B7 63                  	 sta SetupPause
0934F 8D C6 07                  	 sta PauseModeFlag
09352 85 EB                     	 sta PauseSoundQueue
09354 8D B2 07                  	 sta PauseSoundBuffer
09357 09 80                     	 ora #$80
09359 8D 76 07                  	 sta GamePauseStatus
0935C A9 02                     	 lda #$02
0935E 8D AE 63                  	 sta OldNameTableSelect
09361 AC 4E 07                  	 ldy AreaType
09364 C0 01                     	 cpy #$01
09366 D0 03                     	 bne +
09368 AD BC 63                  	 lda BackgroundColorCtrlFP
0936B 8D 44 07                  +:	 sta BackgroundColorCtrl
0936E                           
0936E AD 5F 07                  			lda WorldNumber
09371 C9 04                     			   cmp #$04
09373 D0 0C                     			   bne +
09375 AD 60 07                  			   lda AreaNumber
09378 C9 03                     			   cmp #$03
0937A D0 05                     			   bne +
0937C A9 01                     			   lda #$01
0937E 8D 44 07                  			   sta BackgroundColorCtrl
09381                           			   
09381                           +:			   
09381                           			
09381 20 A3 94                  	 jsr GetPlayerColors2
09384 4C BE D8                  	 jmp KillPlayer
09387                           	 
09387                           QuitToTitleScreen:
09387 EE BB 63                  	 inc DoFin
0938A EE 74 07                  	 inc DisableScreenFlag
0938D A9 00                     	 lda #$00
0938F 8D 76 07                  	 sta GamePauseStatus
09392 8D AD 63                  	 sta OldHorizontalScroll
09395 8D 06 60                  	 sta HurryUp
09398 8D 07 60                  	 sta UnknownHurryUp
0939B A9 02                     	 lda #$02
0939D 8D AE 63                  	 sta OldNameTableSelect
093A0 AD 5F 07                  	 lda WorldNumber
093A3 8D 11 7F                  	 sta ContinueWorld
093A6 AD 5C 07                  	 lda LevelNumber
093A9 8D 12 7F                  	 sta ContinueLevel
093AC A0 06                     	 ldy #$06
093AE B9 DD 07                  -:	 lda PlayerScoreDisplay,y
093B1 99 13 7F                  	 sta ContinueScore,y
093B4 88                        	 dey
093B5 10 F7                     	 bpl -
093B7                           	 
093B7 A0 03                     	 ldy #$03
093B9 B9 EB 07                  -:	 lda PlayerCoinDisplay,y
093BC 99 1A 7F                  	 sta ContinueCoins,y
093BF 88                        	 dey
093C0 10 F7                     	 bpl -
093C2 AD 56 07                  	 lda PlayerStatus
093C5 8D 1E 7F                  	 sta ContinuePwrup
093C8 AD 5E 07                  	 lda CoinTally
093CB 8D 1F 7F                  	 sta ContinueCoinTally
093CE                           
093CE 60                        	 rts
093CF                           	 
093CF                           DrawMenuCursor:
093CF AE 00 64                  	 ldx VRAM_Buffer1_Offset
093D2 AD B9 63                  	 lda SettingSelec
093D5 29 FC                     	 and #%11111100
093D7 4A                        	 lsr
093D8 4A                        	 lsr
093D9 18                        	 clc
093DA 69 28                     	 adc #$28
093DC 9D 01 64                  	 sta VRAM_Buffer1,x
093DF AD B9 63                  	 lda SettingSelec
093E2 6A                        	 ror
093E3 6A                        	 ror
093E4 6A                        	 ror
093E5 18                        	 clc
093E6 69 21                     	 adc #$21
093E8 9D 02 64                  	 sta VRAM_Buffer1+1,x
093EB A9 01                     	 lda #$01
093ED 9D 03 64                  	 sta VRAM_Buffer1+2,x
093F0 A9 2E                     	 lda #$2e
093F2 9D 04 64                  	 sta VRAM_Buffer1+3,x
093F5                           	 ;lda #$00
093F5                           	 ;sta VRAM_Buffer1+4,x
093F5 8A                        	 txa
093F6 18                        	 clc
093F7 69 04                     	 adc #$04
093F9 AA                        	 tax
093FA AD BA 63                  	 lda OldSettingSelec
093FD 29 FC                     	 and #%11111100
093FF 4A                        	 lsr
09400 4A                        	 lsr
09401 18                        	 clc
09402 69 28                     	 adc #$28
09404 9D 01 64                  	 sta VRAM_Buffer1,x
09407 AD BA 63                  	 lda OldSettingSelec
0940A 6A                        	 ror
0940B 6A                        	 ror
0940C 6A                        	 ror
0940D 18                        	 clc
0940E 69 21                     	 adc #$21
09410 9D 02 64                  	 sta VRAM_Buffer1+1,x
09413 A9 01                     	 lda #$01
09415 9D 03 64                  	 sta VRAM_Buffer1+2,x
09418 A9 24                     	 lda #$24
0941A 9D 04 64                  	 sta VRAM_Buffer1+3,x
0941D A9 00                     	 lda #$00
0941F 9D 05 64                  	 sta VRAM_Buffer1+4,x
09422 8A                        	 txa
09423 18                        	 clc
09424 69 05                     	 adc #$05
09426 8D 00 64                  	 sta VRAM_Buffer1_Offset
09429 60                        	 rts
0942A                           	 
0942A                           DoFlagpoleEnemy:
0942A 20 63 94                  	  jsr jmpidk2
0942D B0 40                     	  bcs +
0942F 8E CC 7F                  	  stx $7fcc
09432 AD BE 63                        lda FlagpoleEnemyCol    ;multiply current offset where we're at by 16
09435 0A                              asl                     ;to obtain horizontal pixel coordinate
09436 0A                              asl
09437 0A                              asl
09438 0A                              asl
09439 38                              sec                      ;get pixel coordinate of where the flagpole is,
0943A E9 08                           sbc #$08                 ;subtract eight pixels and use as horizontal
0943C 8D BA 7F                        sta $7fba
0943F                           	  ;sta Enemy_X_Position,x   ;coordinate for the flag
0943F AD BD 63                        lda FlagpoleEnemyPage
09442 E9 66                           sbc #$66                 ;subtract borrow from page location and use as
09444 8D B9 7F                  	  sta $7fb9
09447 95 60                           sta Enemy_PageLoc,x      ;page location for the flag
09449 AD BA 7F                  	  lda $7fba
0944C 95 79                     	  sta Enemy_X_Position,x
0944E A9 30                           lda #$30
09450 95 C1                           sta Enemy_Y_Position,x   ;set vertical coordinate for flag
09452 A9 B0                           lda #$b0
09454 8D 0D 01                        sta FlagpoleFNum_Y_Pos   ;set initial vertical coordinate for flagpole's floatey number
09457 A9 30                           lda #FlagpoleFlagObject
09459 95 15                           sta Enemy_ID,x           ;set flag identifier, note that identifier and coordinates
0945B A9 01                     	  lda #$01
0945D 8D CA 63                  	  sta FlagpoleOnScreen
09460 F6 0F                           inc Enemy_Flag,x         ;use last space in enemy object buffer
09462 60                        	  rts
09463                           	  
09463                           jmpidk2:
09463 A2 04                     		ldx #$04
09465 18                        		clc
09466 B5 0F                     		lda Enemy_Flag,x
09468 F0 05                     		beq +
0946A 20 70 94                  		jsr QUe2
0946D 90 00                     		bcc +
0946F 60                        +:		rts
09470                           QUe2:	
09470 A2 00                     		ldx #$00
09472 18                        -:		clc
09473 B5 0F                     		lda Enemy_Flag,x
09475 F0 05                     		beq +
09477 E8                        		inx
09478 E0 04                     		cpx #$04
0947A D0 F6                     		bne -
0947C 60                        +:		rts
0947D                           
0947D                           PlayerColorsOffset1:
0947D 00 0C                           .db MarioColors1-PlayerColors1, LuigiColors1-PlayerColors1
0947F                                 
0947F                           PlayerColors1:
0947F                           MarioColors1:
0947F 22 16 27 18                     .db $22, $16, $27, $18 ;Small
09483 22 16 27 18                     .db $22, $16, $27, $18 ;Big
09487 22 37 27 16                     .db $22, $37, $27, $16 ;Fiery
0948B                           LuigiColors1:
0948B 22 30 27 19               	  .db $22, $30, $27, $19 ;Small
0948F 22 30 27 19               	  .db $22, $30, $27, $19 ;Big
09493 22 30 27 16               	  .db $22, $30, $27, $16 ;Fiery
09497                            
09497                           BackgroundColors1:
09497 22 22 0F 0F                     .db $22, $22, $0f, $0f ;used by area type if bg color ctrl not set
0949B 0F 22 0F 0F                     .db $0f, $22, $0f, $0f ;used by background color control if set
0949F 12 12 0F 0F               	  .db $12, $12, $0f, $0f
094A3                           
094A3                           GetPlayerColors2: 
094A3 AE 00 64                  			   ldx VRAM_Buffer1_Offset  ;get current buffer offset
094A6 AD 56 07                                 lda PlayerStatus
094A9 0A                                       asl
094AA 0A                                       asl
094AB 85 00                                    sta $00
094AD AC 53 07                                 ldy CurrentPlayer
094B0 B9 7D 94                                 lda PlayerColorsOffset1,y
094B3 18                                       clc
094B4 65 00                                    adc $00
094B6 A8                                       tay
094B7 A9 03                     StartClrGet1:  lda #$03                 ;do four colors
094B9 85 00                                    sta $00
094BB B9 7F 94                  ClrGetLoop1:   lda PlayerColors1,y       ;fetch player colors and store them
094BE 9D 04 64                                 sta VRAM_Buffer1+3,x     ;in the buffer
094C1 C8                                       iny
094C2 E8                                       inx
094C3 C6 00                                    dec $00
094C5 10 F4                                    bpl ClrGetLoop1
094C7 AE 00 64                                 ldx VRAM_Buffer1_Offset  ;load original offset from before
094CA AC 44 07                  			   ldy BackgroundColorCtrl  ;if this value is four or greater, it will be set
094CD D0 0D                                    bne SetBGColor1         ;therefore use it as offset to background color
094CF AC 4E 07                  			   ldy AreaType
094D2 D0 05                     			   bne +
094D4 A0 08                     			   ldy #$08
094D6 4C DC 94                  			   jmp SetBGColor1
094D9                           +:             
094D9 AC 4E 07                                 ldy AreaType             ;otherwise use area type bits from area offset as offset
094DC B9 97 94                  SetBGColor1:   lda BackgroundColors1,y   ;to background color instead
094DF 9D 04 64                                 sta VRAM_Buffer1+3,x
094E2 A9 3F                                    lda #$3f                 ;set for sprite palette address
094E4 9D 01 64                                 sta VRAM_Buffer1,x       ;save to buffer
094E7 A9 10                                    lda #$10
094E9 9D 02 64                                 sta VRAM_Buffer1+1,x
094EC A9 04                                    lda #$04                 ;write length byte to buffer
094EE 9D 03 64                                 sta VRAM_Buffer1+2,x
094F1 A9 00                                    lda #$00                 ;now the null terminator
094F3 9D 08 64                                 sta VRAM_Buffer1+7,x
094F6 8A                                       txa                      ;move the buffer pointer ahead 7 bytes
094F7 18                                       clc                      ;in case we want to write anything else later
094F8 69 07                                    adc #$07
094FA 8D 00 64                  		       sta VRAM_Buffer1_Offset  ;store as new vram buffer offset
094FD 60                                       rts
094FE                           			   
094FE                           			   
094FE                           			   
094FE                           			   
094FE                           Hitboxes:
094FE 03 03 03 03 03 09 09 09.. 	.db $03, $03, $03, $03,  $03, $09, $09, $09,  $09, $09, $09, $09,  $00, $03, $03, $03
0950E 03 03 09 03 03 03 03 03.. 	.db $03, $03, $09, $03,  $03, $03, $03, $03,  $00, $09, $00, $00,  $00, $00, $00, $00
0951E 00 00 00 00 00 00 00 00.. 	.db $00, $00, $00, $00,  $00, $00, $00, $00,  $00, $00, $00, $00,  $00, $00, $09, $00
0952E 00 00 00 00 00 00 00      	.db $00, $00, $00, $00,  $00, $00, $00
09535                           	
09535 09 03                     PPhitbox1: .db $09, $03
09537                           	
09537                           MoveAllSpritesOffscreen1:
09537                                         ;ldy #$00                ;this routine moves all sprites off the screen
09537                                         ;.byte $2c                 ;BIT instruction opcode
09537                           
09537                           MoveSpritesOffscreen1:
09537 A0 00                                   ldy #$00                ;this routine moves all but sprite 0
09539 A9 F8                                   lda #$f8                ;off the screen
0953B                           SprInitLoop:  ;sta Sprite_Y_Position,y ;write 248 into OAM data's Y coordinate
0953B                                         I=0
0953B                           				REPT 64
0953B                           				   sta $0200 + I
0953B                           				   I = I + 4
0953B                           				ENDR
0953B 8D 00 02                  				   sta $0200 + I
0953E                           				   I = I + 4
0953E 8D 04 02                  				   sta $0200 + I
09541                           				   I = I + 4
09541 8D 08 02                  				   sta $0200 + I
09544                           				   I = I + 4
09544 8D 0C 02                  				   sta $0200 + I
09547                           				   I = I + 4
09547 8D 10 02                  				   sta $0200 + I
0954A                           				   I = I + 4
0954A 8D 14 02                  				   sta $0200 + I
0954D                           				   I = I + 4
0954D 8D 18 02                  				   sta $0200 + I
09550                           				   I = I + 4
09550 8D 1C 02                  				   sta $0200 + I
09553                           				   I = I + 4
09553 8D 20 02                  				   sta $0200 + I
09556                           				   I = I + 4
09556 8D 24 02                  				   sta $0200 + I
09559                           				   I = I + 4
09559 8D 28 02                  				   sta $0200 + I
0955C                           				   I = I + 4
0955C 8D 2C 02                  				   sta $0200 + I
0955F                           				   I = I + 4
0955F 8D 30 02                  				   sta $0200 + I
09562                           				   I = I + 4
09562 8D 34 02                  				   sta $0200 + I
09565                           				   I = I + 4
09565 8D 38 02                  				   sta $0200 + I
09568                           				   I = I + 4
09568 8D 3C 02                  				   sta $0200 + I
0956B                           				   I = I + 4
0956B 8D 40 02                  				   sta $0200 + I
0956E                           				   I = I + 4
0956E 8D 44 02                  				   sta $0200 + I
09571                           				   I = I + 4
09571 8D 48 02                  				   sta $0200 + I
09574                           				   I = I + 4
09574 8D 4C 02                  				   sta $0200 + I
09577                           				   I = I + 4
09577 8D 50 02                  				   sta $0200 + I
0957A                           				   I = I + 4
0957A 8D 54 02                  				   sta $0200 + I
0957D                           				   I = I + 4
0957D 8D 58 02                  				   sta $0200 + I
09580                           				   I = I + 4
09580 8D 5C 02                  				   sta $0200 + I
09583                           				   I = I + 4
09583 8D 60 02                  				   sta $0200 + I
09586                           				   I = I + 4
09586 8D 64 02                  				   sta $0200 + I
09589                           				   I = I + 4
09589 8D 68 02                  				   sta $0200 + I
0958C                           				   I = I + 4
0958C 8D 6C 02                  				   sta $0200 + I
0958F                           				   I = I + 4
0958F 8D 70 02                  				   sta $0200 + I
09592                           				   I = I + 4
09592 8D 74 02                  				   sta $0200 + I
09595                           				   I = I + 4
09595 8D 78 02                  				   sta $0200 + I
09598                           				   I = I + 4
09598 8D 7C 02                  				   sta $0200 + I
0959B                           				   I = I + 4
0959B 8D 80 02                  				   sta $0200 + I
0959E                           				   I = I + 4
0959E 8D 84 02                  				   sta $0200 + I
095A1                           				   I = I + 4
095A1 8D 88 02                  				   sta $0200 + I
095A4                           				   I = I + 4
095A4 8D 8C 02                  				   sta $0200 + I
095A7                           				   I = I + 4
095A7 8D 90 02                  				   sta $0200 + I
095AA                           				   I = I + 4
095AA 8D 94 02                  				   sta $0200 + I
095AD                           				   I = I + 4
095AD 8D 98 02                  				   sta $0200 + I
095B0                           				   I = I + 4
095B0 8D 9C 02                  				   sta $0200 + I
095B3                           				   I = I + 4
095B3 8D A0 02                  				   sta $0200 + I
095B6                           				   I = I + 4
095B6 8D A4 02                  				   sta $0200 + I
095B9                           				   I = I + 4
095B9 8D A8 02                  				   sta $0200 + I
095BC                           				   I = I + 4
095BC 8D AC 02                  				   sta $0200 + I
095BF                           				   I = I + 4
095BF 8D B0 02                  				   sta $0200 + I
095C2                           				   I = I + 4
095C2 8D B4 02                  				   sta $0200 + I
095C5                           				   I = I + 4
095C5 8D B8 02                  				   sta $0200 + I
095C8                           				   I = I + 4
095C8 8D BC 02                  				   sta $0200 + I
095CB                           				   I = I + 4
095CB 8D C0 02                  				   sta $0200 + I
095CE                           				   I = I + 4
095CE 8D C4 02                  				   sta $0200 + I
095D1                           				   I = I + 4
095D1 8D C8 02                  				   sta $0200 + I
095D4                           				   I = I + 4
095D4 8D CC 02                  				   sta $0200 + I
095D7                           				   I = I + 4
095D7 8D D0 02                  				   sta $0200 + I
095DA                           				   I = I + 4
095DA 8D D4 02                  				   sta $0200 + I
095DD                           				   I = I + 4
095DD 8D D8 02                  				   sta $0200 + I
095E0                           				   I = I + 4
095E0 8D DC 02                  				   sta $0200 + I
095E3                           				   I = I + 4
095E3 8D E0 02                  				   sta $0200 + I
095E6                           				   I = I + 4
095E6 8D E4 02                  				   sta $0200 + I
095E9                           				   I = I + 4
095E9 8D E8 02                  				   sta $0200 + I
095EC                           				   I = I + 4
095EC 8D EC 02                  				   sta $0200 + I
095EF                           				   I = I + 4
095EF 8D F0 02                  				   sta $0200 + I
095F2                           				   I = I + 4
095F2 8D F4 02                  				   sta $0200 + I
095F5                           				   I = I + 4
095F5 8D F8 02                  				   sta $0200 + I
095F8                           				   I = I + 4
095F8 8D FC 02                  				   sta $0200 + I
095FB                           				   I = I + 4
095FB 60                                      rts
095FC                           			  
095FC                           BlankPalette:
095FC 3F 08 04 FF FF FF FF 00          .db $3f, $08, $04, $ff, $ff, $ff, $ff, $00
09604                           
09604                           ;used based on area type
09604                           Palette2Data:
09604 12 30 22 0F                      .db $12, $30, $22, $0f
09608 22 30 21 0F                      .db $22, $30, $21, $0f
0960C 0F 30 21 0C                      .db $0f, $30, $21, $0c
09610 0F 30 16 00                      .db $0f, $30, $16, $00
09614                           
09614                           ColorRotation:
09614 AE 00 64                                ldx VRAM_Buffer1_Offset  ;check vram buffer offset
09617 E0 31                                   cpx #$31
09619 B0 42                                   bcs ExitColorRot         ;if offset over 48 bytes, branch to leave
0961B A0 00                                   ldy #$00                      ;otherwise use frame counter's 3 LSB as offset here
0961D B9 FC 95                  GetBlankPal:  lda BlankPalette,y       ;get blank palette for palette 3
09620 9D 01 64                                sta VRAM_Buffer1,x       ;store it in the vram buffer
09623 E8                                      inx                      ;increment offsets
09624 C8                                      iny
09625 C0 08                                   cpy #$08
09627 90 F4                                   bcc GetBlankPal          ;do this until all bytes are copied
09629 AE 00 64                                ldx VRAM_Buffer1_Offset  ;get current vram buffer offset
0962C A9 03                                   lda #$03
0962E 85 00                                   sta $00                  ;set counter here
09630 A0 00                     			  ldy #$00
09632 AD 14 7E                  			  lda TheresPal3
09635 D0 06                     			  bne GetAreaPal
09637 AD 4E 07                                lda AreaType             ;get area type
0963A 0A                                      asl                      ;multiply by 4 to get proper offset
0963B 0A                                      asl
0963C A8                                      tay                      ;save as offset here
0963D AD 14 7E                  GetAreaPal:   lda TheresPal3
09640 D0 06                     			  bne +
09642 B9 04 96                  			  lda Palette2Data,y
09645 4C 4B 96                  			  jmp ++
09648 B9 15 7E                  +:			  lda OldPal3,y       	   ;fetch palette to be written based on area type
0964B 9D 04 64                  ++:           sta VRAM_Buffer1+3,x     ;store it to overwrite blank palette in vram buffer
0964E C8                                      iny
0964F E8                                      inx
09650 C6 00                                   dec $00                  ;decrement counter
09652 10 E9                                   bpl GetAreaPal           ;do this until the palette is all copied
09654 AD 00 64                                lda VRAM_Buffer1_Offset
09657 18                                      clc                      ;add seven bytes to vram buffer offset
09658 69 07                                   adc #$07
0965A 8D 00 64                                sta VRAM_Buffer1_Offset
0965D 60                        ExitColorRot: rts                      ;leave
0965E                           
0965E                           ;-------------------------------------------------------------------------------------
0965E                           ;$00-$01 - used in DrawEnemyObjRow to hold sprite tile numbers
0965E                           ;$02 - used to store Y position
0965E                           ;$03 - used to store moving direction, used to flip enemies horizontally
0965E                           ;$04 - used to store enemy's sprite attributes
0965E                           ;$05 - used to store X position
0965E                           ;$eb - used to hold sprite data offset
0965E                           ;$ec - used to hold either altered enemy state or special value used in gfx handler as condition
0965E                           ;$ed - used to hold enemy state from buffer 
0965E                           ;$ef - used to hold enemy code used in gfx handler (may or may not resemble Enemy_ID values)
0965E                           
0965E                           ;tiles arranged in top left, right, middle left, right, bottom left, right order
0965E                           EnemyGraphicsTable:
0965E FC FC AA AB AC AD               .db $fc, $fc, $aa, $ab, $ac, $ad  ;buzzy beetle frame 1
09664 FC FC AE AF B0 B1               .db $fc, $fc, $ae, $af, $b0, $b1  ;             frame 2
0966A FC A5 A6 A7 A8 A9               .db $fc, $a5, $a6, $a7, $a8, $a9  ;koopa troopa frame 1
09670 FC A0 A1 A2 A3 A4               .db $fc, $a0, $a1, $a2, $a3, $a4  ;             frame 2
09676 69 A5 6A A7 A8 A9               .db $69, $a5, $6a, $a7, $a8, $a9  ;koopa paratroopa frame 1
0967C 6B A0 6C A2 A3 A4               .db $6b, $a0, $6c, $a2, $a3, $a4  ;                 frame 2
09682 FC FC 96 97 98 99               .db $fc, $fc, $96, $97, $98, $99  ;spiny frame 1
09688 FC FC 9A 9B 9C 9D               .db $fc, $fc, $9a, $9b, $9c, $9d  ;      frame 2
0968E FC FC 8F 8E 8E 8F               .db $fc, $fc, $8f, $8e, $8e, $8f  ;spiny's egg frame 1
09694 FC FC 95 94 94 95               .db $fc, $fc, $95, $94, $94, $95  ;            frame 2
0969A FC FC DC DC DF DF               .db $fc, $fc, $dc, $dc, $df, $df  ;bloober frame 1
096A0 DC DC DD DD DE DE               .db $dc, $dc, $dd, $dd, $de, $de  ;        frame 2
096A6 FC FC B2 B3 B4 B5               .db $fc, $fc, $b2, $b3, $b4, $b5  ;cheep-cheep frame 1
096AC FC FC B6 B3 B7 B5               .db $fc, $fc, $b6, $b3, $b7, $b5  ;            frame 2
096B2 FC FC 70 71 72 73               .db $fc, $fc, $70, $71, $72, $73  ;goomba
096B8 FC FC 6E 6E 6F 6F               .db $fc, $fc, $6e, $6e, $6f, $6f  ;koopa shell frame 1 (upside-down)
096BE FC FC 6D 6D 6F 6F               .db $fc, $fc, $6d, $6d, $6f, $6f  ;            frame 2
096C4 FC FC 6F 6F 6E 6E               .db $fc, $fc, $6f, $6f, $6e, $6e  ;koopa shell frame 1 (rightsideup)
096CA FC FC 6F 6F 6D 6D               .db $fc, $fc, $6f, $6f, $6d, $6d  ;            frame 2
096D0 FC FC F4 F4 F5 F5               .db $fc, $fc, $f4, $f4, $f5, $f5  ;buzzy beetle shell frame 1 (rightsideup)
096D6 FC FC F4 F4 F5 F5               .db $fc, $fc, $f4, $f4, $f5, $f5  ;                   frame 2
096DC FC FC F5 F5 F4 F4               .db $fc, $fc, $f5, $f5, $f4, $f4  ;buzzy beetle shell frame 1 (upside-down)
096E2 FC FC F5 F5 F4 F4               .db $fc, $fc, $f5, $f5, $f4, $f4  ;                   frame 2
096E8 FC FC FC FC EF EF               .db $fc, $fc, $fc, $fc, $ef, $ef  ;defeated goomba
096EE B9 B8 BB BA BC BC               .db $b9, $b8, $bb, $ba, $bc, $bc  ;lakitu frame 1
096F4 FC FC BD BD BC BC               .db $fc, $fc, $bd, $bd, $bc, $bc  ;       frame 2
096FA 7A 7B DA DB D8 D8               .db $7a, $7b, $da, $db, $d8, $d8  ;princess
09700 CD CD CE CE CF CF               .db $cd, $cd, $ce, $ce, $cf, $cf  ;mushroom retainer
09706 7D 7C D1 8C D3 D2               .db $7d, $7c, $d1, $8c, $d3, $d2  ;hammer bro frame 1
0970C 7D 7C 89 88 8B 8A               .db $7d, $7c, $89, $88, $8b, $8a  ;           frame 2
09712 D5 D4 E3 E2 D3 D2               .db $d5, $d4, $e3, $e2, $d3, $d2  ;           frame 3
09718 D5 D4 E3 E2 8B 8A               .db $d5, $d4, $e3, $e2, $8b, $8a  ;           frame 4
0971E E5 E5 E6 E6 EE EE               .db $e5, $e5, $e6, $e6, $ee, $ee  ;piranha plant frame 1
09724 EC EC ED ED EE EE               .db $ec, $ec, $ed, $ed, $ee, $ee  ;              frame 2
0972A FC FC D0 D0 D7 D7               .db $fc, $fc, $d0, $d0, $d7, $d7  ;podoboo
09730 BF BE C1 C0 C2 FC               .db $bf, $be, $c1, $c0, $c2, $fc  ;bowser front frame 1
09736 C4 C3 C6 C5 C8 C7               .db $c4, $c3, $c6, $c5, $c8, $c7  ;bowser rear frame 1
0973C BF BE CA C9 C2 FC               .db $bf, $be, $ca, $c9, $c2, $fc  ;       front frame 2
09742 C4 C3 C6 C5 CC CB               .db $c4, $c3, $c6, $c5, $cc, $cb  ;       rear frame 2
09748 FC FC E8 E7 EA E9               .db $fc, $fc, $e8, $e7, $ea, $e9  ;bullet bill
0974E FC FC F0 F1 F2 F3         	  .db $fc, $fc, $f0, $f1, $f2, $f3
09754                                 ;.db $f2, $f2, $f3, $f3, $f2, $f2  ;jumpspring frame 1
09754                                 ;.db $f1, $f1, $f1, $f1, $fc, $fc  ;           frame 2
09754                                 ;.db $f0, $f0, $fc, $fc, $fc, $fc  ;           frame 3
09754                           
09754                           EnemyGfxTableOffsets:
09754 0C 0C 00 0C 0C A8 54 3C         .db $0c, $0c, $00, $0c, $0c, $a8, $54, $3c
0975C EA 54 48 48 CC C0 18 18         .db $ea, $54, $48, $48, $cc, $c0, $18, $18 ;0f
09764 18 90 24 18 48 9C D2 D8         .db $18, $90, $24, $18, $48, $9c, $d2, $d8
0976C F0 0C F6 FC 00 00 00 00         .db $f0, $0c, $f6, $fc, $00, $00, $00, $00 ;1f
09774 C0 C0 C0                  	  .db $c0, $c0, $c0
09777                           	  
09777                           EnemyAttributeData:
09777 01 02 03 02 01 01 03 03         .db $01, $02, $03, $02, $01, $01, $03, $03
0977F 03 02 01 02 02 21 01 02         .db $03, $02, $01, $02, $02, $21, $01, $02 ;0f
09787 01 01 02 03 02 02 01 01         .db $01, $01, $02, $03, $02, $02, $01, $01
0978F 02 02 02 02 02 00 00 00         .db $02, $02, $02, $02, $02, $00, $00, $00 ;1f
09797 22 21 22                  	  .db $22, $21, $22
0979A                           
0979A                           EnemyAnimTimingBMask:
0979A 08 18                           .db $08, $18
0979C                           
0979C                           JumpspringFrameOffsets:
0979C 18 1A 1B 1A 18                  .db $18, $1a, $1b, $1a, $18
097A1                           SignPalettes:
097A1 01 03 03 03               	.db $01, $03, $03, $03
097A5                           EnemyGfxHandler1:
097A5 B5 C1                           lda Enemy_Y_Position,x      ;get enemy object vertical position
097A7 85 02                           sta $02
097A9 AD AE 03                        lda Enemy_Rel_XPos          ;get enemy object horizontal position
097AC 85 05                           sta $05                     ;relative to screen
097AE BC E5 06                        ldy Enemy_SprDataOffset,x
097B1 84 DD                           sty temp1                   ;get sprite data offset
097B3 A9 00                           lda #$00
097B5 8D 09 01                        sta VerticalFlipFlag        ;initialize vertical flip flag by default
097B8 B5 43                           lda Enemy_MovingDir,x
097BA 85 03                           sta $03                     ;get enemy object moving direction
097BC BD C5 03                        lda Enemy_SprAttrib,x
097BF 85 04                           sta $04                     ;get enemy object sprite attributes
097C1 B5 15                           lda Enemy_ID,x
097C3 C9 40                     	  cmp #Sign
097C5 D0 11                     	  bne +
097C7 A9 08                     	  lda #$08
097C9 85 E0                     	  sta temp4
097CB AC 4E 07                  	  ldy AreaType
097CE B9 A1 97                  	  lda SignPalettes,y
097D1 85 04                     	  sta $04
097D3 A2 F0                     	  ldx #$f0
097D5 4C F4 99                  	  jmp DrawEnemyObject
097D8                           +:	  
097D8 C9 20                     	  cmp #RedPiranhaPlant
097DA F0 04                     	  beq +
097DC C9 0D                           cmp #PiranhaPlant           ;is enemy object piranha plant?
097DE D0 0A                           bne CheckForRetainerObj     ;if not, branch
097E0 B4 4A                     +:    ldy PiranhaPlant_Y_Speed,x
097E2 30 06                           bmi CheckForRetainerObj     ;if piranha plant moving upwards, branch
097E4 BC 8A 07                        ldy EnemyFrameTimer,x
097E7 F0 01                           beq CheckForRetainerObj     ;if timer for movement expired, branch
097E9 60                              rts                         ;if all conditions fail, leave
097EA                           
097EA                           CheckForRetainerObj:
097EA B5 1C                           lda Enemy_State,x           ;store enemy state
097EC 85 DF                           sta temp3
097EE 29 1F                           and #%00011111              ;nullify all but 5 LSB and use as Y
097F0 A8                              tay
097F1 B5 15                           lda Enemy_ID,x              ;check for mushroom retainer/princess object
097F3 C9 35                           cmp #RetainerObject
097F5 D0 08                           bne CheckForBulletBillCV    ;if not found, branch
097F7 A0 00                           ldy #$00                    ;if found, nullify saved state in Y
097F9 A9 01                           lda #$01                    ;set value that will not be used
097FB 85 03                           sta $03
097FD A9 15                           lda #$15                    ;set value $15 as code for mushroom retainer/princess object
097FF                           
097FF                           CheckForBulletBillCV:
097FF C9 33                            cmp #BulletBill_CannonVar   ;otherwise check for bullet bill object
09801 D0 13                            bne CheckForPodoboo      ;if not found, branch again
09803 C6 02                            dec $02                     ;decrement saved vertical position
09805 A9 03                            lda #$03
09807 BC 8A 07                         ldy EnemyFrameTimer,x       ;get timer for enemy object
0980A F0 02                            beq SBBAt                   ;if expired, do not set priority bit
0980C 09 20                            ora #%00100000              ;otherwise do so
0980E 85 04                     SBBAt: sta $04                     ;set new sprite attributes
09810 A0 00                            ldy #$00                    ;nullify saved enemy state both in Y and in
09812 84 DF                            sty temp3                   ;memory location here
09814 A9 08                            lda #$08                    ;set specific value to unconditionally branch once
09816                           
09816                           ;CheckForJumpspring:
09816                           ;      cmp #JumpspringObject        ;check for jumpspring object
09816                           ;      bne CheckForPodoboo
09816                           ;      ldy #$03                     ;set enemy state -2 MSB here for jumpspring object
09816                           ;      ldx JumpspringAnimCtrl       ;get current frame number for jumpspring object
09816                           ;      lda JumpspringFrameOffsets,x ;load data using frame number as offset
09816                           
09816                           CheckForPodoboo:
09816 85 E0                           sta temp4               ;store saved enemy object value here
09818 84 DE                           sty temp2               ;and Y here (enemy state -2 MSB if not changed)
0981A A6 08                           ldx ObjectOffset        ;get enemy object offset
0981C C9 0C                           cmp #$0c                ;check for podoboo object
0981E D0 07                           bne CheckBowserGfxFlag  ;branch if not found
09820 B5 92                           lda Enemy_Y_Speed,x     ;if moving upwards, branch
09822 30 03                           bmi CheckBowserGfxFlag
09824 EE 09 01                        inc VerticalFlipFlag    ;otherwise, set flag for vertical flip
09827                           
09827                           CheckBowserGfxFlag:
09827 AD 6A 05                               lda BowserGfxFlag   ;if not drawing bowser at all, skip to something else
0982A F0 09                                  beq CheckForGoomba
0982C A0 16                                  ldy #$16            ;if set to 1, draw bowser's front
0982E C9 01                                  cmp #$01
09830 F0 01                                  beq SBwsrGfxOfs
09832 C8                                     iny                 ;otherwise draw bowser's rear
09833 84 E0                     SBwsrGfxOfs: sty temp4
09835                           
09835                           CheckForGoomba:
09835 A4 E0                               ldy temp4             ;check value for goomba object
09837 C0 06                               cpy #Goomba
09839 F0 08                     		  beq +
0983B C0 40                     		  cpy #Sign
0983D F0 04                     		  beq +
0983F C0 09                     		  cpy #FastGoomba
09841 D0 1D                               bne CheckBowserFront  ;branch if not found
09843 B5 1C                     +:        lda Enemy_State,x
09845 C9 02                               cmp #$02              ;check for defeated state
09847 90 04                               bcc GmbaAnim          ;if not defeated, go ahead and animate
09849 A2 04                               ldx #$04              ;if defeated, write new value here
0984B 86 DE                               stx temp2
0984D 29 20                     GmbaAnim: and #%00100000        ;check for d5 set in enemy object state 
0984F 0D 47 07                            ora TimerControl      ;or timer disable flag set
09852 D0 0C                               bne CheckBowserFront  ;if either condition true, do not animate goomba
09854 A5 09                               lda FrameCounter
09856 29 08                               and #%00001000        ;check for every eighth frame
09858 D0 06                               bne CheckBowserFront
0985A A5 03                               lda $03
0985C 49 03                               eor #%00000011        ;invert bits to flip horizontally every eight frames
0985E 85 03                               sta $03               ;leave alone otherwise
09860                           		  
09860                           CheckBowserFront:
09860 A5 E0                     			 lda temp4
09862 C9 0D                     			 cmp #PiranhaPlant
09864 F0 04                     			 beq ++
09866 C9 21                     			 cmp #UDPiranhaPlant
09868 D0 0C                     			 bne +
0986A AD 52 60                  ++:			 lda HardModeFlag
0986D F0 07                     			 beq +
0986F A9 22                     			 lda #$22
09871 85 04                     			 sta $04
09873 4C 7D 98                  			 jmp ++
09876 B9 77 97                  +:           lda EnemyAttributeData,y    ;load sprite attribute using enemy object
09879 05 04                                  ora $04                     ;as offset, and add to bits already loaded
0987B 85 04                                  sta $04
0987D B9 54 97                  ++:			 lda EnemyGfxTableOffsets,y  ;load value based on enemy object as offset
09880 AA                                     tax                         ;save as X
09881 A4 DE                                  ldy temp2                   ;get previously saved value
09883 AD 6A 05                               lda BowserGfxFlag
09886 F0 30                                  beq CheckForSpiny           ;if not drawing bowser object at all, skip all of this
09888 C9 01                                  cmp #$01
0988A D0 13                                  bne CheckBowserRear         ;if not drawing front part, branch to draw the rear part
0988C AD 63 05                               lda BowserBodyControls      ;check bowser's body control bits
0988F 10 02                                  bpl ChkFrontSte             ;branch if d7 not set (control's bowser's mouth)      
09891 A2 DE                                  ldx #$de                    ;otherwise load offset for second frame
09893 A5 DF                     ChkFrontSte: lda temp3                   ;check saved enemy state
09895 29 20                                  and #%00100000              ;if bowser not defeated, do not set flag
09897 F0 03                                  beq DrawBowser
09899                           
09899                           FlipBowserOver:
09899 8E 09 01                        stx VerticalFlipFlag  ;set vertical flip flag to nonzero
0989C                           
0989C                           DrawBowser:
0989C 4C F4 99                        jmp DrawEnemyObject   ;draw bowser's graphics now
0989F                           
0989F                           CheckBowserRear:
0989F AD 63 05                              lda BowserBodyControls  ;check bowser's body control bits
098A2 29 01                                 and #$01
098A4 F0 02                                 beq ChkRearSte          ;branch if d0 not set (control's bowser's feet)
098A6 A2 E4                                 ldx #$e4                ;otherwise load offset for second frame
098A8 A5 DF                     ChkRearSte: lda temp3               ;check saved enemy state
098AA 29 20                                 and #%00100000          ;if bowser not defeated, do not set flag
098AC F0 EE                                 beq DrawBowser
098AE A5 02                                 lda $02                 ;subtract 16 pixels from
098B0 38                                    sec                     ;saved vertical coordinate
098B1 E9 10                                 sbc #$10
098B3 85 02                                 sta $02
098B5 4C 99 98                              jmp FlipBowserOver      ;jump to set vertical flip flag
098B8                           
098B8                           CheckForSpiny:
098B8 E0 24                             cpx #$24               ;check if value loaded is for spiny
098BA D0 11                             bne CheckForLakitu     ;if not found, branch
098BC C0 05                             cpy #$05               ;if enemy state set to $05, do this,
098BE D0 0A                             bne NotEgg             ;otherwise branch
098C0 A2 30                             ldx #$30               ;set to spiny egg offset
098C2 A9 02                             lda #$02
098C4 85 03                             sta $03                ;set enemy direction to reverse sprites horizontally
098C6 A9 05                             lda #$05
098C8 85 DE                             sta temp2              ;set enemy state
098CA 4C 48 99                  NotEgg: jmp CheckForHammerBro  ;skip a big chunk of this if we found spiny but not in egg
098CD                           
098CD                           CheckForLakitu:
098CD E0 90                             cpx #$90                  ;check value for lakitu's offset loaded
098CF D0 12                             bne CheckUpsideDownShell  ;branch if not loaded
098D1 A5 DF                             lda temp3
098D3 29 20                             and #%00100000            ;check for d5 set in enemy state
098D5 D0 09                             bne NoLAFr                ;branch if set
098D7 AD 92 07                          lda FrenzyEnemyTimer
098DA C9 10                             cmp #$10                  ;check timer to see if we've reached a certain range
098DC B0 02                             bcs NoLAFr                ;branch if not
098DE A2 96                             ldx #$96                  ;if d6 not set and timer in range, load alt frame for lakitu
098E0 4C D2 99                  NoLAFr: jmp CheckDefeatedState    ;skip this next part if we found lakitu but alt frame not needed
098E3                           
098E3                           CheckUpsideDownShell:
098E3 A5 E0                     	  lda temp4                  ;check for enemy object => $04
098E5 8C 57 60                  	  sty tempC
098E8 A4 DF                     	  ldy temp3
098EA C0 02                     	  cpy #$02
098EC D0 1B                     	  bne +
098EE AC 57 60                  	  ldy tempC
098F1 C9 02                     	  cmp #BuzzyBeetle
098F3 F0 31                     	  beq ++
098F5 C9 19                     	  cmp #RedKoopaShell
098F7 F0 2D                     	  beq ++
098F9 C9 04                     	  cmp #KoopaShell
098FB F0 29                     	  beq ++
098FD C9 00                     	  cmp #GreenKoopa
098FF F0 25                     	  beq ++
09901 C9 03                     	  cmp #RedKoopa
09903 F0 21                     	  beq ++
09905 C9 01                     	  cmp #DemotedRPTroopa
09907 F0 1D                     	  beq ++
09909 AC 57 60                  +:    ldy tempC
0990C C9 05                     	  cmp #$05
0990E B0 10                           bcs CheckRightSideUpShell  ;branch if true
09910 C0 02                           cpy #$02
09912 90 0C                           bcc CheckRightSideUpShell  ;branch if enemy state < $02
09914 A2 5A                     +:    ldx #$5a                   ;set for upside-down koopa shell by default
09916 A4 E0                           ldy temp4
09918 C0 02                           cpy #BuzzyBeetle           ;check for buzzy beetle object
0991A D0 04                           bne CheckRightSideUpShell
0991C A2 7E                           ldx #$7e  
0991E E6 02                           inc $02                    ;increment vertical position by one pixel
09920                           
09920                           CheckRightSideUpShell:
09920 A5 DE                     	  lda temp2              ;check for value set here
09922 C9 04                           cmp #$04               ;if enemy state < $02, do not change to shell, if
09924 D0 22                           bne CheckForHammerBro  ;enemy state => $02 but not = $04, leave shell upside-down
09926 A2 72                     ++:	  ldx #$72               ;set right-side up buzzy beetle shell by default
09928 E6 02                           inc $02                ;increment saved vertical position by one pixel
0992A A4 E0                           ldy temp4
0992C C0 02                           cpy #BuzzyBeetle       ;check for buzzy beetle object
0992E F0 04                           beq CheckForDefdGoomba ;branch if found
09930 A2 66                           ldx #$66               ;change to right-side up koopa shell if not found
09932 E6 02                           inc $02                ;and increment saved vertical position again
09934                           
09934                           CheckForDefdGoomba:
09934 C0 06                           cpy #Goomba            ;check for goomba object (necessary if previously
09936 F0 04                           beq +  				 ;failed buzzy beetle object test)
09938 C0 09                     	  cpy #FastGoomba
0993A D0 0C                     	  bne CheckForHammerBro
0993C A2 54                     +:    ldx #$54               ;load for regular goomba
0993E A5 DF                           lda temp3              ;note that this only gets performed if enemy state => $02
09940 29 20                           and #%00100000         ;check saved enemy state for d5 set
09942 D0 04                           bne CheckForHammerBro  ;branch if set
09944 A2 8A                           ldx #$8a               ;load offset for defeated goomba
09946 C6 02                           dec $02                ;set different value and decrement saved vertical position
09948                           
09948                           CheckForHammerBro:
09948 A4 08                           ldy ObjectOffset
0994A A5 E0                           lda temp4                ;check for hammer bro object
0994C C9 05                           cmp #HammerBro
0994E D0 0C                           bne CheckForBloober      ;branch if not found
09950 A5 DF                           lda temp3
09952 F0 24                           beq CheckToAnimateEnemy  ;branch if not in normal enemy state
09954 29 08                           and #%00001000
09956 F0 7A                           beq CheckDefeatedState   ;if d3 not set, branch further away
09958 A2 B4                           ldx #$b4                 ;otherwise load offset for different frame
0995A D0 1C                           bne CheckToAnimateEnemy  ;unconditional branch
0995C                           
0995C                           CheckForBloober:
0995C E0 48                           cpx #$48                 ;check for cheep-cheep offset loaded
0995E F0 18                           beq CheckToAnimateEnemy  ;branch if found
09960 B9 96 07                        lda EnemyIntervalTimer,y
09963 C9 05                           cmp #$05
09965 B0 6B                           bcs CheckDefeatedState   ;branch if some timer is above a certain point
09967 E0 3C                           cpx #$3c                 ;check for bloober offset loaded
09969 D0 0D                           bne CheckToAnimateEnemy  ;branch if not found this time
0996B C9 01                           cmp #$01
0996D F0 63                           beq CheckDefeatedState   ;branch if timer is set to certain point
0996F E6 02                           inc $02                  ;increment saved vertical coordinate three pixels
09971 E6 02                           inc $02
09973 E6 02                           inc $02
09975 4C BE 99                        jmp CheckAnimationStop   ;and do something else
09978                           
09978                           CheckToAnimateEnemy:
09978 A5 E0                           lda temp4                ;check for specific enemy objects
0997A C9 04                     	  cmp #KoopaShell
0997C F0 54                     	  beq CheckDefeatedState
0997E C9 19                     	  cmp #RedKoopaShell
09980 F0 50                     	  beq CheckDefeatedState
09982 C9 06                           cmp #Goomba
09984 F0 4C                           beq CheckDefeatedState   ;branch if goomba
09986 C9 09                     	  cmp #FastGoomba
09988 F0 48                     	  beq CheckDefeatedState
0998A C9 08                           cmp #$08
0998C F0 44                           beq CheckDefeatedState   ;branch if bullet bill (note both variants use $08 here)
0998E C9 0C                           cmp #Podoboo
09990 F0 40                           beq CheckDefeatedState   ;branch if podoboo
09992 C9 21                     	  cmp #UDPiranhaPlant
09994 F0 0C                     	  beq +
09996 C9 22                     	  cmp #RUDPiranhaPlant
09998 F0 08                     	  beq +
0999A C9 20                     	  cmp #RedPiranhaPlant
0999C F0 04                     	  beq +
0999E C9 18                           cmp #$18                 ;branch if => $18
099A0 B0 30                           bcs CheckDefeatedState
099A2 A0 00                     +:    ldy #$00    
099A4 C9 15                           cmp #$15                 ;check for mushroom retainer/princess object
099A6 D0 0F                           bne CheckForSecondFrame  ;which uses different code here, branch if not found
099A8                                 ;iny                      ;residual instruction
099A8 AD 5F 07                        lda WorldNumber          ;are we on world 8?
099AB C9 07                           cmp #FinalWorld
099AD B0 23                           bcs CheckDefeatedState   ;if so, leave the offset alone (use princess)
099AF A2 A2                           ldx #$a2                 ;otherwise, set for mushroom retainer object instead
099B1 A9 03                           lda #$03                 ;set alternate state here
099B3 85 DE                           sta temp2
099B5 D0 1B                           bne CheckDefeatedState   ;unconditional branch
099B7                           
099B7                           CheckForSecondFrame:
099B7 A5 09                           lda FrameCounter            ;load frame counter
099B9 2D 9A 97                        and EnemyAnimTimingBMask  ;mask it (partly residual, one byte not ever used)
099BC D0 14                           bne CheckDefeatedState      ;branch if timing is off
099BE                           
099BE                           CheckAnimationStop:
099BE A5 DF                           lda temp3               ;check saved enemy state
099C0 29 A0                           and #%10100000          ;for d7 or d5, or check for timers stopped
099C2 0D 47 07                        ora TimerControl
099C5 D0 0B                           bne CheckDefeatedState  ;if either condition true, branch
099C7 A5 E0                     	  lda temp4
099C9 C9 09                     	  cmp #FastGoomba
099CB F0 05                     	  beq CheckDefeatedState
099CD 8A                              txa
099CE 18                              clc
099CF 69 06                           adc #$06                ;add $06 to current enemy offset
099D1 AA                              tax                     ;to animate various enemy objects
099D2                           
099D2                           CheckDefeatedState:
099D2 A5 E0                           lda temp4
099D4 C9 21                     	  cmp #UDPiranhaPlant
099D6 F0 14                     	  beq +
099D8 C9 22                     	  cmp #RUDPiranhaPlant
099DA F0 10                     	  beq +
099DC A5 DF                     	  lda temp3             ;check saved enemy state
099DE 29 20                           and #%00100000        ;for d5 set
099E0 F0 12                           beq DrawEnemyObject   ;branch if not set
099E2 A5 E0                           lda temp4
099E4 C9 05                           cmp #$05              ;check for saved enemy object => $04
099E6 90 0C                           bcc DrawEnemyObject   ;branch if less
099E8 C9 19                     	  cmp #RedKoopaShell
099EA F0 08                     	  beq DrawEnemyObject
099EC A0 01                     +:    ldy #$01
099EE 8C 09 01                        sty VerticalFlipFlag  ;set vertical flip flag
099F1 88                              dey
099F2 84 DE                           sty temp2             ;init saved value here
099F4                           
099F4                           DrawEnemyObject:
099F4 A4 DD                     	  ldy temp1                  ;load sprite data offset
099F6 20 01 F5                        jsr DrawEnemyObjRow        ;draw six tiles of data
099F9 20 01 F5                        jsr DrawEnemyObjRow        ;into sprite data
099FC 20 01 F5                        jsr DrawEnemyObjRow
099FF A6 08                     	  ldx ObjectOffset           ;get enemy object offset
09A01 BC E5 06                  	  ldy Enemy_SprDataOffset,x  ;get sprite data offset
09A04 A5 E0                           lda temp4
09A06 C9 08                           cmp #$08                   ;get saved enemy object and check
09A08 D0 03                           bne CheckForVerticalFlip   ;for bullet bill, branch if not found
09A0A                           
09A0A                           SkipToOffScrChk:
09A0A 4C 6A F6                        jmp SprObjectOffscrChk     ;jump if found
09A0D                           	  
09A0D                           CheckForVerticalFlip:
09A0D AD 09 01                        lda VerticalFlipFlag       ;check if vertical flip flag is set here
09A10 F0 5D                           beq CheckForESymmetry      ;branch if not
09A12 A6 08                     	  ldx ObjectOffset           ;get enemy object offset
09A14 BC E5 06                  	  ldy Enemy_SprDataOffset,x  ;get sprite data offset
09A17 B9 02 02                        lda Sprite_Attributes,y    ;get attributes of first sprite we dealt with
09A1A 09 80                           ora #%10000000             ;set bit for vertical flip
09A1C C8                              iny
09A1D C8                              iny                        ;increment two bytes so that we store the vertical flip
09A1E 99 14 02                        sta Sprite_Data+20,y      ;dump A contents
09A21 99 10 02                        sta Sprite_Data+16,y      ;into third row sprites
09A24 99 0C 02                        sta Sprite_Data+12,y      ;into second row sprites
09A27 99 08 02                        sta Sprite_Data+8,y
09A2A 99 04 02                        sta Sprite_Data+4,y       ;and into first row sprites
09A2D 99 00 02                        sta Sprite_Data,y             ;in attribute bytes of enemy obj sprite data
09A30 88                              dey
09A31 88                              dey                        ;now go back to the Y coordinate offset
09A32 98                              tya
09A33 AA                              tax                        ;give offset to X
09A34 A5 E0                           lda temp4
09A36 C9 05                     	  cmp #HammerBro             ;check saved enemy object for hammer bro
09A38 F0 19                           beq FlipEnemyVertically
09A3A C9 11                           cmp #Lakitu                ;check saved enemy object for lakitu
09A3C F0 15                           beq FlipEnemyVertically    ;branch for hammer bro or lakitu
09A3E C9 21                     	  cmp #UDPiranhaPlant
09A40 F0 11                     	  beq FlipEnemyVertically
09A42 C9 19                     	  cmp #RedKoopaShell
09A44 F0 08                     	  beq +
09A46 C9 20                     	  cmp #RedPiranhaPlant
09A48 F0 04                     	  beq +
09A4A C9 15                           cmp #$15
09A4C B0 05                           bcs FlipEnemyVertically    ;also branch if enemy object => $15
09A4E 8A                        +:    txa
09A4F 18                              clc
09A50 69 08                           adc #$08                   ;if not selected objects or => $15, set
09A52 AA                              tax                        ;offset in X for next row
09A53                           	  
09A53                           FlipEnemyVertically:
09A53 BD 01 02                        lda Sprite_Tilenumber,x     ;load first or second row tiles
09A56 48                              pha                         ;and save tiles to the stack
09A57 BD 05 02                        lda Sprite_Tilenumber+4,x
09A5A 48                              pha
09A5B B9 11 02                        lda Sprite_Tilenumber+16,y  ;exchange third row tiles
09A5E 9D 01 02                        sta Sprite_Tilenumber,x     ;with first or second row tiles
09A61 B9 15 02                        lda Sprite_Tilenumber+20,y
09A64 9D 05 02                        sta Sprite_Tilenumber+4,x
09A67 68                              pla                         ;pull first or second row tiles from stack
09A68 99 15 02                        sta Sprite_Tilenumber+20,y  ;and save in third row
09A6B 68                              pla
09A6C 99 11 02                        sta Sprite_Tilenumber+16,y
09A6F                           
09A6F                           CheckForESymmetry:
09A6F AD 6A 05                          lda BowserGfxFlag           ;are we drawing bowser at all?
09A72 D0 96                             bne SkipToOffScrChk         ;branch if so
09A74 A5 E0                             lda temp4     
09A76 A6 DE                             ldx temp2                   ;get alternate enemy state
09A78 C9 05                             cmp #$05                    ;check for hammer bro object
09A7A D0 06                             bne ContES
09A7C 4C 6A F6                          jmp SprObjectOffscrChk      ;jump if found
09A7F 4C 0D 9B                  CheckToMirrorLakitu1: jmp CheckToMirrorLakitu
09A82 C9 07                     ContES: cmp #Bloober                ;check for bloober object
09A84 F0 29                     		beq MirrorEnemyGfx
09A86 C9 0D                             cmp #PiranhaPlant           ;check for piranha plant object
09A88 F0 25                             beq MirrorEnemyGfx
09A8A C9 21                     		cmp #UDPiranhaPlant
09A8C F0 21                     		beq MirrorEnemyGfx
09A8E C9 22                     		cmp #RUDPiranhaPlant
09A90 F0 1D                     		beq MirrorEnemyGfx
09A92 C9 20                     		cmp #RedPiranhaPlant
09A94 F0 19                     		beq MirrorEnemyGfx
09A96 C9 0C                             cmp #Podoboo                ;check for podoboo object
09A98 F0 15                             beq MirrorEnemyGfx          ;branch if either of three are found
09A9A C9 12                             cmp #Spiny                  ;check for spiny object
09A9C D0 04                             bne ESRtnr                  ;branch closer if not found
09A9E E0 05                             cpx #$05                    ;check spiny's state
09AA0 D0 DD                             bne CheckToMirrorLakitu1     ;branch if not an egg, otherwise
09AA2 C9 15                     ESRtnr: cmp #$15                    ;check for princess/mushroom retainer object
09AA4 D0 05                             bne SpnySC
09AA6 A9 42                             lda #$42                    ;set horizontal flip on bottom right sprite
09AA8 99 16 02                          sta Sprite_Attributes+20,y  ;note that palette bits were already set earlier
09AAB E0 02                     SpnySC: cpx #$02                    ;if alternate enemy state set to 1 or 0, branch
09AAD 90 5E                             bcc CheckToMirrorLakitu
09AAF                           
09AAF                           MirrorEnemyGfx:
09AAF AD 6A 05                          lda BowserGfxFlag           ;if enemy object is bowser, skip all of this
09AB2 D0 59                             bne CheckToMirrorLakitu
09AB4 B9 02 02                          lda Sprite_Attributes,y     ;load attribute bits of first sprite
09AB7 29 A3                             and #%10100011
09AB9 99 02 02                          sta Sprite_Attributes,y     ;save vertical flip, priority, and palette bits
09ABC 99 0A 02                          sta Sprite_Attributes+8,y   ;in left sprite column of enemy object OAM data
09ABF 99 12 02                          sta Sprite_Attributes+16,y
09AC2 09 40                             ora #%01000000              ;set horizontal flip
09AC4 E0 05                             cpx #$05                    ;check for state used by spiny's egg
09AC6 D0 02                             bne EggExc                  ;if alternate state not set to $05, branch
09AC8 09 80                             ora #%10000000              ;otherwise set vertical flip
09ACA 99 06 02                  EggExc: sta Sprite_Attributes+4,y   ;set bits of right sprite column
09ACD 99 0E 02                          sta Sprite_Attributes+12,y  ;of enemy object sprite data
09AD0 99 16 02                          sta Sprite_Attributes+20,y
09AD3 A5 E0                     		lda temp4
09AD5 C9 02                     		cmp #BuzzyBeetle
09AD7 F0 14                     		beq ++
09AD9 C9 03                     		cmp #RedKoopa
09ADB F0 10                     		beq ++
09ADD C9 04                     		cmp #KoopaShell
09ADF F0 0C                     		beq ++
09AE1 C9 19                     		cmp #RedKoopaShell
09AE3 F0 08                     		beq ++
09AE5 C9 01                     		cmp #DemotedRPTroopa
09AE7 F0 04                     		beq ++
09AE9 C9 00                     		cmp #GreenKoopa
09AEB D0 08                     		bne +
09AED 8A                        ++:		txa
09AEE A6 DF                     		ldx temp3
09AF0 E0 02                     		cpx #$02
09AF2 F0 05                     		beq ++
09AF4 AA                        		tax
09AF5 E0 04                     +:      cpx #$04                    ;check alternate enemy state
09AF7 D0 14                             bne CheckToMirrorLakitu     ;branch if not $04
09AF9 AA                        ++:     tax
09AFA B9 0A 02                  		lda Sprite_Attributes+8,y   ;get second row left sprite attributes
09AFD 09 80                             ora #%10000000
09AFF 99 0A 02                          sta Sprite_Attributes+8,y   ;store bits with vertical flip in
09B02 99 12 02                          sta Sprite_Attributes+16,y  ;second and third row left sprites
09B05 09 40                             ora #%01000000
09B07 99 0E 02                          sta Sprite_Attributes+12,y  ;store with horizontal and vertical flip in
09B0A 99 16 02                          sta Sprite_Attributes+20,y  ;second and third row right sprites
09B0D                           
09B0D                           CheckToMirrorLakitu:
09B0D A5 E0                     		lda temp4
09B0F C9 20                     		cmp #RedPiranhaPlant
09B11 F0 04                     		beq +
09B13 C9 0D                     		cmp #PiranhaPlant			;check if enemy ID is piranha plant
09B15 D0 70                     		bne exitPiranha
09B17 8E 34 60                  +:		stx temp9					;store current X in here
09B1A 8C 2C 60                  		sty temp8
09B1D A6 08                     		ldx ObjectOffset
09B1F BD 34 04                  		lda PiranhaPlantDownYPos,x	;get the piranha's root Y position
09B22 48                        		pha
09B23 B4 C1                     		ldy Enemy_Y_Position,x
09B25                           	;	iny
09B25 98                        		tya
09B26 DD 34 04                  		cmp PiranhaPlantDownYPos,x
09B29 B0 06                     		bcs +
09B2B 68                        		pla
09B2C 38                        		sec
09B2D E9 01                     		sbc #$01
09B2F 2C 03                     		.db $2c, $03
09B31 68                        +:		pla
09B32 AC 2C 60                  		ldy temp8
09B35 38                        		sec
09B36 F5 C1                     		sbc Enemy_Y_Position,x		;subtract the current piranha position from it
09B38 29 F8                     		and #%11111000				;and to check every 8 difference
09B3A 18                        		clc
09B3B 6A                        		ror
09B3C 6A                        		ror
09B3D 6A                        		ror							;rotate xxxxx000 -> 000xxxxx
09B3E AA                        		tax
09B3F BD 2B 9C                  		lda PiranhaTable,x			;load from this table, 0->this sprite is inside the pipe, 1->this sprite is outside of pipe
09B42 8D 56 60                  		sta tempB					;store it into a temporary address
09B45 6E 56 60                  		ror tempB					;rotate to the right, bit 0 becomes carry
09B48 90 10                     		bcc +						;if carry is clear, piranha is inside the pipe (this can be optimized to branch to the end of the code)
09B4A B9 02 02                  		lda Sprite_Attributes,y		;otherwise get the sprite attribute
09B4D 29 DF                     		and #%11011111		
09B4F 99 02 02                  		sta Sprite_Attributes,y		
09B52 B9 06 02                  		lda Sprite_Attributes+4,y	;do it with the sprite next to it aswell
09B55 29 DF                     		and #%11011111
09B57 99 06 02                  		sta Sprite_Attributes+4,y
09B5A                           +:
09B5A 6E 56 60                  		ror tempB					;same procedure as earlier
09B5D 90 10                     		bcc +
09B5F B9 0A 02                  		lda Sprite_Attributes+8,y
09B62 29 DF                     		and #%11011111
09B64 99 0A 02                  		sta Sprite_Attributes+8,y
09B67 B9 0E 02                  		lda Sprite_Attributes+12,y
09B6A 29 DF                     		and #%11011111
09B6C 99 0E 02                  		sta Sprite_Attributes+12,y
09B6F                           +:		
09B6F 6E 56 60                  		ror tempB					;same procedure as earlier
09B72 90 10                     		bcc +
09B74 B9 12 02                  		lda Sprite_Attributes+16,y
09B77 29 DF                     		and #%11011111
09B79 99 12 02                  		sta Sprite_Attributes+16,y
09B7C B9 16 02                  		lda Sprite_Attributes+20,y
09B7F 29 DF                     		and #%11011111
09B81 99 16 02                  		sta Sprite_Attributes+20,y
09B84                           +:
09B84 AE 34 60                  		ldx temp9
09B87                           exitPiranha:
09B87 C9 21                     		cmp #UDPiranhaPlant
09B89 F0 04                     		beq +
09B8B C9 22                     		cmp #RUDPiranhaPlant
09B8D D0 5D                     		bne exitPiranhaUD
09B8F 8E 34 60                  +:		stx temp9					;store current X in here
09B92 A6 08                     		ldx ObjectOffset
09B94 BD 34 04                  		lda PiranhaPlantDownYPos,x	;get the piranha's root Y position
09B97 18                        		clc
09B98 69 07                     		adc #$07
09B9A 38                        		sec
09B9B F5 C1                     		sbc Enemy_Y_Position,x		;subtract the current piranha position from it
09B9D 29 F8                     		and #%11111000				;and to check every 8 difference
09B9F 18                        		clc
09BA0 6A                        		ror
09BA1 6A                        		ror
09BA2 6A                        		ror							;rotate xxxxx000 -> 000xxxxx
09BA3 AA                        		tax
09BA4 BD 2F 9C                  		lda UDPiranhaTable,x			;load from this table, 0->this sprite is inside the pipe, 1->this sprite is outside of pipe
09BA7 8D 56 60                  		sta tempB					;store it into a temporary address
09BAA 6E 56 60                  		ror tempB					;rotate to the right, bit 0 becomes carry
09BAD 90 10                     		bcc +						;if carry is clear, piranha is inside the pipe (this can be optimized to branch to the end of the code)
09BAF B9 12 02                  		lda Sprite_Attributes+16,y
09BB2 29 DF                     		and #%11011111
09BB4 99 12 02                  		sta Sprite_Attributes+16,y
09BB7 B9 16 02                  		lda Sprite_Attributes+20,y
09BBA 29 DF                     		and #%11011111
09BBC 99 16 02                  		sta Sprite_Attributes+20,y
09BBF                           +:
09BBF 6E 56 60                  		ror tempB					;same procedure as earlier
09BC2 90 10                     		bcc +
09BC4 B9 0A 02                  		lda Sprite_Attributes+8,y
09BC7 29 DF                     		and #%11011111
09BC9 99 0A 02                  		sta Sprite_Attributes+8,y
09BCC B9 0E 02                  		lda Sprite_Attributes+12,y
09BCF 29 DF                     		and #%11011111
09BD1 99 0E 02                  		sta Sprite_Attributes+12,y
09BD4                           +:		
09BD4 6E 56 60                  		ror tempB					;same procedure as earlier
09BD7 90 10                     		bcc +
09BD9 B9 02 02                  		lda Sprite_Attributes,y		;otherwise get the sprite attribute
09BDC 29 DF                     		and #%11011111		
09BDE 99 02 02                  		sta Sprite_Attributes,y		
09BE1 B9 06 02                  		lda Sprite_Attributes+4,y	;do it with the sprite next to it aswell
09BE4 29 DF                     		and #%11011111
09BE6 99 06 02                  		sta Sprite_Attributes+4,y
09BE9                           +:
09BE9 AE 34 60                  		ldx temp9
09BEC                           exitPiranhaUD:
09BEC A5 E0                             lda temp4                   ;check for lakitu enemy object
09BEE C9 11                             cmp #Lakitu
09BF0 D0 36                             bne +    ;branch if not found
09BF2 AD 09 01                          lda VerticalFlipFlag
09BF5 D0 21                             bne NVFLak                  ;branch if vertical flip flag not set
09BF7 B9 12 02                          lda Sprite_Attributes+16,y  ;save vertical flip and palette bits
09BFA 29 81                             and #%10000001              ;in third row left sprite
09BFC 99 12 02                          sta Sprite_Attributes+16,y
09BFF B9 16 02                          lda Sprite_Attributes+20,y  ;set horizontal flip and palette bits
09C02 09 41                             ora #%01000001              ;in third row right sprite
09C04 99 16 02                          sta Sprite_Attributes+20,y
09C07 AE 92 07                          ldx FrenzyEnemyTimer        ;check timer
09C0A E0 10                             cpx #$10
09C0C B0 1A                             bcs +      ;branch if timer has not reached a certain range
09C0E 99 0E 02                          sta Sprite_Attributes+12,y  ;otherwise set same for second row right sprite
09C11 29 81                             and #%10000001
09C13 99 0A 02                          sta Sprite_Attributes+8,y   ;preserve vertical flip and palette bits for left sprite
09C16 90 10                             bcc +      ;unconditional branch
09C18 B9 02 02                  NVFLak: lda Sprite_Attributes,y     ;get first row left sprite attributes
09C1B 29 81                             and #%10000001
09C1D 99 02 02                          sta Sprite_Attributes,y     ;save vertical flip and palette bits
09C20 B9 06 02                          lda Sprite_Attributes+4,y   ;get first row right sprite attributes
09C23 09 41                             ora #%01000001              ;set horizontal flip and palette bits
09C25 99 06 02                          sta Sprite_Attributes+4,y   ;note that vertical flip is left as-is
09C28 4C 6A F6                  +:		jmp SprObjectOffscrChk
09C2B                           ;CheckToMirrorJSpring:
09C2B                                 ;lda temp4                   ;check for jumpspring object (any frame)
09C2B                                 ;cmp #$18
09C2B                                 ;bcc SprObjectOffscrChk      ;branch if not jumpspring object at all
09C2B                           	  ;cmp #RedKoopaShell
09C2B                           	  ;beq SprObjectOffscrChk
09C2B                           	  ;cmp #RedPiranhaPlant
09C2B                           	  ;beq SprObjectOffscrChk
09C2B                           	  ;cmp #RUDPiranhaPlant
09C2B                           	  ;beq SprObjectOffscrChk
09C2B                           	  ;cmp #UDPiranhaPlant
09C2B                           	  ;beq SprObjectOffscrChk
09C2B                                 ;lda #$82
09C2B                                 ;sta Sprite_Attributes+8,y   ;set vertical flip and palette bits of 
09C2B                                 ;sta Sprite_Attributes+16,y  ;second and third row left sprites
09C2B                                 ;ora #%01000000
09C2B                                 ;sta Sprite_Attributes+12,y  ;set, in addition to those, horizontal flip
09C2B                                 ;sta Sprite_Attributes+20,y  ;for second and third row right sprites
09C2B                           
09C2B                           
09C2B                           PiranhaTable:
09C2B 00 01 03 07               		.db %00000000, %00000001, %00000011, %00000111
09C2F                           UDPiranhaTable:
09C2F 07 03 01 00 00            		.db %00000111, %00000011, %00000001, %00000000, $00
09C34                           
09C34                           
09C34                           
09C34                           include code\gameOverMenu.asm09C34                           GameOverCursorData:
09C34                             ;.db $5b, $02, $48
09C34 EB 02 48                    .db $eb, $02, $48
09C37                           
09C37                           GameOverCursorY:
09C37 77 8F                       .db $77, $8f;, $a7, $bf, $d7
09C39                           
09C39                           GameOverMenu:
09C39 A9 00                             lda #$00
09C3B 85 02                     		sta $02
09C3D AC 00 64                  		ldy VRAM_Buffer1_Offset
09C40 A9 20                     		lda #$20
09C42 99 01 64                  		sta VRAM_Buffer1,y
09C45 A9 4F                     		lda #$4f
09C47 99 02 64                  		sta VRAM_Buffer1+1,y
09C4A A9 02                     		lda #$02
09C4C 99 03 64                  		sta VRAM_Buffer1+2,y
09C4F A9 28                     		lda #$28
09C51 99 04 64                  		sta VRAM_Buffer1+3,y
09C54 A9 28                     		lda #$28
09C56 99 05 64                  		sta VRAM_Buffer1+4,y
09C59 A9 00                     		lda #$00
09C5B 99 06 64                  		sta VRAM_Buffer1+5,y
09C5E 98                        		tya
09C5F 18                        		clc
09C60 69 04                     		adc #$04
09C62 8D 00 64                  		sta VRAM_Buffer1_Offset
09C65 AD FC 06                  		lda SavedJoypadBits
09C68 29 80                     			and #A_Button
09C6A D0 43                     			bne ContinueOrRetry
09C6C AD FC 06                  			lda SavedJoypadBits          ;if player pressed the start button
09C6F 29 10                                 and #Start_Button            ;then either continue or start over
09C71 D0 3C                                 bne ContinueOrRetry
09C73 AD FC 06                              lda SavedJoypadBits
09C76 29 08                                 and #Up_Dir                  ;if player pressed the select button
09C78 D0 07                                 bne +                        ;then branch to select "continue" or "retry"
09C7A AD FC 06                  			lda SavedJoypadBits
09C7D 29 04                     			and #Down_Dir
09C7F F0 14                     			beq ChgSel
09C81 AD B8 63                  +:          lda PreviousUp_Down_Buttons
09C84 29 04                     			and #Down_Dir
09C86 D0 0D                     			bne ChgSel
09C88 AD B8 63                  			lda PreviousUp_Down_Buttons
09C8B 29 08                     			and #Up_Dir
09C8D D0 06                     			bne ChgSel
09C8F                           			
09C8F A5 C0                                 lda ContinueMenuSelect
09C91 49 01                                 eor #$01                     ;and toggle between the two choices
09C93                                       
09C93                           ;            inc ContinueMenuSelect
09C93                           ;            lda ContinueMenuSelect
09C93                           ;            and #$03
09C93                                       
09C93 85 C0                                 sta ContinueMenuSelect
09C95 A0 02                     ChgSel:     ldy #$02
09C97 B9 34 9C                  ChgSelLoop: lda GameOverCursorData,y     ;set up cursor sprite tile, attribute
09C9A 99 01 02                              sta Sprite_Data+1,y          ;and X position in sprite OAM data
09C9D 88                                    dey
09C9E 10 F7                                 bpl ChgSelLoop
09CA0 A4 C0                                 ldy ContinueMenuSelect
09CA2 B9 37 9C                              lda GameOverCursorY,y        ;set Y position based on the selection
09CA5 8D 00 02                              sta Sprite_Data
09CA8 AD FC 06                  			lda SavedJoypadBits
09CAB 8D B8 63                  			sta PreviousUp_Down_Buttons
09CAE 60                                    rts
09CAF                           
09CAF                           ContinueOrRetry:
09CAF A5 C0                       lda ContinueMenuSelect       ;if player selected "continue"
09CB1 F0 07                       beq Continue                 ;then branch to continue
09CB3                             ;lda #$00
09CB3                             ;sta CompletedWorlds          ;otherwise init completed worlds flags
09CB3 EE BB 63                    inc DoFin
09CB6 EE 74 07                    inc DisableScreenFlag
09CB9 60                          rts
09CBA                           
09CBA                           Continue:
09CBA A0 04                             ldy #$04
09CBC 8C 5A 07                          sty NumberofLives           ;give five lives
09CBF 8D 5E 07                          sta CoinTally    
09CC2 AD 5F 07                  		lda WorldNumber
09CC5 0A                        		asl
09CC6 0A                        	    asl
09CC7 18                        	    clc
09CC8 6D 5C 07                  	    adc LevelNumber
09CCB AA                        	    tax
09CCC BD E5 9C                  	    lda LevelSelectAreasOffsets1,x
09CCF 8D 60 07                  	    sta AreaNumber       ;put at x-1 of the current world
09CD2 A9 00                     		lda #$00
09CD4 A0 0B                             ldy #$0b
09CD6 99 DD 07                  ISCont: sta ScoreAndCoinDisplay,y   ;reset score
09CD9 88                                dey
09CDA 10 FA                             bpl ISCont
09CDC EE 5D 07                          inc Hidden1UpFlag           ;allow 1-up to be found again
09CDF EE 74 07                  		inc DisableScreenFlag
09CE2 E6 02                             inc $02
09CE4 60                        		rts
09CE5                           		
09CE5                           LevelSelectAreasOffsets1:
09CE5 00 02 03 04               	  .db $00, $02, $03, $04
09CE9 00 02 03 04               	  .db $00, $02, $03, $04
09CED 00 01 02 03               	  .db $00, $01, $02, $03
09CF1 00 02 03 04               	  .db $00, $02, $03, $04
09CF5 00 01 02 03               	  .db $00, $01, $02, $03
09CF9 00 01 02 03               	  .db $00, $01, $02, $03
09CFD 00 02 03 04               	  .db $00, $02, $03, $04
09D01 00 01 02 03               	  .db $00, $01, $02, $03
09D05                           
09D05 00 00 00 00 00 00 00 00.. pad $c000
0C000                           
0C000                           ; bank 02 -- relocated original sound code
0C000                           base $8000
08000 02                        .db $02                     ; bank identifier
08001                           include code\bank02.asm
08001                               include code\sound.asm
08001                           SoundEngine:
08001 AD 70 07                           lda OperMode              ;are we in title screen mode?
08004 D0 04                              bne SndOn
08006 8D 15 40                           sta SND_MASTERCTRL_REG    ;if so, disable sound and leave
08009 60                                 rts
0800A A9 FF                     SndOn:   lda #$ff
0800C 8D 17 40                           sta JOYPAD_PORT2          ;disable irqs and set frame counter mode???
0800F A9 0F                              lda #$0f
08011                                    if !TIM_GRUNT
08011 8D 15 40                              sta SND_MASTERCTRL_REG    ;enable first four channels
08014                                    endif
08014 AD C6 07                           lda PauseModeFlag         ;is sound already in pause mode?
08017 D0 06                              bne InPause
08019 A5 EB                              lda PauseSoundQueue       ;if not, check pause sfx queue    
0801B C9 01                              cmp #$01
0801D D0 60                              bne RunSoundSubroutines   ;if queue is empty, skip pause mode routine
0801F AD B2 07                  InPause: lda PauseSoundBuffer      ;check pause sfx buffer
08022 D0 23                              bne ContPau
08024 A5 EB                              lda PauseSoundQueue       ;check pause queue
08026 F0 69                              beq SkipSoundSubroutines
08028 8D B2 07                           sta PauseSoundBuffer      ;if queue full, store in buffer and activate
0802B 8D C6 07                           sta PauseModeFlag         ;pause mode to interrupt game sounds
0802E A9 00                              lda #$00                  ;disable sound and clear sfx buffers
08030 8D 15 40                           sta SND_MASTERCTRL_REG
08033 85 E2                              sta Square1SoundBuffer
08035 85 E3                              sta Square2SoundBuffer
08037 85 E4                              sta NoiseSoundBuffer
08039 A9 0F                              lda #$0f
0803B 8D 15 40                           sta SND_MASTERCTRL_REG    ;enable sound again
0803E A9 2A                              lda #$2a                  ;store length of sound in pause counter
08040 8D BB 07                           sta Squ1_SfxLenCounter
08043 A9 44                     PTone1F: lda #$44                  ;play first tone
08045 D0 11                              bne PTRegC                ;unconditional branch
08047 AD BB 07                  ContPau: lda Squ1_SfxLenCounter    ;check pause length left
0804A C9 24                              cmp #$24                  ;time to play second?
0804C F0 08                              beq PTone2F
0804E C9 1E                              cmp #$1e                  ;time to play first again?
08050 F0 F1                              beq PTone1F
08052 C9 18                              cmp #$18                  ;time to play second again?
08054 D0 09                              bne DecPauC               ;only load regs during times, otherwise skip
08056 A9 64                     PTone2F: lda #$64                  ;store reg contents and play the pause sfx
08058 A2 84                     PTRegC:  ldx #$84
0805A A0 7F                              ldy #$7f
0805C 20 BC 80                           jsr PlaySqu1Sfx
0805F CE BB 07                  DecPauC: dec Squ1_SfxLenCounter    ;decrement pause sfx counter
08062 D0 2D                              bne SkipSoundSubroutines
08064                                    ;lda #$00                  ;disable sound if in pause mode and
08064 AD 15 40                           lda SND_MASTERCTRL_REG
08067 29 10                              and #%00010000
08069 8D 15 40                           sta SND_MASTERCTRL_REG    ;not currently playing the pause sfx
0806C AD B2 07                           lda PauseSoundBuffer      ;if no longer playing pause sfx, check to see
0806F C9 02                              cmp #$02                  ;if we need to be playing sound again
08071 D0 05                              bne SkipPIn
08073 A9 00                              lda #$00                  ;clear pause mode to allow game sounds again
08075 8D C6 07                           sta PauseModeFlag
08078 A9 00                     SkipPIn: lda #$00                  ;clear pause sfx buffer
0807A 8D B2 07                           sta PauseSoundBuffer
0807D F0 12                              beq SkipSoundSubroutines
0807F                           
0807F                           RunSoundSubroutines:
0807F 20 55 81                           jsr Square1SfxHandler  ;play sfx on square channel 1
08082 20 FB 82                           jsr Square2SfxHandler  ; ''  ''  '' square channel 2
08085 20 17 84                           jsr NoiseSfxHandler    ; ''  ''  '' noise channel
08088 20 4F 84                           jsr MusicHandler       ;play music on all channels
0808B A9 00                     		 lda #$00               ;clear the music queues
0808D 85 EC                              sta AreaMusicQueue
0808F 85 ED                     		 sta EventMusicQueue
08091                           
08091                           SkipSoundSubroutines:
08091 A9 00                               lda #$00               ;clear the sound effects queues
08093 85 F0                               sta Square1SoundQueue
08095 85 EF                               sta Square2SoundQueue
08097 85 EE                               sta NoiseSoundQueue
08099 85 EB                               sta PauseSoundQueue
0809B AC C0 07                            ldy DAC_Counter        ;load some sort of counter 
0809E A5 E5                               lda AreaMusicBuffer
080A0 29 03                               and #%00000011         ;check for specific music
080A2 F0 07                               beq NoIncDAC
080A4 EE C0 07                            inc DAC_Counter        ;increment and check counter
080A7 C0 30                               cpy #$30
080A9 90 06                               bcc StrWave            ;if not there yet, just store it
080AB 98                        NoIncDAC: tya
080AC F0 03                               beq StrWave            ;if we are at zero, do not decrement 
080AE CE C0 07                            dec DAC_Counter        ;decrement counter
080B1 8C 11 40                  StrWave:  sty SND_DELTA_REG+1    ;store into DMC load register (??)
080B4 60                                  rts                    ;we are done here
080B5                           
080B5                           ;--------------------------------
080B5                           
080B5                           Dump_Squ1_Regs:
080B5 8C 01 40                        sty SND_SQUARE1_REG+1  ;dump the contents of X and Y into square 1's control regs
080B8 8E 00 40                        stx SND_SQUARE1_REG
080BB 60                              rts
080BC                                 
080BC                           PlaySqu1Sfx:
080BC 20 B5 80                        jsr Dump_Squ1_Regs     ;do sub to set ctrl regs for square 1, then set frequency regs
080BF                           
080BF                           SetFreq_Squ1:
080BF A2 00                           ldx #$00               ;set frequency reg offset for square 1 sound channel
080C1                           
080C1                           Dump_Freq_Regs:
080C1 A8                                tay
080C2 B9 C5 8D                          lda FreqRegLookupTbl+1,y  ;use previous contents of A for sound reg offset
080C5 F0 0B                             beq NoTone                ;if zero, then do not load
080C7 9D 02 40                          sta SND_REGISTER+2,x      ;first byte goes into LSB of frequency divider
080CA B9 C4 8D                          lda FreqRegLookupTbl,y    ;second byte goes into 3 MSB plus extra bit for 
080CD 09 08                             ora #%00001000            ;length counter
080CF 9D 03 40                          sta SND_REGISTER+3,x
080D2 60                        NoTone: rts
080D3                           
080D3                           Dump_Sq2_Regs:
080D3 8E 04 40                        stx SND_SQUARE2_REG    ;dump the contents of X and Y into square 2's control regs
080D6 8C 05 40                        sty SND_SQUARE2_REG+1
080D9 60                              rts
080DA                           
080DA                           PlaySqu2Sfx:
080DA 20 D3 80                        jsr Dump_Sq2_Regs      ;do sub to set ctrl regs for square 2, then set frequency regs
080DD                           
080DD                           SetFreq_Squ2:
080DD A2 04                           ldx #$04               ;set frequency reg offset for square 2 sound channel
080DF D0 E0                           bne Dump_Freq_Regs     ;unconditional branch
080E1                           
080E1                           SetFreq_Tri:
080E1 A2 08                           ldx #$08               ;set frequency reg offset for triangle sound channel
080E3 D0 DC                           bne Dump_Freq_Regs     ;unconditional branch
080E5                           
080E5                           ;--------------------------------
080E5                           
080E5                           SwimStompEnvelopeData:
080E5 9F 9B 98 96 95 94 92 90         .db $9f, $9b, $98, $96, $95, $94, $92, $90
080ED 90 9A 97 95 93 92               .db $90, $9a, $97, $95, $93, $92
080F3                           
080F3                           PlayFlagpoleSlide:
080F3 A9 40                            lda #$40               ;store length of flagpole sound
080F5 8D BB 07                         sta Squ1_SfxLenCounter
080F8 A9 62                            lda #$62               ;load part of reg contents for flagpole sound
080FA 20 BF 80                         jsr SetFreq_Squ1
080FD A2 99                            ldx #$99               ;now load the rest
080FF D0 25                            bne FPS2nd
08101                           
08101                           PlaySmallJump:
08101 A9 26                            lda #$26               ;branch here for small mario jumping sound
08103 D0 02                            bne JumpRegContents
08105                           
08105                           PlayBigJump:
08105 A9 18                            lda #$18               ;branch here for big mario jumping sound
08107                           
08107                           JumpRegContents:
08107 A2 82                            ldx #$82               ;note that small and big jump borrow each others' reg contents
08109 A0 A7                            ldy #$a7               ;anyway, this loads the first part of mario's jumping sound
0810B 20 BC 80                         jsr PlaySqu1Sfx
0810E A9 28                            lda #$28               ;store length of sfx for both jumping sounds
08110 8D BB 07                         sta Squ1_SfxLenCounter ;then continue on here
08113                           
08113                           ContinueSndJump:
08113 AD BB 07                            lda Squ1_SfxLenCounter ;jumping sounds seem to be composed of three parts
08116 C9 25                               cmp #$25               ;check for time to play second part yet
08118 D0 06                               bne N2Prt
0811A A2 5F                               ldx #$5f               ;load second part
0811C A0 F6                               ldy #$f6
0811E D0 08                               bne DmpJpFPS           ;unconditional branch
08120 C9 20                     N2Prt:    cmp #$20               ;check for third part
08122 D0 29                               bne DecJpFPS
08124 A2 48                               ldx #$48               ;load third part
08126 A0 BC                     FPS2nd:   ldy #$bc               ;the flagpole slide sound shares part of third part
08128 20 B5 80                  DmpJpFPS: jsr Dump_Squ1_Regs
0812B D0 20                               bne DecJpFPS           ;unconditional branch outta here
0812D                           
0812D                           PlayFireballThrow:
0812D A9 05                             lda #$05
0812F A0 99                             ldy #$99                 ;load reg contents for fireball throw sound
08131 D0 04                             bne Fthrow               ;unconditional branch
08133                           
08133                           PlayBump:
08133 A9 0A                               lda #$0a                ;load length of sfx and reg contents for bump sound
08135 A0 93                               ldy #$93
08137 A2 9E                     Fthrow:   ldx #$9e                ;the fireball sound shares reg contents with the bump sound
08139 8D BB 07                            sta Squ1_SfxLenCounter
0813C A9 0C                               lda #$0c                ;load offset for bump sound
0813E 20 BC 80                            jsr PlaySqu1Sfx
08141                           
08141                           ContinueBumpThrow:    
08141 AD BB 07                            lda Squ1_SfxLenCounter  ;check for second part of bump sound
08144 C9 06                               cmp #$06   
08146 D0 05                               bne DecJpFPS
08148 A9 BB                               lda #$bb                ;load second part directly
0814A 8D 01 40                            sta SND_SQUARE1_REG+1
0814D D0 66                     DecJpFPS: bne BranchToDecLength1  ;unconditional branch
0814F                           
0814F 4C F6 81                  _PlayPipeDownInj: jmp PlayPipeDownInj
08152 4C F3 80                  _PlayFlagpoleSlide: jmp PlayFlagpoleSlide
08155                           
08155                           Square1SfxHandler:
08155 A4 F0                            ldy Square1SoundQueue   ;check for sfx in queue
08157 F0 20                            beq CheckSfx1Buffer
08159 84 E2                            sty Square1SoundBuffer  ;if found, put in buffer
0815B 30 A4                            bmi PlaySmallJump       ;small jump
0815D 46 F0                            lsr Square1SoundQueue
0815F B0 A4                            bcs PlayBigJump         ;big jump
08161 46 F0                            lsr Square1SoundQueue
08163 B0 CE                            bcs PlayBump            ;bump
08165 46 F0                            lsr Square1SoundQueue
08167 B0 2C                            bcs PlaySwimStomp       ;swim/stomp
08169 46 F0                            lsr Square1SoundQueue
0816B B0 4A                            bcs PlaySmackEnemy      ;smack enemy
0816D 46 F0                            lsr Square1SoundQueue
0816F B0 DE                            bcs _PlayPipeDownInj    ;pipedown/injury
08171 46 F0                            lsr Square1SoundQueue
08173 B0 B8                            bcs PlayFireballThrow   ;fireball throw
08175 46 F0                            lsr Square1SoundQueue
08177 B0 D9                            bcs _PlayFlagpoleSlide  ;slide flagpole
08179                           
08179                           CheckSfx1Buffer:
08179 A5 E2                            lda Square1SoundBuffer   ;check for sfx in buffer 
0817B F0 17                            beq ExS1H                ;if not found, exit sub
0817D 30 94                            bmi ContinueSndJump      ;small mario jump 
0817F 4A                               lsr
08180 B0 91                            bcs ContinueSndJump      ;big mario jump 
08182 4A                               lsr
08183 B0 BC                            bcs ContinueBumpThrow    ;bump
08185 4A                               lsr
08186 B0 1B                            bcs ContinueSwimStomp    ;swim/stomp
08188 4A                               lsr
08189 B0 3C                            bcs ContinueSmackEnemy   ;smack enemy
0818B 4A                               lsr
0818C B0 6D                            bcs ContinuePipeDownInj  ;pipedown/injury
0818E 4A                               lsr
0818F B0 B0                            bcs ContinueBumpThrow    ;fireball throw
08191 4A                               lsr
08192 B0 59                            bcs DecrementSfx1Length  ;slide flagpole
08194 60                        ExS1H: rts
08195                           
08195                           PlaySwimStomp:
08195 A9 0E                           lda #$0e               ;store length of swim/stomp sound
08197 8D BB 07                        sta Squ1_SfxLenCounter
0819A A0 9C                           ldy #$9c               ;store reg contents for swim/stomp sound
0819C A2 9E                           ldx #$9e
0819E A9 26                           lda #$26
081A0 20 BC 80                        jsr PlaySqu1Sfx
081A3                           
081A3                           ContinueSwimStomp: 
081A3 AC BB 07                        ldy Squ1_SfxLenCounter        ;look up reg contents in data section based on
081A6 B9 E4 80                        lda SwimStompEnvelopeData-1,y ;length of sound left, used to control sound's
081A9 8D 00 40                        sta SND_SQUARE1_REG           ;envelope
081AC C0 06                           cpy #$06   
081AE D0 05                           bne BranchToDecLength1
081B0 A9 9E                           lda #$9e                      ;when the length counts down to a certain point, put this
081B2 8D 02 40                        sta SND_SQUARE1_REG+2         ;directly into the LSB of square 1's frequency divider
081B5                           
081B5                           BranchToDecLength1: 
081B5 D0 36                           bne DecrementSfx1Length  ;unconditional branch (regardless of how we got here)
081B7                           
081B7                           PlaySmackEnemy:
081B7 A9 0E                           lda #$0e                 ;store length of smack enemy sound
081B9 A0 CB                           ldy #$cb
081BB A2 9F                           ldx #$9f
081BD 8D BB 07                        sta Squ1_SfxLenCounter
081C0 A9 28                           lda #$28                 ;store reg contents for smack enemy sound
081C2 20 BC 80                        jsr PlaySqu1Sfx
081C5 D0 26                           bne DecrementSfx1Length  ;unconditional branch
081C7                           
081C7                           ContinueSmackEnemy:
081C7 A5 E2                             lda Square1SoundBuffer
081C9 C9 18                     		cmp #Sfx_EnemySmackOr
081CB F0 47                     		beq NormalContinueSwimStomp
081CD AC BB 07                  		ldy Squ1_SfxLenCounter  ;check about halfway through
081D0 C0 08                             cpy #%00001000
081D2 D0 14                             bne SmSpc
081D4 A9 A0                             lda #%10100000          ;if we're at the about-halfway point, make the second tone
081D6                                                           ;stomp counter 1: #%10100000
081D6 A9 14                             lda #%10100
081D8 38                                sec
081D9 ED 25 60                          sbc EnemyDefeatPitch
081DC 0A                                asl
081DD 0A                                asl
081DE 0A                                asl
081DF 09 06                             ora #%00000110
081E1 8D 02 40                          sta SND_SQUARE1_REG+2   ;in the smack enemy sound
081E4 A9 9F                             lda #%10011111
081E6 D0 02                             bne SmTick
081E8 A9 90                     SmSpc:  lda #%10010000          ;this creates spaces in the sound, giving it its distinct noise
081EA 8D 00 40                  SmTick: sta SND_SQUARE1_REG
081ED                           DecrementSfx1Length:
081ED CE BB 07                        dec Squ1_SfxLenCounter    ;decrement length of sfx
081F0 D0 03                           bne ExSfx1
081F2                           
081F2                           StopSquare1Sfx:
081F2 4C 0D 87                  		jmp _StopSquare1Sfx
081F5 60                        ExSfx1: rts
081F6                           
081F6                           PlayPipeDownInj:  
081F6 A9 2F                           lda #$2f                ;load length of pipedown sound
081F8 8D BB 07                        sta Squ1_SfxLenCounter
081FB                           
081FB                           ContinuePipeDownInj:
081FB AD BB 07                           lda Squ1_SfxLenCounter  ;some bitwise logic, forces the regs
081FE 4A                                 lsr                     ;to be written to only during six specific times
081FF B0 10                              bcs NoPDwnL             ;during which d3 must be set and d1-0 must be clear
08201 4A                                 lsr
08202 B0 0D                              bcs NoPDwnL
08204 29 02                              and #%00000010
08206 F0 09                              beq NoPDwnL
08208 A0 91                              ldy #$91                ;and this is where it actually gets written in
0820A A2 9A                              ldx #$9a
0820C A9 44                              lda #$44
0820E 20 BC 80                           jsr PlaySqu1Sfx
08211 4C ED 81                  NoPDwnL: jmp DecrementSfx1Length
08214                           
08214                           ;--------------------------------
08214                           	  
08214                           NormalContinueSwimStomp:
08214 AC BB 07                          ldy Squ1_SfxLenCounter  ;check about halfway through
08217 C0 08                             cpy #$08
08219 D0 09                             bne SmSpc1
0821B A9 A0                             lda #$a0                ;if we're at the about-halfway point, make the second tone
0821D 8D 02 40                          sta SND_SQUARE1_REG+2   ;in the smack enemy sound
08220 A9 9F                             lda #$9f
08222 D0 02                             bne SmTic1
08224 A9 90                     SmSpc1: lda #$90                ;this creates spaces in the sound, giving it its distinct noise
08226 8D 00 40                  SmTic1: sta SND_SQUARE1_REG
08229 A9 00                     		lda #$00
0822B 8D 51 60                  		sta tempA
0822E 4C ED 81                  	    jmp DecrementSfx1Length
08231                           
08231                           
08231                           PowerUpGrabFreqData:
08231 4C 52 4C 48 3E 36 3E 36..       .db $4c, $52, $4c, $48, $3e, $36, $3e, $36, $30
0823A 28 4A 50 4A 64 3C 32 3C..       .db $28, $4a, $50, $4a, $64, $3c, $32, $3c, $32
08243 2C 24 3A 64 3A 34 2C 22..       .db $2c, $24, $3a, $64, $3a, $34, $2c, $22, $2c
0824C                           
0824C                           ;residual frequency data
0824C 22 1C 14                        .db $22, $1c, $14
0824F                           	  
0824F                           ExtraLifeFreqData:
0824F 58 02 54 56 4E 44               .db $58, $02, $54, $56, $4e, $44
08255                           
08255                           
08255                           PUp_VGrow_FreqData:
08255 14 04 22 24 16 04 24 26         .db $14, $04, $22, $24, $16, $04, $24, $26 ;used by both
0825D 18 04 26 28 1A 04 28 2A         .db $18, $04, $26, $28, $1a, $04, $28, $2a
08265 1C 04 2A 2C 1E 04 2C 2E         .db $1c, $04, $2a, $2c, $1e, $04, $2c, $2e ;used by vinegrow
0826D 20 04 2E 30 22 04 30 32         .db $20, $04, $2e, $30, $22, $04, $30, $32
08275                           
08275                           PlayCoinGrab:
08275 A9 35                             lda #$35             ;load length of coin grab sound
08277 A2 8D                             ldx #$8d             ;and part of reg contents
08279 D0 11                             bne CGrab_TTickRegL
0827B                           
0827B                           PlayTimerTick:
0827B A9 09                             lda #$09            ;load length of timer tick sound
0827D A2 98                             ldx #$98             ;and part of reg contents
0827F 8D BD 07                          sta Squ2_SfxLenCounter 
08282 A0 7F                             ldy #$7f                ;load the rest of reg contents 
08284 A9 42                             lda #$42                ;of coin grab and timer tick sound
08286 20 DA 80                          jsr PlaySqu2Sfx
08289 4C A4 82                  		jmp N2Ton3
0828C                           CGrab_TTickRegL:
0828C 8D BD 07                          sta Squ2_SfxLenCounter 
0828F A0 7F                             ldy #$7f                ;load the rest of reg contents 
08291 A9 42                             lda #$42                ;of coin grab and timer tick sound
08293 20 DA 80                          jsr PlaySqu2Sfx
08296                           
08296                           ContinueCGrabTTick:
08296 AD BD 07                          lda Squ2_SfxLenCounter  ;check for time to play second tone yet
08299 C9 30                             cmp #$30                ;timer tick sound also executes this, not sure why
0829B D0 05                             bne N2Tone
0829D A9 54                             lda #$54                ;if so, load the tone directly into the reg
0829F 8D 06 40                          sta SND_SQUARE2_REG+2
082A2 D0 44                     N2Tone:	bne DecrementSfx2Length
082A4                           N2Ton3: ;lda #$54
082A4 AC 94 60                  		ldy tickid
082A7 F0 0D                     		beq ++
082A9 AD 93 60                  		lda pspeedsound
082AC F0 03                     		beq +
082AE A9 3E                     		lda #$3e
082B0 2C                        		.db $2c
082B1 A9 46                     +:		lda #$46
082B3 8D 06 40                       	sta SND_SQUARE2_REG+2
082B6 4C E8 82                  ++:		jmp DecrementSfx2Length
082B9                           
082B9                           PlayBlast:
082B9 A9 20                             lda #$20                ;load length of fireworks/gunfire sound
082BB 8D BD 07                          sta Squ2_SfxLenCounter
082BE A0 94                             ldy #$94                ;load reg contents of fireworks/gunfire sound
082C0 A9 5E                             lda #$5e
082C2 D0 0B                             bne SBlasJ
082C4                           
082C4                           ContinueBlast:
082C4 AD BD 07                          lda Squ2_SfxLenCounter  ;check for time to play second part
082C7 C9 18                             cmp #$18
082C9 D0 1D                             bne DecrementSfx2Length
082CB A0 93                             ldy #$93                ;load second part reg contents then
082CD A9 18                             lda #$18
082CF 4C 59 83                  SBlasJ: jmp BlstSJp             ;unconditional branch to load rest of reg contents
082D2                           
082D2                           PlayPowerUpGrab:
082D2 A9 36                             lda #$36                    ;load length of power-up grab sound
082D4 8D BD 07                          sta Squ2_SfxLenCounter
082D7                           
082D7                           ContinuePowerUpGrab:   
082D7 AD BD 07                          lda Squ2_SfxLenCounter      ;load frequency reg based on length left over
082DA 4A                                lsr                         ;divide by 2
082DB B0 0B                             bcs DecrementSfx2Length     ;alter frequency every other frame
082DD A8                                tay
082DE B9 30 82                          lda PowerUpGrabFreqData-1,y ;use length left over / 2 for frequency offset
082E1 A2 5D                             ldx #$5d                    ;store reg contents of power-up grab sound
082E3 A0 7F                             ldy #$7f
082E5                           
082E5                           LoadSqu2Regs:
082E5 20 DA 80                          jsr PlaySqu2Sfx
082E8                           
082E8                           DecrementSfx2Length:
082E8 CE BD 07                          dec Squ2_SfxLenCounter   ;decrement length of sfx
082EB D0 07                             bne ExSfx2
082ED                           
082ED                           EmptySfx2Buffer:
082ED A2 00                             ldx #$00                ;initialize square 2's sound effects buffer
082EF 86 E3                             stx Square2SoundBuffer
082F1                           
082F1                           StopSquare2Sfx:
082F1 4C FA 86                          jmp _StopSquare2Sfx
082F4 60                        ExSfx2: rts
082F5 4C 7B 82                  PlayTimerTick1: jmp PlayTimerTick
082F8 4C 75 82                  PlayCoinGrab2:  jmp PlayCoinGrab
082FB                           Square2SfxHandler:
082FB A5 EF                             lda Square2SoundQueue
082FD 29 40                     		and #Sfx_ExtraLife
082FF F0 04                     		beq +
08301 85 E3                     		sta Square2SoundBuffer
08303 D0 66                     		bne PlayExtraLife
08305 A5 E3                     +:		lda Square2SoundBuffer ;special handling for the 1-up sound to keep it
08307 29 40                             and #Sfx_ExtraLife     ;from being interrupted by other sounds on square 2
08309 D0 65                             bne ContinueExtraLife
0830B A4 EF                             ldy Square2SoundQueue  ;check for sfx in queue
0830D F0 1C                             beq CheckSfx2Buffer
0830F 84 E3                             sty Square2SoundBuffer ;if found, put in buffer and check for the following
08311 30 3D                             bmi PlayBowserFall     ;bowser fall
08313 46 EF                             lsr Square2SoundQueue
08315 B0 E1                             bcs PlayCoinGrab2      ;coin grab
08317 46 EF                             lsr Square2SoundQueue
08319 B0 6A                             bcs PlayGrowPowerUp    ;power-up reveal
0831B 46 EF                             lsr Square2SoundQueue
0831D B0 6A                             bcs PlayGrowVine       ;vine grow
0831F 46 EF                             lsr Square2SoundQueue
08321 B0 96                             bcs PlayBlast          ;fireworks/gunfire
08323 46 EF                             lsr Square2SoundQueue
08325 B0 CE                             bcs PlayTimerTick1     ;timer tick
08327 46 EF                             lsr Square2SoundQueue
08329 B0 A7                             bcs PlayPowerUpGrab    ;power-up grab
0832B                                   ;lsr Square2SoundQueue
0832B                                   ;bcs PlayExtraLife      ;1-up
0832B                           		
0832B                           CheckSfx2Buffer:
0832B A5 E3                             lda Square2SoundBuffer   ;check for sfx in buffer
0832D F0 17                             beq ExS2H                ;if not found, exit sub
0832F 30 2A                             bmi ContinueBowserFall   ;bowser fall
08331 4A                                lsr
08332 B0 13                             bcs Cont_CGrab_TTick     ;coin grab
08334 4A                                lsr
08335 B0 61                             bcs ContinueGrowItems    ;power-up reveal
08337 4A                                lsr
08338 B0 5E                             bcs ContinueGrowItems    ;vine grow
0833A 4A                                lsr
0833B B0 87                             bcs ContinueBlast        ;fireworks/gunfire
0833D 4A                                lsr
0833E B0 0A                             bcs N2Tone1		         ;timer tick
08340 4A                                lsr
08341 B0 94                             bcs ContinuePowerUpGrab  ;power-up grab
08343 4A                                lsr
08344 B0 2A                             bcs ContinueExtraLife    ;1-up
08346 60                        ExS2H:  rts
08347                           
08347                           Cont_CGrab_TTick:
08347 4C 96 82                          jmp ContinueCGrabTTick
0834A 4C A4 82                  N2Tone1: jmp N2Ton3
0834D                           
0834D                           JumpToDecLength2:
0834D 4C E8 82                          jmp DecrementSfx2Length
08350                           
08350                           PlayBowserFall:    
08350 A9 38                              lda #$38                ;load length of bowser defeat sound
08352 8D BD 07                           sta Squ2_SfxLenCounter
08355 A0 C4                              ldy #$c4                ;load contents of reg for bowser defeat sound
08357 A9 18                              lda #$18
08359 D0 0B                     BlstSJp: bne PBFRegs
0835B                           
0835B                           ContinueBowserFall:
0835B AD BD 07                            lda Squ2_SfxLenCounter   ;check for almost near the end
0835E C9 08                               cmp #$08
08360 D0 86                               bne DecrementSfx2Length
08362 A0 A4                               ldy #$a4                 ;if so, load the rest of reg contents for bowser defeat sound
08364 A9 5A                               lda #$5a
08366 A2 9F                     PBFRegs:  ldx #$9f                 ;the fireworks/gunfire sound shares part of reg contents here
08368 4C E5 82                  EL_LRegs: jmp LoadSqu2Regs         ;this is an unconditional branch outta here
0836B                           PlayExtraLife:
0836B A9 30                             lda #$30                  ;load length of 1-up sound
0836D 8D BD 07                          sta Squ2_SfxLenCounter
08370                           
08370                           ContinueExtraLife:
08370 AD BD 07                            lda Squ2_SfxLenCounter   
08373 A2 03                               ldx #$03                  ;load new tones only every eight frames
08375 4A                        DivLLoop: lsr
08376 B0 D5                               bcs JumpToDecLength2      ;if any bits set here, branch to dec the length
08378 CA                                  dex
08379 D0 FA                               bne DivLLoop              ;do this until all bits checked, if none set, continue
0837B A8                                  tay
0837C B9 4E 82                            lda ExtraLifeFreqData-1,y ;load our reg contents
0837F A2 82                               ldx #$82
08381 A0 7F                               ldy #$7f
08383 D0 E3                               bne EL_LRegs              ;unconditional branch
08385                           
08385                           PlayGrowPowerUp:
08385 A9 10                             lda #$10                ;load length of power-up reveal sound
08387 D0 02                             bne GrowItemRegs
08389                           
08389                           PlayGrowVine:
08389 A9 20                             lda #$20                ;load length of vine grow sound
0838B                           
0838B                           GrowItemRegs:
0838B 8D BD 07                          sta Squ2_SfxLenCounter   
0838E A9 7F                             lda #$7f                  ;load contents of reg for both sounds directly
08390 8D 05 40                          sta SND_SQUARE2_REG+1
08393 A9 00                             lda #$00                  ;start secondary counter for both sounds
08395 8D BE 07                          sta Sfx_SecondaryCounter
08398                           
08398                           ContinueGrowItems:
08398 EE BE 07                          inc Sfx_SecondaryCounter  ;increment secondary counter for both sounds
0839B AD BE 07                          lda Sfx_SecondaryCounter  ;this sound doesn't decrement the usual counter
0839E 4A                                lsr                       ;divide by 2 to get the offset
0839F A8                                tay
083A0 CC BD 07                          cpy Squ2_SfxLenCounter    ;have we reached the end yet?
083A3 F0 0B                             beq StopGrowItems         ;if so, branch to jump, and stop playing sounds
083A5 A9 9D                             lda #$9d                  ;load contents of other reg directly
083A7 8D 04 40                          sta SND_SQUARE2_REG
083AA B9 55 82                          lda PUp_VGrow_FreqData,y  ;use secondary counter / 2 as offset for frequency regs
083AD 4C DD 80                          jmp SetFreq_Squ2
083B0                           
083B0                           StopGrowItems:
083B0 4C ED 82                          jmp EmptySfx2Buffer       ;branch to stop playing sounds
083B3                           
083B3                           ;--------------------------------
083B3                           
083B3                           BrickShatterFreqData:
083B3 01 0E 0E 0D 0B 06 0C 0F           .db $01, $0e, $0e, $0d, $0b, $06, $0c, $0f
083BB 0A 09 03 0D 08 0D 06 0C           .db $0a, $09, $03, $0d, $08, $0d, $06, $0c
083C3                           
083C3                           if SKID_SFX
083C3                               SkidSfxFreqData:
083C3 47 49 42 4A 43 4B                     .db $47, $49, $42, $4a, $43, $4b
083C9                           
083C9                               PlaySkidSfx:
083C9 84 E4                                 sty NoiseSoundBuffer
083CB A9 06                                 lda #$06
083CD 8D BF 07                              sta Noise_SfxLenCounter
083D0                           
083D0                               ContinueSkidSfx:
083D0 AD BF 07                              lda Noise_SfxLenCounter
083D3 A8                                    tay
083D4 B9 C2 83                              lda SkidSfxFreqData-1,y
083D7 8D 0A 40                              sta SND_TRIANGLE_REG+2
083DA A9 18                                 lda #$18
083DC 8D 08 40                              sta SND_TRIANGLE_REG
083DF 8D 0B 40                              sta SND_TRIANGLE_REG+3
083E2 D0 1F                                 bne DecrementSfx3Length
083E4                           endif
083E4                           
083E4                           PlayBrickShatter:
083E4 84 E4                     		sty NoiseSoundBuffer        
083E6 A9 20                     		lda #$20                 ;load length of brick shatter sound
083E8 8D BF 07                          sta Noise_SfxLenCounter
083EB                           
083EB                           ContinueBrickShatter:
083EB AD BF 07                          lda Noise_SfxLenCounter  
083EE 4A                                lsr                         ;divide by 2 and check for bit set to use offset
083EF 90 12                             bcc DecrementSfx3Length
083F1 A8                                tay
083F2 BE B3 83                          ldx BrickShatterFreqData,y  ;load reg contents of brick shatter sound
083F5 B9 AE 8E                          lda BrickShatterEnvData,y
083F8                           
083F8                           PlayNoiseSfx:
083F8 8D 0C 40                          sta SND_NOISE_REG        ;play the sfx
083FB 8E 0E 40                          stx SND_NOISE_REG+2
083FE A9 18                             lda #$18
08400 8D 0F 40                          sta SND_NOISE_REG+3
08403                           
08403                           DecrementSfx3Length:
08403 CE BF 07                          dec Noise_SfxLenCounter  ;decrement length of sfx
08406 D0 0E                             bne ExSfx3
08408 A9 F0                             lda #$f0                 ;if done, stop playing the sfx
0840A 8D 0C 40                          sta SND_NOISE_REG
0840D A9 00                             lda #$00
0840F 8D 08 40                          sta SND_TRIANGLE_REG
08412 A9 00                             lda #$00
08414 85 E4                             sta NoiseSoundBuffer
08416 60                        ExSfx3: rts
08417                           
08417                           if SKID_SFX
08417                               NoiseSfxHandler:
08417 A5 E4                                 lda NoiseSoundBuffer
08419 30 B5                                 bmi ContinueSkidSfx
0841B A4 EE                                 ldy NoiseSoundQueue
0841D 30 AA                                 bmi PlaySkidSfx
0841F 46 EE                                 lsr NoiseSoundQueue
08421 B0 C1                                 bcs PlayBrickShatter
08423 4A                                    lsr
08424 B0 C5                                 bcs ContinueBrickShatter
08426 46 EE                                 lsr NoiseSoundQueue
08428 B0 0F                                 bcs PlayBowserFlame
0842A 4A                                    lsr
0842B B0 13                                 bcs ContinueBowserFlame
0842D                                       ;lsr
0842D                                       ;bcs ContinueWindSfx
0842D                                       ;lsr NoiseSoundQueue
0842D                                       ;bcs PlayWindSfx
0842D 60                                    rts
0842E                           else
0842E                               NoiseSfxHandler:
0842E                                       ldy NoiseSoundQueue   ;check for sfx in queue
0842E                                       beq CheckNoiseBuffer
0842E                                       sty NoiseSoundBuffer  ;if found, put in buffer
0842E                                       lsr NoiseSoundQueue
0842E                                       bcs PlayBrickShatter  ;brick shatter
0842E                                       lsr NoiseSoundQueue
0842E                                       bcs PlayBowserFlame   ;bowser flame
0842E                           endif
0842E                           
0842E                           CheckNoiseBuffer:
0842E A5 E4                             lda NoiseSoundBuffer      ;check for sfx in buffer
08430 F0 06                             beq ExNH                  ;if not found, exit sub
08432 4A                                lsr
08433 B0 B6                             bcs ContinueBrickShatter  ;brick shatter
08435 4A                                lsr
08436 B0 08                             bcs ContinueBowserFlame   ;bowser flame
08438 60                        ExNH:   rts
08439                           
08439                           PlayBowserFlame:
08439                                   if SKID_SFX
08439 84 E4                                 sty NoiseSoundBuffer
0843B                                   endif
0843B A9 40                             lda #$40                    ;load length of bowser flame sound
0843D 8D BF 07                          sta Noise_SfxLenCounter
08440                           
08440                           ContinueBowserFlame:
08440 AD BF 07                          lda Noise_SfxLenCounter
08443 4A                                lsr
08444 A8                                tay
08445 A2 0F                             ldx #$0f                    ;load reg contents of bowser flame sound
08447 B9 8D 8E                          lda BowserFlameEnvData-1,y
0844A D0 AC                             bne PlayNoiseSfx            ;unconditional branch here
0844C                           
0844C                           ;--------------------------------
0844C                           
0844C                           ContinueMusic:
0844C 4C 1E 85                          jmp HandleSquare2Music  ;if we have music, start with square 2 channel
0844F                           
0844F                           MusicHandler:
0844F                                   
0844F A5 ED                     		lda EventMusicQueue     ;check event music queue
08451 D0 1E                             bne LoadEventMusic
08453 A5 EC                             lda AreaMusicQueue      ;check area music queue
08455 D0 3E                             bne LoadAreaMusic
08457                           		
08457 18                        		clc
08458 AD B1 07                  		lda EventMusicBuffer
0845B 6A                        		ror
0845C B0 09                     		bcs ++
0845E C9 20                     		cmp #%00100000
08460 F0 05                     		beq ++
08462                           		
08462                           
08462                           		
08462 AD 06 7F                  		lda SettingsBits
08465 D0 09                     		bne +
08467                            		
08467                           ++:
08467 AD B1 07                  		lda EventMusicBuffer    ;check both buffers
0846A D0 E0                     		bne ContinueMusic
0846C                           		
0846C A5 E5                             lda AreaMusicBuffer
0846E D0 DC                             bne ContinueMusic 
08470                           -:
08470 60                        +:      rts                     ;no music, then leave
08471                           
08471                           LoadEventMusic:
08471 8D B1 07                             sta EventMusicBuffer      ;copy event music queue contents to buffer
08474 C9 01                                cmp #DeathMusic           ;is it death music?
08476 D0 06                                bne NoStopSfx             ;if not, jump elsewhere
08478 20 F2 81                             jsr StopSquare1Sfx        ;stop sfx in square 1 and 2
0847B 20 F1 82                             jsr StopSquare2Sfx        ;but clear only square 1's sfx buffer
0847E A6 E5                     NoStopSfx: ldx AreaMusicBuffer
08480 8E C5 07                             stx AreaMusicBuffer_Alt   ;save current area music buffer to be re-obtained later
08483 A0 00                                ldy #$00
08485 8C C4 07                             sty NoteLengthTblAdder    ;default value for additional length byte offset
08488 84 E5                                sty AreaMusicBuffer       ;clear area music buffer
0848A C9 40                                cmp #TimeRunningOutMusic  ;is it time running out music?
0848C D0 3B                                bne FindEventMusicHeader
0848E A2 08                                ldx #$08                  ;load offset to be added to length byte of header
08490 8E C4 07                             stx NoteLengthTblAdder
08493 D0 34                                bne FindEventMusicHeader  ;unconditional branch
08495                           
08495                           LoadAreaMusic:
08495 C9 04                              cmp #$04                  ;is it underground music?
08497 D0 03                              bne NoStop1               ;no, do not stop square 1 sfx
08499 20 F2 81                  		 jsr StopSquare1Sfx
0849C A0 10                     NoStop1: ldy #$10                  ;start counter used only by ground level music
0849E 8C C7 07                  GMLoopB: sty GroundMusicHeaderOfs
084A1                           
084A1                           HandleAreaMusicLoopB:
084A1 A0 00                              ldy #$00                  ;clear event music buffer
084A3 8C B1 07                           sty EventMusicBuffer
084A6 85 E5                              sta AreaMusicBuffer       ;copy area music queue contents to buffer
084A8 C9 5F                     		 cmp #$5f
084AA D0 07                     		 bne +
084AC A0 32                     		 ldy #$32
084AE 84 E8                     		 sty MusicOffset_Square2
084B0 4C CD 84                  		 jmp LoadHeader
084B3 C9 01                     +:       cmp #$01                  ;is it ground level music?
084B5 D0 0E                              bne FindAreaMusicHeader
084B7 EE C7 07                           inc GroundMusicHeaderOfs  ;increment but only if playing ground level music
084BA AC C7 07                           ldy GroundMusicHeaderOfs  ;is it time to loopback ground level music?
084BD C0 32                              cpy #$32
084BF D0 0C                              bne LoadHeader            ;branch ahead with alternate offset
084C1 A0 11                              ldy #$11
084C3 D0 D9                              bne GMLoopB               ;unconditional branch
084C5                           
084C5                           FindAreaMusicHeader:
084C5 A0 08                             ldy #$08                   ;load Y for offset of area music
084C7 84 E8                             sty MusicOffset_Square2    ;residual instruction here
084C9                           
084C9                           FindEventMusicHeader:
084C9 C8                                iny                       ;increment Y pointer based on previously loaded queue contents
084CA 4A                                lsr                       ;bit shift and increment until we find a set bit for music
084CB 90 FC                             bcc FindEventMusicHeader
084CD                           
084CD                           LoadHeader:
084CD B9 22 87                          lda MusicHeaderOffsetData,y  ;load offset for header
084D0 A8                                tay
084D1 B9 23 87                          lda MusicHeaderData,y        ;now load the header
084D4 85 E1                             sta NoteLenLookupTblOfs
084D6 B9 24 87                          lda MusicHeaderData+1,y
084D9 85 E6                             sta MusicDataLow
084DB B9 25 87                          lda MusicHeaderData+2,y
084DE 85 E7                             sta MusicDataHigh
084E0 B9 26 87                          lda MusicHeaderData+3,y
084E3 85 EA                             sta MusicOffset_Triangle
084E5 B9 27 87                          lda MusicHeaderData+4,y
084E8 85 E9                             sta MusicOffset_Square1
084EA B9 28 87                          lda MusicHeaderData+5,y
084ED 8D B0 07                          sta MusicOffset_Noise
084F0 8D C1 07                          sta NoiseDataLoopbackOfs
084F3 A9 01                             lda #$01                     ;initialize music note counters
084F5 8D B4 07                          sta Squ2_NoteLenCounter
084F8 8D B6 07                          sta Squ1_NoteLenCounter
084FB 8D B9 07                          sta Tri_NoteLenCounter
084FE 8D BA 07                          sta Noise_BeatLenCounter
08501 A9 00                             lda #$00                     ;initialize music data offset for square 2
08503 85 E8                             sta MusicOffset_Square2
08505 8D CA 07                          sta AltRegContentFlag        ;initialize alternate control reg data used by square 1
08508 A9 0B                             lda #$0b                     ;disable triangle channel and reenable it
0850A 8D 15 40                          sta SND_MASTERCTRL_REG
0850D AD E3 63                  		lda OldSquare1SoundBuffer
08510 C9 40                     		cmp #$40
08512 F0 05                     		beq ++
08514 AD 06 7F                  		lda SettingsBits
08517 D0 3E                     		bne +
08519 A9 0F                     ++:     lda #$0f
0851B 8D 15 40                          sta SND_MASTERCTRL_REG
0851E                           
0851E                           HandleSquare2Music:
0851E CE B4 07                          dec Squ2_NoteLenCounter  ;decrement square 2 note length
08521 D0 62                             bne MiscSqu2MusicTasks   ;is it time for more data?  if not, branch to end tasks
08523 A4 E8                             ldy MusicOffset_Square2  ;increment square 2 music offset and fetch data
08525 E6 E8                             inc MusicOffset_Square2
08527 B1 E6                             lda (MusicData),y
08529 F0 04                             beq EndOfMusicData       ;if zero, the data is a null terminator
0852B 10 40                             bpl Squ2NoteHandler      ;if non-negative, data is a note
0852D D0 32                             bne Squ2LengthHandler    ;otherwise it is length data
0852F                           
0852F                           EndOfMusicData:
0852F AD B1 07                          lda EventMusicBuffer     ;check secondary buffer for time running out music
08532 C9 40                             cmp #TimeRunningOutMusic
08534 D0 05                             bne NotTRO
08536 AD C5 07                          lda AreaMusicBuffer_Alt  ;load previously saved contents of primary buffer
08539 D0 1D                             bne MusicLoopBack        ;and start playing the song again if there is one
0853B 29 04                     NotTRO: and #VictoryMusic        ;check for victory music (the only secondary that loops)
0853D D0 1C                             bne VictoryMLoopBack
0853F A5 E5                             lda AreaMusicBuffer      ;check primary buffer for any music except pipe intro
08541 29 5F                             and #%01011111
08543 D0 13                             bne MusicLoopBack        ;if any area music except pipe intro, music loops
08545 A9 00                             lda #$00                 ;clear primary and secondary buffers and initialize
08547 85 E5                             sta AreaMusicBuffer      ;control regs of square and triangle channels
08549 8D B1 07                          sta EventMusicBuffer
0854C 8D 08 40                          sta SND_TRIANGLE_REG
0854F A9 90                             lda #$90    
08551 8D 00 40                          sta SND_SQUARE1_REG
08554 8D 04 40                          sta SND_SQUARE2_REG
08557 60                        +:      rts
08558                           
08558                           MusicLoopBack:
08558 4C A1 84                          jmp HandleAreaMusicLoopB
0855B                           
0855B                           VictoryMLoopBack:
0855B 4C 71 84                          jmp LoadEventMusic
0855E                           Rest:
0855E                           		;lda Squ2_EnvelopeDataCtrl
0855E 4C 79 85                  		jmp +
08561                           Squ2LengthHandler:
08561 20 B8 86                          jsr ProcessLengthData    ;store length of note
08564 8D B3 07                          sta Squ2_NoteLenBuffer
08567 A4 E8                             ldy MusicOffset_Square2  ;fetch another byte (MUST NOT BE LENGTH BYTE!)
08569 E6 E8                             inc MusicOffset_Square2
0856B B1 E6                             lda (MusicData),y
0856D                           
0856D                           Squ2NoteHandler:
0856D A6 E3                               ldx Square2SoundBuffer     ;is there a sound playing on this channel?
0856F D0 0E                               bne SkipFqL1
08571 20 DD 80                            jsr SetFreq_Squ2           ;no, then play the note
08574 F0 E8                               beq Rest                   ;check to see if note is rest
08576 20 C5 86                            jsr LoadControlRegs        ;if not, load control regs for square 2
08579 8D B5 07                  +:    	  sta Squ2_EnvelopeDataCtrl  ;save contents of A
0857C 20 D3 80                            jsr Dump_Sq2_Regs          ;dump X and Y into square 2 control regs
0857F AD B3 07                  SkipFqL1: lda Squ2_NoteLenBuffer     ;save length in square 2 note counter
08582 8D B4 07                            sta Squ2_NoteLenCounter
08585                           
08585                           MiscSqu2MusicTasks:
08585 A5 E3                                lda Square2SoundBuffer     ;is there a sound playing on square 2?
08587 D0 1A                                bne HandleSquare1Music
08589 AD B1 07                             lda EventMusicBuffer       ;check for death music or d4 set on secondary buffer
0858C 29 91                                and #%10010001             ;note that regs for death music or d4 are loaded by default
0858E D0 13                                bne HandleSquare1Music
08590 AC B5 07                             ldy Squ2_EnvelopeDataCtrl  ;check for contents saved from LoadControlRegs
08593 F0 03                                beq NoDecEnv1
08595 CE B5 07                             dec Squ2_EnvelopeDataCtrl  ;decrement unless already zero
08598 20 E1 86                  NoDecEnv1: jsr LoadEnvelopeData       ;do a load of envelope data to replace default
0859B 8D 04 40                             sta SND_SQUARE2_REG        ;based on offset set by first load unless playing
0859E A2 7F                                ldx #$7f                   ;death music or d4 set on secondary buffer
085A0 8E 05 40                             stx SND_SQUARE2_REG+1
085A3                           
085A3                           HandleSquare1Music:
085A3 A4 E9                             ldy MusicOffset_Square1    ;is there a nonzero offset here?
085A5 F0 5A                             beq HandleTriangleMusic    ;if not, skip ahead to the triangle channel
085A7 CE B6 07                          dec Squ1_NoteLenCounter    ;decrement square 1 note length
085AA D0 32                             bne MiscSqu1MusicTasks     ;is it time for more data?
085AC                           
085AC                           FetchSqu1MusicData:
085AC A4 E9                             ldy MusicOffset_Square1    ;increment square 1 music offset and fetch data
085AE E6 E9                             inc MusicOffset_Square1
085B0 B1 E6                             lda (MusicData),y
085B2 D0 0F                             bne Squ1NoteHandler        ;if nonzero, then skip this part
085B4 A9 83                             lda #$83
085B6 8D 00 40                          sta SND_SQUARE1_REG        ;store some data into control regs for square 1
085B9 A9 94                             lda #$94                   ;and fetch another byte of data, used to give
085BB 8D 01 40                          sta SND_SQUARE1_REG+1      ;death music its unique sound
085BE 8D CA 07                          sta AltRegContentFlag
085C1 D0 E9                             bne FetchSqu1MusicData     ;unconditional branch
085C3                           
085C3                           Squ1NoteHandler:
085C3 20 B2 86                             jsr AlternateLengthHandler
085C6 8D B6 07                             sta Squ1_NoteLenCounter    ;save contents of A in square 1 note counter
085C9 A4 E2                                ldy Square1SoundBuffer     ;is there a sound playing on square 1?
085CB D0 34                                bne HandleTriangleMusic
085CD 8A                                   txa
085CE 29 3E                                and #%00111110             ;change saved data to appropriate note format
085D0 20 BF 80                             jsr SetFreq_Squ1           ;play the note
085D3 F0 03                                beq SkipCtrlL
085D5 20 C5 86                             jsr LoadControlRegs
085D8 8D B7 07                  SkipCtrlL: sta Squ1_EnvelopeDataCtrl  ;save envelope offset
085DB 20 B5 80                             jsr Dump_Squ1_Regs
085DE                           
085DE                           MiscSqu1MusicTasks:
085DE A5 E2                                   lda Square1SoundBuffer     ;is there a sound playing on square 1?
085E0 D0 1F                                   bne HandleTriangleMusic
085E2 AD B1 07                                lda EventMusicBuffer       ;check for death music or d4 set on secondary buffer
085E5 29 91                                   and #%10010001
085E7 D0 0E                                   bne DeathMAltReg
085E9 AC B7 07                                ldy Squ1_EnvelopeDataCtrl  ;check saved envelope offset
085EC F0 03                                   beq NoDecEnv2
085EE CE B7 07                                dec Squ1_EnvelopeDataCtrl  ;decrement unless already zero
085F1 20 E1 86                  NoDecEnv2:    jsr LoadEnvelopeData       ;do a load of envelope data
085F4 8D 00 40                                sta SND_SQUARE1_REG        ;based on offset set by first load
085F7 AD CA 07                  DeathMAltReg: lda AltRegContentFlag      ;check for alternate control reg data
085FA D0 02                                   bne DoAltLoad
085FC A9 7F                                   lda #$7f                   ;load this value if zero, the alternate value
085FE 8D 01 40                  DoAltLoad:    sta SND_SQUARE1_REG+1      ;if nonzero, and let's move on
08601                           
08601                           HandleTriangleMusic:
08601 A5 EA                             lda MusicOffset_Triangle
08603 CE B9 07                          dec Tri_NoteLenCounter    ;decrement triangle note length
08606 D0 4C                             bne HandleNoiseMusic      ;is it time for more data?
08608 A4 EA                             ldy MusicOffset_Triangle  ;increment square 1 music offset and fetch data
0860A E6 EA                             inc MusicOffset_Triangle
0860C B1 E6                             lda (MusicData),y
0860E F0 41                             beq LoadTriCtrlReg        ;if zero, skip all this and move on to noise 
08610 10 13                             bpl TriNoteHandler        ;if non-negative, data is note
08612 20 B8 86                          jsr ProcessLengthData     ;otherwise, it is length data
08615 8D B8 07                          sta Tri_NoteLenBuffer     ;save contents of A
08618 A9 1F                             lda #$1f
0861A 8D 08 40                          sta SND_TRIANGLE_REG      ;load some default data for triangle control reg
0861D A4 EA                             ldy MusicOffset_Triangle  ;fetch another byte
0861F E6 EA                             inc MusicOffset_Triangle
08621 B1 E6                             lda (MusicData),y
08623 F0 2C                             beq LoadTriCtrlReg        ;check once more for nonzero data
08625                           
08625                           TriNoteHandler:
08625 20 E1 80                            jsr SetFreq_Tri
08628 AE B8 07                            ldx Tri_NoteLenBuffer   ;save length in triangle note counter
0862B 8E B9 07                            stx Tri_NoteLenCounter
0862E AD B1 07                            lda EventMusicBuffer
08631 29 6E                               and #%01101110          ;check for death music or d4 set on secondary buffer
08633 D0 06                               bne NotDOrD4            ;if playing any other secondary, skip primary buffer check
08635 A5 E5                               lda AreaMusicBuffer     ;check primary buffer for water or castle level music
08637 29 0A                               and #%00001010
08639 F0 19                               beq HandleNoiseMusic    ;if playing any other primary, or death or d4, go on to noise routine
0863B 8A                        NotDOrD4: txa                     ;if playing water or castle music or any secondary
0863C C9 12                               cmp #$12                ;besides death music or d4 set, check length of note
0863E B0 0F                               bcs LongN
08640 AD B1 07                            lda EventMusicBuffer    ;check for win castle music again if not playing a long note
08643 29 08                               and #EndOfCastleMusic
08645 F0 04                               beq MediN
08647 A9 0F                               lda #$0f                ;load value $0f if playing the win castle music and playing a short
08649 D0 06                               bne LoadTriCtrlReg      ;note, load value $1f if playing water or castle level music or any
0864B A9 1F                     MediN:    lda #$1f                ;secondary besides death and d4 except win castle or win castle and playing
0864D D0 02                               bne LoadTriCtrlReg      ;a short note, and load value $ff if playing a long note on water, castle
0864F A9 FF                     LongN:    lda #$ff                ;or any secondary (including win castle) except death and d4
08651                           
08651                           LoadTriCtrlReg:           
08651 8D 08 40                          sta SND_TRIANGLE_REG      ;save final contents of A into control reg for triangle
08654                           
08654                           HandleNoiseMusic:
08654 A5 E5                             lda AreaMusicBuffer       ;check if playing underground or castle music
08656 29 F3                             and #%11110011
08658 F0 57                             beq ExitMusicHandler      ;if so, skip the noise routine
0865A A5 E5                     		lda AreaMusicBuffer
0865C C9 5F                     		cmp #$5f
0865E F0 51                     		beq ExitMusicHandler
08660 CE BA 07                          dec Noise_BeatLenCounter  ;decrement noise beat length
08663 D0 4C                             bne ExitMusicHandler      ;is it time for more data?
08665                           
08665                           FetchNoiseBeatData:
08665 AC B0 07                          ldy MusicOffset_Noise       ;increment noise beat offset and fetch data
08668 EE B0 07                          inc MusicOffset_Noise
0866B B1 E6                             lda (MusicData),y           ;get noise beat data, if nonzero, branch to handle
0866D D0 08                             bne NoiseBeatHandler
0866F AD C1 07                          lda NoiseDataLoopbackOfs    ;if data is zero, reload original noise beat offset
08672 8D B0 07                          sta MusicOffset_Noise       ;and loopback next time around
08675 D0 EE                             bne FetchNoiseBeatData      ;unconditional branch
08677                           
08677                           NoiseBeatHandler:
08677 20 B2 86                          jsr AlternateLengthHandler
0867A 8D BA 07                          sta Noise_BeatLenCounter    ;store length in noise beat counter
0867D 8A                                txa
0867E 29 3E                             and #%00111110              ;reload data and erase length bits
08680 F0 24                             beq SilentBeat              ;if no beat data, silence
08682 C9 30                             cmp #$30                    ;check the beat data and play the appropriate
08684 F0 18                             beq LongBeat                ;noise accordingly
08686 C9 20                             cmp #$20
08688 F0 0C                             beq StrongBeat
0868A 29 10                             and #%00010000  
0868C F0 18                             beq SilentBeat
0868E A9 1C                             lda #$1c        ;short beat data
08690 A2 03                             ldx #$03
08692 A0 18                             ldy #$18
08694 D0 12                             bne PlayBeat
08696                           
08696                           StrongBeat:
08696 A9 1C                             lda #$1c        ;strong beat data
08698 A2 0C                             ldx #$0c
0869A A0 18                             ldy #$18
0869C D0 0A                             bne PlayBeat
0869E                           
0869E                           LongBeat:
0869E A9 1C                             lda #$1c        ;long beat data
086A0 A2 03                             ldx #$03
086A2 A0 58                             ldy #$58
086A4 D0 02                             bne PlayBeat
086A6                           
086A6                           SilentBeat:
086A6 A9 10                             lda #$10        ;silence
086A8                           
086A8                           PlayBeat:
086A8 8D 0C 40                          sta SND_NOISE_REG    ;load beat data into noise regs
086AB 8E 0E 40                          stx SND_NOISE_REG+2
086AE 8C 0F 40                          sty SND_NOISE_REG+3
086B1                           
086B1                           ExitMusicHandler:
086B1 60                                rts
086B2                           
086B2                           AlternateLengthHandler:
086B2 AA                                tax            ;save a copy of original byte into X
086B3 6A                                ror            ;save LSB from original byte into carry
086B4 8A                                txa            ;reload original byte and rotate three times
086B5 2A                                rol            ;turning xx00000x into 00000xxx, with the
086B6 2A                                rol            ;bit in carry as the MSB here
086B7 2A                                rol
086B8                           
086B8                           ProcessLengthData:
086B8 29 07                             and #%00000111              ;clear all but the three LSBs
086BA 18                                clc
086BB 65 E1                             adc NoteLenLookupTblOfs     ;add offset loaded from first header byte
086BD 6D C4 07                          adc NoteLengthTblAdder      ;add extra if time running out music
086C0 A8                                tay
086C1 B9 2A 8E                          lda MusicLengthLookupTbl,y  ;load length
086C4 60                                rts
086C5                           
086C5                           LoadControlRegs:
086C5 AD B1 07                             lda EventMusicBuffer  ;check secondary buffer for win castle music
086C8 29 08                                and #EndOfCastleMusic
086CA F0 04                                beq NotECstlM
086CC A9 04                                lda #$04              ;this value is only used for win castle music
086CE D0 0C                                bne AllMus            ;unconditional branch
086D0 A5 E5                     NotECstlM: lda AreaMusicBuffer
086D2 29 7D                                and #%01111101        ;check primary buffer for water music
086D4 F0 04                                beq WaterMus
086D6 A9 08                                lda #$08              ;this is the default value for all other music
086D8 D0 02                                bne AllMus
086DA A9 27                     WaterMus:  lda #$27              ;this value is used for water music and all other event music
086DC A2 82                     AllMus:    ldx #$82              ;load contents of other sound regs for square 2
086DE A0 7F                                ldy #$7f
086E0 60                                   rts
086E1                           
086E1                           LoadEnvelopeData:
086E1 AD B1 07                          lda EventMusicBuffer           ;check secondary buffer for win castle music
086E4 29 08                             and #EndOfCastleMusic
086E6 F0 04                             beq LoadUsualEnvData
086E8 B9 5A 8E                          lda EndOfCastleMusicEnvData,y  ;load data from offset for win castle music
086EB 60                                rts
086EC                           
086EC                           LoadUsualEnvData:
086EC A5 E5                             lda AreaMusicBuffer            ;check primary buffer for water music
086EE 29 7D                             and #%01111101
086F0 F0 04                             beq LoadWaterEventMusEnvData
086F2 B9 5E 8E                          lda AreaMusicEnvData,y         ;load default data from offset for all other music
086F5 60                                rts
086F6                           
086F6                           LoadWaterEventMusEnvData:
086F6 B9 66 8E                          lda WaterEventMusEnvData,y     ;load data from offset for water music and all other event music
086F9 60                                rts
086FA                           	
086FA                           _StopSquare2Sfx:
086FA 48                                pha
086FB AD 15 40                          lda SND_MASTERCTRL_REG
086FE 29 10                             and #%00010000          ;keep only the dmc bit
08700 09 0D                             ora #$0d                ;stop playing the sfx
08702 AA                                tax
08703 68                                pla
08704 8E 15 40                          stx SND_MASTERCTRL_REG ; write #$d to lower nibble
08707 E8                                inx
08708 E8                                inx
08709 8E 15 40                          stx SND_MASTERCTRL_REG ; write #$f to lower nibble
0870C 60                        		rts
0870D                           
0870D                           _StopSquare1Sfx:
0870D A2 00                     		ldx #$00                ;if end of sfx reached, clear buffer
0870F 86 E2                             stx Square1SoundBuffer  ;and stop making the sfx
08711 48                                pha
08712 AD 15 40                          lda SND_MASTERCTRL_REG
08715 29 10                             and #%00010000          ;keep only the dmc bit
08717 09 0E                             ora #$0e                ;stop making the sfx
08719 AA                                tax
0871A 68                                pla
0871B                           
0871B 8E 15 40                          stx SND_MASTERCTRL_REG
0871E E8                                inx
0871F 8E 15 40                          stx SND_MASTERCTRL_REG
08722 60                        		rts
08723                           ;--------------------------------
08723                           
08723                           ;music header offsets
08723                           
08723                           MusicHeaderData:					;starts from 01 (or 00)
08723 A6                              .db DeathMusHdr-MHD           ;01 - event music
08724 5A                              .db GameOverMusHdr-MHD		;02
08725 55                              .db VictoryMusHdr-MHD			;03
08726 65                              .db WinCastleMusHdr-MHD		;04
08727 5A                              .db GameOverMusHdr-MHD		;05
08728 3D                              .db EndOfLevelMusHdr-MHD		;06
08729 32                              .db TimeRunningOutHdr-MHD		;07
0872A 4C                              .db SilenceHdr-MHD			;08
0872B                           
0872B 6A                              .db GroundLevelPart1Hdr-MHD   ;09 - area music
0872C 5F                              .db WaterMusHdr-MHD			;0a
0872D 47                              .db UndergroundMusHdr-MHD		;0b
0872E 50                              .db CastleMusHdr-MHD			;0c
0872F 37                              .db Star_CloudHdr-MHD			;0d
08730 8E                              .db GroundLevelLeadInHdr-MHD	;0e
08731 37                              .db Star_CloudHdr-MHD			;0f
08732 4C                              .db SilenceHdr-MHD			;10
08733                           
08733 8E                              .db GroundLevelLeadInHdr-MHD  ;12 - ground level music layout
08734 6A 6A                           .db GroundLevelPart1Hdr-MHD, GroundLevelPart1Hdr-MHD															;13 (13-14)
08736 70 76 70 7C                     .db GroundLevelPart2AHdr-MHD, GroundLevelPart2BHdr-MHD, GroundLevelPart2AHdr-MHD, GroundLevelPart2CHdr-MHD 	;14	(15-18)
0873A 70 76 70 7C                     .db GroundLevelPart2AHdr-MHD, GroundLevelPart2BHdr-MHD, GroundLevelPart2AHdr-MHD, GroundLevelPart2CHdr-MHD	;15	(19-1c)
0873E 82 88 82 8E                     .db GroundLevelPart3AHdr-MHD, GroundLevelPart3BHdr-MHD, GroundLevelPart3AHdr-MHD, GroundLevelLeadInHdr-MHD	;16	(1d-20)
08742 6A 6A                           .db GroundLevelPart1Hdr-MHD, GroundLevelPart1Hdr-MHD															;17	(21-22)
08744 94 9A 94 A0                     .db GroundLevelPart4AHdr-MHD, GroundLevelPart4BHdr-MHD, GroundLevelPart4AHdr-MHD, GroundLevelPart4CHdr-MHD	;18	(23-26)
08748 94 9A 94 A0                     .db GroundLevelPart4AHdr-MHD, GroundLevelPart4BHdr-MHD, GroundLevelPart4AHdr-MHD, GroundLevelPart4CHdr-MHD	;19	(27-2a)
0874C 82 88 82 8E                     .db GroundLevelPart3AHdr-MHD, GroundLevelPart3BHdr-MHD, GroundLevelPart3AHdr-MHD, GroundLevelLeadInHdr-MHD	;1a	(2b-2e)
08750 94 9A 94 A0                     .db GroundLevelPart4AHdr-MHD, GroundLevelPart4BHdr-MHD, GroundLevelPart4AHdr-MHD, GroundLevelPart4CHdr-MHD	;1b	(2f-32)
08754                           	
08754 AC                        	  .db PSwitchMusHdr-MHD			;32
08755                           ;music headers
08755                           ;header format is as follows: 
08755                           ;1 byte - length byte offset
08755                           ;2 bytes -  music data address
08755                           ;1 byte - triangle data offset
08755                           ;1 byte - square 1 data offset
08755                           ;1 byte - noise data offset (not used by secondary music)
08755                           
08755 08 8E 8A 27 18            TimeRunningOutHdr:    .db $08, <TimeRunOutMusData, >TimeRunOutMusData, $27, $18		;01
0875A 20 D4 87 2E 1A 40         Star_CloudHdr:        .db $20, <Star_CloudMData, >Star_CloudMData, $2e, $1a, $40	;02
08760 20 CC 8A 3D 21            EndOfLevelMusHdr:     .db $20, <WinLevelMusData, >WinLevelMusData, $3d, $21			;03
08765 20 C4 FC 3F 1D            ResidualHeaderData:   .db $20, $c4, $fc, $3f, $1d									;04
0876A 18 2D 8B 00 00            UndergroundMusHdr:    .db $18, <UndergroundMusData, >UndergroundMusData, $00, $00	;05
0876F 08 38 88 00               SilenceHdr:           .db $08, <SilenceData, >SilenceData, $00						;06
08773 00 C0 89 93 62            CastleMusHdr:         .db $00, <CastleMusData, >CastleMusData, $93, $62				;07
08778 10 E4 8C 24 14            VictoryMusHdr:        .db $10, <VictoryMusData, >VictoryMusData, $24, $14			;08
0877D 18 61 8A 1E 14            GameOverMusHdr:       .db $18, <GameOverMusData, >GameOverMusData, $1e, $14			;09
08782 08 6E 8B A0 70 68         WaterMusHdr:          .db $08, <WaterMusData, >WaterMusData, $a0, $70, $68			;0a
08788 08 6D 8C 4C 24            WinCastleMusHdr:      .db $08, <EndOfCastleMusData, >EndOfCastleMusData, $4c, $24	;0b
0878D 18 1D 88 2D 1C B8         GroundLevelPart1Hdr:  .db $18, <GroundM_P1Data, >GroundM_P1Data, $2d, $1c, $b8		;0c
08793 18 65 88 20 12 70         GroundLevelPart2AHdr: .db $18, <GroundM_P2AData, >GroundM_P2AData, $20, $12, $70	;0d
08799 18 91 88 1B 10 44         GroundLevelPart2BHdr: .db $18, <GroundM_P2BData, >GroundM_P2BData, $1b, $10, $44	;0e
0879F 18 B9 88 11 0A 1C         GroundLevelPart2CHdr: .db $18, <GroundM_P2CData, >GroundM_P2CData, $11, $0a, $1c	;0f
087A5 18 DE 88 2D 10 58         GroundLevelPart3AHdr: .db $18, <GroundM_P3AData, >GroundM_P3AData, $2d, $10, $58	;10
087AB 18 F7 88 14 0D 3F         GroundLevelPart3BHdr: .db $18, <GroundM_P3BData, >GroundM_P3BData, $14, $0d, $3f	;11
087B1 18 15 89 15 0D 21         GroundLevelLeadInHdr: .db $18, <GroundMLdInData, >GroundMLdInData, $15, $0d, $21	;12
087B7 18 41 89 18 10 7A         GroundLevelPart4AHdr: .db $18, <GroundM_P4AData, >GroundM_P4AData, $18, $10, $7a	;13
087BD 18 67 89 19 0F 54         GroundLevelPart4BHdr: .db $18, <GroundM_P4BData, >GroundM_P4BData, $19, $0f, $54	;14
087C3 18 90 89 1E 12 2B         GroundLevelPart4CHdr: .db $18, <GroundM_P4CData, >GroundM_P4CData, $1e, $12, $2b	;15
087C9 18 8E 89 1E 0F 2D         DeathMusHdr:          .db $18, <DeathMusData, >DeathMusData, $1e, $0f, $2d			;16
087CF 18 19 8D 44 75            PSwitchMusHdr:		  .db $18, <PSwitch, >PSwitch, $44, $75							;17
087D4                           
087D4                           ;--------------------------------
087D4                           
087D4                           ;MUSIC DATA
087D4                           ;square 2/triangle format
087D4                           ;d7 - length byte flag (0-note, 1-length)
087D4                           ;if d7 is set to 0 and d6-d0 is nonzero:
087D4                           ;d6-d0 - note offset in frequency look-up table (must be even)
087D4                           ;if d7 is set to 1:
087D4                           ;d6-d3 - unused
087D4                           ;d2-d0 - length offset in length look-up table
087D4                           ;value of $00 in square 2 data is used as null terminator, affects all sound channels
087D4                           ;value of $00 in triangle data causes routine to skip note
087D4                           
087D4                           ;square 1 format
087D4                           ;d7-d6, d0 - length offset in length look-up table (bit order is d0,d7,d6)
087D4                           ;d5-d1 - note offset in frequency look-up table
087D4                           ;value of $00 in square 1 data is flag alternate control reg data to be loaded
087D4                           
087D4                           ;noise format
087D4                           ;d7-d6, d0 - length offset in length look-up table (bit order is d0,d7,d6)
087D4                           ;d5-d4 - beat type (0 - rest, 1 - short, 2 - strong, 3 - long)
087D4                           ;d3-d1 - unused
087D4                           ;value of $00 in noise data is used as null terminator, affects only noise
087D4                           
087D4                           ;all music data is organized into sections (unless otherwise stated):
087D4                           ;square 2, square 1, triangle, noise
087D4                           
087D4                           Star_CloudMData:
087D4 84 2C 2C 2C 82 04 2C 04..       .db $84, $2c, $2c, $2c, $82, $04, $2c, $04, $85, $2c, $84, $2c, $2c
087E1 2A 2A 2A 82 04 2A 04 85..       .db $2a, $2a, $2a, $82, $04, $2a, $04, $85, $2a, $84, $2a, $2a, $00
087EE                           
087EE 1F 1F 1F 98 1F 1F 98 9E..       .db $1f, $1f, $1f, $98, $1f, $1f, $98, $9e, $98, $1f
087F8 1D 1D 1D 94 1D 1D 94 9C..       .db $1d, $1d, $1d, $94, $1d, $1d, $94, $9c, $94, $1d
08802                           
08802 86 18 85 26 30 84 04 26..       .db $86, $18, $85, $26, $30, $84, $04, $26, $30
0880B 86 14 85 22 2C 84 04 22..       .db $86, $14, $85, $22, $2c, $84, $04, $22, $2c
08814                           
08814 21 D0 C4 D0 31 D0 C4 D0..       .db $21, $d0, $c4, $d0, $31, $d0, $c4, $d0, $00
0881D                           
0881D                           GroundM_P1Data:
0881D 85 2C 22 1C 84 26 2A 82..       .db $85, $2c, $22, $1c, $84, $26, $2a, $82, $28, $26, $04
08828 87 22 34 3A 82 40 04 36..       .db $87, $22, $34, $3a, $82, $40, $04, $36, $84, $3a, $34
08833 82 2C 30 85 2A                  .db $82, $2c, $30, $85, $2a
08838                           
08838                           SilenceData:
08838 00                              .db $00
08839                           
08839 5D 55 4D 15 19 96 15 D5..       .db $5d, $55, $4d, $15, $19, $96, $15, $d5, $e3, $eb
08843 2D A6 2B 27 9C 9E 59            .db $2d, $a6, $2b, $27, $9c, $9e, $59
0884A                           
0884A 85 22 1C 14 84 1E 22 82..       .db $85, $22, $1c, $14, $84, $1e, $22, $82, $20, $1e, $04, $87
08856 1C 2C 34 82 36 04 30 34..       .db $1c, $2c, $34, $82, $36, $04, $30, $34, $04, $2c, $04, $26
08862 2A 85 22                        .db $2a, $85, $22
08865                           
08865                           GroundM_P2AData:
08865 84 04 82 3A 38 36 32 04..       .db $84, $04, $82, $3a, $38, $36, $32, $04, $34
0886E 04 24 26 2C 04 26 2C 30..       .db $04, $24, $26, $2c, $04, $26, $2c, $30, $00
08877                           
08877 05 B4 B2 B0 2B AC 84            .db $05, $b4, $b2, $b0, $2b, $ac, $84
0887E 9C 9E A2 84 94 9C 9E            .db $9c, $9e, $a2, $84, $94, $9c, $9e
08885                           
08885 85 14 22 84 2C 85 1E            .db $85, $14, $22, $84, $2c, $85, $1e
0888C 82 2C 84 2C 1E                  .db $82, $2c, $84, $2c, $1e
08891                           
08891                           GroundM_P2BData:
08891 84 04 82 3A 38 36 32 04..       .db $84, $04, $82, $3a, $38, $36, $32, $04, $34
0889A 04 64 04 64 86 64 00            .db $04, $64, $04, $64, $86, $64, $00
088A1                           
088A1 05 B4 B2 B0 2B AC 84            .db $05, $b4, $b2, $b0, $2b, $ac, $84
088A8 37 B6 B6 45                     .db $37, $b6, $b6, $45
088AC                           
088AC 85 14 1C 82 22 84 2C            .db $85, $14, $1c, $82, $22, $84, $2c
088B3 4E 82 4E 84 4E 22               .db $4e, $82, $4e, $84, $4e, $22
088B9                           
088B9                           GroundM_P2CData:
088B9 84 04 85 32 85 30 86 2C..       .db $84, $04, $85, $32, $85, $30, $86, $2c, $04, $00
088C3                           
088C3 05 A4 05 9E 05 9D 85            .db $05, $a4, $05, $9e, $05, $9d, $85
088CA                                 
088CA 84 14 85 24 28 2C 82            .db $84, $14, $85, $24, $28, $2c, $82
088D1 22 84 22 14                     .db $22, $84, $22, $14
088D5                           
088D5 21 D0 C4 D0 31 D0 C4 D0..       .db $21, $d0, $c4, $d0, $31, $d0, $c4, $d0, $00
088DE                           
088DE                           GroundM_P3AData:
088DE 82 2C 84 2C 2C 82 2C 30         .db $82, $2c, $84, $2c, $2c, $82, $2c, $30
088E6 04 34 2C 04 26 86 22 00         .db $04, $34, $2c, $04, $26, $86, $22, $00
088EE                           
088EE A4 25 25 A4 29 A2 1D 9C..       .db $a4, $25, $25, $a4, $29, $a2, $1d, $9c, $95
088F7                           
088F7                           GroundM_P3BData:
088F7 82 2C 2C 04 2C 04 2C 30..       .db $82, $2c, $2c, $04, $2c, $04, $2c, $30, $85, $34, $04, $04, $00
08904                           
08904 A4 25 25 A4 A8 63 04            .db $a4, $25, $25, $a4, $a8, $63, $04
0890B                           
0890B                           ;triangle data used by both sections of third part
0890B 85 0E 1A 84 24 85 22 14..       .db $85, $0e, $1a, $84, $24, $85, $22, $14, $84, $0c
08915                           
08915                           GroundMLdInData:
08915 82 34 84 34 34 82 2C 84..       .db $82, $34, $84, $34, $34, $82, $2c, $84, $34, $86, $3a, $04, $00
08922                           
08922 A0 21 21 A0 21 2B 05 A3         .db $a0, $21, $21, $a0, $21, $2b, $05, $a3
0892A                           
0892A 82 18 84 18 18 82 18 18..       .db $82, $18, $84, $18, $18, $82, $18, $18, $04, $86, $3a, $22
08936                           
08936                           ;noise data used by lead-in and third part sections
08936 31 90 31 90 31 71 31 90..       .db $31, $90, $31, $90, $31, $71, $31, $90, $90, $90, $00
08941                           
08941                           GroundM_P4AData:
08941 82 34 84 2C 85 22 84 24         .db $82, $34, $84, $2c, $85, $22, $84, $24
08949 82 26 36 04 36 86 26 00         .db $82, $26, $36, $04, $36, $86, $26, $00
08951                           
08951 AC 27 5D 1D 9E 2D AC 9F         .db $ac, $27, $5d, $1d, $9e, $2d, $ac, $9f
08959                           
08959 85 14 82 20 84 22 2C            .db $85, $14, $82, $20, $84, $22, $2c
08960 1E 1E 82 2C 2C 1E 04            .db $1e, $1e, $82, $2c, $2c, $1e, $04
08967                           
08967                           GroundM_P4BData:
08967 87 2A 40 40 40 3A 36            .db $87, $2a, $40, $40, $40, $3a, $36 
0896E 82 34 2C 04 26 86 22 00         .db $82, $34, $2c, $04, $26, $86, $22, $00
08976                           
08976 E3 F7 F7 F7 F5 F1 AC 27..       .db $e3, $f7, $f7, $f7, $f5, $f1, $ac, $27, $9e, $9d
08980                           
08980 85 18 82 1E 84 22 2A            .db $85, $18, $82, $1e, $84, $22, $2a
08987 22 22 82 2C 2C 22 04            .db $22, $22, $82, $2c, $2c, $22, $04
0898E                           
0898E                           DeathMusData:
0898E 86 04                           .db $86, $04 ;death music share data with fourth part c of ground level music 
08990                           
08990                           GroundM_P4CData:
08990 82 2A 36 04 36 87 36 34..       .db $82, $2a, $36, $04, $36, $87, $36, $34, $30, $86, $2c, $04, $00
0899D                                 
0899D 00 68 6A 6C 45                  .db $00, $68, $6a, $6c, $45 ;death music only
089A2                           
089A2 A2 31 B0 F1 ED EB A2 1D..       .db $a2, $31, $b0, $f1, $ed, $eb, $a2, $1d, $9c, $95
089AC                           
089AC 86 04                           .db $86, $04 ;death music only
089AE                           
089AE 85 22 82 22 87 22 26 2A..       .db $85, $22, $82, $22, $87, $22, $26, $2a, $84, $2c, $22, $86, $14
089BB                           
089BB                           ;noise data used by fourth part sections
089BB 51 90 31 11 00                  .db $51, $90, $31, $11, $00
089C0                           
089C0                           CastleMusData:
089C0 80 22 28 22 26 22 24 22..       .db $80, $22, $28, $22, $26, $22, $24, $22, $26
089C9 22 28 22 2A 22 28 22 26         .db $22, $28, $22, $2a, $22, $28, $22, $26
089D1 22 28 22 26 22 24 22 26         .db $22, $28, $22, $26, $22, $24, $22, $26
089D9 22 28 22 2A 22 28 22 26         .db $22, $28, $22, $2a, $22, $28, $22, $26
089E1 20 26 20 24 20 26 20 28         .db $20, $26, $20, $24, $20, $26, $20, $28
089E9 20 26 20 28 20 26 20 24         .db $20, $26, $20, $28, $20, $26, $20, $24
089F1 20 26 20 24 20 26 20 28         .db $20, $26, $20, $24, $20, $26, $20, $28
089F9 20 26 20 28 20 26 20 24         .db $20, $26, $20, $28, $20, $26, $20, $24
08A01 28 30 28 32 28 30 28 2E         .db $28, $30, $28, $32, $28, $30, $28, $2e
08A09 28 30 28 2E 28 2C 28 2E         .db $28, $30, $28, $2e, $28, $2c, $28, $2e
08A11 28 30 28 32 28 30 28 2E         .db $28, $30, $28, $32, $28, $30, $28, $2e
08A19 28 30 28 2E 28 2C 28 2E..       .db $28, $30, $28, $2e, $28, $2c, $28, $2e, $00
08A22                           
08A22 04 70 6E 6C 6E 70 72 70..       .db $04, $70, $6e, $6c, $6e, $70, $72, $70, $6e
08A2B 70 6E 6C 6E 70 72 70 6E         .db $70, $6e, $6c, $6e, $70, $72, $70, $6e
08A33 6E 6C 6E 70 6E 70 6E 6C         .db $6e, $6c, $6e, $70, $6e, $70, $6e, $6c
08A3B 6E 6C 6E 70 6E 70 6E 6C         .db $6e, $6c, $6e, $70, $6e, $70, $6e, $6c
08A43 76 78 76 74 76 74 72 74         .db $76, $78, $76, $74, $76, $74, $72, $74
08A4B 76 78 76 74 76 74 72 74         .db $76, $78, $76, $74, $76, $74, $72, $74
08A53                           
08A53 84 1A 83 18 20 84 1E 83..       .db $84, $1a, $83, $18, $20, $84, $1e, $83, $1c, $28
08A5D 26 1C 1A 1C                     .db $26, $1c, $1a, $1c
08A61                           
08A61                           GameOverMusData:
08A61 82 2C 04 04 22 04 04 84..       .db $82, $2c, $04, $04, $22, $04, $04, $84, $1c, $87
08A6B 26 2A 26 84 24 28 24 80..       .db $26, $2a, $26, $84, $24, $28, $24, $80, $22, $00
08A75                           
08A75 9C 05 94 05 0D 9F 1E 9C..       .db $9c, $05, $94, $05, $0d, $9f, $1e, $9c, $98, $9d
08A7F                           
08A7F 82 22 04 04 1C 04 04 84..       .db $82, $22, $04, $04, $1c, $04, $04, $84, $14
08A88 86 1E 80 16 80 14               .db $86, $1e, $80, $16, $80, $14
08A8E                           
08A8E                           TimeRunOutMusData:
08A8E 81 1C 30 04 30 30 04 1E..       .db $81, $1c, $30, $04, $30, $30, $04, $1e, $32, $04, $32, $32
08A9A 04 20 34 04 34 34 04 36..       .db $04, $20, $34, $04, $34, $34, $04, $36, $04, $84, $36, $00
08AA6                           
08AA6 46 A4 64 A4 48 A6 66 A6..       .db $46, $a4, $64, $a4, $48, $a6, $66, $a6, $4a, $a8, $68, $a8
08AB2 6A 44 2B                        .db $6a, $44, $2b
08AB5                           
08AB5 81 2A 42 04 42 42 04 2C..       .db $81, $2a, $42, $04, $42, $42, $04, $2c, $64, $04, $64, $64
08AC1 04 2E 46 04 46 46 04 22..       .db $04, $2e, $46, $04, $46, $46, $04, $22, $04, $84, $22
08ACC                           
08ACC                           WinLevelMusData:
08ACC 87 04 06 0C 14 1C 22 86..       .db $87, $04, $06, $0c, $14, $1c, $22, $86, $2c, $22
08AD6 87 04 60 0E 14 1A 24 86..       .db $87, $04, $60, $0e, $14, $1a, $24, $86, $2c, $24
08AE0 87 04 08 10 18 1E 28 86..       .db $87, $04, $08, $10, $18, $1e, $28, $86, $30, $30
08AEA 80 64 00                        .db $80, $64, $00
08AED                           
08AED CD D5 DD E3 ED F5 BB B5..       .db $cd, $d5, $dd, $e3, $ed, $f5, $bb, $b5, $cf, $d5
08AF7 DB E5 ED F3 BD B3 D1 D9..       .db $db, $e5, $ed, $f3, $bd, $b3, $d1, $d9, $df, $e9
08B01 F1 F7 BF FF FF FF 34            .db $f1, $f7, $bf, $ff, $ff, $ff, $34
08B08 00                              .db $00 ;unused byte
08B09                           
08B09 86 04 87 14 1C 22 86 34..       .db $86, $04, $87, $14, $1c, $22, $86, $34, $84, $2c
08B13 04 04 04 87 14 1A 24 86..       .db $04, $04, $04, $87, $14, $1a, $24, $86, $32, $84
08B1D 2C 04 86 04 87 18 1E 28..       .db $2c, $04, $86, $04, $87, $18, $1e, $28, $86, $36
08B27 87 30 30 30 80 2C               .db $87, $30, $30, $30, $80, $2c
08B2D                           
08B2D                           ;square 2 and triangle use the same data, square 1 is unused
08B2D                           UndergroundMusData:
08B2D 82 14 2C 62 26 10 28 80..       .db $82, $14, $2c, $62, $26, $10, $28, $80, $04
08B36 82 14 2C 62 26 10 28 80..       .db $82, $14, $2c, $62, $26, $10, $28, $80, $04
08B3F 82 08 1E 5E 18 60 1A 80..       .db $82, $08, $1e, $5e, $18, $60, $1a, $80, $04
08B48 82 08 1E 5E 18 60 1A 86..       .db $82, $08, $1e, $5e, $18, $60, $1a, $86, $04
08B51 83 1A 18 16 84 14 1A 18..       .db $83, $1a, $18, $16, $84, $14, $1a, $18, $0e, $0c
08B5B 16 83 14 20 1E 1C 28 26..       .db $16, $83, $14, $20, $1e, $1c, $28, $26, $87
08B64 24 1A 12 10 62 0E 80 04..       .db $24, $1a, $12, $10, $62, $0e, $80, $04, $04
08B6D 00                              .db $00
08B6E                           	  
08B6E                           
08B6E                           ;noise data directly follows square 2 here unlike in other songs
08B6E                           WaterMusData:
08B6E 82 18 1C 20 22 26 28            .db $82, $18, $1c, $20, $22, $26, $28 
08B75 81 2A 2A 2A 04 2A 04 83..       .db $81, $2a, $2a, $2a, $04, $2a, $04, $83, $2a, $82, $22
08B80 86 34 32 34 81 04 22 26..       .db $86, $34, $32, $34, $81, $04, $22, $26, $2a, $2c, $30
08B8B 86 34 83 32 82 36 84 34..       .db $86, $34, $83, $32, $82, $36, $84, $34, $85, $04, $81, $22
08B97 86 30 2E 30 81 04 22 26..       .db $86, $30, $2e, $30, $81, $04, $22, $26, $2a, $2c, $2e
08BA2 86 30 83 22 82 36 84 34..       .db $86, $30, $83, $22, $82, $36, $84, $34, $85, $04, $81, $22
08BAE 86 3A 3A 3A 82 3A 81 40..       .db $86, $3a, $3a, $3a, $82, $3a, $81, $40, $82, $04, $81, $3a
08BBA 86 36 36 36 82 36 81 3A..       .db $86, $36, $36, $36, $82, $36, $81, $3a, $82, $04, $81, $36
08BC6 86 34 82 26 2A 36               .db $86, $34, $82, $26, $2a, $36
08BCC 81 34 34 85 34 81 2A 86..       .db $81, $34, $34, $85, $34, $81, $2a, $86, $2c, $00
08BD6                           
08BD6 84 90 B0 84 50 50 B0 00         .db $84, $90, $b0, $84, $50, $50, $b0, $00
08BDE                           
08BDE 98 96 94 92 94 96 58 58..       .db $98, $96, $94, $92, $94, $96, $58, $58, $58, $44
08BE8 5C 44 9F A3 A1 A3 85 A3..       .db $5c, $44, $9f, $a3, $a1, $a3, $85, $a3, $e0, $a6
08BF2 23 C4 9F 9D 9F 85 9F D2..       .db $23, $c4, $9f, $9d, $9f, $85, $9f, $d2, $a6, $23
08BFC C4 B5 B1 AF 85 B1 AF AD..       .db $c4, $b5, $b1, $af, $85, $b1, $af, $ad, $85, $95
08C06 9E A2 AA 6A 6A 6B 5E 9D         .db $9e, $a2, $aa, $6a, $6a, $6b, $5e, $9d
08C0E                           
08C0E 84 04 04 82 22 86 22            .db $84, $04, $04, $82, $22, $86, $22
08C15 82 14 22 2C 12 22 2A 14..       .db $82, $14, $22, $2c, $12, $22, $2a, $14, $22, $2c
08C1F 1C 22 2C 14 22 2C 12 22..       .db $1c, $22, $2c, $14, $22, $2c, $12, $22, $2a, $14
08C29 22 2C 1C 22 2C 18 22 2A..       .db $22, $2c, $1c, $22, $2c, $18, $22, $2a, $16, $20
08C33 28 18 22 2A 12 22 2A 18..       .db $28, $18, $22, $2a, $12, $22, $2a, $18, $22, $2a
08C3D 12 22 2A 14 22 2C 0C 22..       .db $12, $22, $2a, $14, $22, $2c, $0c, $22, $2c, $14, $22, $34, $12
08C4A 22 30 10 22 2E 16 22 34..       .db $22, $30, $10, $22, $2e, $16, $22, $34, $18, $26
08C54 36 16 26 36 14 26 36 12..       .db $36, $16, $26, $36, $14, $26, $36, $12, $22, $36
08C5E 5C 22 34 0C 22 22 81 1E..       .db $5c, $22, $34, $0c, $22, $22, $81, $1e, $1e, $85, $1e
08C69 81 12 86 14                     .db $81, $12, $86, $14
08C6D                           
08C6D                           EndOfCastleMusData:
08C6D 81 2C 22 1C 2C 22 1C 85..       .db $81, $2c, $22, $1c, $2c, $22, $1c, $85, $2c, $04
08C77 81 2E 24 1E 2E 24 1E 85..       .db $81, $2e, $24, $1e, $2e, $24, $1e, $85, $2e, $04
08C81 81 32 28 22 32 28 22 85..       .db $81, $32, $28, $22, $32, $28, $22, $85, $32
08C8A 87 36 36 36 84 3A 00            .db $87, $36, $36, $36, $84, $3a, $00
08C91                           
08C91 5C 54 4C 5C 54 4C               .db $5c, $54, $4c, $5c, $54, $4c
08C97 5C 1C 1C 5C 5C 5C 5C            .db $5c, $1c, $1c, $5c, $5c, $5c, $5c
08C9E 5E 56 4E 5E 56 4E               .db $5e, $56, $4e, $5e, $56, $4e
08CA4 5E 1E 1E 5E 5E 5E 5E            .db $5e, $1e, $1e, $5e, $5e, $5e, $5e
08CAB 62 5A 50 62 5A 50               .db $62, $5a, $50, $62, $5a, $50
08CB1 62 22 22 62 E7 E7 E7 2B         .db $62, $22, $22, $62, $e7, $e7, $e7, $2b
08CB9                           
08CB9 86 14 81 14 80 14 14 81..       .db $86, $14, $81, $14, $80, $14, $14, $81, $14, $14, $14, $14
08CC5 86 16 81 16 80 16 16 81..       .db $86, $16, $81, $16, $80, $16, $16, $81, $16, $16, $16, $16
08CD1 81 28 22 1A 28 22 1A 28..       .db $81, $28, $22, $1a, $28, $22, $1a, $28, $80, $28, $28
08CDC 81 28 87 2C 2C 2C 84 30         .db $81, $28, $87, $2c, $2c, $2c, $84, $30
08CE4                           
08CE4                           VictoryMusData:
08CE4 83 04 84 0C 83 62 10 84..       .db $83, $04, $84, $0c, $83, $62, $10, $84, $12
08CED 83 1C 22 1E 22 26 18 1E..       .db $83, $1c, $22, $1e, $22, $26, $18, $1e, $04, $1c, $00
08CF8                           
08CF8 E3 E1 E3 1D DE E0 23            .db $e3, $e1, $e3, $1d, $de, $e0, $23
08CFF EC 75 74 F0 F4 F6 EA 31..       .db $ec, $75, $74, $f0, $f4, $f6, $ea, $31, $2d
08D08                           
08D08 83 12 14 04 18 1A 1C 14         .db $83, $12, $14, $04, $18, $1a, $1c, $14
08D10 26 22 1E 1C 18 1E 22 0C..       .db $26, $22, $1e, $1c, $18, $1e, $22, $0c, $14
08D19                           	  
08D19                           PSwitch:
08D19 84 3A 04 3A 04 82 38 3A.. 	  .db $84, $3a, $04, $3a, $04, $82, $38, $3a, $84, $04, $3a, $04, $40, $04, $40, $04 ;SQ2
08D29 82 3C 40 84 04 40 04 3A..       .db $82, $3c, $40, $84, $04, $40, $04, $3a, $04, $3a, $04, $82, $38, $3a, $84, $04
08D39 3A 04 40 04 40 04 82 3C..       .db $3a, $04, $40, $04, $40, $04, $82, $3c, $40, $84, $04, $40, $04, $3e, $04, $3e
08D49 04 82 40 3E 84 04 3E 04..       .db $04, $82, $40, $3e, $84, $04, $3e, $04, $64, $04, $64, $04, $82, $42, $64, $84
08D59 04 64 04 00                     .db $04, $64, $04, $00
08D5D                                 
08D5D 84 32 3E 4A 3E 32 3E 4A..       .db $84, $32, $3e, $4a, $3e, $32, $3e, $4a, $3e, $36, $64, $4c, $64, $36, $64, $4c ;TRI  ;44
08D6D 64 32 3E 4A 3E 32 3E 4A..       .db $64, $32, $3e, $4a, $3e, $32, $3e, $4a, $3e, $36, $64, $4c, $64, $36, $64, $4c
08D7D 64 38 46 50 46 38 46 50..       .db $64, $38, $46, $50, $46, $38, $46, $50, $46, $3c, $4a, $50, $4a, $3c, $4a, $50
08D8D 4A                              .db $4a
08D8E                                 
08D8E 29 05 29 05 A6 A8 05 29..       .db $29, $05, $29, $05, $a6, $a8, $05, $29, $05, $2d, $05, $2d, $05, $aa, $ac, $05 ;SQ1  ;75
08D9E 2D 05 29 05 29 05 A6 A8..       .db $2d, $05, $29, $05, $29, $05, $a6, $a8, $05, $29, $05, $2d, $05, $2d, $05, $aa
08DAE AC 05 2D 05 2F 05 2F 05..       .db $ac, $05, $2d, $05, $2f, $05, $2f, $05, $ac, $ae, $05, $2f, $05, $33, $05, $33
08DBE 05 B0 B2 05 33 05               .db $05, $b0, $b2, $05, $33, $05 ;af
08DC4                           	  
08DC4                           FreqRegLookupTbl:
08DC4 00 88 00 2F 00 00               .db $00, $88, $00, $2f, $00, $00
08DCA 02 A6 02 80 02 5C 02 3A         .db $02, $a6, $02, $80, $02, $5c, $02, $3a
08DD2 02 1A 01 DF 01 C4 01 AB         .db $02, $1a, $01, $df, $01, $c4, $01, $ab
08DDA 01 93 01 7C 01 67 01 53         .db $01, $93, $01, $7c, $01, $67, $01, $53
08DE2 01 40 01 2E 01 1D 01 0D         .db $01, $40, $01, $2e, $01, $1d, $01, $0d
08DEA 00 FE 00 EF 00 E2 00 D5         .db $00, $fe, $00, $ef, $00, $e2, $00, $d5
08DF2 00 C9 00 BE 00 B3 00 A9         .db $00, $c9, $00, $be, $00, $b3, $00, $a9
08DFA 00 A0 00 97 00 8E 00 86         .db $00, $a0, $00, $97, $00, $8e, $00, $86
08E02 00 77 00 7E 00 71 00 54         .db $00, $77, $00, $7e, $00, $71, $00, $54
08E0A 00 64 00 5F 00 59 00 50         .db $00, $64, $00, $5f, $00, $59, $00, $50
08E12 00 47 00 43 00 3B 00 35         .db $00, $47, $00, $43, $00, $3b, $00, $35
08E1A 00 2A 00 23 04 75 03 57         .db $00, $2a, $00, $23, $04, $75, $03, $57
08E22 02 F9 02 CF 01 FC 00 6A         .db $02, $f9, $02, $cf, $01, $fc, $00, $6a
08E2A                           
08E2A                           MusicLengthLookupTbl:
08E2A 05 0A 14 28 50 1E 3C 02         .db $05, $0a, $14, $28, $50, $1e, $3c, $02
08E32 04 08 10 20 40 18 30 0C         .db $04, $08, $10, $20, $40, $18, $30, $0c
08E3A 03 06 0C 18 30 12 24 08         .db $03, $06, $0c, $18, $30, $12, $24, $08
08E42 36 03 09 06 12 1B 24 0C         .db $36, $03, $09, $06, $12, $1b, $24, $0c
08E4A 24 02 06 04 0C 12 18 08         .db $24, $02, $06, $04, $0c, $12, $18, $08
08E52 12 01 03 02 06 09 0C 04         .db $12, $01, $03, $02, $06, $09, $0c, $04
08E5A                           
08E5A                           EndOfCastleMusicEnvData:
08E5A 98 99 9A 9B                     .db $98, $99, $9a, $9b
08E5E                           
08E5E                           AreaMusicEnvData:
08E5E 90 94 94 95 95 96 97 98         .db $90, $94, $94, $95, $95, $96, $97, $98
08E66                           
08E66                           WaterEventMusEnvData:
08E66 90 91 92 92 93 93 93 94         .db $90, $91, $92, $92, $93, $93, $93, $94
08E6E 94 94 94 94 94 95 95 95         .db $94, $94, $94, $94, $94, $95, $95, $95
08E76 95 95 95 96 96 96 96 96         .db $95, $95, $95, $96, $96, $96, $96, $96
08E7E 96 96 96 96 96 96 96 96         .db $96, $96, $96, $96, $96, $96, $96, $96
08E86 96 96 96 96 95 95 94 93         .db $96, $96, $96, $96, $95, $95, $94, $93
08E8E                           
08E8E                           BowserFlameEnvData:
08E8E 15 16 16 17 17 18 19 19         .db $15, $16, $16, $17, $17, $18, $19, $19
08E96 1A 1A 1C 1D 1D 1E 1E 1F         .db $1a, $1a, $1c, $1d, $1d, $1e, $1e, $1f
08E9E 1F 1F 1F 1E 1D 1C 1E 1F         .db $1f, $1f, $1f, $1e, $1d, $1c, $1e, $1f
08EA6 1F 1E 1D 1C 1A 18 16 14         .db $1f, $1e, $1d, $1c, $1a, $18, $16, $14
08EAE                           
08EAE                           BrickShatterEnvData:
08EAE 15 16 16 17 17 18 19 19         .db $15, $16, $16, $17, $17, $18, $19, $19
08EB6 1A 1A 1C 1D 1D 1E 1E 1F         .db $1a, $1a, $1c, $1d, $1d, $1e, $1e, $1f
08EBE                           	;include "D:\random\.disasembly w\smbdis mmc3\famitone\famitone2_asm6.asm"
08EBE                           	;include "D:\random\.disasembly w\smbdis mmc3\famitone\tools\music.asm"
08EBE                           	;include "D:\random\.disasembly w\smbdis mmc3\famitone\tools\sfx.asm"
08EBE                           	
08EBE                           ;	----------------------------------------------------------------------------------------------------------------
08EBE                           ;	ALL OF THIS CODE BELONGS TO STUDSX
08EBE                           ;----------------------------------------------------------------------------------------------------------------
08EBE                           ;CustomAudioInit 		EQU FamiToneInit
08EBE                           ;	CustomAudioSfxInit 		EQU FamiToneSfxInit
08EBE                           ;	CustomAudioSfxPlay 		EQU FamiToneSfxPlay
08EBE                           ;	CustomAudioMusicPlay 	EQU FamiToneMusicPlay
08EBE                           ;	CustomAudioMusicPause 	EQU FamiToneMusicPause
08EBE                           ;	CustomAudioUpdate 		EQU FamiToneUpdate
08EBE                           ;	SFX_CH0 EQU FT_SFX_CH0
08EBE                           ;	SFX_CH1 EQU FT_SFX_CH1
08EBE                           ;	SFX_CH2 EQU FT_SFX_CH2
08EBE                           ;	SFX_CH3 EQU FT_SFX_CH3
08EBE                           ;					;Enter music number here (Famitracker music number - 1)
08EBE                           ;
08EBE                           ;GroundMus        =	0
08EBE                           ;WaterMus         =  1
08EBE                           ;CaveMus          =  2
08EBE                           ;CastleMus        =  3
08EBE                           ;CloudMus         =  4
08EBE                           ;PipeMus          =  5
08EBE                           ;StarmanMus       =  6
08EBE                           ;DeathMus         =  7
08EBE                           ;GameOverMus      =  8
08EBE                           ;PrincessMus      =  9
08EBE                           ;CastleFinishMus  =  10
08EBE                           ;LevelFinishMus   =  11
08EBE                           ;HurryMus         =  12
08EBE                           ;
08EBE                           ;MusicLUT:
08EBE                           ;		.db GroundMus, WaterMus, CaveMus, CastleMus, CloudMus, PipeMus, StarmanMus,	-1
08EBE                           ;		.db DeathMus, GameOverMus, PrincessMus, CastleFinishMus, 0, LevelFinishMus, HurryMus, -1
08EBE                           ;
08EBE                           ;BRICK = 1		-1
08EBE                           ;BREATH = 2		-1
08EBE                           ;COIN = 3		-1
08EBE                           ;GROWPU = 4		-1
08EBE                           ;VINE = 5		-1
08EBE                           ;BLAST = 6		-1
08EBE                           ;TIMER = 7		-1
08EBE                           ;GROW = 8		-1
08EBE                           ;EXTRALIFE = 9	-1
08EBE                           ;BOWS_FALL = 10	-1
08EBE                           ;BJUMP = 11		-1
08EBE                           ;BUMP = 12		-1
08EBE                           ;STOMP = 13		-1
08EBE                           ;SMACK = 14		-1
08EBE                           ;INJURY = 15		-1
08EBE                           ;FIREBALL = 16	-1
08EBE                           ;FLAGPOLE = 17	-1
08EBE                           ;SJUMP = 18		-1
08EBE                           ;PAUSE_= 19		-1
08EBE                           ;
08EBE                           ;
08EBE                           ;noise_sfx_table:
08EBE                           ;			.db BRICK      , SFX_CH2
08EBE                           ;			.db BREATH     , SFX_CH2
08EBE                           ;			.db PAUSE_	   , SFX_CH3 ;put pause here cuz i can	   
08EBE                           ;			
08EBE                           ;sq2_sfx_table:	           
08EBE                           ;			.db COIN       , SFX_CH1
08EBE                           ;			.db GROWPU     , SFX_CH1
08EBE                           ;			.db VINE       , SFX_CH1
08EBE                           ;			.db BLAST      , SFX_CH1
08EBE                           ;			.db TIMER      , SFX_CH1
08EBE                           ;			.db GROW       , SFX_CH1
08EBE                           ;			.db EXTRALIFE  , SFX_CH3
08EBE                           ;			.db BOWS_FALL  , SFX_CH1
08EBE                           ;
08EBE                           ;sq1_sfx_table:             
08EBE                           ;			.db BJUMP      , SFX_CH0
08EBE                           ;			.db BUMP       , SFX_CH0
08EBE                           ;			.db STOMP      , SFX_CH0
08EBE                           ;			.db SMACK      , SFX_CH0
08EBE                           ;			.db INJURY     , SFX_CH0
08EBE                           ;			.db FIREBALL   , SFX_CH0
08EBE                           ;			.db FLAGPOLE   , SFX_CH0
08EBE                           ;			.db SJUMP      , SFX_CH0
08EBE                           ;		
08EBE                           ;CustomMusicEngine:
08EBE                           ;		lda GamePauseStatus
08EBE                           ;		bmi +
08EBE                           ;		and #$01
08EBE                           ;		ora SettingsBits
08EBE                           ;		jsr FamiToneMusicPause
08EBE                           ;+:
08EBE                           ;		lda EventMusicQueue
08EBE                           ;		ora AreaMusicQueue
08EBE                           ;		beq NoTrigger
08EBE                           ;		lda AreaMusicQueue
08EBE                           ;		beq +
08EBE                           ;		sta AreaMusicBuffer
08EBE                           ;		ldx #-1
08EBE                           ;		-
08EBE                           ;		inx
08EBE                           ;		lsr
08EBE                           ;		bcc -
08EBE                           ;		ldy #0
08EBE                           ;		sty AreaMusicQueue
08EBE                           ;		+
08EBE                           ;		lda EventMusicQueue
08EBE                           ;		beq +
08EBE                           ;		sta EventMusicBuffer
08EBE                           ;		ldx #7
08EBE                           ;		-
08EBE                           ;		inx
08EBE                           ;		lsr
08EBE                           ;		bcc -
08EBE                           ;		ldy #0
08EBE                           ;		sty EventMusicQueue
08EBE                           ;		+
08EBE                           ;		lda MusicLUT,x
08EBE                           ;		pha
08EBE                           ;		ldx #<music_music_data
08EBE                           ;		ldy #>music_music_data
08EBE                           ;		lda #1
08EBE                           ;		sta songPlaying
08EBE                           ;		jsr CustomAudioInit
08EBE                           ;		ldx #<sounds
08EBE                           ;		ldy #>sounds
08EBE                           ;		jsr CustomAudioSfxInit
08EBE                           ;		pla
08EBE                           ;		jsr CustomAudioMusicPlay
08EBE                           ;NoTrigger:
08EBE                           ;		lda Square2SoundQueue
08EBE                           ;		beq noSQ2
08EBE                           ;		jsr countBITS_asl
08EBE                           ;		lda sq2_sfx_table,y
08EBE                           ;		ldx sq2_sfx_table+1,y
08EBE                           ;		jsr CustomAudioSfxPlay
08EBE                           ;		lda #0
08EBE                           ;		sta Square2SoundQueue
08EBE                           ;noSQ2:
08EBE                           ;		lda Square1SoundQueue
08EBE                           ;		beq noSQ1
08EBE                           ;		jsr countBITS_asl
08EBE                           ;		lda sq1_sfx_table,y
08EBE                           ;		ldx sq1_sfx_table+1,y
08EBE                           ;		jsr CustomAudioSfxPlay
08EBE                           ;		lda #0
08EBE                           ;		sta Square1SoundQueue
08EBE                           ;noSQ1:
08EBE                           ;		lda NoiseSoundQueue
08EBE                           ;		beq noNOI
08EBE                           ;		jsr countBITS_asl
08EBE                           ;		lda noise_sfx_table,y
08EBE                           ;		ldx noise_sfx_table+1,y
08EBE                           ;		jsr CustomAudioSfxPlay
08EBE                           ;		lda #0
08EBE                           ;		sta NoiseSoundQueue
08EBE                           ;noNOI:
08EBE                           ;		jmp CustomAudioUpdate
08EBE                           ;
08EBE                           ;countBITS_asl:
08EBE                           ;			ldx #$ff
08EBE                           ;			sec
08EBE                           ;			-
08EBE                           ;			inx
08EBE                           ;			ror
08EBE                           ;			bcc -
08EBE                           ;			txa
08EBE                           ;			asl
08EBE                           ;			tay
08EBE                           ;			rts
08EBE                           ;			
08EBE                           ;CustomMusicLoopCallback:
08EBE                           ;	lda #0
08EBE                           ;	sta songPlaying
08EBE                           ;	lda EventMusicBuffer
08EBE                           ;	cmp #$40
08EBE                           ;	bne +
08EBE                           ;	lda #0
08EBE                           ;	sta EventMusicBuffer
08EBE                           ;	lda AreaMusicBuffer
08EBE                           ;	sta AreaMusicQueue
08EBE                           ;	+
08EBE                           ;	rts
08EBE 00 00 00 00 00 00 00 00.. pad $c000
0C000                           
0C000                           ; bank 03 -- self-contained core routines
0C000                           base $8000
08000 03                        .db $03                     ; bank identifier
08001                           include code\bank03.asm
08001                           
08001                           include code\handlePlayerData.asm   ; handle management of player data
08001                           ; $00
08001                           ; $01
08001                           ; use like this:
08001                           ;    ; copy Hidden1UpFlag from on screen player to all offscreen players
08001                           ;    lda Hidden1UpFlag-OnscreenPlayerInfo
08001                           ;    jsr CopyToAllPlayers
08001                           
08001                           _WipePlayerData:
08001 A2 20                             ldx #NumberOfCharacters * $10
08003 A9 00                             lda #$00
08005                           -
08005 9D FF 7D                          sta save_playerData-1,x
08008 CA                                dex
08009 D0 FA                             bne -
0800B                                   
0800B A6 0F                             ldx $10-1
0800D                           -
0800D 9D 59 07                          sta OnscreenPlayerInfo-1,x
08010 CA                                dex
08011 D0 FA                             bne -
08013 60                        rts
08014                           
08014                           _CopyToAllPlayers:
08014                                   ;tay
08014                                   
08014 8A                                txa
08015 48                                pha
08016                                   
08016                                   
08016 A2 02                             ldx #$02
08018                           -
08018 8A                                txa
08019 0A                                asl
0801A 0A                                asl
0801B 0A                                asl
0801C 0A                                asl
0801D 85 01                             sta $01
0801F                                   
0801F 18                                clc
08020 A5 00                             lda <save_playerData
08022 65 01                             adc $01 ; add stored offset
08024 85 00                             sta $00
08026 A5 7E                             lda >save_playerData
08028 85 01                             sta $01 ; use this for the high byte now
0802A                                   
0802A B9 5A 07                          lda OnscreenPlayerInfo,y
0802D 91 00                             sta ($00),y
0802F                                   
0802F CA                                dex
08030 D0 E6                             bne -
08032                                   
08032 68                                pla
08033 AA                                tax
08034 60                        rts
08035                           
08035                           _SavePlayerData:
08035 AD 53 07                             lda CurrentPlayer
08038 0A                                   asl
08039 0A                                   asl
0803A 0A                                   asl
0803B 0A                                   asl
0803C A8                                   tay
0803D                                      
0803D A2 06                                ldx #$06
0803F                           -
0803F BD 5A 07                             lda OnscreenPlayerInfo,x
08042 99 00 7E                             sta save_playerData,y
08045 C8                                   iny
08046 CA                                   dex
08047 D0 F6                                bne -
08049 60                        rts
0804A                           
0804A                           _LoadPlayerData:
0804A AD 53 07                             lda CurrentPlayer
0804D 0A                                   asl
0804E 0A                                   asl
0804F 0A                                   asl
08050 0A                                   asl
08051 A8                                   tay
08052                                      
08052 A2 06                                ldx #$06
08054                           -
08054 B9 00 7E                             lda save_playerData,y
08057 9D 5A 07                             sta OnscreenPlayerInfo,x
0805A C8                                   iny
0805B CA                                   dex
0805C D0 F6                                bne -
0805E 60                        rts
0805F                           
0805F                           ;-------------------------------------------------------------------------------------
0805F                           ;-------------------------------------------------------------------------------------
0805F                           ;$00 - temp joypad bit
0805F                           
0805F                           _ReadJoypads: 
0805F AD 70 07                                lda OperMode
08062 F0 06                     			  beq +
08064 AD FC 06                  			  lda SavedJoypad1Bits
08067 8D CF 05                  			  sta OldSavedJoypadBits
0806A A9 01                     +:			  lda #$01               ;reset and clear strobe of joypad ports
0806C 8D 16 40                                sta JOYPAD_PORT
0806F 4A                                      lsr
08070 AA                                      tax                    ;start with joypad 1's port
08071 8D 16 40                                sta JOYPAD_PORT
08074                                         ;jsr ReadPortBits
08074                                         ;inx                   ;increment for joypad 2's port
08074 A0 08                     ReadPortBits: ldy #$08
08076 48                        PortLoop:     pha                    ;push previous bit onto stack
08077 BD 16 40                                lda JOYPAD_PORT,x      ;read current bit on joypad port
0807A 85 00                                   sta $00                ;check d1 and d0 of port output
0807C 4A                                      lsr                    ;this is necessary on the old
0807D 05 00                                   ora $00                ;famicom systems in japan
0807F 4A                                      lsr
08080 68                                      pla                    ;read bits from stack
08081 2A                                      rol                    ;rotate bit from carry flag
08082 88                                      dey
08083 D0 F1                                   bne PortLoop           ;count down bits left
08085 9D FC 06                                sta SavedJoypadBits,x  ;save controller status here always
08088                           ;              pha
08088                           ;              and #%00110000         ;check for select or start
08088                           ;              and JoypadBitMask,x    ;if neither saved state nor current state
08088                           ;              beq Save8Bits          ;have any of these two set, branch
08088                           ;              pla
08088                           ;              and #%11001111         ;otherwise store without select
08088                           ;              sta SavedJoypadBits,x  ;or start bits and leave
08088                           ;              rts
08088                           ;Save8Bits:    pla
08088 9D 4A 07                                sta JoypadBitMask,x    ;save with all bits in another place and leave
0808B 60                                      rts
0808C                           
0808C                           ;-------------------------------------------------------------------------------------
0808C                           
0808C                           D7_Attributes:
0808C 67 65 74 20 74            	.db $67, $65, $74, $20, $74
08091 72 6F 6C 6C 65                .db $72, $6F, $6C, $6C, $65
08096 64 20 62 79 20                .db $64, $20, $62, $79, $20
0809B 20 73 74 75 64                .db $20, $73, $74, $75, $64
080A0 73 58 FF FF FF                .db $73, $58, $ff, $ff, $ff
080A5                           
080A5                           _InitializeNameTables:
080A5 AD 02 20                                lda PPU_STATUS            ;reset flip-flop
080A8 AD 78 07                                lda Mirror_PPU_CTRL_REG1  ;load mirror of ppu reg $2000
080AB 09 08                                   ora #%00001000            ;set sprites for first 4k and background for second 4k
080AD 29 E8                                   and #%11101000            ;clear rest of lower nybble, leave higher alone
080AF 8D 00 20                                sta PPU_CTRL_REG1         ;write contents of A to PPU register 1
080B2 8D 78 07                                sta Mirror_PPU_CTRL_REG1  ;and its mirror
080B5 A9 24                                   lda #$24                  ;set vram address to start of name table 1
080B7 20 C6 80                                jsr WriteNTAddr
080BA A9 28                     			  lda #$28                  ;set vram address to start of name table 2
080BC 20 C6 80                                jsr WriteNTAddr
080BF A9 2C                     			  lda #$2c
080C1 20 C6 80                                jsr WriteNTAddr
080C4 A9 20                                   lda #$20                  ;and then set it to name table 0
080C6 8D 06 20                  WriteNTAddr:  sta PPU_ADDRESS
080C9 A9 00                                   lda #$00
080CB 8D 06 20                                sta PPU_ADDRESS
080CE A2 04                                   ldx #$04                  ;clear name table with blank tile #24
080D0 A0 C0                                   ldy #$c0
080D2 A9 24                                   lda #$24
080D4 8D 07 20                  InitNTLoop:   sta PPU_DATA              ;count out exactly 768 tiles
080D7 88                                      dey
080D8 D0 FA                                   bne InitNTLoop
080DA CA                                      dex
080DB D0 F7                                   bne InitNTLoop
080DD A0 40                                   ldy #64                   ;now to clear the attribute table (with zero this time)
080DF 8A                                      txa
080E0 8D 00 64                                sta VRAM_Buffer1_Offset   ;init vram buffer 1 offset
080E3 8D 01 64                                sta VRAM_Buffer1          ;init vram buffer 1
080E6 A9 AA                     			  lda #%10101010
080E8 8D 07 20                  InitATLoop:   sta PPU_DATA
080EB 88                                      dey
080EC D0 FA                                   bne InitATLoop
080EE A9 00                     			  lda #$00
080F0 8D 3F 07                                sta HorizontalScroll      ;reset scroll variables
080F3 8D 40 07                                sta VerticalScroll
080F6 4C 52 FB                                jmp InitScroll            ;initialize scroll registers to zero
080F9                           
080F9                           ;-------------------------------------------------------------------------------------
080F9                           
080F9                           DemoActionData:
080F9 01 80 02 81 41 80 01            .db $01, $80, $02, $81, $41, $80, $01
08100 42 C2 02 80 41 C1 41 C1         .db $42, $c2, $02, $80, $41, $c1, $41, $c1
08108 01 C1 01 02 80 00               .db $01, $c1, $01, $02, $80, $00
0810E                           
0810E                           DemoTimingData:
0810E 9B 10 18 05 2C 20 24            .db $9b, $10, $18, $05, $2c, $20, $24
08115 15 5A 10 20 28 30 20 10         .db $15, $5a, $10, $20, $28, $30, $20, $10
0811D 80 20 30 30 01 FF 00            .db $80, $20, $30, $30, $01, $ff, $00
08124                           
08124                           _DemoEngine:
08124 AE 17 07                            ldx DemoAction         ;load current demo action
08127 AD 18 07                            lda DemoActionTimer    ;load current action timer
0812A D0 0D                               bne DoAction           ;if timer still counting down, skip
0812C E8                                  inx
0812D EE 17 07                            inc DemoAction         ;if expired, increment action, X, and
08130 38                                  sec                    ;set carry by default for demo over
08131 BD 0D 81                            lda DemoTimingData-1,x ;get next timer
08134 8D 18 07                            sta DemoActionTimer    ;store as current timer
08137 F0 0A                               beq DemoOver           ;if timer already at zero, skip
08139 BD F8 80                  DoAction: lda DemoActionData-1,x ;get and perform action (current or next)
0813C 8D FC 06                            sta SavedJoypad1Bits
0813F                                     if TEST_LUIGI
0813F                                           sta SavedJoypad2Bits
0813F                                     endif
0813F CE 18 07                            dec DemoActionTimer    ;decrement action timer
08142 18                                  clc                    ;clear carry if demo still going
08143 60                        DemoOver: rts
08144                           
08144                           
08144 00 00 00 00 00 00 00 00.. pad $c000
0C000                           
0C000                           ; bank 04 -- level decode routines
0C000                           base $8000
08000 04                        .db $04                     ; bank identifier
08001                           include code\bank04.asm
08001 4C 45 56 45 4C 20 52 4F.. .db "LEVEL ROUTINE"
0800E                           ;load level stuff
0800E                           include code\loadArea.asm
0800E                           ; Subtroutines that involve level loading
0800E                           
0800E                           ; AreaParserTaskHandler
0800E                           ; AreaParserTasks
0800E                           ; AreaParserCore
0800E                           ; IncrementColumnPos
0800E                           ; RenderAreaGraphics
0800E                           ; ProcessAreaData
0800E                           ; DecodeAreaData
0800E                           ; AlterAreaAttributes
0800E                           ; GetLrgObjAttrib
0800E                           ;
0800E                           ; GetAreaDataAddrs
0800E                           ;
0800E                           
0800E                           WorldNumberOffset:
0800E 00                        	.db W1-BankLevelOffset
0800F 05                        	.db W2-BankLevelOffset
08010 0A                        	.db W3-BankLevelOffset
08011 0E                        	.db W4-BankLevelOffset
08012 12                        	.db W5-BankLevelOffset
08013 16                        	.db W6-BankLevelOffset
08014 1A                        	.db W7-BankLevelOffset
08015 1F                        	.db W8-BankLevelOffset
08016 23                        	.db W9-BankLevelOffset
08017                           BankLevelOffset:
08017 00 00 00 00 00            W1:	.db $00, $00, $00, $00, $00
0801C 00 00 01 01 01            W2: .db $00, $00, $01, $01, $01
08021 01 01 02 02               W3: .db $01, $01, $02, $02
08025 02 02 02 03               W4: .db $02, $02, $02, $03
08029 03 03 03 03               W5:	.db $03, $03, $03, $03
0802D 04 04 04 04               W6: .db $04, $04, $04, $04
08031 04 00 05 05 05            W7:	.db $04, $00, $05, $05, $05
08036 05 05 06 06               W8: .db $05, $05, $06, $06
0803A 06 00 06 06 07            W9: .db $06, $00, $06, $06, $07
0803F                           
0803F                           LoadAreaPointerR:
0803F AD 5F 07                  			 lda WorldNumber
08042 AA                        			 tax
08043 BD 0E 80                  			 lda WorldNumberOffset,x
08046 18                        			 clc
08047 6D 60 07                  			 adc AreaNumber
0804A AA                        			 tax
0804B BD 17 80                  			 lda BankLevelOffset,x
0804E 8D 06 7E                  			 sta LevelBank
08051 A9 87                     			 lda #%10000111
08053 8D C5 05                  			 sta Old8000
08056 8D 00 80                  			 sta $8000
08059 AD 06 7E                  			 lda LevelBank
0805C 0A                        			 asl
0805D 18                        			 clc
0805E 69 0A                     			 adc #FirstLevelBank ;replace for adc to enable
08060 8D 01 80                  			 sta $8001
08063 20 72 80                               jsr FindAreaPointer  ;find it and store it here
08066 8D 50 07                               sta AreaPointer
08069                           GetAreaType: if ExLVLID == 1
08069 29 C0                     		        and #%11000000       ;mask out all but d6 and d5
0806B 0A                        				asl
0806C 2A                        				rol
0806D 2A                        				rol
0806E                           			 else
0806E                           				and #%01100000       ;mask out all but d6 and d5
0806E                           				asl
0806E                           				rol
0806E                           				rol
0806E                           				rol             				;make %0xx00000 into %000000xx
0806E                           			 endif
0806E 8D 4E 07                               sta AreaType         ;save 2 MSB as area type
08071 60                                     rts
08072                           
08072                           FindAreaPointer:
08072 AD 5F 07                  	  lda WorldNumber        ;load offset from world variable
08075                           	  ;and #%00000111
08075 A8                        	  tay
08076 B9 EE 9D                        lda WorldAddrOffsets,y
08079 18                              clc                    ;add area number used to find data
0807A 6D 60 07                        adc AreaNumber
0807D A8                              tay
0807E B9 F7 9D                        lda AreaAddrOffsets,y  ;from there we have our area pointer
08081 60                              rts
08082                           
08082                           
08082                           GetAreaDataAddrsR:
08082 A9 87                     			lda #%10000111
08084 8D C5 05                  			sta Old8000
08087 8D 00 80                  			sta $8000
0808A AD 50 07                  			lda AreaPointer
0808D C9 45                     			cmp #$45
0808F D0 05                     			bne +
08091 A9 00                     			lda #$00
08093 8D 06 7E                  			sta LevelBank
08096 AD 06 7E                  +:			lda LevelBank
08099 18                        			clc
0809A 69 0A                     			adc #FirstLevelBank
0809C 8D 01 80                  			sta $8001
0809F AD 50 07                  			lda AreaPointer          ;use 2 MSB for Y
080A2 20 69 80                              jsr GetAreaType
080A5 A8                                    tay
080A6 AD 50 07                              lda AreaPointer          ;mask out all but 5 LSB
080A9 29 1F                                 and #%00011111
080AB 8D 4F 07                              sta AreaAddrsLOffset     ;save as low offset
080AE B9 1E 9E                              lda EnemyAddrHOffsets,y  ;load base value with 2 altered MSB,
080B1 18                                    clc                      ;then add base value to 5 LSB, result
080B2 6D 4F 07                              adc AreaAddrsLOffset     ;becomes offset for level data
080B5 A8                                    tay
080B6 B9 22 9E                              lda EnemyDataAddrLow,y   ;use offset to load pointer
080B9 85 DB                                 sta EnemyDataLow
080BB B9 4B 9E                              lda EnemyDataAddrHigh,y
080BE 85 DC                                 sta EnemyDataHigh
080C0                                       
080C0                                       if IMPORT_LEVELS == 1
080C0                                           ; fix the pointers to match original file
080C0                                           sec
080C0                                           lda EnemyDataLow
080C0                                           sbc #<LevelDataOffset
080C0                                           sta EnemyDataLow
080C0                                           lda EnemyDataHigh
080C0                                           sbc #>LevelDataOffset
080C0                                           sta EnemyDataHigh
080C0                                       endif
080C0                                       
080C0 AC 4E 07                              ldy AreaType             ;use area type as offset
080C3 B9 74 9E                              lda AreaDataHOffsets,y   ;do the same thing but with different base value
080C6 18                                    clc
080C7 6D 4F 07                              adc AreaAddrsLOffset
080CA A8                                    tay
080CB B9 78 9E                              lda AreaDataAddrLow,y    ;use this offset to load another pointer
080CE 85 D9                                 sta AreaDataLow
080D0 B9 A1 9E                              lda AreaDataAddrHigh,y
080D3 85 DA                                 sta AreaDataHigh
080D5                                       
080D5                                       if IMPORT_LEVELS == 1
080D5                                           ; fix the pointers to match original file
080D5                                           sec
080D5                                           lda AreaDataLow
080D5                                           sbc #<LevelDataOffset
080D5                                           sta AreaDataLow
080D5                                           lda AreaDataHigh
080D5                                           sbc #>LevelDataOffset
080D5                                           sta AreaDataHigh
080D5                                       endif
080D5                                       
080D5 A0 00                                 ldy #$00                 ;load first byte of header
080D7 B1 D9                                 lda (AreaData),y     
080D9 48                                    pha                      ;save it to the stack for now
080DA 29 07                                 and #%00000111           ;save 3 LSB for foreground scenery or bg color control
080DC C9 04                                 cmp #$04
080DE 90 05                                 bcc StoreFore
080E0 8D 44 07                              sta BackgroundColorCtrl  ;if 4 or greater, save value here as bg color control
080E3 A9 00                                 lda #$00
080E5 8D 41 07                  StoreFore:  sta ForegroundScenery    ;if less, save value here as foreground scenery
080E8 68                                    pla                      ;pull byte from stack and push it back
080E9 48                                    pha
080EA 29 38                                 and #%00111000           ;save player entrance control bits
080EC 4A                                    lsr                      ;shift bits over to LSBs
080ED 4A                                    lsr
080EE 4A                                    lsr
080EF 8D 10 07                              sta PlayerEntranceCtrl   ;save value here as player entrance control
080F2 68                                    pla                      ;pull byte again but do not push it back
080F3 29 C0                                 and #%11000000           ;save 2 MSB for game timer setting
080F5 18                                    clc
080F6 2A                                    rol                      ;rotate bits over to LSBs
080F7 2A                                    rol
080F8 2A                                    rol
080F9 8D 15 07                              sta GameTimerSetting     ;save value here as game timer setting
080FC C8                                    iny
080FD B1 D9                                 lda (AreaData),y         ;load second byte of header
080FF 48                                    pha                      ;save to stack
08100 29 0F                                 and #%00001111           ;mask out all but lower nybble
08102 8D 27 07                              sta TerrainControl
08105 68                                    pla                      ;pull and push byte to copy it to A
08106 48                                    pha
08107 29 30                                 and #%00110000           ;save 2 MSB for background scenery type
08109 4A                                    lsr
0810A 4A                                    lsr                      ;shift bits to LSBs
0810B 4A                                    lsr
0810C 4A                                    lsr
0810D 8D 42 07                              sta BackgroundScenery    ;save as background scenery
08110 68                                    pla           
08111 29 C0                                 and #%11000000
08113 18                                    clc
08114 2A                                    rol                      ;rotate bits over to LSBs
08115 2A                                    rol
08116 2A                                    rol
08117 C9 03                                 cmp #%00000011           ;if set to 3, store here
08119 D0 05                                 bne StoreStyle           ;and nullify other value
0811B 8D 43 07                              sta CloudTypeOverride    ;otherwise store value in other place
0811E A9 00                                 lda #$00
08120 8D 33 07                  StoreStyle: sta AreaStyle
08123 A5 D9                                 lda AreaDataLow          ;increment area data address by 2 bytes
08125 18                                    clc
08126 69 02                                 adc #$02
08128 85 D9                                 sta AreaDataLow
0812A A5 DA                                 lda AreaDataHigh
0812C 69 00                                 adc #$00
0812E 85 DA                                 sta AreaDataHigh
08130 60                                    rts
08131                           
08131                           BrickQBlockMetatiles1:
08131 C1 C0 5F 60                     .db $c1, $c0, $5f, $60 ;used by question blocks
08135                           
08135                                 ;these two sets are functionally identical, but look different
08135 55 56 57 58 59 6F 29            .db $55, $56, $57, $58, $59, $6f, $29	    ;, $70, $6f, $c4, $72 ;used by ground level types
0813C 5A 5B 5C 5D 5E 6F 29            .db $5a, $5b, $5c, $5d, $5e, $6f, $29 ;, $71, $6f, $c4, $72 ;used by other level types
08143                               if $ == -
08143                                   error Check "LEVEL_DATA" in code/settings.asm
08143                               endif
08143                           	
08143                           MetatileGraphics_Low:
08143 4B 47 1B 67                 .db <Palette0_MTiles, <Palette1_MTiles, <Palette2_MTiles, <Palette3_MTiles
08147                           
08147                           MetatileGraphics_High:
08147 81 82 83 83                 .db >Palette0_MTiles, >Palette1_MTiles, >Palette2_MTiles, >Palette3_MTiles
0814B                           
0814B                           Palette0_MTiles:
0814B 30 32 31 33                 .db $30, $32, $31, $33 ;blank 00
0814F                             ;.db $a5, $a7, $a6, $a8 ;blank coin sprite
0814F                             ;.db $24, $24, $24, $24 ;blank
0814F 27 27 27 27                 .db $27, $27, $27, $27 ;black metatile 01
08153 30 32 31 35                 .db $30, $32, $31, $35 ;bush left 02
08157 36 25 37 25                 .db $36, $25, $37, $25 ;bush middle 03
0815B 30 38 31 33                 .db $30, $38, $31, $33 ;bush right 04
0815F 30 6B 6B 26                 .db $30, $6b, $6b, $26 ;mountain left 05
08163 26 26 34 26                 .db $26, $26, $34, $26 ;mountain left bottom/middle center 06
08167 30 6C 31 6D                 .db $30, $6c, $31, $6d ;mountain middle top 07
0816B 6E 26 31 6E                 .db $6e, $26, $31, $6e ;mountain right 08
0816F 34 26 26 26                 .db $34, $26, $26, $26 ;mountain right bottom 09
08173 26 26 26 26                 .db $26, $26, $26, $26 ;mountain middle bottom 0a
08177 30 C0 31 C0                 .db $30, $c0, $31, $c0 ;bridge guardrail 0b
0817B 30 7F 7F 33                 .db $30, $7f, $7f, $33 ;chain 0c
0817F B8 BA B9 43                 .db $b8, $ba, $b9, $43 ;tall tree top, top half 0d
08183 B8 EC B9 ED                 .db $b8, $ec, $b9, $ed ;short tree top 0e
08187 BA EC 43 ED                 .db $ba, $ec, $43, $ed ;tall tree top, bottom half 0f
0818B 60 64 61 65                 .db $60, $64, $61, $65 ;warp pipe end left, points up 10
0818F 62 66 63 67                 .db $62, $66, $63, $67 ;warp pipe end right, points up 11
08193 60 64 61 65                 .db $60, $64, $61, $65 ;decoration pipe end left, points up 12
08197 62 66 63 67                 .db $62, $66, $63, $67 ;decoration pipe end right, points up 13
0819B 68 68 69 69                 .db $68, $68, $69, $69 ;pipe shaft left 14
0819F 26 26 6A 6A                 .db $26, $26, $6a, $6a ;pipe shaft right 15
081A3 4B 4C 4D 4E                 .db $4b, $4c, $4d, $4e ;tree ledge left edge 16
081A7 4D 4E 4D 4E                 .db $4d, $4e, $4d, $4e ;tree ledge middle 17
081AB 4D 4E 50 51                 .db $4d, $4e, $50, $51 ;tree ledge right edge 18
081AF D0 B4 2C 2D                 .db $d0, $b4, $2c, $2d ;mushroom left edge 19
081B3 D1 B5 D2 B6                 .db $d1, $b5, $d2, $b6 ;mushroom middle 1a
081B7 D3 B7 D4 A5                 .db $d3, $b7, $d4, $a5 ;mushroom right edge 1b
081BB 86 8A 87 8B                 .db $86, $8a, $87, $8b ;sideways pipe end top 1c
081BF 88 8C 88 8C                 .db $88, $8c, $88, $8c ;sideways pipe shaft top 1d
081C3 89 8D 69 69                 .db $89, $8d, $69, $69 ;sideways pipe joint top 1e
081C7 8E 91 8F 92                 .db $8e, $91, $8f, $92 ;sideways pipe end bottom 1f
081CB 26 93 26 93                 .db $26, $93, $26, $93 ;sideways pipe shaft bottom 20
081CF 90 94 69 69                 .db $90, $94, $69, $69 ;sideways pipe joint bottom 21
081D3 A4 48 49 4A                 .db $a4, $48, $49, $4a ;seaplant 22
081D7 30 32 31 33                 .db $30, $32, $31, $33 ;blank, used on bricks or blocks that are hit 23
081DB 30 2F 31 3D                 .db $30, $2f, $31, $3d ;flagpole ball 24
081DF A2 A2 A3 A3                 .db $a2, $a2, $a3, $a3 ;flagpole shaft 25
081E3 EE F0 EF F1                 .db $ee, $f0, $ef, $f1 ;vine 26
081E7 FD 45 FE 47                 .db $fd, $45, $fe, $47 ;breakable brick w/ line 27
081EB FA 45 FB 47                 .db $fa, $45, $fb, $47 ;breakable brick 28
081EF 30 32 31 33                 .db $30, $32, $31, $33 ;hidden block (1 coin) 29
081F3 30 32 31 33                 .db $30, $32, $31, $33 ;hidden block (1-up) 2a
081F7 30 32 31 33                 .db $30, $32, $31, $33 ;hidden block (power-up) 2b
081FB 4F E5 9F E6                 .db $4f, $e5, $9f, $e6 ;decoration pipe end left, points down 2c
081FF 9A E7 BB E8                 .db $9a, $e7, $bb, $e8 ;decoration pipe end right, points down 2d
08203 4F E5 9F E6                 .db $4f, $e5, $9f, $e6 ;warp pipe end left, points down 2e
08207 9A E7 BB E8                 .db $9a, $e7, $bb, $e8 ;warp pipe end right, points down 2f
0820B 30 32 31 33                 .db $30, $32, $31, $33 ;hidden block (star) 30
0820F FA 45 FB 47                 .db $fa, $45, $fb, $47 ;brick (power-up) 31
08213 FA 45 FB 47                 .db $fa, $45, $fb, $47 ;brick (vine) 32
08217 FA 45 FB 47                 .db $fa, $45, $fb, $47 ;brick (star) 33
0821B FA 45 FB 47                 .db $fa, $45, $fb, $47 ;brick (coins) 34
0821F FA 45 FB 47                 .db $fa, $45, $fb, $47 ;brick (1-up) 35
08223 86 8A 87 8B                 .db $86, $8a, $87, $8b ;sideways pipe end top 36
08227 8E 91 8F 92                 .db $8e, $91, $8f, $92 ;sideways pipe end bottom 37
0822B 26 26 26 26                 .db $26, $26, $26, $26 ;hidden block (1 coin) 38
0822F 26 26 26 26                 .db $26, $26, $26, $26 ;hidden block (1-up) 39
08233 26 26 26 26                 .db $26, $26, $26, $26 ;hidden block (power-up) 3a
08237 26 26 26 26                 .db $26, $26, $26, $26 ;hidden block (star) 3b
0823B FA 45 FB 47                 .db $fa, $45, $fb, $47 ;brick (coin) 3c
0823F 24 24 6A 6A                 .db $24, $24, $6a, $6a ;pipe shaft right 3d
08243 24 93 24 93                 .db $24, $93, $24, $93 ;sideways pipe shaft bottom 3e
08247                           
08247                           Palette1_MTiles:
08247 A2 A2 A3 A3                 .db $a2, $a2, $a3, $a3 ;vertical rope 40
0824B 99 32 99 33                 .db $99, $32, $99, $33 ;horizontal rope 41
0824F 30 A2 3E 3F                 .db $30, $a2, $3e, $3f ;left pulley 42
08253 5B 5C 31 A3                 .db $5b, $5c, $31, $a3 ;right pulley 43
08257 30 32 31 33                 .db $30, $32, $31, $33 ;blank used for balance rope 44
0825B 9D FF 9E FF                 .db $9d, $ff, $9e, $ff ;castle top 45
0825F FF FF 27 27                 .db $ff, $ff, $27, $27 ;castle window left 46
08263 FF FF FF FF                 .db $ff, $ff, $ff, $ff ;castle brick wall 47
08267 27 27 FF FF                 .db $27, $27, $ff, $ff ;castle window right 48
0826B A9 FF AA FF                 .db $a9, $ff, $aa, $ff ;castle top w/ brick 49
0826F 9B 27 9C 27                 .db $9b, $27, $9c, $27 ;entrance top 4a
08273 27 27 27 27                 .db $27, $27, $27, $27 ;entrance bottom 4b
08277 52 52 52 52                 .db $52, $52, $52, $52 ;green ledge stump 4c
0827B 80 A0 81 A1                 .db $80, $a0, $81, $a1 ;fence 4d
0827F BE BE BF BF                 .db $be, $be, $bf, $bf ;tree trunk 4e
08283 A6 BA A7 43                 .db $a6, $ba, $a7, $43 ;mushroom stump top 4f
08287 BA BA 43 43                 .db $ba, $ba, $43, $43 ;mushroom stump bottom 50
0828B FD 45 FE 47                 .db $fd, $45, $fe, $47 ;breakable brick w/ line 51  
0828F FA 45 FB 47                 .db $fa, $45, $fb, $47 ;breakable brick 52
08293 45 47 45 47                 .db $45, $47, $45, $47 ;breakable brick (not used) 53
08297 F2 F4 F3 F5                 .db $f2, $f4, $f3, $f5 ;cracked rock terrain 54
0829B FD 45 FE 47                 .db $fd, $45, $fe, $47 ;brick with line (power-up) 55
0829F FD 45 FE 47                 .db $fd, $45, $fe, $47 ;brick with line (vine) 56
082A3 FD 45 FE 47                 .db $fd, $45, $fe, $47 ;brick with line (star) 57
082A7 FD 45 FE 47                 .db $fd, $45, $fe, $47 ;brick with line (coins) 58
082AB FD 45 FE 47                 .db $fd, $45, $fe, $47 ;brick with line (1-up) 59
082AF FA 45 FB 47                 .db $fa, $45, $fb, $47 ;brick (power-up) 5a
082B3 FA 45 FB 47                 .db $fa, $45, $fb, $47 ;brick (vine) 5b
082B7 FA 45 FB 47                 .db $fa, $45, $fb, $47 ;brick (star) 5c
082BB FA 45 FB 47                 .db $fa, $45, $fb, $47 ;brick (coins) 5d
082BF FA 45 FB 47                 .db $fa, $45, $fb, $47 ;brick (1-up) 5e
082C3 30 32 31 33                 .db $30, $32, $31, $33 ;hidden block (1 coin) 5f
082C7 30 32 31 33                 .db $30, $32, $31, $33 ;hidden block (1-up) 60
082CB AB AC AD AE                 .db $ab, $ac, $ad, $ae ;solid block (3-d block) 61
082CF 5D 5E 5D 5E                 .db $5d, $5e, $5d, $5e ;solid block (white wall) 62
082D3 C1 32 C1 33                 .db $c1, $32, $c1, $33 ;bridge 63
082D7 C6 C8 C7 C9                 .db $c6, $c8, $c7, $c9 ;bullet bill cannon barrel 64
082DB CA CC CB CD                 .db $ca, $cc, $cb, $cd ;bullet bill cannon top 65
082DF 2A 2A 40 40                 .db $2a, $2a, $40, $40 ;bullet bill cannon bottom 66
082E3 30 32 31 33                 .db $30, $32, $31, $33 ;blank used for jumpspring 67
082E7 30 FF 31 FF                 .db $30, $ff, $31, $ff ;half brick used for jumpspring 68
082EB 82 83 84 85                 .db $82, $83, $84, $85 ;solid block (water level, green rock) 69
082EF 30 FF 31 FF                 .db $30, $ff, $31, $ff ;half brick (???) 6a
082F3 86 8A 87 8B                 .db $86, $8a, $87, $8b ;water pipe top 6b
082F7 8E 91 8F 92                 .db $8e, $91, $8f, $92 ;water pipe bottom 6c
082FB 30 2F 31 3D                 .db $30, $2f, $31, $3d ;flag ball (residual object) 6d
082FF BC BD BC BD                 .db $bc, $bd, $bc, $bd ;yoquse 6e
08303 30 32 31 33                 .db $30, $32, $31, $33 ;hidden block (power-up) 6f
08307 FF FF FF FF                 .db $ff, $ff, $ff, $ff ;castle stop 70
0830B 30 6B 6B 26                 .db $30, $6b, $6b, $26 ;slope 71
0830F D5 D7 D6 D8                 .db $d5, $d7, $d6, $d8 ;p-block 72
08313 30 32 31 33                 .db $30, $32, $31, $33 ;hidden block (star) 73
08317 30 32 31 33                 .db $30, $32, $31, $33 ;anticheese bumpable block 74
0831B                           
0831B                           Palette2_MTiles:
0831B 30 32 31 35                 .db $30, $32, $31, $35 ;cloud left 80
0831F 36 25 37 25                 .db $36, $25, $37, $25 ;cloud middle 81 
08323 30 38 31 33                 .db $30, $38, $31, $33 ;cloud right 82 
08327 30 32 39 33                 .db $30, $32, $39, $33 ;cloud bottom left 83
0832B 3A 32 3B 33                 .db $3a, $32, $3b, $33 ;cloud bottom middle 84
0832F 3C 32 31 33                 .db $3c, $32, $31, $33 ;cloud bottom right 85
08333 41 26 41 26                 .db $41, $26, $41, $26 ;water/lava top 86
08337 26 26 26 26                 .db $26, $26, $26, $26 ;water/lava 87
0833B B0 B1 B2 B3                 .db $b0, $b1, $b2, $b3 ;cloud level terrain 88
0833F A8 96 A8 96                 .db $a8, $96, $a8, $96 ;bowser's bridge 89
08343 C2 C4 C3 C5                 .db $c2, $c4, $c3, $c5 ;spikes 8a
08347 76 78 77 79                 .db $76, $78, $77, $79 ;noteblock 8b
0834B F6 F8 F7 F9                 .db $f6, $f8, $f7, $f9 ;p-switch 8c
0834F E1 E3 E2 E4                 .db $e1, $e3, $e2, $e4 ;on off switch 8d
08353 D9 DB DA DC                 .db $d9, $db, $da, $dc ;on off block 8e
08357 DD DF DE E0                 .db $dd, $df, $de, $e0 ;on off block (on) 8f
0835B 41 26 41 26                 .db $41, $26, $41, $26 ;water/lava top swimmable 90
0835F 26 26 26 26                 .db $26, $26, $26, $26 ;water/lava swimmable 91
08363 27 27 27 27                 .db $27, $27, $27, $27 ;door 92
08367                                 
08367                           Palette3_MTiles:
08367 53 55 54 56                 .db $53, $55, $54, $56 ;question block (coin) c0
0836B 53 55 54 56                 .db $53, $55, $54, $56 ;question block (power-up) c1
0836F 72 74 73 75                 .db $72, $74, $73, $75 ;coin c2
08373 C2 C4 C3 C5                 .db $c2, $c4, $c3, $c5 ;underwater coin c3
08377 57 59 58 5A                 .db $57, $59, $58, $5a ;empty block c4
0837B 7B 7D 7C 7E                 .db $7b, $7d, $7c, $7e ;axe c5
0837F 53 55 54 56                 .db $53, $55, $54, $56 ;question block (star) c6
08383 53 55 54 56                 .db $53, $55, $54, $56 ;question block (1up) c7
08387                             
08387                             
08387                             
08387 88 8C 88 8C                 .db $88, $8c, $88, $8c ;sideways pipe shaft top c8
0838B 89 8D 69 69                 .db $89, $8d, $69, $69 ;sideways pipe joint top c9
0838F 24 93 24 93                 .db $24, $93, $24, $93 ;sideways pipe shaft bottom ca
08393 90 94 69 69                 .db $90, $94, $69, $69 ;sideways pipe joint bottom cb
08397 60 64 61 65                 .db $60, $64, $61, $65 ;decoration pipe end left, points up cc
0839B 62 66 63 67                 .db $62, $66, $63, $67 ;decoration pipe end right, points up cd
0839F 68 68 69 69                 .db $68, $68, $69, $69 ;pipe shaft left ce
083A3 24 24 6A 6A                 .db $24, $24, $6a, $6a ;pipe shaft right cf
083A7 4F E5 9F E6                 .db $4f, $e5, $9f, $e6 ;decoration pipe end left, points down d0
083AB 9A E7 BB E8                 .db $9a, $e7, $bb, $e8 ;decoration pipe end right, points down d1
083AF                             
083AF 70 32 31 33                 .db $70, $32, $31, $33 ;w3 star d2
083B3 30 71 31 33                 .db $30, $71, $31, $33 ;w3 star d3
083B7 30 32 71 33                 .db $30, $32, $71, $33 ;w3 star d4
083BB 70 32 31 71                 .db $70, $32, $31, $71 ;w3 star d5
083BF                             
083BF 5B 97 5C 98                 .db $5b, $97, $5c, $98 ;w4,7 sand d6
083C3 26 26 6A 6A                 .db $26, $26, $6a, $6a ;pipe shaft right d7
083C7 26 93 26 93                 .db $26, $93, $26, $93 ;sideways pipe shaft bottom d8
083CB                             
083CB 24 CF E9 42                 .db $24, $cf, $e9, $42 ;w4 palmtree 1 d9
083CF EA 44 EB 46                 .db $ea, $44, $eb, $46 ;w4 palmtree 2 da
083D3 CE 49 24 4A                 .db $ce, $49, $24, $4a ;w4 palmtree 3 db
083D7                             
083D7 86 8A 87 8B                 .db $86, $8a, $87, $8b ;sideways pipe end top dc
083DB 8E 91 8F 92                 .db $8e, $91, $8f, $92 ;sideways pipe end bottom dd
083DF                             
083DF 82 84 83 85                 .db $82, $84, $83, $85 ;w5 cloud block de
083E3 99 A4 B0 B1                 .db $99, $a4, $b0, $b1 ;w5 cloud ledge left edge df
083E7 4D 95 4D 96                 .db $4d, $95, $4d, $96 ;w5 cloud ledge middle e0
083EB 4D 97 A8 98                 .db $4d, $97, $a8, $98 ;w5 cloud ledge right edge e1
083EF B0 B2 B1 B3                 .db $b0, $b2, $b1, $b3 ;w6 snow ground e2
083F3 82 B2 83 B3                 .db $82, $b2, $83, $b3 ;w6 snow ground bottom e3
083F7 82 B2 83 B3                 .db $82, $b2, $83, $b3 ;w6 snow ground bottom (hurts) e4
083FB 82 B2 83 B3                 .db $82, $b2, $83, $b3 ;w6 snow ground bottom (no collision) e5
083FF                             
083FF 85 82 83 84                 .db $85, $82, $83, $84 ;w7 desert sea plant e6
08403 A4 BE 95 BF                 .db $a4, $be, $95, $bf ;w7 tree trunk top e7
08407 AB AC AD AE                 .db $ab, $ac, $ad, $ae ;w7 solid block (3-d block) pal0 e8
0840B 9D FF 9E FF                 .db $9d, $ff, $9e, $ff ;w7 castle top pal0 e9
0840F FF FF 27 27                 .db $ff, $ff, $27, $27 ;w7 castle window left pal0 ea
08413 FF FF FF FF                 .db $ff, $ff, $ff, $ff ;w7 castle brick wall pal0 eb
08417 27 27 FF FF                 .db $27, $27, $ff, $ff ;w7 castle window right pal0 ec
0841B A9 FF AA FF                 .db $a9, $ff, $aa, $ff ;w7 castle top w/ brick pal0 ed
0841F 9B 27 9C 27                 .db $9b, $27, $9c, $27 ;w7 entrance top pal0 ee
08423 27 27 27 27                 .db $27, $27, $27, $27 ;w7 entrance bottom pal0 ef
08427 FF FF FF FF                 .db $ff, $ff, $ff, $ff ;w7 castle stop pal0 f0
0842B 80 A0 81 A1                 .db $80, $a0, $81, $a1 ;w7 fence pal0 f1
0842F                             
0842F                           ;-------------------------------------------------------------------------------------
0842F                           ;VRAM BUFFER DATA FOR LOCATIONS IN PRG-ROM
0842F                           AreaParserTaskHandler:
0842F A9 87                     			  lda #%10000111
08431 8D C5 05                  			  sta Old8000
08434 8D 00 80                  			  sta $8000
08437 AD 06 7E                  			  lda LevelBank
0843A 18                        			  clc
0843B 69 0A                     			  adc #FirstLevelBank
0843D                           			  
0843D 8D 01 80                  			  sta $8001
08440 A9 01                     			  lda #$01
08442 8D EC 63                  			  sta DecodingLevel
08445 AD 1F 07                  			  lda AreaParserTaskNum
08448 D0 05                     			  bne +
0844A AD DF 63                  			  lda ScrollLeftFlag
0844D D0 3F                     			  bne SkipATRender
0844F AD B5 63                  +:			  lda DisableScreenFlag2
08452 D0 1E                     			  bne +
08454 AD 74 07                  			  lda DisableScreenFlag
08457 F0 19                     			  beq +
08459 20 41 87                  -:			  jsr AreaParserCoreS
0845C 20 6E 86                  		      jsr IncrementColumnPosS
0845F AD 9A 60                  			  lda stopload
08462 F0 F5                     			  beq -
08464 A0 00                     			  ldy #$00
08466 8C 1F 07                  			  sty AreaParserTaskNum
08469 8C EC 63                  			  sty DecodingLevel
0846C 84 14                     			  sty $14
0846E C8                        			  iny
0846F 8C B5 63                  			  sty DisableScreenFlag2
08472 AC 1F 07                  +:			  ldy AreaParserTaskNum     ;check number of tasks here
08475 D0 05                                   bne DoAPTasks             ;if already set, go ahead
08477                           			  ;ldy Player_X_Scroll
08477                           			  ;bmi SkipATRender
08477 A0 08                     			  ldy #$08
08479 8C 1F 07                                sty AreaParserTaskNum     ;otherwise, set eight by default
0847C 88                        DoAPTasks:    dey
0847D 98                                      tya
0847E 20 8F 84                                jsr AreaParserTasks
08481 CE 1F 07                                dec AreaParserTaskNum     ;if all tasks not complete do not
08484 D0 08                                   bne SkipATRender          ;render attribute table yet
08486 AD A3 60                  			  lda tempXD
08489 D0 03                     			  bne SkipATRender
0848B 4C EF 85                  +:            jmp RenderAttributeTables
0848E 60                        SkipATRender: rts
0848F                           NoThing:
0848F                           	  ;dec AreaParserTaskNum
0848F                           	  ;lda AreaParserTaskNum
0848F                           	  ;rts
0848F                           AreaParserTasks:
0848F 20 A0 F7                        jsr JumpEngine
08492                           
08492 82 86                           .dw IncrementColumnPos
08494 A6 84                     	  .dw RenderAreaGraphics
08496 A6 84                           .dw RenderAreaGraphics
08498 30 87                     	  .dw AreaParserCore
0849A 82 86                     	  .dw IncrementColumnPos
0849C A6 84                     	  .dw RenderAreaGraphics
0849E A6 84                           .dw RenderAreaGraphics
084A0 30 87                     	  .dw AreaParserCore
084A2                           	  
084A2 6E 86                     	  .dw IncrementColumnPosS
084A4 30 87                     	  .dw AreaParserCore
084A6                           	  
084A6                           RenderAreaGraphics:
084A6 AD A9 60                  			lda ScrollLeftLock
084A9 38                        			sec
084AA E9 01                     			sbc #$01
084AC C5 FA                     			cmp $fa
084AE F0 36                     			beq ExitDrawM1
084B0                           NoSkipATRender:			
084B0 A5 FF                     			lda $ff         ;store LSB of where we're at
084B2 29 01                                 and #$01
084B4 85 05                                 sta $05
084B6 AD 99 60                  			lda olddirscroll
084B9 49 01                     			eor #$01
084BB 8D 34 60                  			sta temp9
084BE AC E0 64                              ldy VRAM_Buffer2_Offset      ;store vram buffer offset
084C1 84 00                                 sty $00
084C3 AD 21 07                              lda CurrentNTAddr_Low        ;get current name table address we're supposed to render
084C6 38                        			sec
084C7 ED 34 60                  			sbc temp9
084CA C9 7F                     			cmp #$7f
084CC D0 33                     			bne +
084CE 48                        			pha
084CF AD 99 60                  			lda olddirscroll
084D2 D0 2C                     			bne ++
084D4 AD 20 07                  			lda CurrentNTAddr_High
084D7 49 04                     			eor #%00000100
084D9 99 E1 64                  			sta VRAM_Buffer2,y
084DC 68                        			pla
084DD 18                        			clc
084DE 69 20                     			adc #$20
084E0 99 E2 64                  			sta VRAM_Buffer2+1,y
084E3 4C 0A 85                  			jmp +++
084E6 AD 99 60                  ExitDrawM1: lda olddirscroll
084E9 F0 C5                     			beq NoSkipATRender
084EB AD CB 63                  			lda $63cb
084EE C9 07                     			cmp #$07
084F0 90 08                     			bcc @bru
084F2 A9 00                     			lda #$00
084F4 8D A3 60                  			sta tempXD
084F7 4C B0 84                  			jmp NoSkipATRender
084FA EE A3 60                  @bru:		inc tempXD
084FD 4C 8E 84                  			jmp SkipATRender
08500 68                        ++:			pla
08501 99 E2 64                  +:          sta VRAM_Buffer2+1,y
08504 AD 20 07                              lda CurrentNTAddr_High
08507 99 E1 64                              sta VRAM_Buffer2,y
0850A A9 9A                     +++:        lda #$9a                     ;store length byte of 26 here with d7 set
0850C 99 E3 64                              sta VRAM_Buffer2+2,y         ;to increment by 32 (in columns)
0850F A9 00                                 lda #$00                     ;init attribute row
08511 85 04                                 sta $04
08513 AA                                    tax
08514 86 01                     DrawMTLoop: stx $01                      ;store init value of 0 or incremented offset for buffer
08516 8C 34 60                  			sty temp9
08519 A5 FF                     			lda $ff
0851B 29 0F                     			and #$0f
0851D 8D 57 60                  			sta tempC
08520 8D CB 63                  			sta $63cb
08523 8A                        			txa
08524 0A                        			asl
08525 0A                        			asl
08526 0A                        			asl
08527 0A                        			asl
08528 18                        			clc
08529 6D 57 60                  			adc tempC
0852C 85 02                     			sta $02
0852E A8                        			tay
0852F B1 F9                                 lda ($f9),y                  ;get first metatile number, and mask out all but 2 MSB
08531                           			;cmp #$10
08531                           			;beq ++
08531                           			;cmp #$12
08531                           			;bne +
08531                           ++:			;pha
08531                           			;lda AreaParserTaskNum        ;get current task number for level processing and
08531                           			;eor olddirscroll
08531                                       ;and #%00000001  
08531                           			;jmp ++
08531                           			;jsr FindEmptyEnemySlot   ;check for an empty moving data buffer space
08531                           			;  bcs ++             ;if not found, too many enemies, thus skip
08531                           			;  lda $fa
08531                           			;  sub #$66
08531                           			 ;; tay
08531                           			  ;lda $ff
08531                           			  ;and #$0f
08531                           			  ;asl
08531                           			  ;asl
08531                           			  ;asl
08531                           			  ;asl
08531                           			  ;clc
08531                           			  ;adc #$08                 ;add eight to put the piranha plant in the center
08531                           			  ;sta Enemy_X_Position,x   ;store as enemy's horizontal coordinate
08531                           			  ;tya
08531                           			  ;adc #$00
08531                           			  ;sta Enemy_PageLoc,x      ;store as enemy's page coordinate
08531                           			  ;lda #$01
08531                           			  ;sta Enemy_Y_HighPos,x
08531                           			  ;sta Enemy_Flag,x         ;activate enemy flag
08531                           			  ;lda $02  					;get piranha plant's vertical coordinate and store here
08531                           			  ;and #$f0
08531                           			  ;clc
08531                           			  ;adc #$20
08531                           			  ;sta Enemy_Y_Position,x
08531                           			  ;lda #PiranhaPlant
08531                           			  ;sta Enemy_ID,x
08531                           			  ;jsr InitPiranhaPlant1
08531                           			  ;ldy $02
08531                           ++:			;pla
08531 48                        +:			pha
08532 48                        			pha
08533 29 C0                                 and #%11000000
08535                                       ;sta $03                      ;store attribute table bits here
08535 0A                                    asl                          ;note that metatile format is:
08536 2A                                    rol                          ;%xx000000 - attribute table bits, 
08537 2A                                    rol                          ;%00xxxxxx - metatile number
08538 A8                                    tay                          ;rotate bits to d1-d0 and use as offset here
08539 B9 43 81                              lda MetatileGraphics_Low,y   ;get address to graphics table from here
0853C 85 06                                 sta $06
0853E B9 47 81                              lda MetatileGraphics_High,y
08541 85 07                                 sta $07
08543 8C 34 60                  			sty temp9
08546 68                        			pla
08547 A8                        			tay
08548 B9 EE 9C                  			lda PaletteMTtable,y
0854B 4A                        			lsr
0854C 6A                        			ror
0854D 6A                        			ror
0854E 85 03                     		    sta $03
08550                           			
08550 8A                        			txa
08551 A8                        			tay
08552 68                                    pla                		     ;get metatile number again
08553 0A                                    asl                          ;multiply by 4 and use as tile offset
08554 0A                                    asl
08555 85 02                                 sta $02
08557 AC 34 60                  			ldy temp9
0855A AD 1F 07                              lda AreaParserTaskNum        ;get current task number for level processing and
0855D 4D 99 60                  			eor olddirscroll
08560 29 01                                 and #%00000001               ;mask out all but LSB, then invert LSB, multiply by 2
08562                                       ;eor #%00000001               ;to get the correct column position in the metatile,
08562 0A                                    asl                          ;then add to the tile offset so we can draw either side
08563 65 02                                 adc $02                      ;of the metatiles
08565 A8                                    tay
08566 A6 00                                 ldx $00                      ;use vram buffer offset from before as X
08568 B1 06                                 lda ($06),y
0856A 9D E4 64                              sta VRAM_Buffer2+3,x         ;get first tile number (top left or top right) and store
0856D C8                                    iny
0856E B1 06                                 lda ($06),y                  ;now get the second (bottom left or bottom right) and store
08570 9D E5 64                              sta VRAM_Buffer2+4,x
08573 A4 04                                 ldy $04                      ;get current attribute row
08575 A5 05                                 lda $05                      ;get LSB of current column where we're at, and
08577 D0 0E                                 bne RightCheck               ;branch if set (clear = left attrib, set = right)
08579 A5 01                                 lda $01                      ;get current row we're rendering
0857B 4A                                    lsr                          ;branch if LSB set (clear = top left, set = bottom left)
0857C B0 1C                                 bcs LLeft
0857E 26 03                                 rol $03                      ;rotate attribute bits 3 to the left
08580 26 03                                 rol $03                      ;thus in d1-d0, for upper left square
08582 26 03                                 rol $03
08584 4C A0 85                              jmp SetAttrib
08587 A5 01                     RightCheck: lda $01                      ;get LSB of current row we're rendering
08589 4A                                    lsr                          ;branch if set (clear = top right, set = bottom right)
0858A B0 12                                 bcs NextMTRow
0858C 46 03                                 lsr $03                      ;shift attribute bits 4 to the right
0858E 46 03                                 lsr $03                      ;thus in d3-d2, for upper right square
08590 46 03                                 lsr $03
08592 46 03                                 lsr $03
08594 4C A0 85                              jmp SetAttrib
08597 4C 14 85                  DrawMTLoop1: jmp DrawMTLoop
0859A 46 03                     LLeft:      lsr $03                      ;shift attribute bits 2 to the right
0859C 46 03                                 lsr $03                      ;thus in d5-d4 for lower left square
0859E E6 04                     NextMTRow:  inc $04                      ;move onto next attribute row  
085A0 B9 F9 03                  SetAttrib:  lda AttributeBuffer,y        ;get previously saved bits from before
085A3 05 03                                 ora $03                      ;if any, and put new bits, if any, onto
085A5 99 F9 03                              sta AttributeBuffer,y        ;the old, and store
085A8 E6 00                                 inc $00                      ;increment vram buffer offset by 2
085AA E6 00                                 inc $00
085AC A6 01                                 ldx $01                      ;get current gfx buffer row, and check for
085AE E8                                    inx                          ;the bottom of the screen
085AF E0 0D                                 cpx #$0d
085B1 90 E4                                 bcc DrawMTLoop1               ;if not there yet, loop back
085B3 A4 00                                 ldy $00                      ;get current vram buffer offset, increment by 3
085B5 C8                                    iny                          ;(for name table address and length bytes)
085B6 C8                                    iny
085B7 C8                                    iny
085B8 A9 00                                 lda #$00
085BA 99 E1 64                              sta VRAM_Buffer2,y           ;put null terminator at end of data for name table
085BD 8C E0 64                              sty VRAM_Buffer2_Offset      ;store new buffer offset
085C0 AD 99 60                  			lda olddirscroll
085C3 D0 10                     			bne +
085C5 CE 21 07                  			dec CurrentNTAddr_Low
085C8 AD 21 07                  			lda CurrentNTAddr_Low
085CB 30 1F                     			bmi ExitDrawM
085CD A9 9F                     ++:			lda #$9f
085CF 8D 21 07                  			sta CurrentNTAddr_Low
085D2 4C E4 85                  			jmp ++
085D5 EE 21 07                  +:          inc CurrentNTAddr_Low        ;increment name table address low
085D8 AD 21 07                              lda CurrentNTAddr_Low        ;check current low byte
085DB 29 1F                                 and #%00011111               ;if no wraparound, just skip this part
085DD D0 0D                                 bne ExitDrawM
085DF A9 80                                 lda #$80                     ;if wraparound occurs, make sure low byte stays
085E1 8D 21 07                              sta CurrentNTAddr_Low        ;just under the status bar
085E4 AD 20 07                  ++:         lda CurrentNTAddr_High       ;and then invert d2 of the name table address high
085E7 49 04                                 eor #%00000100               ;to move onto the next appropriate name table
085E9 8D 20 07                              sta CurrentNTAddr_High
085EC 4C 4A 86                  ExitDrawM:  jmp SetVRAMCtrl              ;jump to set buffer to $0341 and leave
085EF                           
085EF                           ;-------------------------------------------------------------------------------------
085EF                           ;$00 - temp attribute table address high (big endian order this time!)
085EF                           ;$01 - temp attribute table address low
085EF                           
085EF                           RenderAttributeTables:
085EF AD 21 07                               lda CurrentNTAddr_Low    ;get low byte of next name table address
085F2 29 1F                                  and #%00011111           ;to be written to, mask out all but 5 LSB,
085F4 AC 99 60                  			 ldy olddirscroll
085F7 D0 03                     			 bne +
085F9 18                        			 clc
085FA 69 04                     			 adc #$04
085FC 38                        +:           sec                      ;subtract four 
085FD E9 04                                  sbc #$04
085FF 29 1F                                  and #%00011111           ;mask out bits again and store
08601 85 01                                  sta $01
08603 AD 20 07                               lda CurrentNTAddr_High   ;get high byte and branch if borrow not set
08606 B0 02                                  bcs SetATHigh
08608 49 04                                  eor #%00000100           ;otherwise invert d2
0860A 29 04                     SetATHigh:   and #%00000100           ;mask out all other bits
0860C 09 23                                  ora #$23                 ;add $2300 to the high byte and store
0860E 85 00                                  sta $00
08610 A5 01                                  lda $01                  ;get low byte - 4, divide by 4, add offset for
08612 4A                                     lsr                      ;attribute table and store
08613 4A                                     lsr
08614 69 C0                                  adc #$c0                 ;we should now have the appropriate block of
08616 85 01                                  sta $01                  ;attribute table in our temp address
08618 A2 00                                  ldx #$00
0861A AC E0 64                               ldy VRAM_Buffer2_Offset  ;get buffer offset
0861D A5 00                     AttribLoop:  lda $00
0861F 99 E1 64                               sta VRAM_Buffer2,y       ;store high byte of attribute table address
08622 A5 01                                  lda $01
08624 18                                     clc                      ;get low byte, add 8 because we want to start
08625 69 08                                  adc #$08                 ;below the status bar, and store
08627 99 E2 64                               sta VRAM_Buffer2+1,y
0862A 85 01                                  sta $01                  ;also store in temp again
0862C BD F9 03                               lda AttributeBuffer,x    ;fetch current attribute table byte and store
0862F 99 E4 64                               sta VRAM_Buffer2+3,y     ;in the buffer
08632 A9 01                                  lda #$01
08634 99 E3 64                               sta VRAM_Buffer2+2,y     ;store length of 1 in buffer
08637 4A                                     lsr
08638 9D F9 03                               sta AttributeBuffer,x    ;clear current byte in attribute buffer
0863B C8                                     iny                      ;increment buffer offset by 4 bytes
0863C C8                                     iny
0863D C8                                     iny
0863E C8                                     iny
0863F E8                                     inx                      ;increment attribute offset and check to see
08640 E0 07                                  cpx #$07                 ;if we're at the end yet
08642 90 D9                                  bcc AttribLoop
08644 99 E1 64                               sta VRAM_Buffer2,y       ;put null terminator at the end
08647 8C E0 64                               sty VRAM_Buffer2_Offset  ;store offset in case we want to do any more
0864A A9 06                     SetVRAMCtrl: lda #$06
0864C 8D 73 07                               sta VRAM_Buffer_AddrCtrl ;set buffer to $0341 and leave
0864F 60                        -:           rts
08650                           
08650                           ;-------------------------------------------------------------------------------------
08650                           
08650 A5 FC                     		      lda $fc
08652 D0 06                     		      bne +
08654 85 FB                     			  sta $fb
08656 A9 66                     			  lda #$66
08658 85 FC                     			  sta $fc
0865A                           +:			
0865A A5 FC                     			  lda $fc
0865C C9 76                     			  cmp #$76
0865E F0 0E                     			  beq ++
08660 E6 FB                     			  inc $fb
08662 A5 FB                     			  lda $fb
08664 C9 10                     			  cmp #$10
08666 90 06                     			  bcc +
08668 A9 00                     			  lda #$00
0866A 85 FB                     			  sta $fb
0866C E6 FC                     			  inc $fc
0866E                           			  
0866E                           +: 
0866E                           ++:	
0866E                           IncrementColumnPosS:	   
0866E EE 26 07                  		   inc CurrentColumnPos     ;increment column where we're at
08671 AD 26 07                             lda CurrentColumnPos
08674 29 0F                                and #%00001111           ;mask out higher nybble
08676 D0 06                     		   bne +
08678 8D 26 07                             sta CurrentColumnPos     ;if no bits left set, wrap back to zero (0-f)
0867B EE 25 07                             inc CurrentPageLoc       ;and increment page number where we're at
0867E EE A0 06                  +:		   inc BlockBufferColumnPos ;increment column offset where we're at
08681 60                        -:         rts
08682                           IncrementColumnPos:
08682 AD A2 60                  		   lda scrolldir
08685 F0 52                     		   beq DecrementColumnPos
08687 A9 00                     		   lda #$00
08689 8D 34 60                  		   sta temp9
0868C AD 99 60                  		   lda olddirscroll
0868F D0 1F                     		   bne +
08691 E6 FA                     		   inc $fa
08693 E6 FA                     		   inc $fa
08695 A5 FF                     		   lda $ff
08697 29 0F                     		   and #$0f
08699 C9 0F                     		   cmp #$0f
0869B D0 02                     		   bne oke1
0869D E6 FA                     		   inc $fa
0869F AD A3 60                  oke1:	   lda tempXD
086A2 D0 0A                     		   bne ++
086A4 C6 FF                     		   dec $ff
086A6 A9 01                     		   lda #$01
086A8 8D 34 60                  		   sta temp9
086AB 4C B0 86                  		   jmp +
086AE E6 FF                     ++:		   inc $ff
086B0 A9 01                     +:		   lda #$01
086B2 8D 99 60                  		   sta olddirscroll
086B5 AD A3 60                  		   lda tempXD
086B8 D0 C7                     		   bne -
086BA                                      ;inc CurrentColumnPos
086BA                           		   ;lda temp9
086BA                           		   ;bne +
086BA AD A5 60                  		   lda iwantdie
086BD D0 0A                     		   bne +
086BF A5 FF                     		   lda $ff
086C1 29 0F                     		   and #$0f
086C3 C9 0F                     		   cmp #$0f
086C5 D0 02                     		   bne +
086C7 E6 FA                     		   inc $fa
086C9 E6 FF                     +:		   inc $ff
086CB AD A5 60                  		   lda iwantdie
086CE F0 03                     		   beq +
086D0 CE A5 60                  		   dec iwantdie
086D3 A9 00                     +:		   lda #$00
086D5 8D 34 60                  		   sta temp9
086D8 60                                   rts
086D9                           		   
086D9                           DecrementColumnPos:
086D9                           		   ;inc ColumnSets
086D9                           			;dec CurrentNTAddr_Low
086D9 AD 99 60                  		   lda olddirscroll
086DC F0 1B                     		   beq +
086DE C6 FA                     		   dec $fa
086E0 C6 FA                     		   dec $fa
086E2 A5 FF                     		   lda $ff
086E4 29 0F                     		   and #$0f
086E6                           		   ;cmp #$00
086E6 D0 05                     		   bne oke
086E8 C6 FA                     		   dec $fa
086EA EE A5 60                  		   inc iwantdie
086ED AD A3 60                  oke:	   lda tempXD
086F0 D0 05                     		   bne eadoek
086F2 E6 FF                     		   inc $ff
086F4                           		   
086F4 4C F9 86                  		   jmp +
086F7 C6 FF                     eadoek:    dec $ff
086F9 8D 34 60                  +:		   sta temp9
086FC A9 00                     		   lda #$00
086FE 8D 99 60                  		   sta olddirscroll
08701 AD A3 60                  		   lda tempXD
08704 D0 1F                     		   bne ++
08706 A5 FF                     		   lda $ff
08708 29 0F                     		   and #$0f
0870A                           		   ;cmp #$00
0870A D0 07                     		   bne +
0870C AD A5 60                  aeujh:	   lda iwantdie
0870F D0 02                     		   bne +
08711 C6 FA                     		   dec $fa
08713 C6 FF                     +:		   dec $ff     ;increment column where we're at
08715 AD A5 60                  		   lda iwantdie
08718 F0 03                     		   beq +
0871A CE A5 60                  		   dec iwantdie
0871D A9 00                     +:		   lda #$00
0871F 8D 34 60                  		   sta temp9
08722 EE A0 06                  		   inc BlockBufferColumnPos
08725 60                        ++:        rts
08726                           
08726                           ;-------------------------------------------------------------------------------------
08726                           ;$00 - used as counter, store for low nybble for background, ceiling byte for terrain
08726                           ;$01 - used to store floor byte for terrain
08726                           ;$07 - used to store terrain metatile
08726                           ;$06-$07 - used to store block buffer address
08726                           
08726                           BSceneDataOffsets:
08726                           
08726                           BackSceneryData:
08726                           
08726                           BackSceneryMetatiles:
08726                           
08726                           FSceneDataOffsets:
08726                           
08726                           ForeSceneryData:
08726                           
08726                           TerrainMetatiles:
08726                           
08726                           TerrainRenderBits:
08726 A9 01                     -:    lda #$01
08728 8D 9A 60                  	  sta stopload
0872B 4A                        	  lsr
0872C 8D 51 60                  	  sta tempA
0872F 60                        	  rts
08730                           AreaParserCore:
08730 AD 1F 07                  	  lda AreaParserTaskNum
08733 C9 08                     	  cmp #$08
08735 D0 09                     	  bne +
08737 EE A3 60                  	  inc tempXD
0873A 20 82 86                  	  jsr IncrementColumnPos
0873D CE A3 60                  	  dec tempXD
08740 60                        +:	  rts
08741                           AreaParserCoreS:
08741 A5 FC                     	  lda $fc
08743 C9 76                     	  cmp #$76
08745 F0 DF                     	  beq -
08747 AD 28 07                  	  lda BackloadingFlag       ;check to see if we are starting right of start
0874A F0 03                           beq RenderSceneryTerrain  ;if not, go ahead and render background, foreground and terrain
0874C 20 65 87                        jsr ProcessAreaData       ;otherwise skip ahead and load level data
0874F                           
0874F                           RenderSceneryTerrain:
0874F 4C 65 87                            jmp ProcessAreaData
08752                           ;		  ldx #$0c
08752                           ;          lda #$00
08752                           ;ClrMTBuf: sta MetatileBuffer,x       ;clear out metatile buffer
08752                           ;          dex
08752                           ;          bpl ClrMTBuf
08752                           ;          ldy BackgroundScenery      ;do we need to render the background scenery?
08752                           ;          beq RendFore               ;if not, skip to check the foreground
08752                           ;          lda CurrentPageLoc         ;otherwise check for every third page
08752                           ;ThirdP:   cmp #$03
08752                           ;          bmi RendBack               ;if less than three we're there
08752                           ;          sec
08752                           ;          sbc #$03                   ;if 3 or more, subtract 3 and 
08752                           ;          bpl ThirdP                 ;do an unconditional branch
08752                           ;RendBack: asl                        ;move results to higher nybble
08752                           ;          asl
08752                           ;          asl
08752                           ;          asl
08752                           ;          adc BSceneDataOffsets-1,y  ;add to it offset loaded from here
08752                           ;          adc CurrentColumnPos       ;add to the result our current column position
08752                           ;          tax
08752                           ;          lda BackSceneryData,x      ;load data from sum of offsets
08752                           ;          beq RendFore               ;if zero, no scenery for that part
08752                           ;          pha
08752                           ;          and #$0f                   ;save to stack and clear high nybble
08752                           ;          sec
08752                           ;          sbc #$01                   ;subtract one (because low nybble is $01-$0c)
08752                           ;          sta $00                    ;save low nybble
08752                           ;          asl                        ;multiply by three (shift to left and add result to old one)
08752                           ;          adc $00                    ;note that since d7 was nulled, the carry flag is always clear
08752                           ;          tax                        ;save as offset for background scenery metatile data
08752                           ;          pla                        ;get high nybble from stack, move low
08752                           ;          lsr
08752                           ;          lsr
08752                           ;          lsr
08752                           ;          lsr
08752                           ;          tay                        ;use as second offset (used to determine height)
08752                           ;          lda #$03                   ;use previously saved memory location for counter
08752                           ;          sta $00
08752                           ;SceLoop1: lda BackSceneryMetatiles,x ;load metatile data from offset of (lsb - 1) * 3
08752                           ;		  ;lda #$71
08752                           ;          sta MetatileBuffer,y       ;store into buffer from offset of (msb / 16)
08752                           ;          inx
08752                           ;          iny
08752                           ;          cpy #$0b                   ;if at this location, leave loop
08752                           ;          beq RendFore
08752                           ;          dec $00                    ;decrement until counter expires, barring exception
08752                           ;          bne SceLoop1
08752                           ;RendFore: ldx ForegroundScenery      ;check for foreground data needed or not
08752                           ;          beq RendTerr               ;if not, skip this part
08752                           ;          ldy FSceneDataOffsets-1,x  ;load offset from location offset by header value, then
08752                           ;          ldx #$00                   ;reinit X
08752                           ;SceLoop2: lda ForeSceneryData,y      ;load data until counter expires
08752                           ;          beq NoFore                 ;do not store if zero found
08752                           ;          sta MetatileBuffer,x
08752                           ;NoFore:   iny
08752                           ;          inx
08752                           ;          cpx #$0d                   ;store up to end of metatile buffer
08752                           ;          bne SceLoop2
08752                           ;RendTerr: ldy AreaType               ;check world type for water level
08752                           ;          bne TerMTile               ;if not water level, skip this part
08752                           ;          lda WorldNumber            ;check world number, if not world number eight
08752                           ;          cmp #FinalWorld            ;then skip this part
08752                           ;          bne TerMTile
08752                           ;          lda #$6e                   ;if set as water level and world number eight,
08752                           ;          jmp StoreMT                ;use castle wall metatile as terrain type
08752                           ;TerMTile: lda TerrainMetatiles,y     ;otherwise get appropriate metatile for area type
08752                           ;          ldy CloudTypeOverride      ;check for cloud type override
08752                           ;          beq StoreMT                ;if not set, keep value otherwise
08752                           ;          lda #$88                   ;use cloud block terrain
08752                           ;StoreMT:  sta $07                    ;store value here
08752                           ;          ldx #$00                   ;initialize X, use as metatile buffer offset
08752                           ;          lda TerrainControl         ;use yet another value from the header
08752                           ;          asl                        ;multiply by 2 and use as yet another offset
08752                           ;          tay
08752                           ;TerrLoop: lda TerrainRenderBits,y    ;get one of the terrain rendering bit data
08752                           ;          sta $00
08752                           ;          iny                        ;increment Y and use as offset next time around
08752                           ;          sty $01
08752                           ;          lda CloudTypeOverride      ;skip if value here is zero
08752                           ;          beq NoCloud2
08752                           ;          cpx #$00                   ;otherwise, check if we're doing the ceiling byte
08752                           ;          beq NoCloud2
08752                           ;          lda $00                    ;if not, mask out all but d3
08752                           ;          and #%00001000
08752                           ;          sta $00
08752                           ;NoCloud2: ldy #$00                   ;start at beginning of bitmasks
08752                           ;TerrBChk: lda Bitmasks,y             ;load bitmask, then perform AND on contents of first byte
08752                           ;          bit $00
08752                           ;          beq NextTBit               ;if not set, skip this part (do not write terrain to buffer)
08752                           ;          lda $07
08752                           ;          sta MetatileBuffer,x       ;load terrain type metatile number and store into buffer here
08752                           ;NextTBit: inx                        ;continue until end of buffer
08752                           ;          cpx #$0d
08752                           ;          beq RendBBuf               ;if we're at the end, break out of this loop
08752                           ;          lda AreaType               ;check world type for underground area
08752                           ;          cmp #$02
08752                           ;          bne EndUChk                ;if not underground, skip this part
08752                           ;          cpx #$0b
08752                           ;          bne EndUChk                ;if we're at the bottom of the screen, override
08752                           ;          lda #$54                   ;old terrain type with ground level terrain type
08752                           ;          sta $07
08752                           ;EndUChk:  iny                        ;increment bitmasks offset in Y
08752                           ;          cpy #$08
08752                           ;          bne TerrBChk               ;if not all bits checked, loop back    
08752                           ;          ldy $01
08752                           ;          bne TerrLoop               ;unconditional branch, use Y to load next byte
08752                           ;RendBBuf: jsr ProcessAreaData        ;do the area data loading routine now
08752                           ;		  ldx #$00
08752                           ;          ldy #$00                   ;init index regs and start at beginning of smaller buffer
08752                           ;ChkMTLow: sty $00
08752                           ;          ;lda MetatileBuffer,x       ;load stored metatile number
08752                           ;          ;and #%11000000             ;mask out all but 2 MSB
08752                           ;          ;asl
08752                           ;          ;rol                        ;make %xx000000 into %000000xx
08752                           ;          ;rol
08752                           ;		  ;tay
08752                           ;		  rts
08752                           ;          ldy MetatileBuffer,x       ;reload original unmasked value here
08752                           ;		  lda MetatileThingy1,y
08752                           ;		  bne +++
08752                           ;		  ;lda #$c2
08752                           ;		  ;bne ++++
08752                           ;+++:	  lda MetatileBuffer,x
08752                           ;++++:	  ldy $00                    ;get offset for block buffer
08752                           ;		  sta ($fb),y                ;store value into block buffer
08752                           ;+:        tya
08752                           ;          clc                        ;add 16 (move down one row) to offset
08752                           ;          adc #$10
08752                           ;          tay
08752                           ;          inx                        ;increment column value
08752                           ;          cpx #$0d
08752                           ;          bcc ChkMTLow               ;continue until we pass last row, then leave
08752                           ;++:       rts
08752                           ;numbers lower than these with the same attribute bits
08752                           ;will not be stored in the block buffer
08752                           BlockBuffLowBounds:
08752                                 ;.db $10, $51, $88, $c0
08752                           
08752                           ;-------------------------------------------------------------------------------------
08752                           ;$00 - used to store area object identifier
08752                           ;$07 - used as adder to find proper area object code
08752                           RdyDecode1:
08752 60                        		rts
08753                           LevelBanks:
08753 A5 FC                     			lda $fc
08755 38                        			sec
08756 E9 66                     			sbc #$66
08758 8D 51 60                  			sta tempA
0875B AC 2C 07                  			ldy AreaDataOffset
0875E B1 D9                     			lda (AreaData),y
08760 C9 FF                     			cmp #$ff
08762 F0 EE                     			beq RdyDecode1
08764                           			
08764                           			
08764                           			
08764                           			
08764                           			
08764 60                        			rts
08765                           
08765                           ProcessAreaData:
08765 20 DD 87                  		    jsr DecodeAreaData
08768                           		   
08768 EE 2C 07                  		    inc AreaDataOffset
0876B EE 2C 07                  		    inc AreaDataOffset
0876E                           		   
0876E AD 2C 07                  			lda AreaDataOffset
08771 10 1F                     			bpl ++
08773 38                        			sec
08774 E9 40                     			sbc #$40
08776 8D 2C 07                  			sta AreaDataOffset
08779                           			
08779 A9 3F                     			lda #$3f
0877B 65 D9                     			adc AreaData
0877D 85 D9                     			sta AreaData
0877F 90 02                     			bcc +
08781 E6 DA                     			inc AreaDataHigh
08783                           +:			
08783 A0 C0                     			ldy #$c0
08785 A2 0D                     			ldx #$0d
08787                           -:	
08787 98                        			tya
08788 18                        			clc
08789 7D 00 05                  			adc AreaObjOffsetBuffer,x
0878C 9D 00 05                  			sta AreaObjOffsetBuffer,x
0878F CA                        			dex
08790 10 F5                     			bpl -
08792                           		  
08792                           ++:		  
08792 60                        EndAParse:  rts
08793                           ProcessAreaData2:
08793                           			;jmp ProcessAreaData 
08793                           BehindAreaIncrement:				;do things to get correct offset
08793 AC 2C 07                  		  ldy AreaDataOffset
08796 B1 D9                     		  lda (AreaData),y
08798 29 0F                     		  and #%00001111
0879A C9 0F                     		  cmp #$0f
0879C D0 15                     		  bne +++
0879E C8                        		  iny
0879F B1 D9                     		  lda (AreaData),y
087A1 29 70                     		  and #%01110000
087A3 4A                        		  lsr
087A4 4A                        		  lsr
087A5 4A                        		  lsr
087A6 4A                        		  lsr
087A7 C9 07                     		  cmp #$07
087A9 F0 09                     		  beq ++
087AB C9 06                     		  cmp #$06
087AD F0 11                     		  beq +
087AF C9 05                     		  cmp #$05
087B1 F0 0D                     		  beq +
087B3 60                        +++:	  rts
087B4 EE 2C 07                  ++:		  inc AreaDataOffset
087B7 EE 2C 07                  		  inc AreaDataOffset
087BA A9 00                     		  lda #$00              ;reset page select
087BC 8D 2B 07                  		  sta AreaObjectPageSel
087BF 60                        		  rts
087C0 EE 2C 07                  +:        inc AreaDataOffset
087C3 A9 00                     		  lda #$00              ;reset page select
087C5 8D 2B 07                  		  sta AreaObjectPageSel
087C8 60                        		  rts
087C9                           D4Bytes:
087C9                           	  ;inc AreaDataOffset
087C9                           D3Bytes:
087C9                           	  ;inc AreaDataOffset
087C9                           IncAreaObjOffset:
087C9 EE 2C 07                  	  inc AreaDataOffset
087CC EE 2C 07                  	  inc AreaDataOffset
087CF A9 00                     	  lda #$00              ;reset page select
087D1 8D 2B 07                        sta AreaObjectPageSel
087D4 60                        XD:	  rts
087D5                           
087D5 EE 9A 60                  --        inc stopload
087D8 60                        		  rts
087D9                           
087D9                           StarTable:
087D9 D2 D3 D4 D5               		.db $d2, $d3, $d4, $d5
087DD                           DecodeAreaData:		  
087DD                           		  
087DD                           		  
087DD AC 2C 07                  		  ldy AreaDataOffset
087E0 B1 D9                     		  lda (AreaData),y
087E2 C9 FD                     		  cmp #$fd
087E4 D0 24                     		  bne +
087E6 A0 00                     		  ldy #$00
087E8 A9 00                     -		  lda #$00
087EA 91 FB                     		  sta ($fb),y
087EC CA                        		  dex
087ED A5 FB                     		  lda $fb
087EF 18                        		  clc
087F0 69 01                     		  adc #$01
087F2 85 FB                     		  sta $fb
087F4 C9 D0                     		  cmp #$d0
087F6 90 0F                     		  bcc ++
087F8 A5 FC                     		  lda $fc
087FA 18                        		  clc
087FB 69 01                     		  adc #$01
087FD 85 FC                     		  sta $fc
087FF C9 76                     		  cmp #$76
08801 B0 D2                     		  bcs --
08803 A9 00                     		  lda #$00
08805 85 FB                     		  sta $fb
08807 4C E8 87                  ++:		  jmp -
0880A                           		  
0880A                           		  
0880A                           		  
0880A AA                        +:		  tax
0880B C8                        		  iny
0880C B1 D9                     		  lda (AreaData),y
0880E 85 03                     		  sta $03
08810                           		  
08810 A0 00                     		  ldy #$00
08812 A5 03                     -		  lda $03
08814 D0 1D                     		  bne +
08816 AD 44 07                  		  lda BackgroundColorCtrl
08819 F0 18                     		  beq +
0881B 84 01                     		  sty $01
0881D 86 02                     		  stx $02
0881F 20 F6 F8                  		  jsr RNG_call
08822 29 3F                     		  and #%00111111
08824 C9 04                     		  cmp #$04
08826 B0 05                     		  bcs ++
08828 A8                        		  tay 
08829 B9 D9 87                  		  lda StarTable,y
0882C 2C                        		  .db $2c
0882D A9 00                     ++:		  lda #$00
0882F A6 02                     		  ldx $02
08831 A4 01                     		  ldy $01
08833                           +:		  
08833 91 FB                     		  sta ($fb),y
08835 CA                        		  dex
08836 A5 FB                     		  lda $fb
08838 18                        		  clc
08839 69 01                     		  adc #$01
0883B 85 FB                     		  sta $fb
0883D C9 D0                     		  cmp #$d0
0883F 90 0F                     		  bcc +
08841 A5 FC                     		  lda $fc
08843 18                        		  clc
08844 69 01                     		  adc #$01
08846 85 FC                     		  sta $fc
08848 C9 76                     		  cmp #$76
0884A B0 89                     		  bcs --
0884C A9 00                     		  lda #$00
0884E 85 FB                     		  sta $fb
08850 E0 FF                     +:		  cpx #$ff
08852 D0 BE                     		  bne -
08854                           		  
08854                           		  
08854                           		  
08854                           		  
08854                           		  
08854                           		 
08854                           		  
08854 60                        		  rts
08855                           		  
08855 20 A0 F7                  		  jsr JumpEngine			 ;run the object!
08858                           		
08858                           	  
08858                           ;s: scenery
08858                           ;b: background
08858                           ;j: change only background flag
08858                           			
08858                           
08858                           ;-------------------------------------------------------------------------------------
08858                           ;(these apply to all area object subroutines in this section unless otherwise stated)
08858                           ;$00 - used to store offset used to find object code
08858                           ;$07 - starts with adder from area parser, used to store row offset
08858                           StopFrenzy:
08858 A9 00                     		 lda #$00
0885A 8D 59 60                  		 sta LakituRespawning
0885D 4C D2 88                  		 jmp AreaFrenzy
08860                           AlterAreaAttributes:
08860 BC 00 05                           ldy AreaObjOffsetBuffer,x ;load offset for level object data saved in buffer
08863 C8                                 iny                       ;load second byte
08864 B1 D9                              lda (AreaData),y
08866 48                                 pha                       ;save in stack for now
08867 29 40                              and #%01000000
08869 D0 12                              bne Alter2                ;branch if d6 is set
0886B 68                                 pla
0886C 48                                 pha                       ;pull and push offset to copy to A
0886D 29 0F                              and #%00001111            ;mask out high nybble and store as
0886F 8D 27 07                           sta TerrainControl        ;new terrain height type bits
08872 68                                 pla
08873 29 30                              and #%00110000            ;pull and mask out all but d5 and d4
08875 4A                                 lsr                       ;move bits to lower nybble and store
08876 4A                                 lsr                       ;as new background scenery bits
08877 4A                                 lsr
08878 4A                                 lsr
08879 8D 42 07                           sta BackgroundScenery     ;then leave
0887C 60                                 rts
0887D 68                        Alter2:  pla
0887E 29 07                              and #%00000111            ;mask out all but 3 LSB
08880 C9 04                              cmp #$04                  ;if four or greater, set color control bits
08882 90 05                              bcc SetFore               ;and nullify foreground scenery bits
08884 8D 44 07                           sta BackgroundColorCtrl
08887 A9 00                              lda #$00
08889 8D 41 07                  SetFore: sta ForegroundScenery     ;otherwise set new foreground scenery bits
0888C 60                                 rts
0888D                           
0888D                           ;--------------------------------
0888D                           
0888D                           ScrollLockObject_Warp:
0888D AD A6 60                           lda ScrollLockPageLoc
08890 C9 FF                     	     cmp #$ff
08892 D0 3A                     	     bne +
08894 AD 25 07                  	     lda CurrentPageLoc
08897 18                        	     clc
08898 69 66                     		 adc #$66
0889A C5 FA                     	     cmp $fa
0889C 90 30                     	     bcc +
0889E 18                        	     clc
0889F 8D A6 60                  	     sta ScrollLockPageLoc
088A2 AD 26 07                  	     lda CurrentColumnPos
088A5 18                        	     clc
088A6 69 02                     		 adc #$02
088A8 8D A7 60                  		 sta ScrollLockColumnPos
088AB A9 01                     		 lda #$01
088AD 8D A8 60                  		 sta WarpZoneCheck
088B0 60                        		 rts
088B1                           
088B1                           ScrollLockObject:
088B1 AD A6 60                        lda ScrollLockPageLoc
088B4 C9 75                     	  cmp #$75
088B6 D0 16                     	  bne +
088B8 AD 25 07                  	  lda CurrentPageLoc
088BB 18                        	  clc
088BC 69 66                     	  adc #$66
088BE C5 FA                     	  cmp $fa
088C0 90 0C                     	  bcc +
088C2 8D A6 60                  	  sta ScrollLockPageLoc
088C5 AD 26 07                  	  lda CurrentColumnPos
088C8 18                        	  clc
088C9 69 01                     	  adc #$01
088CB 8D A7 60                  	  sta ScrollLockColumnPos
088CE 60                        +:	  rts
088CF                           
088CF                           ;--------------------------------
088CF                           ;$00 - used to store enemy identifier in KillEnemies
088CF                           ;--------------------------------
088CF                           
088CF                           FrenzyIDData:
088CF 14 17 18                        .db FlyCheepCheepFrenzy, BBill_CCheep_Frenzy, Stop_Frenzy
088D2                           
088D2 A6 00                     AreaFrenzy:  ldx $00               ;use area object identifier bit as offset
088D4 BD C7 88                               lda FrenzyIDData-8,x  ;note that it starts at 8, thus weird address here
088D7 A0 05                                  ldy #$05
088D9 88                        FreCompLoop: dey                   ;check regular slots of enemy object buffer
088DA 30 07                                  bmi ExitAFrenzy       ;if all slots checked and enemy object not found, branch to store
088DC D9 15 00                               cmp Enemy_ID,y        ;check for enemy object in buffer versus frenzy object
088DF D0 F8                                  bne FreCompLoop
088E1 A9 00                                  lda #$00              ;if enemy object already present, nullify queue and leave
088E3 8D CD 06                  ExitAFrenzy: sta EnemyFrenzyQueue  ;store enemy into frenzy queue
088E6 60                                     rts
088E7                           
088E7                           ;--------------------------------
088E7                           ;$06 - used by MushroomLedge to store length
088E7                           
088E7                           AreaStyleObject:
088E7 AD 33 07                        lda AreaStyle        ;load level object style and jump to the right sub
088EA 20 A0 F7                        jsr JumpEngine 
088ED F3 88                           .dw TreeLedge        ;also used for cloud type levels
088EF 1F 89                           .dw MushroomLedge
088F1 00 8E                           .dw BulletBillCannon
088F3                           
088F3                           TreeLedge:
088F3 20 D3 8F                            jsr GetLrgObjAttrib     ;get row and length of green ledge
088F6 BD 10 05                            lda AreaObjectLength,x  ;check length counter for expiration
088F9 F0 1F                               beq EndTreeL   
088FB 10 11                               bpl MidTreeL
088FD 98                                  tya
088FE 9D 10 05                            sta AreaObjectLength,x  ;store lower nybble into buffer flag as length of ledge
08901 AD 25 07                            lda CurrentPageLoc
08904 0D 26 07                            ora CurrentColumnPos    ;are we at the start of the level?
08907 F0 05                               beq MidTreeL
08909 A9 16                               lda #$16                ;render start of tree ledge
0890B 4C 57 89                            jmp NoUnder
0890E A6 07                     MidTreeL: ldx $07
08910 A9 17                               lda #$17                ;render middle of tree ledge
08912 9D A1 06                            sta MetatileBuffer,x    ;note that this is also used if ledge position is
08915 A9 4C                               lda #$4c                ;at the start of level for continuous effect
08917 4C 51 89                            jmp AllUnder            ;now render the part underneath
0891A A9 18                     EndTreeL: lda #$18                ;render end of tree ledge
0891C 4C 57 89                            jmp NoUnder
0891F                           
0891F                           MushroomLedge:
0891F 20 C4 8F                            jsr ChkLrgObjLength        ;get shroom dimensions
08922 84 06                               sty $06                    ;store length here for now
08924 90 0C                               bcc EndMushL
08926 BD 10 05                            lda AreaObjectLength,x     ;divide length by 2 and store elsewhere
08929 4A                                  lsr
0892A 9D 20 05                            sta MushroomLedgeHalfLen,x
0892D A9 19                               lda #$19                   ;render start of mushroom
0892F 4C 57 89                            jmp NoUnder
08932 A9 1B                     EndMushL: lda #$1b                   ;if at the end, render end of mushroom
08934 BC 10 05                            ldy AreaObjectLength,x
08937 F0 1E                               beq NoUnder
08939 BD 20 05                            lda MushroomLedgeHalfLen,x ;get divided length and store where length
0893C 85 06                               sta $06                    ;was stored originally
0893E A6 07                               ldx $07
08940 A9 1A                               lda #$1a
08942 9D A1 06                            sta MetatileBuffer,x       ;render middle of mushroom
08945 C4 06                               cpy $06                    ;are we smack dab in the center?
08947 D0 2C                               bne MushLExit              ;if not, branch to leave
08949 E8                                  inx
0894A A9 4F                               lda #$4f
0894C 9D A1 06                            sta MetatileBuffer,x       ;render stem top of mushroom underneath the middle
0894F A9 50                               lda #$50
08951 E8                        AllUnder: inx
08952 A0 0F                               ldy #$0f                   ;set $0f to render all way down
08954 4C 8D 8F                            jmp RenderUnderPart        ;now render the stem of mushroom
08957 A6 07                     NoUnder:  ldx $07                    ;load row of ledge
08959 A0 00                               ldy #$00                   ;set 0 for no bottom on this part
0895B 4C 8D 8F                            jmp RenderUnderPart
0895E                           
0895E                           ;--------------------------------
0895E                           
0895E                           ;tiles used by pulleys and rope object
0895E                           PulleyRopeMetatiles:
0895E 42 41 43                        .db $42, $41, $43
08961                           
08961                           PulleyRopeObject:
08961 20 C4 8F                             jsr ChkLrgObjLength       ;get length of pulley/rope object
08964 A0 00                                ldy #$00                  ;initialize metatile offset
08966 B0 07                                bcs RenderPul             ;if starting, render left pulley
08968 C8                                   iny
08969 BD 10 05                             lda AreaObjectLength,x    ;if not at the end, render rope
0896C D0 01                                bne RenderPul
0896E C8                                   iny                       ;otherwise render right pulley
0896F B9 5E 89                  RenderPul: lda PulleyRopeMetatiles,y
08972 8D A1 06                             sta MetatileBuffer        ;render at the top of the screen
08975 60                        MushLExit: rts                       ;and leave
08976                           
08976                           ;--------------------------------
08976                           ;$06 - used to store upper limit of rows for CastleObject
08976                           
08976                           CastleMetatiles:
08976 00 45 45 45 00                  .db $00, $45, $45, $45, $00
0897B 00 48 47 46 00                  .db $00, $48, $47, $46, $00
08980 45 49 49 49 45                  .db $45, $49, $49, $49, $45
08985 47 47 4A 47 47                  .db $47, $47, $4a, $47, $47
0898A 47 47 4B 47 47                  .db $47, $47, $4b, $47, $47
0898F 49 49 49 49 49                  .db $49, $49, $49, $49, $49
08994 47 4A 47 4A 47                  .db $47, $4a, $47, $4a, $47
08999 47 4B 47 4B 47                  .db $47, $4b, $47, $4b, $47
0899E 47 47 47 47 47                  .db $47, $47, $47, $47, $47
089A3 4A 47 4A 47 4A                  .db $4a, $47, $4a, $47, $4a
089A8 4B 47 4B 47 4B                  .db $4b, $47, $4b, $47, $4b
089AD                           
089AD                           CastleObject:
089AD 20 D3 8F                              jsr GetLrgObjAttrib      ;save lower nybble as starting row
089B0 84 07                                 sty $07                  ;if starting row is above $0a, game will crash!!! ok bummer
089B2 C0 00                     			cpy #0b
089B4 B0 04                     			bcs +
089B6 A0 0A                     			ldy #$0a
089B8 84 07                     			sty $07
089BA A0 04                     +:          ldy #$04
089BC 20 C7 8F                              jsr ChkLrgObjFixedLength ;load length of castle if not already loaded
089BF 8A                                    txa                  
089C0 48                                    pha                      ;save obj buffer offset to stack
089C1 BC 10 05                              ldy AreaObjectLength,x   ;use current length as offset for castle data
089C4 A6 07                                 ldx $07                  ;begin at starting row
089C6 A9 0B                                 lda #$0b
089C8 85 06                                 sta $06                  ;load upper limit of number of rows to print
089CA B9 76 89                  CRendLoop:  lda CastleMetatiles,y    ;load current byte using offset
089CD 9D A1 06                              sta MetatileBuffer,x
089D0 E8                                    inx                      ;store in buffer and increment buffer offset
089D1 A5 06                                 lda $06
089D3 F0 07                                 beq ChkCFloor            ;have we reached upper limit yet?
089D5 C8                                    iny                      ;if not, increment column-wise
089D6 C8                                    iny                      ;to byte in next row
089D7 C8                                    iny
089D8 C8                                    iny
089D9 C8                                    iny
089DA C6 06                                 dec $06                  ;move closer to upper limit
089DC E0 0B                     ChkCFloor:  cpx #$0b                 ;have we reached the row just before floor?
089DE D0 EA                                 bne CRendLoop            ;if not, go back and do another row
089E0 68                                    pla
089E1 AA                                    tax                      ;get obj buffer offset from before
089E2 AD 25 07                              lda CurrentPageLoc
089E5 F0 19                                 beq ExitCastle           ;if we're at page 0, we do not need to do anything else
089E7 BD 10 05                              lda AreaObjectLength,x   ;check length
089EA C9 01                                 cmp #$01                 ;if length almost about to expire, put brick at floor
089EC F0 0D                                 beq PlayerStop
089EE A4 07                                 ldy $07                  ;check starting row for tall castle ($00)
089F0 D0 04                                 bne NotTall
089F2 C9 03                                 cmp #$03                 ;if found, then check to see if we're at the second column
089F4 F0 05                                 beq PlayerStop
089F6 C9 02                     NotTall:    cmp #$02                 ;if not tall castle, check to see if we're at the third column
089F8 D0 06                                 bne ExitCastle           ;if we aren't and the castle is tall, don't create flag yet
089FA 60                                    rts
089FB A0 70                     PlayerStop: ldy #$70                 ;put brick at floor to stop player at end of level
089FD 8C AB 06                              sty MetatileBuffer+10    ;this is only done if we're on the second column
08A00 60                        ExitCastle: rts
08A01                           
08A01                           ;--------------------------------
08A01                           
08A01                           WaterPipe:
08A01 20 D3 8F                        jsr GetLrgObjAttrib     ;get row and lower nybble
08A04 BC 10 05                        ldy AreaObjectLength,x  ;get length (residual code, water pipe is 1 col thick)
08A07 A6 07                           ldx $07                 ;get row
08A09 A9 6B                           lda #$6b
08A0B 9D A1 06                        sta MetatileBuffer,x    ;draw something here and below it
08A0E A9 6C                           lda #$6c
08A10 9D A2 06                        sta MetatileBuffer+1,x
08A13 60                              rts
08A14                           
08A14                           ;--------------------------------
08A14                           ;$05 - used to store length of vertical shaft in RenderSidewaysPipe
08A14                           ;$06 - used to store leftover horizontal length in RenderSidewaysPipe
08A14                           ; and vertical length in VerticalPipe and GetPipeHeight
08A14                           
08A14                           IntroPipe:
08A14 A0 03                                    ldy #$03                 ;check if length set, if not set, set it
08A16 20 C7 8F                                 jsr ChkLrgObjFixedLength
08A19 A0 0A                                    ldy #$0a                 ;set fixed value and render the sideways part
08A1B 20 49 8A                                 jsr RenderSidewaysPipe
08A1E B0 10                                    bcs NoBlankP             ;if carry flag set, not time to draw vertical pipe part
08A20 A2 06                                    ldx #$06                 ;blank everything above the vertical pipe part
08A22 A9 00                     VPipeSectLoop: lda #$00                 ;all the way to the top of the screen
08A24 9D A1 06                                 sta MetatileBuffer,x     ;because otherwise it will look like exit pipe
08A27 CA                                       dex
08A28 10 F8                                    bpl VPipeSectLoop
08A2A B9 7D 8A                                 lda VerticalPipeData,y   ;draw the end of the vertical pipe part
08A2D 8D A8 06                                 sta MetatileBuffer+7
08A30 60                        NoBlankP:      rts
08A31                           
08A31                           SidePipeShaftData:
08A31 15 14                           .db $15, $14  ;used to control whether or not vertical pipe shaft
08A33 00 00                           .db $00, $00  ;is drawn, and if so, controls the metatile number
08A35                           SidePipeTopPart:
08A35 15 1E                           .db $15, $1e  ;top part of sideways part of pipe
08A37 1D 1C                           .db $1d, $1c
08A39                           SidePipeBottomPart: 
08A39 15 21                           .db $15, $21  ;bottom part of sideways part of pipe
08A3B 20 1F                           .db $20, $1f
08A3D                           SidePipeBottomPartW:
08A3D 15 21                           .db $15, $21  ;bottom part of sideways part of pipe
08A3F 3E 1F                           .db $3e, $1f
08A41                           
08A41                           ExitPipe:
08A41 A0 03                           ldy #$03                 ;check if length set, if not set, set it
08A43 20 C7 8F                        jsr ChkLrgObjFixedLength
08A46 20 D3 8F                        jsr GetLrgObjAttrib      ;get vertical length, then plow on through RenderSidewaysPipe
08A49                           
08A49                           RenderSidewaysPipe:
08A49 88                                      dey                       ;decrement twice to make room for shaft at bottom
08A4A 88                                      dey                       ;and store here for now as vertical length
08A4B 84 05                                   sty $05
08A4D BC 10 05                                ldy AreaObjectLength,x    ;get length left over and store here
08A50 84 06                                   sty $06
08A52 A6 05                                   ldx $05                   ;get vertical length plus one, use as buffer offset
08A54 E8                                      inx
08A55 B9 31 8A                                lda SidePipeShaftData,y   ;check for value $00 based on horizontal offset
08A58                                         ;cmp #$00
08A58 F0 08                                   beq DrawSidePart          ;if found, do not draw the vertical pipe shaft
08A5A A2 00                                   ldx #$00
08A5C A4 05                                   ldy $05                   ;init buffer offset and get vertical length
08A5E 20 8D 8F                                jsr RenderUnderPart       ;and render vertical shaft using tile number in A
08A61 18                                      clc                       ;clear carry flag to be used by IntroPipe
08A62 A4 06                     DrawSidePart: ldy $06                   ;render side pipe part at the bottom
08A64 B9 35 8A                                lda SidePipeTopPart,y
08A67 9D A1 06                                sta MetatileBuffer,x      ;note that the pipe parts are stored
08A6A AD 4E 07                  			  lda AreaType
08A6D D0 07                     			  bne +
08A6F B9 3D 8A                  			  lda SidePipeBottomPartW,y
08A72 9D A2 06                  			  sta MetatileBuffer+1,x
08A75 60                        			  rts
08A76 B9 39 8A                  +:            lda SidePipeBottomPart,y  ;backwards horizontally
08A79 9D A2 06                                sta MetatileBuffer+1,x
08A7C 60                                      rts
08A7D                           
08A7D                           VerticalPipeData:
08A7D 11 10                           .db $11, $10 ;used by pipes that lead somewhere
08A7F 15 14                           .db $15, $14
08A81 13 12                           .db $13, $12 ;used by decoration pipes
08A83 15 14                           .db $15, $14
08A85 2D 2C                     	  .db $2d, $2c ;used by upside-down pipes
08A87 2F 2E                     	  .db $2f, $2e ;used by upside-down pipes (enterable)
08A89                           
08A89                           VerticalPipeDataUW:
08A89 11 10                           .db $11, $10 ;used by pipes that lead somewhere
08A8B 3D 14                           .db $3d, $14
08A8D 13 12                           .db $13, $12 ;used by decoration pipes
08A8F 3D 14                           .db $3d, $14
08A91 2D 2C                     	  .db $2d, $2c ;used by upside-down pipes
08A93 2F 2E                     	  .db $2f, $2e ;used by upside-down pipes (enterable)
08A95                           VerticalPipe:
08A95 48                                  pha
08A96 AD 4E 07                  		  lda AreaType
08A99 F0 5A                     		  beq VerticalPipeUW
08A9B 68                        		  pla
08A9C 20 4F 8B                  		  jsr GetPipeHeight
08A9F A5 00                               lda $00                  ;check to see if value was nullified earlier
08AA1 F0 04                               beq WarpPipe             ;(if d3, the usage control bit of second byte, was set)
08AA3 C8                                  iny
08AA4 C8                                  iny
08AA5 C8                                  iny
08AA6 C8                                  iny                      ;add four if usage control bit was not set
08AA7 98                        WarpPipe: tya                      ;save value in stack
08AA8 48                                  pha
08AA9                           		  if Enablew1l1PiranhaPlants !=1
08AA9 AD 60 07                  			  lda AreaNumber
08AAC 0D 5F 07                  			  ora WorldNumber          ;if at world 1-1, do not add piranha plant ever
08AAF F0 30                     			  beq DrawPipe
08AB1                           		  endif
08AB1                           		  ;lda AreaType
08AB1                           		  ;beq DrawPipe
08AB1                           		  
08AB1 AD B5 63                  		  lda DisableScreenFlag2
08AB4 F0 2B                     		  beq DrawPipe
08AB6 BC 10 05                            ldy AreaObjectLength,x   ;if on second column of pipe, branch
08AB9 F0 26                               beq DrawPipe             ;(because we only need to do this once)
08ABB 20 20 8C                            jsr FindEmptyEnemySlot   ;check for an empty moving data buffer space
08ABE B0 21                               bcs DrawPipe             ;if not found, too many enemies, thus skip
08AC0 20 E3 8F                            jsr GetAreaObjXPosition  ;get horizontal pixel coordinate
08AC3 18                                  clc
08AC4 69 08                               adc #$08                 ;add eight to put the piranha plant in the center
08AC6 95 79                               sta Enemy_X_Position,x   ;store as enemy's horizontal coordinate
08AC8 AD 25 07                            lda CurrentPageLoc       ;add carry to current page number
08ACB 69 00                               adc #$00
08ACD 95 60                               sta Enemy_PageLoc,x      ;store as enemy's page coordinate
08ACF A9 01                               lda #$01
08AD1 95 A8                               sta Enemy_Y_HighPos,x
08AD3 95 0F                               sta Enemy_Flag,x         ;activate enemy flag
08AD5 20 EB 8F                            jsr GetAreaObjYPosition  ;get piranha plant's vertical coordinate and store here
08AD8 95 C1                               sta Enemy_Y_Position,x
08ADA A9 0D                               lda #PiranhaPlant        ;write piranha plant's value into buffer
08ADC 95 15                               sta Enemy_ID,x
08ADE 20 C7 9A                            jsr InitPiranhaPlant1
08AE1 68                        DrawPipe: pla                      ;get value saved earlier and use as Y
08AE2 A8                                  tay
08AE3 A6 07                               ldx $07                  ;get buffer offset
08AE5 B9 7D 8A                            lda VerticalPipeData,y   ;draw the appropriate pipe with the Y we loaded earlier
08AE8 9D A1 06                            sta MetatileBuffer,x     ;render the top of the pipe
08AEB E8                                  inx
08AEC B9 7F 8A                            lda VerticalPipeData+2,y ;render the rest of the pipe
08AEF A4 06                               ldy $06                  ;subtract one from length and render the part underneath
08AF1 88                                  dey
08AF2 4C 8D 8F                            jmp RenderUnderPart
08AF5                           		  
08AF5                           VerticalPipeUW:
08AF5 68                                  pla
08AF6 20 4F 8B                  		  jsr GetPipeHeight
08AF9 A5 00                               lda $00                  ;check to see if value was nullified earlier
08AFB F0 04                               beq WarpPip1             ;(if d3, the usage control bit of second byte, was set)
08AFD C8                                  iny
08AFE C8                                  iny
08AFF C8                                  iny
08B00 C8                                  iny                      ;add four if usage control bit was not set
08B01 98                        WarpPip1: tya                      ;save value in stack
08B02 48                                  pha
08B03                           		  if Enablew1l1PiranhaPlants !=1
08B03 AD 60 07                  			  lda AreaNumber
08B06 0D 5F 07                  			  ora WorldNumber          ;if at world 1-1, do not add piranha plant ever
08B09 F0 30                     			  beq DrawPip1
08B0B                           		  endif
08B0B                           		  ;lda AreaType
08B0B                           		  ;beq DrawPipe
08B0B AD B5 63                  		  lda DisableScreenFlag2
08B0E F0 2B                     		  beq DrawPip1
08B10 BC 10 05                            ldy AreaObjectLength,x   ;if on second column of pipe, branch
08B13 F0 26                               beq DrawPip1             ;(because we only need to do this once)
08B15 20 20 8C                            jsr FindEmptyEnemySlot   ;check for an empty moving data buffer space
08B18 B0 21                               bcs DrawPip1             ;if not found, too many enemies, thus skip
08B1A 20 E3 8F                            jsr GetAreaObjXPosition  ;get horizontal pixel coordinate
08B1D 18                                  clc
08B1E 69 08                               adc #$08                 ;add eight to put the piranha plant in the center
08B20 95 79                               sta Enemy_X_Position,x   ;store as enemy's horizontal coordinate
08B22 AD 25 07                            lda CurrentPageLoc       ;add carry to current page number
08B25 69 00                               adc #$00
08B27 95 60                               sta Enemy_PageLoc,x      ;store as enemy's page coordinate
08B29 A9 01                               lda #$01
08B2B 95 A8                               sta Enemy_Y_HighPos,x
08B2D 95 0F                               sta Enemy_Flag,x         ;activate enemy flag
08B2F 20 EB 8F                            jsr GetAreaObjYPosition  ;get piranha plant's vertical coordinate and store here
08B32 95 C1                               sta Enemy_Y_Position,x
08B34 A9 0D                               lda #PiranhaPlant        ;write piranha plant's value into buffer
08B36 95 15                               sta Enemy_ID,x
08B38 20 C7 9A                            jsr InitPiranhaPlant1
08B3B 68                        DrawPip1: pla                      ;get value saved earlier and use as Y
08B3C A8                                  tay
08B3D A6 07                               ldx $07                  ;get buffer offset
08B3F B9 89 8A                            lda VerticalPipeDataUW,y   ;draw the appropriate pipe with the Y we loaded earlier
08B42 9D A1 06                            sta MetatileBuffer,x     ;render the top of the pipe
08B45 E8                                  inx
08B46 B9 8B 8A                            lda VerticalPipeDataUW+2,y ;render the rest of the pipe
08B49 A4 06                               ldy $06                  ;subtract one from length and render the part underneath
08B4B 88                                  dey
08B4C 4C 8D 8F                            jmp RenderUnderPart
08B4F                                 
08B4F                           GetPipeHeight:
08B4F A0 01                           ldy #$01       ;check for length loaded, if not, load
08B51 20 C7 8F                        jsr ChkLrgObjFixedLength ;pipe length of 2 (horizontal)
08B54 20 D3 8F                        jsr GetLrgObjAttrib
08B57 98                              tya            ;get saved lower nybble as height
08B58 29 0F                           and #$0f       ;save only the three lower bits as
08B5A 85 06                           sta $06        ;vertical length, then load Y with
08B5C BC 10 05                        ldy AreaObjectLength,x    ;length left over
08B5F 60                              rts
08B60                           	  
08B60                           UpsideDownWarpPipe:
08B60 AD 4E 07                  	   lda AreaType
08B63 F0 4D                     	   beq UpsideDownWarpPipeUW
08B65 A9 01                     	   lda #$01
08B67 8D 56 60                  	   sta tempB
08B6A 4C 77 8B                  	   jmp +
08B6D                           UpsideDownPipe:
08B6D AD 4E 07                  	   lda AreaType
08B70 F0 48                     	   beq UpsideDownPipeUW
08B72 A9 00                     	   lda #$00
08B74 8D 56 60                  	   sta tempB
08B77 8A                        +:     txa
08B78 48                        	   pha
08B79 BD 30 05                  	   lda ExtendedLength,x
08B7C 48                               pha
08B7D 20 4F 8B                         jsr GetPipeHeight           ;get pipe height from object byte
08B80 68                        	   pla
08B81 85 07                            sta $07                      ;save buffer offset temporarily
08B83 68                        	   pla
08B84 AA                        	   tax
08B85 98                               tya
08B86 48                               pha                          ;save pipe height temporarily
08B87                           	   if Enablew1l1PiranhaPlants
08B87                           	   else
08B87 AD 60 07                  		   lda AreaNumber
08B8A 0D 5F 07                  		   ora WorldNumber          ;if at world 1-1, do not add piranha plant ever
08B8D F0 00                     		   beq NoUDP
08B8F                           	   endif
08B8F                           	   ;lda AreaType
08B8F                           	   ;beq NoUDP
08B8F 68                        NoUDP: pla
08B90 A8                               tay                          ;return tile offset
08B91 48                               pha
08B92 A6 07                            ldx $07
08B94 B9 7F 8A                         lda VerticalPipeData+2,y
08B97 A4 06                            ldy $06                      ;render the pipe shaft
08B99 88                               dey
08B9A 20 8D 8F                         jsr RenderUnderPart
08B9D 68                               pla
08B9E A8                               tay
08B9F AD 56 60                  	   lda tempB
08BA2 D0 07                     	   bne +
08BA4 B9 85 8A                         lda VerticalPipeData+8,y     ;and render the pipe end
08BA7 9D A1 06                         sta MetatileBuffer,x
08BAA 60                        	   rts
08BAB B9 87 8A                  +:	   lda VerticalPipeData+10,y     ;and render the pipe end
08BAE 9D A1 06                         sta MetatileBuffer,x
08BB1 60                               rts
08BB2                           UpsideDownWarpPipeUW:
08BB2 A9 01                     	   lda #$01
08BB4 8D 56 60                  	   sta tempB
08BB7 4C BF 8B                  	   jmp +
08BBA                           UpsideDownPipeUW:
08BBA A9 00                     	   lda #$00
08BBC 8D 56 60                  	   sta tempB
08BBF 8A                        +:     txa
08BC0 48                        	   pha
08BC1 BD 30 05                  	   lda ExtendedLength,x
08BC4 48                               pha
08BC5 20 4F 8B                         jsr GetPipeHeight           ;get pipe height from object byte
08BC8 68                        	   pla
08BC9 85 07                            sta $07                      ;save buffer offset temporarily
08BCB 68                        	   pla
08BCC AA                        	   tax
08BCD 98                               tya
08BCE 48                               pha                          ;save pipe height temporarily
08BCF                           	   if Enablew1l1PiranhaPlants
08BCF                           	   else
08BCF AD 60 07                  		   lda AreaNumber
08BD2 0D 5F 07                  		   ora WorldNumber          ;if at world 1-1, do not add piranha plant ever
08BD5 F0 26                     		   beq NoUD1
08BD7                           	   endif
08BD7                           	   ;lda AreaType
08BD7                           	   ;beq NoUDP
08BD7 BC 10 05                  	   ldy AreaObjectLength,x       ;if on second column of pipe, skip this
08BDA F0 21                            beq NoUD1
08BDC 20 20 8C                         jsr FindEmptyEnemySlot       ;otherwise try to insert upside-down
08BDF B0 1C                            bcs NoUD1                    ;piranha plant, if no empty slots, skip this
08BE1 20 2D 8C                         jsr SetupPiranhaPlant        ;set up upside-down piranha plant
08BE4 A5 06                            lda $06
08BE6 0A                               asl
08BE7 0A                               asl                          ;multiply height of pipe by 16
08BE8 0A                               asl                          ;and add enemy Y position previously set up
08BE9 0A                               asl                          ;then subtract 10 pixels, save as new Y position
08BEA 18                               clc
08BEB 75 C1                            adc Enemy_Y_Position,x
08BED 38                               sec
08BEE E9 0A                            sbc #$0a
08BF0 95 C1                            sta Enemy_Y_Position,x
08BF2 9D 17 04                         sta PiranhaPlantUpYPos,x     ;set as "down" position
08BF5 18                               clc                          ;add 24 pixels, save as "up" position
08BF6 69 18                            adc #$18                     ;note up and down here are reversed
08BF8 9D 34 04                         sta PiranhaPlantDownYPos,x     
08BFB F6 92                            inc PiranhaPlant_MoveFlag,x  ;set movement flag
08BFD 68                        NoUD1: pla
08BFE A8                               tay                          ;return tile offset
08BFF 48                               pha
08C00 A6 07                            ldx $07
08C02 B9 8B 8A                         lda VerticalPipeDataUW+2,y
08C05 A4 06                            ldy $06                      ;render the pipe shaft
08C07 88                               dey
08C08 20 8D 8F                         jsr RenderUnderPart
08C0B 68                               pla
08C0C A8                               tay
08C0D AD 56 60                  	   lda tempB
08C10 D0 07                     	   bne +
08C12 B9 91 8A                         lda VerticalPipeDataUW+8,y     ;and render the pipe end
08C15 9D A1 06                         sta MetatileBuffer,x
08C18 60                        	   rts
08C19 B9 93 8A                  +:	   lda VerticalPipeDataUW+10,y     ;and render the pipe end
08C1C 9D A1 06                         sta MetatileBuffer,x
08C1F 60                               rts
08C20                           FindEmptyEnemySlot:
08C20 A2 00                                   ldx #$00          ;start at first enemy slot
08C22 18                        EmptyChkLoop: clc               ;clear carry flag by default
08C23 B5 0F                                   lda Enemy_Flag,x  ;check enemy buffer for nonzero
08C25 F0 05                                   beq ExitEmptyChk  ;if zero, leave
08C27 E8                                      inx
08C28 E0 05                                   cpx #$05          ;if nonzero, check next value
08C2A D0 F6                                   bne EmptyChkLoop
08C2C 60                        ExitEmptyChk: rts               ;if all values nonzero, carry flag is set
08C2D                           
08C2D                           SetupPiranhaPlant
08C2D A9 21                     		  lda #UDPiranhaPlant
08C2F 95 15                     		  sta Enemy_ID,x
08C31 20 E3 8F                            jsr GetAreaObjXPosition  ;get horizontal pixel coordinate
08C34 18                                  clc
08C35 69 08                               adc #$08                 ;add eight to put the piranha plant in the center
08C37 95 79                               sta Enemy_X_Position,x   ;store as enemy's horizontal coordinate
08C39 AD 25 07                            lda CurrentPageLoc       ;add carry to current page number
08C3C 69 00                               adc #$00
08C3E 95 60                               sta Enemy_PageLoc,x      ;store as enemy's page coordinate
08C40 A9 01                               lda #$01
08C42 95 A8                               sta Enemy_Y_HighPos,x
08C44 95 0F                               sta Enemy_Flag,x         ;activate enemy flag
08C46 20 EB 8F                            jsr GetAreaObjYPosition  ;get piranha plant's vertical coordinate and store here
08C49 95 C1                               sta Enemy_Y_Position,x
08C4B 4C F2 9A                            jmp InitUDPiranhaPlant1
08C4E                           ;--------------------------------
08C4E                           Hole_Water:
08C4E 20 C4 8F                        jsr ChkLrgObjLength   ;get low nybble and save as length
08C51 A9 90                     	  lda #$90
08C53 8D AB 06                        sta MetatileBuffer+10
08C56 A2 0B                           ldx #$0b
08C58 A0 01                     	  ldy #$01              ;now render the water underneath
08C5A A9 91                           lda #$91
08C5C 4C 8D 8F                        jmp RenderUnderPart
08C5F                           
08C5F                           ;--------------------------------
08C5F                           
08C5F                           QuestionBlockRow_High:
08C5F A9 03                           lda #$03    ;start on the fourth row
08C61 2C                              .db $2c     ;BIT instruction opcode
08C62                           
08C62                           QuestionBlockRow_Low:
08C62 A9 07                           lda #$07             ;start on the eighth row
08C64 48                              pha                  ;save whatever row to the stack for now
08C65 20 C4 8F                        jsr ChkLrgObjLength  ;get low nybble and save as length
08C68 68                              pla
08C69 AA                              tax                  ;render question boxes with coins
08C6A A9 C0                           lda #$c0
08C6C 9D A1 06                        sta MetatileBuffer,x
08C6F 60                              rts
08C70                           
08C70                           ;--------------------------------
08C70                           Bridge_High:
08C70 A9 06                           lda #$06  ;start on the seventh row from top of screen
08C72 2C                              .db $2c   ;BIT instruction opcode
08C73                           
08C73                           Bridge_Middle:
08C73 A9 07                           lda #$07  ;start on the eighth row
08C75 2C                              .db $2c   ;BIT instruction opcode
08C76                           
08C76                           Bridge_Low:
08C76 A9 09                           lda #$09             ;start on the tenth row
08C78 48                              pha                  ;save whatever row to the stack for now
08C79 20 C4 8F                  +:    jsr ChkLrgObjLength  ;get low nybble and save as length
08C7C 68                              pla
08C7D AA                              tax                  ;render bridge railing
08C7E A9 0B                           lda #$0b
08C80 9D A1 06                        sta MetatileBuffer,x
08C83 E8                              inx
08C84 A0 00                           ldy #$00             ;now render the bridge itself
08C86 A9 63                           lda #$63
08C88 4C 8D 8F                        jmp RenderUnderPart
08C8B                           
08C8B                           ;--------------------------------
08C8B                           
08C8B                           ;Vine:
08C8B                           ;	  jsr GetLrgObjAttrib  ;get low nybble from object byte
08C8B                           ;      lda ExtendedLength,x   ;render flag balls on third row from top
08C8B                           ;	  tax
08C8B                           ;      lda #$26             ;of screen downwards based on low nybble
08C8B                            ;     jmp RenderUnderPart
08C8B                           
08C8B                           ;--------------------------------
08C8B                           
08C8B                           FlagpoleObject:
08C8B A9 24                           lda #$24                 ;render flagpole ball on top
08C8D 8D A1 06                        sta MetatileBuffer
08C90 A2 01                           ldx #$01                 ;now render the flagpole shaft
08C92 A0 08                           ldy #$08
08C94 A9 25                           lda #$25
08C96 20 8D 8F                        jsr RenderUnderPart
08C99 A9 61                           lda #$61                 ;render solid block at the bottom
08C9B 8D AB 06                        sta MetatileBuffer+10
08C9E AD 25 07                  	  lda CurrentPageLoc
08CA1                           	  add #$66
08CA1 18                        	clc
08CA2 69 66                     	adc #$66 ;apparently this sometimes refuses to work correctly lmao
08CA4 8D BD 63                  	  sta FlagpoleEnemyPage
08CA7 AD 26 07                  	  lda CurrentColumnPos
08CAA 8D BE 63                  	  sta FlagpoleEnemyCol
08CAD 60                        	  rts
08CAE                           
08CAE                           ;--------------------------------
08CAE                           
08CAE                           EndlessRope:
08CAE A2 00                           ldx #$00       ;render rope from the top to the bottom of screen
08CB0 A0 0F                           ldy #$0f
08CB2 4C C7 8C                        jmp DrawRope
08CB5                           
08CB5                           BalancePlatRope:
08CB5 8A                                  txa                 ;save object buffer offset for now
08CB6 48                                  pha
08CB7 A2 01                               ldx #$01            ;blank out all from second row to the bottom
08CB9 A0 0F                               ldy #$0f            ;with blank used for balance platform rope
08CBB A9 44                               lda #$44
08CBD 20 8D 8F                            jsr RenderUnderPart
08CC0 68                                  pla                 ;get back object buffer offset
08CC1 AA                                  tax
08CC2 20 D3 8F                            jsr GetLrgObjAttrib ;get vertical length from lower nybble
08CC5 A2 01                               ldx #$01
08CC7 A9 40                     DrawRope: lda #$40            ;render the actual rope
08CC9 4C 8D 8F                            jmp RenderUnderPart
08CCC                           
08CCC                           ;--------------------------------
08CCC                           RowOfCoins:
08CCC AC 4E 07                        ldy AreaType            ;get area type
08CCF A9 C2                           lda #$c2 				  ;load appropriate coin metatile
08CD1 4C C2 8D                        jmp GetRow
08CD4                           
08CD4                           ;--------------------------------
08CD4                           
08CD4                           C_ObjectRow:
08CD4 06 07 08                        .db $06, $07, $08
08CD7                           
08CD7                           C_ObjectMetatile:
08CD7 C5 0C 89                        .db $c5, $0c, $89
08CDA                           
08CDA                           CastleBridgeObj:
08CDA A0 0C                           ldy #$0c                  ;load length of 13 columns
08CDC 20 C7 8F                        jsr ChkLrgObjFixedLength
08CDF 4C E7 8C                        jmp ChainObj
08CE2                           
08CE2                           AxeObj:
08CE2 A9 08                           lda #$08                  ;load bowser's palette into sprite portion of palette
08CE4 8D 73 07                        sta VRAM_Buffer_AddrCtrl
08CE7                           
08CE7                           ChainObj:
08CE7 A4 00                           ldy $00                   ;get value loaded earlier from decoder
08CE9 BE D2 8C                        ldx C_ObjectRow-2,y       ;get appropriate row and metatile for object
08CEC B9 D5 8C                        lda C_ObjectMetatile-2,y
08CEF 4C F9 8C                        jmp ColObj
08CF2                           
08CF2                           EmptyBlock:
08CF2 20 D3 8F                          jsr GetLrgObjAttrib  ;get row location
08CF5 A6 07                             ldx $07
08CF7 A9 C4                             lda #$c4
08CF9 A0 00                     ColObj: ldy #$00             ;column length of 1
08CFB 4C 8D 8F                          jmp RenderUnderPart
08CFE                           
08CFE                           ;--------------------------------
08CFE                           
08CFE                           SolidBlockMetatiles:
08CFE 69 61 61 62                     .db $69, $61, $61, $62
08D02                           
08D02                           BrickMetatiles:
08D02 22 51 52 28                     .db $22, $51, $52, $28
08D06 88                              .db $88 ;used only by row of bricks object
08D07                           	  
08D07                           CustomMTObject:
08D07 BD 40 05                  	  lda ExtendedMetatile,x
08D0A C9 36                     	  cmp #$36
08D0C F0 34                     	  beq SidewayPipeRight
08D0E C9 20                     	  cmp #$20
08D10 F0 69                     	  beq SidewayPipeLeft
08D12 48                        	  pha
08D13 20 C4 8F                  	  jsr ChkLrgObjLength        ;get row number, load length
08D16 BC 50 05                  	  ldy ExtendedHeight,x
08D19 84 06                     	  sty $06
08D1B BD 30 05                  	  lda ExtendedLength,x
08D1E AA                        	  tax
08D1F 68                        	  pla
08D20 C9 1D                     	  cmp #$1d
08D22 F0 07                     	  beq SidewayPipeShaft
08D24 C9 90                     	  cmp #$90
08D26 F0 0E                     	  beq WaterXD
08D28 4C 8D 8F                  	  jmp RenderUnderPart
08D2B                           SidewayPipeShaft:
08D2B A0 00                     	  ldy #$00
08D2D 20 8D 8F                  	  jsr RenderUnderPart
08D30 C8                        	  iny
08D31                           	  ;lda AreaType
08D31                           	  ;bne +
08D31 A9 20                     	  lda #$20
08D33 4C 8D 8F                  	  jmp RenderUnderPart
08D36                           WaterXD:
08D36 A9 90                     	  lda #$90
08D38 9D A1 06                        sta MetatileBuffer,x
08D3B 88                        	  dey
08D3C E8                        	  inx
08D3D A9 91                           lda #$91
08D3F 4C 8D 8F                  	  jmp RenderUnderPart
08D42                           SidewayPipeRight:
08D42 20 C4 8F                  	  jsr ChkLrgObjLength
08D45 84 06                     	  sty $06
08D47 90 05                     	  bcc +
08D49 A0 00                     	  ldy #$00
08D4B 4C 50 8D                  	  jmp ++
08D4E A0 02                     +:	  ldy #$02
08D50                           ++:
08D50 BD 30 05                  	  lda ExtendedLength,x
08D53 AA                        	  tax
08D54 AD 4E 07                  	  lda AreaType
08D57 D0 0D                     	  bne +
08D59 B9 77 8D                  	  lda webos2,y
08D5C 9D A1 06                        sta MetatileBuffer,x
08D5F B9 78 8D                  	  lda webos2+1,y
08D62 9D A2 06                  	  sta MetatileBuffer+1,x
08D65 60                        	  rts
08D66 B9 73 8D                  +:    lda webos,y
08D69 9D A1 06                        sta MetatileBuffer,x
08D6C B9 74 8D                  	  lda webos+1,y
08D6F 9D A2 06                  	  sta MetatileBuffer+1,x
08D72                           	  ;dec AreaObjectLength,x
08D72 60                        	  rts
08D73                           webos:
08D73 36 37                     	  .db $36, $37
08D75 1D 20                     	  .db $1d, $20
08D77                           webos2:
08D77 36 37                     	  .db $36, $37
08D79 1D 3E                     	  .db $1d, $3e
08D7B                           SidewayPipeLeft:
08D7B 20 C4 8F                  	  jsr ChkLrgObjLength
08D7E 84 06                     	  sty $06
08D80 F0 05                     	  beq +
08D82 A0 02                     	  ldy #$02
08D84 4C 89 8D                  	  jmp ++
08D87 A0 00                     +:	  ldy #$00
08D89                           ++:
08D89 BD 30 05                  	  lda ExtendedLength,x
08D8C AA                        	  tax
08D8D AD 4E 07                  	  lda AreaType
08D90 D0 0D                     	  bne +
08D92 B9 77 8D                  	  lda webos2,y
08D95 9D A1 06                        sta MetatileBuffer,x
08D98 B9 78 8D                  	  lda webos2+1,y
08D9B 9D A2 06                  	  sta MetatileBuffer+1,x
08D9E 60                        	  rts
08D9F B9 73 8D                  +:	  lda webos,y
08DA2 9D A1 06                        sta MetatileBuffer,x
08DA5 B9 74 8D                  	  lda webos+1,y
08DA8 9D A2 06                  	  sta MetatileBuffer+1,x
08DAB                           	  ;dec AreaObjectLength,x
08DAB 60                        	  rts
08DAC                           RowOfBricks:
08DAC AC 4E 07                              ldy AreaType           ;load area type obtained from area offset pointer
08DAF AD 43 07                              lda CloudTypeOverride  ;check for cloud type override
08DB2 F0 02                                 beq DrawBricks
08DB4 A0 04                                 ldy #$04               ;if cloud type, override area type
08DB6 B9 02 8D                  DrawBricks: lda BrickMetatiles,y   ;get appropriate metatile
08DB9 4C C2 8D                              jmp GetRow             ;and go render it
08DBC                           
08DBC                           RowOfSolidBlocks:
08DBC AC 4E 07                           ldy AreaType               ;load area type obtained from area offset pointer
08DBF B9 FE 8C                           lda SolidBlockMetatiles,y  ;get metatile
08DC2 48                        GetRow:  pha                        ;store metatile here
08DC3 20 C4 8F                           jsr ChkLrgObjLength        ;get row number, load length
08DC6 A6 07                     DrawRow: ldx $07
08DC8 A0 00                              ldy #$00                   ;set vertical height of 1
08DCA 68                                 pla
08DCB 4C 8D 8F                           jmp RenderUnderPart        ;render object
08DCE                           
08DCE                           ColumnOfBricks:
08DCE                                 ;ldy AreaType          ;load area type obtained from area offset
08DCE                                 ;lda BrickMetatiles,y  ;get metatile (no cloud override as for row)
08DCE                                 ;jmp GetRow2
08DCE BD 40 05                  	  lda ExtendedMetatile,x
08DD1 48                        	  pha
08DD2 8A                        	  txa
08DD3 48                        	  pha
08DD4 20 C4 8F                  	  jsr ChkLrgObjLength
08DD7 90 12                     	  bcc +
08DD9 EE 2C 07                  	  inc AreaDataOffset
08DDC AC 2C 07                  	  ldy AreaDataOffset
08DDF 68                        	  pla
08DE0 AA                        	  tax
08DE1 68                        	  pla
08DE2 88                        	  dey
08DE3 B1 D9                     	  lda (AreaData),y
08DE5 9D 40 05                  	  sta ExtendedMetatile,x	  
08DE8 4C C2 8D                  	  jmp GetRow
08DEB 68                        +:	  pla
08DEC 68                        	  pla
08DED 4C C2 8D                        jmp GetRow
08DF0                           
08DF0                           ColumnOfSolidBlocks:
08DF0 AC 4E 07                           ldy AreaType               ;load area type obtained from area offset
08DF3 B9 FE 8C                           lda SolidBlockMetatiles,y  ;get metatile
08DF6 48                        GetRow2: pha                        ;save metatile to stack for now
08DF7 20 D3 8F                           jsr GetLrgObjAttrib        ;get length and row
08DFA 68                                 pla                        ;restore metatile
08DFB A6 07                              ldx $07                    ;get starting row
08DFD 4C 8D 8F                           jmp RenderUnderPart        ;now render the column
08E00                           
08E00                           ;--------------------------------
08E00                           
08E00                           BulletBillCannon:
08E00 20 D3 8F                               jsr GetLrgObjAttrib      ;get row and length of bullet bill cannon
08E03 A6 07                                  ldx $07                  ;start at first row
08E05 A9 64                                  lda #$64                 ;render bullet bill cannon
08E07 9D A1 06                               sta MetatileBuffer,x
08E0A E8                                     inx
08E0B 88                                     dey                      ;done yet?
08E0C 30 0E                                  bmi SetupCannon
08E0E A9 65                                  lda #$65                 ;if not, render middle part
08E10 9D A1 06                               sta MetatileBuffer,x
08E13 E8                                     inx
08E14 88                                     dey                      ;done yet?
08E15 30 05                                  bmi SetupCannon
08E17 A9 66                                  lda #$66                 ;if not, render bottom until length expires
08E19 20 8D 8F                               jsr RenderUnderPart
08E1C AE 6A 04                  SetupCannon: ldx Cannon_Offset        ;get offset for data used by cannons and whirlpools
08E1F 20 EB 8F                               jsr GetAreaObjYPosition  ;get proper vertical coordinate for cannon
08E22 9D 77 04                               sta Cannon_Y_Position,x  ;and store it here
08E25 AD 25 07                               lda CurrentPageLoc
08E28 9D 6B 04                               sta Cannon_PageLoc,x     ;store page number for cannon here
08E2B 20 E3 8F                               jsr GetAreaObjXPosition  ;get proper horizontal coordinate for cannon
08E2E 9D 71 04                               sta Cannon_X_Position,x  ;and store it here
08E31 E8                                     inx
08E32 E0 05                                  cpx #$05                 ;increment and check offset
08E34 90 02                                  bcc StrCOffset           ;if not yet reached sixth cannon, branch to save offset
08E36 A2 00                                  ldx #$00                 ;otherwise initialize it
08E38 8E 6A 04                  StrCOffset:  stx Cannon_Offset        ;save new offset and leave
08E3B 60                                     rts
08E3C                           
08E3C                           ;--------------------------------
08E3C                           
08E3C                           StaircaseHeightData:
08E3C 07 07 06 05 04 03 02 01..       .db $07, $07, $06, $05, $04, $03, $02, $01, $00
08E45                           
08E45                           StaircaseRowData:
08E45 03 03 04 05 06 07 08 09..       .db $03, $03, $04, $05, $06, $07, $08, $09, $0a
08E4E                           
08E4E                           StaircaseObject:
08E4E 20 C4 8F                             jsr ChkLrgObjLength       ;check and load length
08E51 90 05                                bcc NextStair             ;if length already loaded, skip init part
08E53 A9 09                                lda #$09                  ;start past the end for the bottom
08E55 8D 34 07                             sta StaircaseControl      ;of the staircase
08E58 CE 34 07                  NextStair: dec StaircaseControl      ;move onto next step (or first if starting)
08E5B AC 34 07                             ldy StaircaseControl
08E5E BE 45 8E                             ldx StaircaseRowData,y    ;get starting row and height to render
08E61 B9 3C 8E                             lda StaircaseHeightData,y
08E64 A8                                   tay
08E65 A9 61                                lda #$61                  ;now render solid block staircase
08E67 4C 8D 8F                             jmp RenderUnderPart
08E6A                           
08E6A                           ;--------------------------------
08E6A                           
08E6A                           Jumpspring:
08E6A EE 2C 07                        inc AreaDataOffset
08E6D AC 2C 07                  	  ldy AreaDataOffset
08E70 88                        	  dey
08E71 B1 D9                           lda (AreaData),y			 ;load third byte and store here
08E73 48                        	  pha
08E74 20 D3 8F                  	  jsr GetLrgObjAttrib
08E77 A6 07                           ldx $07
08E79 68                              pla
08E7A 9D A1 06                        sta MetatileBuffer,x
08E7D                           ExitJumpspring:
08E7D 60                              rts
08E7E                           
08E7E                           ;--------------------------------
08E7E                           ;$07 - used to save ID of brick object
08E7E                           
08E7E                           QuestionBlock:
08E7E A4 00                           ldy $00    ;get value saved from area parser routine ;get value from level decoder routine
08E80 AD 4E 07                  	  lda AreaType
08E83 C9 03                     	  cmp #$03
08E85 D0 06                     	  bne +
08E87 C0 02                     	  cpy #$02
08E89 D0 02                     	  bne +
08E8B A0 11                     ++:	  ldy #$11
08E8D 4C 07 8F                  +:	  jmp DrawQBlk        ;go to render it
08E90                           
08E90                           HiddenCoin:
08E90 A9 5F                     	  lda #$5f
08E92 AC 4E 07                  	  ldy AreaType
08E95 F0 07                     	  beq ++
08E97 C0 03                     	  cpy #$03
08E99 D0 05                     	  bne +
08E9B A9 29                     	  lda #$29
08E9D 2C                        	  .db $2c
08E9E A9 38                     ++:	  lda #$38
08EA0 48                        +:	  pha
08EA1 4C C9 8E                  	  jmp DHB
08EA4                           	  
08EA4                           HiddenMushRoom:
08EA4 A9 6F                     	  lda #$6f
08EA6 AC 4E 07                  	  ldy AreaType
08EA9 F0 07                     	  beq ++
08EAB C0 03                     	  cpy #$03
08EAD D0 05                     	  bne +
08EAF A9 2B                     	  lda #$2b
08EB1 2C                        	  .db $2c
08EB2 A9 3A                     ++:	  lda #$3a
08EB4 48                        +:	  pha
08EB5 4C C9 8E                  	  jmp DHB
08EB8                           	  
08EB8                           Hidden1UpBlock:
08EB8 A9 60                     	  lda #$60
08EBA AC 4E 07                  	  ldy AreaType
08EBD F0 07                     	  beq ++
08EBF C0 03                     	  cpy #$03
08EC1 D0 05                     	  bne +
08EC3 A9 2A                     	  lda #$2a
08EC5 2C                        	  .db $2c
08EC6 A9 39                     ++:	  lda #$39
08EC8 48                        +:	  pha
08EC9 20 D3 8F                  DHB:  jsr GetLrgObjAttrib
08ECC 4C C6 8D                  	  jmp DrawRow
08ECF                           QuestionBlock1Up:
08ECF A9 C7                     	  lda #$c7
08ED1 4C E9 8E                  	  jmp +
08ED4                           QuestionBlockStar:
08ED4 A9 C6                     	  lda #$c6
08ED6 4C E9 8E                  	  jmp +
08ED9                           HiddenStar:
08ED9 A9 73                     	  lda #$73
08EDB AC 4E 07                  	  ldy AreaType
08EDE F0 07                     	  beq ++
08EE0 C0 03                     	  cpy #$03
08EE2 D0 05                     	  bne +
08EE4 A9 30                     	  lda #$30
08EE6 2C                        	  .db $2c
08EE7 A9 3B                     ++:	  lda #$3b
08EE9 48                        +:	  pha
08EEA 4C C9 8E                  	  jmp DHB
08EED                           BrickWithCoins:
08EED A9 00                           lda #$00                 ;initialize multi-coin timer flag
08EEF 8D BC 06                        sta BrickCoinTimerFlag
08EF2 4C 2F 8F                  	  jmp BrickWithCoins2
08EF5                           BrickWithItem:
08EF5 A4 00                               ldy $00   			      ;get value saved from area parser routine         ;save area object ID
08EF7 84 07                               sty $07              
08EF9 A9 00                               lda #$00                    ;load default adder for bricks with lines
08EFB AC 4E 07                            ldy AreaType                ;check level type for ground level
08EFE 88                                  dey
08EFF F0 02                               beq BWithL                  ;if ground type, do not start with 5
08F01 A9 07                               lda #$07                    ;otherwise use adder for bricks without lines
08F03 18                        BWithL:   clc                         ;add object ID to adder
08F04 65 07                               adc $07
08F06 A8                                  tay                         ;use as offset for metatile
08F07 B9 31 81                  DrawQBlk: lda BrickQBlockMetatiles1,y ;get appropriate metatile for brick (question block)
08F0A 48                                  pha                         ;if branched to here from question block routine)
08F0B 20 D3 8F                            jsr GetLrgObjAttrib         ;get row from location byte
08F0E 4C C6 8D                            jmp DrawRow                 ;now render the object
08F11                           
08F11                           ;GetAreaObjectID:
08F11                                         ;ldy $00    ;get value saved from area parser routine
08F11                                         ;tay        ;save to Y
08F11                           ;ExitDecBlock: rts
08F11                           Bricks:
08F11 55 55 5A 31               BrickPowerUp: .db $55, $55, $5a, $31
08F15 56 56 5B 32               BrickVine:	  .db $56, $56, $5b, $32
08F19 57 57 5C 33               BrickStar:	  .db $57, $57, $5c, $33
08F1D 58 58 5D 34               BrickCoins:	  .db $58, $58, $5d, $34
08F21 59 59 5E 35               Brick1up:	  .db $59, $59, $5e, $35
08F25                           
08F25                           BrickWithVine:
08F25 A0 04                     			ldy #$04
08F27 4C 3B 8F                  			jmp +
08F2A                           BrickWithStar:
08F2A A0 08                     			ldy #$08
08F2C 4C 3B 8F                  			jmp +
08F2F                           BrickWithCoins2:
08F2F A0 0C                     			ldy #$0c
08F31 4C 3B 8F                  			jmp +
08F34                           BrickWith1up:
08F34 A0 10                     			ldy #$10
08F36 4C 3B 8F                  			jmp +
08F39                           BrickWithPowerUp:
08F39 A0 00                     			ldy #$00
08F3B 98                        +:			tya
08F3C                           		    add AreaType
08F3C 18                        	clc
08F3D 6D 4E 07                  	adc AreaType ;apparently this sometimes refuses to work correctly lmao
08F40 A8                        			tay
08F41 B9 11 8F                  			lda Bricks,y
08F44 48                        			pha
08F45 4C C9 8E                  			jmp DHB
08F48                           ;--------------------------------
08F48                           
08F48                           HoleMetatiles:
08F48 91 00 00 00                     .db $91, $00, $00, $00
08F4C                           
08F4C                           Hole_Empty:
08F4C 20 C4 8F                              jsr ChkLrgObjLength          ;get lower nybble and save as length
08F4F 90 32                                 bcc NoWhirlP                 ;skip this part if length already loaded
08F51 AD 04 07                              lda SwimmingFlag             ;check for water type level
08F54 F0 2D                                 beq NoWhirlP                 ;if not water type, skip this part
08F56 AD 4E 07                  			lda AreaType
08F59 D0 28                     			bne NoWhirlP
08F5B AE 6A 04                              ldx Whirlpool_Offset         ;get offset for data used by cannons and whirlpools
08F5E 20 E3 8F                              jsr GetAreaObjXPosition      ;get proper vertical coordinate of where we're at
08F61 38                                    sec
08F62 E9 10                                 sbc #$10                     ;subtract 16 pixels
08F64 9D 71 04                              sta Whirlpool_LeftExtent,x   ;store as left extent of whirlpool
08F67 AD 25 07                              lda CurrentPageLoc           ;get page location of where we're at
08F6A E9 00                                 sbc #$00                     ;subtract borrow
08F6C 9D 6B 04                              sta Whirlpool_PageLoc,x      ;save as page location of whirlpool
08F6F C8                                    iny
08F70 C8                                    iny                          ;increment length by 2
08F71 98                                    tya
08F72 0A                                    asl                          ;multiply by 16 to get size of whirlpool
08F73 0A                                    asl                          ;note that whirlpool will always be
08F74 0A                                    asl                          ;two blocks bigger than actual size of hole
08F75 0A                                    asl                          ;and extend one block beyond each edge
08F76 9D 77 04                              sta Whirlpool_Length,x       ;save size of whirlpool here
08F79 E8                                    inx
08F7A E0 05                                 cpx #$05                     ;increment and check offset
08F7C 90 02                                 bcc StrWOffset               ;if not yet reached fifth whirlpool, branch to save offset
08F7E A2 00                                 ldx #$00                     ;otherwise initialize it
08F80 8E 6A 04                  StrWOffset: stx Whirlpool_Offset         ;save new offset here
08F83 AE 4E 07                  NoWhirlP:   ldx AreaType                 ;get appropriate metatile, then
08F86 BD 48 8F                              lda HoleMetatiles,x          ;render the hole proper
08F89 A2 08                                 ldx #$08
08F8B A0 0F                                 ldy #$0f                     ;start at ninth row and go to bottom, run RenderUnderPart
08F8D                           
08F8D                           ;--------------------------------
08F8D                           
08F8D                           RenderUnderPart:
08F8D 8C 35 07                               sty AreaObjectHeight  ;store vertical length to render
08F90 BC A1 06                               ldy MetatileBuffer,x  ;check current spot to see if there's something
08F93 F0 20                                  beq DrawThisRow       ;we need to keep, if nothing, go ahead
08F95 C0 17                                  cpy #$17
08F97 F0 1F                                  beq WaitOneRow        ;if middle part (tree ledge), wait until next row
08F99 C0 1A                                  cpy #$1a
08F9B F0 1B                                  beq WaitOneRow        ;if middle part (mushroom ledge), wait until next row
08F9D C0 C0                                  cpy #$c0
08F9F F0 14                                  beq DrawThisRow       ;if question block w/ coin, overwrite
08FA1 C0 C0                                  cpy #$c0
08FA3 B0 13                                  bcs WaitOneRow        ;if any other metatile with palette 3, wait until next row
08FA5 C0 8A                     			 cpy #$8a
08FA7 F0 0F                     			 beq WaitOneRow
08FA9 C0 54                                  cpy #$54
08FAB D0 08                                  bne DrawThisRow       ;if cracked rock terrain, overwrite
08FAD C9 50                                  cmp #$50
08FAF F0 07                                  beq WaitOneRow        ;if stem top of mushroom, wait until next row
08FB1 C9 4C                     			 cmp #$4c
08FB3 F0 03                     			 beq WaitOneRow
08FB5 9D A1 06                  DrawThisRow: sta MetatileBuffer,x  ;render contents of A from routine that called this
08FB8 E8                        WaitOneRow:  inx
08FB9 E0 0D                                  cpx #$0d              ;stop rendering if we're at the bottom of the screen
08FBB B0 06                                  bcs ExitUPartR
08FBD AC 35 07                               ldy AreaObjectHeight  ;decrement, and stop rendering if there is no more length
08FC0 88                                     dey
08FC1 10 CA                                  bpl RenderUnderPart
08FC3 60                        ExitUPartR:  rts
08FC4                           
08FC4                           ;--------------------------------
08FC4                           
08FC4                           ChkLrgObjLength:
08FC4 20 D3 8F                          jsr GetLrgObjAttrib     ;get row location and size (length if branched to from here)
08FC7                           
08FC7                           ChkLrgObjFixedLength:
08FC7 BD 10 05                          lda AreaObjectLength,x  ;check for set length counter
08FCA 18                                clc                     ;clear carry flag for not just starting
08FCB 10 05                             bpl LenSet              ;if counter not set, load it, otherwise leave alone
08FCD 98                                tya                     ;save length into length counter
08FCE 9D 10 05                          sta AreaObjectLength,x
08FD1 38                                sec                     ;set carry flag if just starting
08FD2 60                        LenSet: rts
08FD3                           
08FD3                           
08FD3                           GetLrgObjAttrib:
08FD3 BC 00 05                        ldy AreaObjOffsetBuffer,x ;get offset saved from area obj decoding routine
08FD6 B1 D9                           lda (AreaData),y          ;get first byte of level object
08FD8 29 0F                           and #%00001111
08FDA 85 07                           sta $07                   ;save row location
08FDC C8                              iny
08FDD B1 D9                           lda (AreaData),y          ;get next byte, save lower nybble (length or height)
08FDF 29 0F                           and #%00001111            ;as Y, then leave
08FE1 A8                              tay
08FE2 60                              rts
08FE3                           
08FE3                           ;--------------------------------
08FE3                           
08FE3                           GetAreaObjXPosition:
08FE3 AD 26 07                        lda CurrentColumnPos    ;multiply current offset where we're at by 16
08FE6 0A                              asl                     ;to obtain horizontal pixel coordinate
08FE7 0A                              asl
08FE8 0A                              asl
08FE9 0A                              asl
08FEA 60                              rts
08FEB                           
08FEB                           ;--------------------------------
08FEB                           
08FEB                           GetAreaObjYPosition:
08FEB A5 07                           lda $07  ;multiply value by 16
08FED 0A                              asl
08FEE 0A                              asl      ;this will give us the proper vertical pixel coordinate
08FEF 0A                              asl
08FF0 0A                              asl
08FF1 18                              clc
08FF2 69 20                           adc #32  ;add 32 pixels for the status bar
08FF4 60                              rts
08FF5                           
08FF5                           ;-------------------------------------------------------------------------------------
08FF5                           ;$06-$07 - used to store block buffer address used as indirect
08FF5                           
08FF5                           ;BlockBufferAddr:
08FF5                           ;      .db <Block_Buffer_1, <Block_Buffer_2
08FF5                           ;      .db >Block_Buffer_1, >Block_Buffer_2
08FF5                           
08FF5                           ;GetBlockBufferAddr:
08FF5                           ;      pha                      ;take value of A, save
08FF5                            ;     lsr                      ;move high nybble to low
08FF5                            ;     lsr
08FF5                            ;     lsr
08FF5                            ;     lsr
08FF5                            ;     tay                      ;use nybble as pointer to high byte
08FF5                             ;    lda BlockBufferAddr+2,y  ;of indirect here
08FF5                             ;    sta $07
08FF5                             ;    pla
08FF5                             ;    and #%00001111           ;pull from stack, mask out high nybble
08FF5                             ;    clc
08FF5                             ;    adc BlockBufferAddr,y    ;add to low byte
08FF5                             ;    sta $06                  ;store here and leave
08FF5                             ;    rts
08FF5                           
08FF5                           ;-------------------------------------------------------------------------------------
08FF5                           WarpZoneNumbers1:
08FF5 04 03 02 00                 .db $04, $03, $02, $00         ; world 1-2
08FF9 24 05 09 00                 .db $24, $05, $09, $00         ; warp zone responsible for minus world
08FFD 08 07 06 00                 .db $08, $07, $06, $00         ; world 4-2
09001 33 05 33 00                 .db $33, $05, $33, $00         ; world 4-2 to world 5
09005                           HandlePipeEntry:
09005 A5 0B                              lda Up_Down_Buttons       ;check saved controller bits from earlier
09007 29 04                              and #%00000100            ;for pressing down
09009 F0 61                              beq ExPipeE               ;if not pressing down, branch to leave
0900B A5 00                              lda $00
0900D C9 11                              cmp #$11                  ;check right foot metatile for warp pipe right metatile
0900F D0 5B                              bne ExPipeE               ;branch to leave if not found
09011 A5 01                              lda $01
09013 C9 10                              cmp #$10                  ;check left foot metatile for warp pipe left metatile
09015 D0 55                              bne ExPipeE               ;branch to leave if not found
09017 A9 30                              lda #$30
09019 8D DE 06                           sta ChangeAreaTimer       ;set timer for change of area
0901C A9 01                     		 lda #$01
0901E 8D 7C 60                  		 sta DontDecPT
09021 A9 03                              lda #$03
09023 85 0E                              sta GameEngineSubroutine  ;set to run vertical pipe entry routine on next frame
09025 A9 10                              lda #Sfx_PipeDown_Injury
09027 85 F0                              sta Square1SoundQueue     ;load pipedown/injury sound
09029 A9 20                              lda #%00100000
0902B 8D C4 03                           sta Player_SprAttrib      ;set background priority bit in player's attributes
0902E AD D6 06                           lda WarpZoneControl       ;check warp zone control
09031 F0 39                              beq ExPipeE               ;branch to leave if none found
09033 29 03                              and #%00000011            ;mask out all but 2 LSB
09035 0A                                 asl
09036 0A                                 asl                       ;multiply by four
09037 AA                                 tax                       ;save as offset to warp zone numbers (starts at left pipe)
09038 A5 78                              lda Player_X_Position     ;get player's horizontal position
0903A C9 60                              cmp #$60      
0903C 90 06                              bcc GetWNum               ;if player at left, not near middle, use offset and skip ahead
0903E E8                                 inx                       ;otherwise increment for middle pipe
0903F C9 A0                              cmp #$a0      
09041 90 01                              bcc GetWNum               ;if player at middle, but not too far right, use offset and skip
09043 E8                                 inx                       ;otherwise increment for last pipe
09044 BC F5 8F                  GetWNum: ldy WarpZoneNumbers1,x     ;get warp zone numbers
09047                                    if MINUS_WORLD_FIX == 1
09047                                       cpy #$24
09047                                       beq MinusWorld
09047                                    endif
09047 88                                 dey                       ;decrement for use as world number
09048 8C 5F 07                           sty WorldNumber           ;store as world number and offset
0904B BE EE 9D                           ldx WorldAddrOffsets,y    ;get offset to where this world's area offsets are
0904E BD F7 9D                           lda AreaAddrOffsets,x     ;get area offset based on world offset
09051 8D 50 07                           sta AreaPointer           ;store area offset here to be used to change areas
09054                                    if MINUS_WORLD_FIX == 1
09054                                       FinishPipeEntry:
09054                                    endif
09054 A9 80                              lda #Silence
09056 85 ED                              sta EventMusicQueue       ;silence music
09058 A9 00                              lda #$00
0905A 8D 51 07                           sta EntrancePage          ;initialize starting page number
0905D 8D 60 07                           sta AreaNumber            ;initialize area number used for area address offset
09060 8D 5C 07                           sta LevelNumber           ;initialize level number used for world display
09063 8D 52 07                           sta AltEntranceControl    ;initialize mode of entry
09066 EE 5D 07                           inc Hidden1UpFlag         ;set flag for hidden 1-up blocks
09069 EE 57 07                           inc FetchNewGameTimerFlag ;set flag to load new game timer
0906C 60                        ExPipeE: rts
0906D                           
0906D                           HandleUpPipeEntry:		 
0906D A5 0B                     		 lda Up_Down_Buttons
0906F 29 08                     		 and #Up_Dir
09071 F0 25                     		 beq ExPipeU
09073 AD 57 60                  		 lda tempC
09076 C9 2E                              cmp #$2e                  ;check right foot metatile for warp pipe right metatile
09078 D0 1E                              bne ExPipeU               ;branch to leave if not found
0907A AD 58 60                  		 lda tempD	
0907D C9 2F                     		 cmp #$2f
0907F D0 17                     		 bne ExPipeU
09081 A9 30                     		 lda #$30
09083 8D DE 06                           sta ChangeAreaTimer       ;set timer for change of area
09086 A9 01                     		 lda #$01
09088 8D 7C 60                  		 sta DontDecPT
0908B A9 0D                              lda #$0d
0908D 85 0E                              sta GameEngineSubroutine  ;set to run vertical pipe entry routine on next frame
0908F A9 10                              lda #Sfx_PipeDown_Injury
09091 85 F0                              sta Square1SoundQueue     ;load pipedown/injury sound
09093 A9 20                              lda #%00100000
09095 8D C4 03                           sta Player_SprAttrib      ;set background priority bit in player's attributes
09098 A9 00                     ExPipeU: lda #$00
0909A 8D 57 60                  		 sta tempC
0909D 8D 58 60                  		 sta tempD
090A0 60                        		 rts     
090A1                           
090A1                           ProcLoopCommand:
090A1                                     ;jmp ChkEnemyFrenzy
090A1                           ;--------------------------------
090A1                           
090A1                           ChkEnemyFrenzy:
090A1 A9 87                           lda #%10000111
090A3 8D C5 05                  	 sta Old8000
090A6 8D 00 80                   sta $8000
090A9 AD 06 7E                  	lda LevelBank
090AC 18                        	clc
090AD 69 0A                     	adc #FirstLevelBank
090AF                           	
090AF 8D 01 80                  	sta $8001
090B2 AD CD 06                  	  lda EnemyFrenzyQueue  ;check for enemy object in frenzy queue
090B5 F0 10                           beq ProcessEnemyData  ;if not, skip this part
090B7                           	  if shufflelevels == 1
090B7                           		cmp #$36
090B7                           		bcc +
090B7                           		lda #$00
090B7                           +:
090B7                           	  endif
090B7 95 15                           sta Enemy_ID,x        ;store as enemy object identifier here
090B9 A9 01                           lda #$01
090BB 95 0F                           sta Enemy_Flag,x      ;activate enemy object flag
090BD A9 00                           lda #$00
090BF 95 1C                           sta Enemy_State,x     ;initialize state and frenzy queue
090C1 8D CD 06                        sta EnemyFrenzyQueue
090C4 4C 03 92                        jmp InitEnemyObject   ;and then jump to deal with this enemy
090C7                           
090C7                           ;--------------------------------
090C7                           ;$06 - used to hold page location of extended right boundary
090C7                           ;$07 - used to hold high nybble of position of extended right boundary
090C7                           ProcessEnemyData:
090C7 AC A2 60                          ldy scrolldir
090CA F0 13                     		beq +
090CC AC 46 07                  		ldy StarFlagTaskControl
090CF D0 0E                     		bne +
090D1 AC 39 07                  		ldy EnemyDataOffset      ;get offset of enemy object data
090D4                           		if ExLVLID == 1
090D4 A9 00                     			lda #$00
090D6 8D 5B 60                  			sta Tortilla
090D9                           		endif
090D9 B1 DB                             lda (EnemyData),y        ;load first byte
090DB C9 FF                             cmp #$ff                 ;check for EOD terminator
090DD D0 03                             bne CheckEndofBuffer
090DF 4C EB 91                  +:      jmp CheckFrenzyBuffer    ;if found, jump to check frenzy buffer, otherwise
090E2                           
090E2                           CheckEndofBuffer:
090E2                           		if ExLVLID == 1
090E2 EE 5B 60                  			inc Tortilla
090E5                           		endif
090E5 29 0F                     		and #%00001111           ;check for special row $0e
090E7 C9 0E                             cmp #$0e
090E9 F0 15                             beq CheckRightBounds     ;if found, branch, otherwise
090EB                           		if ExLVLID == 1
090EB CE 5B 60                  			dec Tortilla
090EE                           		endif
090EE E0 05                             cpx #$05                 ;check for end of buffer
090F0 90 0E                             bcc CheckRightBounds     ;if not at end of buffer, branch
090F2 C8                                iny 					 ;get identifier back and use as offset for jump engine
090F3 B1 DB                             lda (EnemyData),y        ;check for specific value here
090F5 29 7F                             and #%01111111           ;not sure what this was intended for, exactly
090F7 C9 2E                             cmp #$2e                 ;this part is quite possibly residual code
090F9 F0 05                             beq CheckRightBounds     ;but it has the effect of keeping enemies out of
090FB C9 30                     		cmp #$30
090FD F0 01                     		beq CheckRightBounds
090FF 60                        		rts                      ;the sixth slot
09100                           CheckRightBounds:
09100 AD 1D 07                  		lda ScreenRight_X_Pos    ;add 48 to pixel coordinate of right boundary
09103 18                                clc
09104 69 30                             adc #$30
09106 29 F0                             and #%11110000           ;store high nybble
09108 85 07                             sta $07
0910A AD 1B 07                          lda ScreenRight_PageLoc  ;add carry to page location of right boundary
0910D 69 00                             adc #$00
0910F 85 06                             sta $06                  ;store page location + carry
09111 AC 39 07                  		ldy EnemyDataOffset
09114 C8                        		iny
09115                           		if ExLVLID == 1
09115 AD 5B 60                  			lda Tortilla
09118 F0 0C                     			beq +
0911A CE 5B 60                  			dec Tortilla
0911D C8                        			iny
0911E C8                        			iny
0911F B1 DB                     			lda (EnemyData),y
09121 88                        			dey
09122 88                        			dey
09123 4C 28 91                  			jmp ++
09126 B1 DB                     +:      	lda (EnemyData),y        ;if MSB of enemy object is clear, branch to check for row $0f
09128                           ++:
09128                           		else 
09128                           			lda (EnemyData),y        ;if MSB of enemy object is clear, branch to check for row $0f
09128                           		endif
09128 10 0B                             bpl CheckPageCtrlRow
0912A AD 3B 07                          lda EnemyObjectPageSel   ;if page select already set, do not set again
0912D D0 06                             bne CheckPageCtrlRow
0912F EE 3B 07                          inc EnemyObjectPageSel   ;otherwise, if MSB is set, set page select 
09132 EE 3A 07                          inc EnemyObjectPageLoc   ;and increment page control
09135                           
09135                           CheckPageCtrlRow:
09135 88                                dey
09136 B1 DB                             lda (EnemyData),y        ;reread first byte
09138 29 0F                             and #$0f
0913A C9 0F                             cmp #$0f                 ;check for special row $0f
0913C D0 28                             bne PositionEnemyObj     ;if not found, branch to position enemy object
0913E AD 3B 07                          lda EnemyObjectPageSel   ;if page select set,
09141 D0 23                             bne PositionEnemyObj     ;branch without reading second byte
09143 C8                                iny
09144 B1 DB                             lda (EnemyData),y        ;otherwise, get second byte, mask out 2 MSB
09146 29 7F                             and #%01111111
09148 8D 3A 07                          sta EnemyObjectPageLoc   ;store as page control for enemy object data
0914B AD 39 07                          lda EnemyDataOffset
0914E 18                        		clc
0914F 69 02                     		adc #$02
09151 8D 39 07                  		sta EnemyDataOffset
09154 A5 DC                     		lda EnemyDataHigh
09156 69 00                     		adc #$00
09158 85 DC                     		sta EnemyDataHigh
0915A EE 3B 07                          inc EnemyObjectPageSel   ;set page select for enemy object data and 
0915D 4C A1 90                          jmp ProcLoopCommand      ;jump back to process loop commands again
09160 4C 36 92                  CheckThreeBytes2: jmp CheckThreeBytes
09163 4C 0F 92                  ParseRow0e1:	  jmp ParseRow0e
09166                           PositionEnemyObj:
09166 AD 3A 07                          lda EnemyObjectPageLoc   ;store page control as page location
09169 95 60                             sta Enemy_PageLoc,x      ;for enemy object
0916B B1 DB                     		lda (EnemyData),y        ;get first byte of enemy object
0916D 29 F0                             and #%11110000
0916F 95 79                             sta Enemy_X_Position,x   ;store column position
09171 B5 60                     		lda Enemy_PageLoc,x      ;without subtracting, then subtract borrow
09173 CD 51 07                  		cmp EntrancePage
09176 F0 32                     		beq +++
09178 B5 79                     		lda Enemy_X_Position,x
0917A CD 1D 07                          cmp ScreenRight_X_Pos    ;check column position against right boundary
0917D B5 60                             lda Enemy_PageLoc,x      ;without subtracting, then subtract borrow
0917F ED 1B 07                  		sbc ScreenRight_PageLoc  ;from page location
09182 B0 1C                             bcs CheckRightExtBounds  ;if enemy object beyond or at boundary, branch
09184 B1 DB                             lda (EnemyData),y
09186 29 0F                             and #%00001111           ;check for special row $0e
09188 C9 0E                             cmp #$0e                 ;if found, jump elsewhere
0918A F0 D7                             beq ParseRow0e1
0918C C8                                iny
0918D B1 DB                     		lda (EnemyData),y
0918F 29 7F                     		and #%01111111
09191 C9 2E                     		cmp #PowerUpObject
09193 F0 04                     		beq ++
09195 C9 40                     		cmp #Sign
09197 D0 04                     		bne +
09199 EE 39 07                  ++:		inc EnemyDataOffset
0919C                           		;lda Enemy_PageLoc,x
0919C                           		;cmp ScreenRight_PageLoc
0919C                           		;bne CheckRightExtBounds
0919C 60                        		rts
0919D 4C 36 92                  +:      jmp CheckThreeBytes      ;if not found, unconditional jump
091A0                           
091A0                           CheckRightExtBounds:
091A0 A5 07                             lda $07                  ;check right boundary + 48 against
091A2 D5 79                             cmp Enemy_X_Position,x   ;column position without subtracting,
091A4 A5 06                             lda $06                  ;then subtract borrow from page control temp
091A6 F5 60                             sbc Enemy_PageLoc,x      ;plus carry
091A8 90 41                             bcc CheckFrenzyBuffer    ;if enemy object beyond extended boundary, branch
091AA                           +++:
091AA A9 01                     -:      lda #$01                 ;store value in vertical high byte
091AC 95 A8                             sta Enemy_Y_HighPos,x
091AE B1 DB                             lda (EnemyData),y        ;get first byte again
091B0 0A                                asl                      ;multiply by four to get the vertical
091B1 0A                                asl                      ;coordinate
091B2 0A                                asl
091B3 0A                                asl
091B4 95 C1                             sta Enemy_Y_Position,x
091B6 C9 E0                             cmp #$e0                 ;do one last check for special row $0e
091B8 F0 55                             beq ParseRow0e           ;(necessary if branched to $c1cb)
091BA C8                                iny
091BB                                   ;lda (EnemyData),y        ;get second byte of object
091BB                                   ;and #%01000000           ;check to see if hard mode bit is set
091BB                                   ;beq CheckForEnemyGroup   ;if not, branch to check for group enemy objects
091BB                                   ;lda SecondaryHardMode    ;if set, check to see if secondary hard mode flag
091BB                                   ;beq Inc2B2                ;is on, and if not, branch to skip this object completely
091BB                           
091BB                           CheckForEnemyGroup:
091BB B1 DB                             lda (EnemyData),y      ;get second byte and mask out 2 MSB
091BD 29 7F                             and #%01111111
091BF C9 37                             cmp #$37               ;check for value below $37
091C1 90 04                             bcc BuzzyBeetleMutate
091C3 C9 3F                             cmp #$3f               ;if $37 or greater, check for value
091C5 90 45                             bcc DoGroup            ;below $3f, branch if below $3f
091C7                           
091C7                           BuzzyBeetleMutate:
091C7 C9 06                             cmp #Goomba          ;if below $37, check for goomba
091C9 D0 07                             bne StrID            ;value ($3f or more always fails)
091CB AC 6A 07                          ldy PrimaryHardMode  ;check if primary hard mode flag is set
091CE F0 02                             beq StrID            ;and if so, change goomba to buzzy beetle
091D0 A9 02                             lda #BuzzyBeetle
091D2 95 15                     StrID:  sta Enemy_ID,x       ;store enemy object number into buffer
091D4 A9 01                     		lda #$01
091D6 95 0F                             sta Enemy_Flag,x     ;set flag for enemy in buffer
091D8 20 03 92                          jsr InitEnemyObject
091DB AD 0D 7E                  		lda DontRepeat
091DE D0 05                     		bne Inc2B3
091E0 B5 0F                             lda Enemy_Flag,x     ;check to see if flag is set
091E2 D0 6A                             bne Inc2B            ;if not, leave, otherwise branch
091E4 60                                rts
091E5 CE 0D 7E                  Inc2B3: dec DontRepeat
091E8 4C 4E 92                  Inc2B2: jmp Inc2B
091EB                           CheckFrenzyBuffer:
091EB AD CB 06                  		lda EnemyFrenzyBuffer    ;if enemy object stored in frenzy buffer
091EE D0 09                             bne StrFre               ;then branch ahead to store in enemy object buffer
091F0 AD 98 03                          lda VineFlagOffset       ;otherwise check vine flag offset
091F3 C9 01                             cmp #$01
091F5 D0 14                             bne ExEPar+1		;if other value <> 1, leave
091F7 A9 2F                             lda #VineObject          ;otherwise put vine in enemy identifier
091F9 48                        StrFre: pha
091FA B5 15                     		lda Enemy_ID,x
091FC C9 30                     		cmp #FlagpoleFlagObject
091FE F0 0A                     		beq ExEPar
09200 68                        		pla
09201 95 15                     		sta Enemy_ID,x           ;store contents of frenzy buffer into enemy identifier value
09203                           
09203                           InitEnemyObject:
09203 A9 00                             lda #$00                 ;initialize enemy state
09205 95 1C                             sta Enemy_State,x
09207 4C 67 92                          jmp CheckpointEnemyID    ;jump ahead to run jump engine and subroutines
0920A 68                        ExEPar: pla
0920B 60                        		rts                      ;then leave
0920C                           
0920C                           DoGroup:
0920C 4C 4B 9A                          jmp HandleGroupEnemies   ;handle enemy group objects
0920F                           
0920F                           ParseRow0e:
0920F C8                                iny                      ;increment Y to load third byte of object
09210 C8                                iny
09211 AD 5F 07                  		lda WorldNumber
09214 29 07                     		and #%00000111
09216 8D 34 60                  		sta temp9
09219 B1 DB                             lda (EnemyData),y
0921B                           
0921B                                   if WORLD9_PIPE_FIX
0921B                                       cmp #World9              ;skip world number check if >= world 9
0921B                                       bcs W9Skip
0921B                                   endif
0921B                           		
0921B 4A                                lsr                      ;move 3 MSB to the bottom, effectively
0921C 4A                                lsr                      ;making %xxx00000 into %00000xxx
0921D 4A                                lsr
0921E 4A                                lsr
0921F 4A                                lsr
09220 CD 34 60                          cmp temp9                ;is it the same world number as we're on?
09223 D0 0E                             bne NotUse               ;if not, do not use (this allows multiple uses
09225 88                        W9Skip: dey                      ;of the same area, like the underground bonus areas)
09226 B1 DB                             lda (EnemyData),y        ;otherwise, get second byte and use as offset
09228 8D 50 07                          sta AreaPointer          ;to addresses for level and enemy object data
0922B C8                                iny
0922C B1 DB                             lda (EnemyData),y        ;get third byte again, and this time mask out
0922E 29 1F                             and #%00011111           ;the 3 MSB from before, save as page number to be
09230 8D 51 07                          sta EntrancePage         ;used upon entry to area, if area is entered
09233 4C 41 92                  NotUse: jmp Inc3B
09236                           
09236                           CheckThreeBytes:
09236 AC 39 07                  		ldy EnemyDataOffset      ;load current offset for enemy object data
09239 B1 DB                     		lda (EnemyData),y        ;get first byte
0923B 29 0F                             and #%00001111           ;check for special row $0e
0923D C9 0E                             cmp #$0e
0923F D0 0D                             bne Inc2B
09241 18                        Inc3B:  clc
09242 AD 39 07                  		lda EnemyDataOffset
09245                           		if ExLVLID == 1
09245                           			add #$04
09245 18                        	clc
09246 69 04                     	adc #$04 ;apparently this sometimes refuses to work correctly lmao
09248                           		else
09248                           			add #$03
09248                           		endif
09248 8D 39 07                  		sta EnemyDataOffset
0924B 4C 59 92                  		jmp +
0924E 18                        Inc2B:  clc
0924F AD 39 07                  		lda EnemyDataOffset
09252 A8                        		tay
09253 18                        		clc
09254 69 02                     		adc #$02
09256 8D 39 07                  		sta EnemyDataOffset
09259 A5 DC                     +:		lda EnemyDataHigh
0925B 69 00                     		adc #$00
0925D 85 DC                     		sta EnemyDataHigh
0925F A9 00                             lda #$00                 ;init page select for enemy objects
09261 8D 3B 07                          sta EnemyObjectPageSel
09264 A6 08                             ldx ObjectOffset         ;reload current offset in enemy buffers
09266 60                                rts                      ;and leave
09267                           CheckpointEnemyID:
09267 B5 15                             lda Enemy_ID,x
09269 C9 40                     		cmp #Sign
0926B D0 12                     		bne +
0926D AC 39 07                  		ldy EnemyDataOffset
09270 C8                        		iny
09271 C8                        		iny
09272 B1 DB                     		lda (EnemyData),y
09274 9D CE 7F                  		sta $7fce,x
09277 EE 39 07                  		inc EnemyDataOffset
0927A B5 15                     		lda Enemy_ID,x
0927C 4C D0 92                  		jmp InitEnemyRoutines2
0927F C9 2E                     +:		cmp #PowerUpObject
09281 D0 12                     		bne ++
09283 AC 39 07                  		ldy EnemyDataOffset
09286 C8                        		iny
09287 C8                        		iny
09288 B1 DB                     		lda (EnemyData),y
0928A 9D CE 7F                  		sta $7fce,x
0928D EE 39 07                  		inc EnemyDataOffset
09290 B5 15                     		lda Enemy_ID,x
09292 4C D0 92                  		jmp InitEnemyRoutines2
09295 C9 19                     ++:		cmp #RedKoopaShell
09297 F0 2A                     		beq +
09299 C9 21                     		cmp #UDPiranhaPlant
0929B F0 04                     		beq +++
0929D C9 22                     		cmp #RUDPiranhaPlant
0929F D0 0D                     	    bne ++
092A1 B5 C1                     +++:	lda Enemy_Y_Position,x
092A3 18                        		clc
092A4 69 09                             adc #$09                     ;add eight pixels to what will eventually be the
092A6 95 C1                             sta Enemy_Y_Position,x       ;enemy object's vertical coordinate ($00-$14 only)
092A8 20 E4 9A                  		jsr InitUDPiranhaPlant
092AB 4C AD 94                  		jmp DoSaveEnemyIntoSex
092AE                           ++:
092AE C9 20                     	    cmp #RedPiranhaPlant
092B0 D0 0D                     	    bne ++
092B2 B5 C1                     		lda Enemy_Y_Position,x
092B4 18                        		clc
092B5 69 08                             adc #$08                     ;add eight pixels to what will eventually be the
092B7 95 C1                             sta Enemy_Y_Position,x       ;enemy object's vertical coordinate ($00-$14 only)
092B9 20 B9 9A                  		jsr InitPiranhaPlant
092BC 4C AD 94                  		jmp DoSaveEnemyIntoSex
092BF C9 15                     ++:     cmp #$15                     ;check enemy object identifier for $15 or greater
092C1 B0 0D                             bcs InitEnemyRoutines2        ;and branch straight to the jump engine if found
092C3 A8                        +:      tay                          ;save identifier in Y register for now
092C4 B5 C1                             lda Enemy_Y_Position,x
092C6 69 08                             adc #$08                     ;add eight pixels to what will eventually be the
092C8 95 C1                             sta Enemy_Y_Position,x       ;enemy object's vertical coordinate ($00-$14 only)
092CA A9 01                             lda #$01
092CC 9D D8 03                          sta EnemyOffscrBitsMasked,x  ;set offscreen masked bit
092CF 98                        		tya
092D0                           		;jmp InitEnemyRoutines
092D0                           InitEnemyRoutines2:
092D0 AC 46 07                  		ldy StarFlagTaskControl
092D3 D0 74                     		bne InitEnemyRoutines
092D5 B4 15                     		ldy Enemy_ID,x
092D7 C0 16                     		cpy #Fireworks
092D9 F0 6E                     		beq InitEnemyRoutines
092DB C0 17                     		cpy #BBill_CCheep_Frenzy
092DD F0 6A                     		beq InitEnemyRoutines
092DF C0 14                     		cpy #FlyCheepCheepFrenzy
092E1 F0 66                     		beq InitEnemyRoutines
092E3 C0 08                     		cpy #BulletBill_FrenzyVar
092E5 F0 62                     		beq InitEnemyRoutines
092E7 C0 15                     		cpy #BowserFlame
092E9 F0 5E                     		beq InitEnemyRoutines
092EB C0 2F                     		cpy #VineObject
092ED F0 5A                     		beq InitEnemyRoutines
092EF C0 43                     		cpy #PltRem
092F1 F0 56                     		beq InitEnemyRoutines
092F3                           		;cpy #Spiny
092F3                           		;beq InitEnemyRoutines
092F3 C0 11                     		cpy #Lakitu
092F5 F0 52                     		beq InitEnemyRoutines
092F7 C0 18                     		cpy #Stop_Frenzy
092F9 F0 4E                     		beq InitEnemyRoutines
092FB                           		;cpy #GreyCheepCheep
092FB                           		;beq InitEnemyRoutines
092FB                           		;cpy #RedCheepCheep
092FB                           		;beq InitEnemyRoutines
092FB C0 33                     		cpy #BulletBill_CannonVar
092FD F0 4A                     		beq InitEnemyRoutines
092FF 48                        		pha
09300 B4 60                     		ldy Enemy_PageLoc,x
09302 AD AB 60                  		lda GlobalSaveOffset
09305 18                        		clc
09306 69 01                     		adc #$01
09308 99 D2 05                  		sta EnemyOffsetPage,y
0930B EE AB 60                  		inc GlobalSaveOffset
0930E                           		
0930E AC AB 60                  		ldy GlobalSaveOffset
09311 98                        		tya
09312 9D C4 63                  		sta SavedOffset,x
09315 B5 79                     		lda Enemy_X_Position,x
09317 99 AC 60                  		sta Saved_X_Position,y
0931A B5 C1                     		lda Enemy_Y_Position,x
0931C 99 4C 61                  		sta Saved_Y_Position,y
0931F B5 60                     		lda Enemy_PageLoc,x
09321 99 AC 61                  		sta Saved_PageLoc,y
09324 B5 15                     		lda Enemy_ID,x
09326 C9 40                     		cmp #Sign
09328 F0 04                     		beq ++
0932A C9 2E                     		cmp #PowerUpObject
0932C D0 08                     		bne +	
0932E BD CE 7F                  ++:		lda $7fce,x
09331 99 01 05                  		sta ExtraShit,y
09334 B5 15                     		lda Enemy_ID,x
09336 18                        +:		clc
09337 69 01                     		adc #$01
09339 99 4C 63                  		sta Saved_ID,y
0933C C9 43                     		cmp #$43
0933E F0 05                     		beq + 
09340 A9 01                     		lda #$01
09342 99 AC 62                  		sta Saved_isDefeated,y
09345 8C 56 60                  +:		sty tempB
09348 68                                pla                          ;get identifier back and use as offset for jump engine
09349                           		
09349                           InitEnemyRoutines:
09349 C9 44                     		cmp #LastEnemyID+1
0934B 90 03                     		bcc +
0934D 4C 40 94                  		jmp NoInitCode 
09350 20 A0 F7                  +:			jsr JumpEngine
09353                                 
09353                           ;jump engine table for newly loaded enemy objects
09353                           
09353 3D 95                           .dw InitNormalEnemy  ;00 for objects $00-$0f
09355 3D 95                           .dw InitNormalEnemy  ;01
09357 6F 95                           .dw InitRedKoopa     ;02
09359 6F 95                           .dw InitRedKoopa     ;03
0935B 17 95                           .dw InitKoopaShell   ;04
0935D 79 95                           .dw InitHammerBro    ;05
0935F F9 94                           .dw InitGoomba       ;06
09361 98 95                           .dw InitBloober      ;07
09363 CC 95                           .dw InitBulletBill   ;08
09365 0D 95                           .dw InitFastGoomba   ;09
09367 D6 95                           .dw InitCheepCheep   ;0a
09369 D6 95                           .dw InitCheepCheep   ;0b
0936B 24 95                           .dw InitPodoboo      ;0c
0936D B9 9A                           .dw InitPiranhaPlant ;0d
0936F 3C 9B                           .dw InitJumpGPTroopa ;0e
09371 A4 95                           .dw InitRedPTroopa   ;0f
09373                           
09373 93 95                           .dw InitHorizFlySwimEnemy  ;10 for objects $10-$1f
09375 E6 95                           .dw InitLakitu	   		 ;11
09377 3D 95                           .dw InitNormalEnemy  		 ;12 spiny
09379 3C 9B                           .dw InitJumpGPTroopa 		 ;13
0937B 0B 9B                           .dw InitEnemyFrenzy  		 ;14 flying cheep-cheeps zone
0937D 0B 9B                           .dw InitEnemyFrenzy  		 ;15 bowser's fire
0937F 0B 9B                           .dw InitEnemyFrenzy  		 ;16 fireworks (unstable)
09381 0B 9B                           .dw InitEnemyFrenzy  		 ;17 bullet bills / underwater cheep-cheeps
09383 23 9B                           .dw EndFrenzy		   		 ;18 enf frenzy
09385 17 95                           .dw InitKoopaShell   		 ;19	
09387 40 94                           .dw NoInitCode	   		 ;1a null sprite
09389 DA 96                           .dw InitShortFirebar 		 ;1b
0938B DA 96                           .dw InitShortFirebar 		 ;1c
0938D DA 96                           .dw InitShortFirebar 		 ;1d
0938F DA 96                           .dw InitShortFirebar 		 ;1e
09391 D7 96                           .dw InitLongFirebar  		 ;1f
09393                           
09393 40 94                           .dw NoInitCode 			;20 for objects $20-$2f
09395 40 94                           .dw NoInitCode 			;21 those 3 are long firebars (malfunctions)
09397 40 94                           .dw NoInitCode 			;22
09399 E4 9A                           .dw InitUDPiranhaPlant    ;23 
0939B 4A 9B                           .dw InitBalPlatform       ;24
0939D 7D 9B                           .dw InitVertPlatform      ;25
0939F AE 9B                           .dw LargeLiftUp           ;26
093A1 B4 9B                           .dw LargeLiftDown         ;27
093A3 76 9B                           .dw InitHoriPlatform      ;28
093A5 6E 9B                           .dw InitDropPlatform      ;29
093A7 76 9B                           .dw InitHoriPlatform      ;2a
093A9 BA 9B                           .dw PlatLiftUp            ;2b
093AB C6 9B                           .dw PlatLiftDown          ;2c
093AD D0 97                           .dw InitBowser            ;2d
093AF FF 94                           .dw InitPowerUp   		;2e
093B1 6E 98                           .dw Setup_Vine			;2f
093B3                           
093B3 7B 94                           .dw InitFlag 		  ;30 for objects $30-$36, flagpole flag object
093B5 40 94                           .dw NoInitCode	  ;31 star flag object
093B7 40 94                           .dw NoInitCode	  ;32 jumpspring object
093B9 40 94                           .dw NoInitCode	  ;33 bullet bill cannon var
093BB 40 94                           .dw NoInitCode	  ;34 warp zone
093BD 34 95                           .dw InitRetainerObj ;35
093BF 40 94                     	  .dw NoInitCode	  ;36
093C1 40 94                     	  .dw NoInitCode	  ;37
093C3 40 94                     	  .dw NoInitCode      ;38
093C5 40 94                     	  .dw NoInitCode      ;39
093C7 40 94                     	  .dw NoInitCode      ;3a
093C9 40 94                     	  .dw NoInitCode      ;3b
093CB 40 94                     	  .dw NoInitCode      ;3c
093CD 40 94                     	  .dw NoInitCode      ;3d
093CF 40 94                     	  .dw NoInitCode      ;3e
093D1 40 94                     	  .dw NoInitCode      ;3f
093D3 2B 94                     	  .dw InitSign		  ;40
093D5 DD 93                     	  .dw InitScrollLock1 ;41
093D7 F9 93                     	  .dw InitCannon	  ;42
093D9 E0 93                     	  .dw InitPlatformRem ;43
093DB                           	  
093DB F0 9B                     	  .dw EndOfEnemyInitCode	;expandablen't (crash entity)
093DD                           InitScrollLock1:
093DD 4C 41 94                  	  jmp InitScrollLock
093E0                           InitPlatformRem:
093E0                           		
093E0 A9 00                     		lda #$00
093E2 95 0F                     		sta Enemy_Flag,x
093E4 A0 04                     		ldy #$04
093E6                           -:		;sta Enemy_Flag,y
093E6                           		;dey
093E6                           	;	bpl -
093E6                           ;		rts
093E6                           		
093E6 B9 15 00                  		lda Enemy_ID,y
093E9 C9 2A                     		cmp #$2a
093EB F0 03                     		beq +
093ED 88                        		dey
093EE 10 F6                     		bpl -
093F0 A9 00                     +:		lda #$00
093F2 99 0F 00                  		sta Enemy_Flag,y
093F5 EE 0D 7E                  		inc DontRepeat
093F8 60                        		rts
093F9                           InitCannon:
093F9 AC 56 60                  		ldy tempB
093FC A9 02                     		lda #$02
093FE 99 AC 62                  		sta Saved_isDefeated,y
09401 98                        		tya
09402 9D 0E 7E                  		sta Cannon_Creator,x
09405 AC 6A 04                  		ldy Cannon_Offset
09408 C8                        		iny
09409 B5 79                     		lda Enemy_X_Position,x
0940B 99 71 04                  		sta Cannon_X_Position,y
0940E B5 C1                     		lda Enemy_Y_Position,x
09410 18                        		clc
09411 69 10                     		adc #$10
09413 99 77 04                  		sta Cannon_Y_Position,y
09416 B5 60                     		lda Enemy_PageLoc,x
09418 99 6B 04                  		sta Cannon_PageLoc,y
0941B A9 00                     		lda #$00
0941D 95 0F                     		sta Enemy_Flag,x
0941F C0 05                     		cpy #$05
09421 90 01                     		bcc +
09423 A8                        		tay
09424 8C 6A 04                  +:		sty Cannon_Offset
09427 EE 0D 7E                  		inc DontRepeat
0942A 60                        		rts
0942B                           	  ;$37-$3e are gruped goombas and koopas
0942B                           	  ;$3f crashes so is a potentially free slot
0942B                           InitSign:
0942B BD CE 7F                  		lda $7fce,x
0942E 95 1C                     		sta Enemy_State,x
09430 A9 01                     		lda #$01
09432 95 0F                             sta Enemy_Flag,x          ;set buffer flag
09434 A9 03                     		lda #$03
09436 9D 9A 04                          sta Enemy_BoundBoxCtrl,x  ;set bounding box size control for sign object 
09439 B5 C1                     		lda Enemy_Y_Position,x
0943B 18                        		clc 
0943C 69 07                     		adc #$07
0943E 95 C1                     		sta Enemy_Y_Position,x
09440                           NoInitCode:	
09440 60                        		rts
09441                           InitScrollLock:
09441 AD A6 60                  	  lda ScrollLockPageLoc
09444 C9 75                     	  cmp #$75
09446 D0 2A                     	  bne +
09448 B5 60                     	  lda Enemy_PageLoc,x
0944A 18                        	  clc
0944B 69 66                     	  adc #$66
0944D 8D A6 60                  	  sta ScrollLockPageLoc
09450 B5 79                     	  lda Enemy_X_Position,x
09452 4A                        	  lsr
09453 4A                        	  lsr
09454 4A                        	  lsr
09455 4A                        	  lsr
09456 18                        	  clc
09457 69 01                     	  adc #$01
09459 8D A7 60                  	  sta ScrollLockColumnPos
0945C 38                        	  sec
0945D E9 03                     	  sbc #$03
0945F 8D A7 60                  	  sta ScrollLockColumnPos
09462 AD A6 60                  	  lda ScrollLockPageLoc
09465 E9 00                     	  sbc #$00
09467 8D A6 60                  	  sta ScrollLockPageLoc
0946A AD A7 60                  	  lda ScrollLockColumnPos
0946D 29 0F                     	  and #$0f
0946F 8D A7 60                  	  sta ScrollLockColumnPos
09472 A9 02                     +:	  lda #$02
09474 95 A8                     	  sta Enemy_Y_HighPos,x
09476 A9 00                     	  lda #$00
09478 95 4A                     	  sta Enemy_X_Speed,x
0947A 60                        	  rts
0947B                           
0947B                           InitFlag:
0947B 8E CC 7F                        stx $7fcc
0947E B5 79                     	  lda Enemy_X_Position,x
09480                           	  
09480 4A                        	  lsr
09481 4A                        	  lsr
09482 4A                        	  lsr
09483 4A                        	  lsr
09484                                 
09484 8D BE 63                        sta FlagpoleEnemyCol
09487 8D BA 7F                  	  sta $7fba
0948A                           	  ;sta Enemy_X_Position,x   ;coordinate for the flag
0948A B5 60                           lda Enemy_PageLoc,x
0948C 8D B9 7F                  	  sta $7fb9      ;page location for the flag
0948F 18                              clc
09490 69 66                     	  adc #$66                 ;subtract borrow from page location and use as
09492                           	  
09492 8D BD 63                  	  sta FlagpoleEnemyPage
09495 A9 30                           lda #$30
09497 95 C1                           sta Enemy_Y_Position,x   ;set vertical coordinate for flag
09499 A9 B0                           lda #$b0
0949B 8D 0D 01                        sta FlagpoleFNum_Y_Pos   ;set initial vertical coordinate for flagpole's floatey number
0949E A9 01                     	  lda #$01
094A0 8D CA 63                  	  sta FlagpoleOnScreen
094A3 B5 79                     	  lda Enemy_X_Position,x
094A5 38                        	  sec
094A6 E9 08                     	  sbc #$08
094A8 95 79                     	  sta Enemy_X_Position,x
094AA F6 0F                           inc Enemy_Flag,x         ;use last space in enemy object buffer
094AC 60                        	  rts
094AD                           DoSaveEnemyIntoSex:
094AD 48                        		pha
094AE B4 60                     		ldy Enemy_PageLoc,x
094B0 AD AB 60                  		lda GlobalSaveOffset
094B3 18                        		clc
094B4 69 01                     		adc #$01
094B6 99 D2 05                  		sta EnemyOffsetPage,y
094B9 EE AB 60                  		inc GlobalSaveOffset
094BC AC AB 60                  		ldy GlobalSaveOffset
094BF 98                        		tya
094C0 9D C4 63                  		sta SavedOffset,x
094C3 BD 17 04                  		lda PiranhaPlantUpYPos,x
094C6 99 01 05                  		sta ExtraShit,y
094C9 BD 34 04                  		lda PiranhaPlantDownYPos,x
094CC 99 41 05                  		sta ExtraShit2,y
094CF B5 92                     		lda PiranhaPlant_MoveFlag,x
094D1 99 81 05                  		sta ExtraShit3,y
094D4 B5 4A                     		lda PiranhaPlant_Y_Speed,x
094D6 99 A1 05                  		sta ExtraShit4,y
094D9 B5 79                     		lda Enemy_X_Position,x
094DB 99 AC 60                  		sta Saved_X_Position,y
094DE B5 C1                     		lda Enemy_Y_Position,x
094E0 29 F0                     		and #$f0
094E2 99 4C 61                  		sta Saved_Y_Position,y
094E5 B5 60                     		lda Enemy_PageLoc,x
094E7 99 AC 61                  		sta Saved_PageLoc,y
094EA B5 15                     		lda Enemy_ID,x
094EC 18                        		clc
094ED 69 01                     		adc #$01
094EF 99 4C 63                  		sta Saved_ID,y
094F2 A9 01                     		lda #$01
094F4 99 AC 62                  		sta Saved_isDefeated,y
094F7 68                                pla                          ;get identifier back and use as offset for jump engine
094F8 60                        		rts
094F9                           
094F9                           ;--------------------------------
094F9                           InitGoomba:
094F9 20 3D 95                        jsr InitNormalEnemy  ;set appropriate horizontal speed
094FC 4C 9C 95                        jmp SmallBBox        ;set $09 as bounding box control, set other values
094FF                           	 
094FF                           InitPowerUp:
094FF A9 80                     	  lda #$80
09501 95 1C                           sta Enemy_State,x         ;set power-up object's state
09503 A9 01                     	  lda #$01
09505 95 0F                           sta Enemy_Flag,x          ;set buffer flag
09507 A9 03                           lda #$03
09509 9D 9A 04                        sta Enemy_BoundBoxCtrl,x  ;set bounding box size control for power-up object
0950C 60                        	  rts
0950D                           ;--------------------------------
0950D                           InitFastGoomba:
0950D A9 01                     	  lda #$01
0950F 95 1C                     	  sta Enemy_State,x
09511 20 3D 95                  	  jsr InitNormalEnemy
09514 4C 9C 95                  	  jmp SmallBBox
09517                           	  
09517                           ;--------------------------------
09517                           InitKoopaShell:
09517 20 3D 95                  	  jsr InitNormalEnemy   ;load appropriate horizontal speed
0951A A9 04                           lda #$04
0951C 95 1C                     	  sta Enemy_State,x
0951E A9 FF                     	  lda #$ff
09520 9D 96 07                  	  sta EnemyIntervalTimer,x
09523 60                              rts
09524                           	  
09524                           ;--------------------------------
09524                           InitPodoboo:
09524 A9 02                           lda #$02                  ;set enemy position to below
09526 95 A8                           sta Enemy_Y_HighPos,x     ;the bottom of the screen
09528 95 C1                           sta Enemy_Y_Position,x
0952A 4A                              lsr
0952B 9D 96 07                        sta EnemyIntervalTimer,x  ;set timer for enemy
0952E 4A                              lsr
0952F 95 1C                           sta Enemy_State,x         ;initialize enemy state, then jump to use
09531 4C 9C 95                        jmp SmallBBox             ;$09 as bounding box size and set other things
09534                           
09534                           ;--------------------------------
09534                           
09534                           InitRetainerObj:
09534 A9 B8                           lda #$b8                ;set fixed vertical position for
09536 95 C1                           sta Enemy_Y_Position,x  ;princess/mushroom retainer object
09538 60                              rts
09539                           
09539                           ;--------------------------------
09539                           
09539                           NormalXSpdData:
09539 F1 F8 EB F1                     .db $f1, $f8, $eb, $f1
0953D                           
0953D                           InitNormalEnemy:
0953D A0 03                              ldy #$03              ;load offset of 1 by default
0953F AD 52 60                           lda HardModeFlag     ;check for primary hard mode flag set
09542 D0 02                              bne +
09544 A0 01                              ldy #01
09546 B5 15                     +:		 lda Enemy_ID,x
09548 C9 09                     		 cmp #FastGoomba
0954A D0 01                     		 bne GetESpd
0954C 88                        		 dey
0954D B9 39 95                  GetESpd: lda NormalXSpdData,y  ;get appropriate horizontal speed
09550 AC A2 60                  SetESpd: ldy scrolldir
09553 D0 05                     		 bne +
09555 49 FF                     		 eor #$ff
09557 18                        		 clc
09558 69 01                     		 adc #$01
0955A 95 4A                     +:		 sta Enemy_X_Speed,x   ;store as speed for enemy object
0955C B5 15                     	     lda Enemy_ID,x
0955E C9 02                     		 cmp #BuzzyBeetle
09560 F0 07                     		 beq +
09562 C9 12                     		 cmp #Spiny
09564 F0 06                     		 beq ++
09566 4C B4 95                           jmp TallBBox          ;branch to set bounding box control and other data
09569 4C A0 95                  +: 		 jmp SemiSmallBBox
0956C 4C 9C 95                  ++:		 jmp SmallBBox
0956F                           
0956F                           ;--------------------------------
0956F                           
0956F                           InitRedKoopa:
0956F 20 3D 95                        jsr InitNormalEnemy   ;load appropriate horizontal speed
09572 A9 01                           lda #$01              ;set enemy state for red koopa troopa $03
09574 95 1C                           sta Enemy_State,x
09576 60                              rts
09577                           
09577                           ;--------------------------------
09577                           
09577                           HBroWalkingTimerData:
09577 80 50                           .db $80, $50
09579                           
09579                           InitHammerBro:
09579 A9 00                           lda #$00                    ;init horizontal speed and timer used by hammer bro
0957B 9D A2 03                        sta HammerThrowingTimer,x   ;apparently to time hammer throwing
0957E 95 4A                           sta Enemy_X_Speed,x
09580 AD 52 60                  	  lda HardModeFlag
09583 D0 09                     	  bne NoHB
09585 AC CC 06                        ldy SecondaryHardMode       ;get secondary hard mode flag
09588 B9 77 95                        lda HBroWalkingTimerData,y
0958B 9D 96 07                        sta EnemyIntervalTimer,x    ;set value as delay for hammer bro to walk left
0958E A9 09                     NoHB: lda #$09                    ;set specific value for bounding box size control
09590 4C B4 95                        jmp TallBBox
09593                           
09593                           ;--------------------------------
09593                           
09593                           InitHorizFlySwimEnemy:
09593 A9 00                           lda #$00        ;initialize horizontal speed
09595 4C 50 95                        jmp SetESpd
09598                           
09598                           ;--------------------------------
09598                           
09598                           InitBloober:
09598 A9 00                                lda #$00               ;initialize horizontal speed
0959A 95 4A                                sta BlooperMoveSpeed,x
0959C A9 09                     SmallBBox: lda #$09               ;set specific bounding box size control
0959E D0 16                                bne SetBBox            ;unconditional branch
095A0                           SemiSmallBBox:
095A0 A9 0E                     		   lda #$0e
095A2 D0 12                     		   bne SetBBox
095A4                           
095A4                           ;--------------------------------
095A4                           
095A4                           InitRedPTroopa:
095A4 A0 30                               ldy #$30                    ;load central position adder for 48 pixels down
095A6 B5 C1                               lda Enemy_Y_Position,x      ;set vertical coordinate into location to
095A8 9D 01 04                            sta RedPTroopaOrigXPos,x    ;be used as original vertical coordinate
095AB 10 02                               bpl GetCent                 ;if vertical coordinate < $80
095AD A0 E0                               ldy #$e0                    ;if => $80, load position adder for 32 pixels up
095AF 98                        GetCent:  tya                         ;send central position adder to A
095B0 75 C1                               adc Enemy_Y_Position,x      ;add to current vertical coordinate
095B2 95 4A                               sta RedPTroopaCenterYPos,x  ;store as central vertical coordinate
095B4 A9 03                     TallBBox: lda #$03                    ;set specific bounding box size control
095B6 9D 9A 04                  SetBBox:  sta Enemy_BoundBoxCtrl,x    ;set bounding box control here
095B9 A9 02                               lda #$02
095BB                           		  ;ldy Enemy_ID,x
095BB                           		  ;cpy #RedCheepCheep
095BB                           		  ;beq +
095BB                           		  ;cpy #GreyCheepCheep
095BB                           		  ;beq +
095BB AC A2 60                  		  ldy scrolldir
095BE D0 02                     		  bne +
095C0 A9 01                     		  lda #$01
095C2 95 43                     +:		  sta Enemy_MovingDir,x
095C4 A9 00                     InitVStf: lda #$00                    ;initialize vertical speed
095C6 95 92                               sta Enemy_Y_Speed,x         ;and movement force
095C8 9D 34 04                            sta Enemy_Y_MoveForce,x
095CB 60                                  rts
095CC                           
095CC                           ;--------------------------------
095CC                           
095CC                           InitBulletBill:
095CC A9 02                           lda #$02                  ;set moving direction for left
095CE 95 43                           sta Enemy_MovingDir,x
095D0 A9 09                           lda #$09                  ;set bounding box control for $09
095D2 9D 9A 04                        sta Enemy_BoundBoxCtrl,x
095D5 60                              rts
095D6                           
095D6                           ;--------------------------------
095D6                           
095D6                           InitCheepCheep:
095D6 20 9C 95                        jsr SmallBBox              ;set vertical bounding box, speed, init others
095D9 BD A7 07                        lda PseudoRandomBitReg,x   ;check one portion of LSFR
095DC 29 10                           and #%00010000             ;get d4 from it
095DE 95 4A                           sta CheepCheepMoveMFlag,x  ;save as movement flag of some sort
095E0 B5 C1                           lda Enemy_Y_Position,x
095E2 9D 34 04                        sta CheepCheepOrigYPos,x   ;save original vertical coordinate here
095E5 60                              rts
095E6                           
095E6                           ;--------------------------------
095E6                           
095E6                           InitLakitu:
095E6 AD CB 06                        lda EnemyFrenzyBuffer      ;check to see if an enemy is already in
095E9 D0 0B                           bne KillLakitu             ;the frenzy buffer, and branch to kill lakitu if so
095EB                           
095EB                           SetupLakitu:
095EB A9 00                           lda #$00                   ;erase counter for lakitu's reappearance
095ED 8D D1 06                        sta LakituReappearTimer
095F0 9D 59 60                  	  sta LakituRespawning,x
095F3 4C 93 95                        jmp InitHorizFlySwimEnemy  ;set $03 as bounding box, set other attributes
095F6                                 ;jmp TallBBox2              ;set $03 as bounding box again (not necessary) and leave
095F6                           
095F6                           KillLakitu:
095F6 4C 1A C5                        jmp EraseEnemyObject
095F9                           
095F9                           ;--------------------------------
095F9                           ;$01-$03 - used to hold pseudorandom difference adjusters
095F9                           
095F9                           PRDiffAdjustData:
095F9 26 2C 32 38                     .db $26, $2c, $32, $38
095FD 20 22 24 26                     .db $20, $22, $24, $26
09601 13 14 15 16                     .db $13, $14, $15, $16
09605                           	  
09605                           LakituSpinyTimer:
09605 80 40                     	  .db $80, $40
09607                           
09607                           LakituAndSpinyHandler:
09607 A6 08                               ldx ObjectOffset
09609 AD 92 07                  		  lda FrenzyEnemyTimer    ;if timer here not expired, leave
0960C D0 48                               bne ExLSHand
0960E E0 05                               cpx #$05               ;if we are on the special use slot, leave
09610 B0 44                               bcs ExLSHand
09612 AC 52 60                  		  ldy HardModeFlag
09615 B9 05 96                            lda LakituSpinyTimer,y
09618 8D 92 07                            sta FrenzyEnemyTimer
0961B A0 04                               ldy #$04                ;start with the last enemy slot
0961D B9 15 00                  ChkLak:   lda Enemy_ID,y          ;check all enemy slots to see
09620 C9 11                               cmp #Lakitu             ;if lakitu is on one of them
09622 F0 33                               beq CreateSpiny         ;if so, branch out of this loop
09624 88                                  dey                     ;otherwise check another slot
09625 10 F6                               bpl ChkLak              ;loop until all slots are checked
09627 AD 59 60                  		  lda LakituRespawning
0962A D0 03                     		  bne +
0962C 4C 3D 95                  		  jmp InitNormalEnemy 
0962F EE D1 06                  +:        inc LakituReappearTimer ;increment reappearance timer
09632 AD D1 06                            lda LakituReappearTimer
09635 C9 07                               cmp #$07                ;check to see if we're up to a certain value yet
09637 90 1D                               bcc ExLSHand            ;if not, leave
09639 A2 05                               ldx #$05                ;start with the last enemy slot again
0963B B5 0F                     ChkNoEn:  lda Enemy_Flag,x        ;check enemy buffer flag for non-active enemy slot
0963D F0 05                               beq CreateL             ;branch out of loop if found
0963F CA                                  dex                     ;otherwise check next slot
09640 10 F9                               bpl ChkNoEn             ;branch until all slots are checked
09642 30 10                               bmi RetEOfs             ;if no empty slots were found, branch to leave
09644 A9 00                     CreateL:  lda #$00                ;initialize enemy state
09646 95 1C                               sta Enemy_State,x
09648 A9 11                               lda #Lakitu             ;create lakitu enemy object
0964A 95 15                               sta Enemy_ID,x
0964C 20 EB 95                            jsr SetupLakitu         ;do a sub to set up lakitu
0964F A9 20                               lda #$20
09651 20 0D 99                            jsr PutAtRightExtent    ;finish setting up lakitu
09654 A6 08                     RetEOfs:  ldx ObjectOffset        ;get enemy object buffer offset again and leave
09656 60                        ExLSHand: rts
09657                           
09657                           ;--------------------------------
09657                           
09657                           CreateSpiny:
09657 A5 C0                               lda Player_Y_Position      ;if player above a certain point, branch to leave
09659 C9 2C                               cmp #$2c
0965B 90 F9                               bcc ExLSHand
0965D B9 1C 00                            lda Enemy_State,y          ;if lakitu is not in normal state, branch to leave
09660 D0 F4                               bne ExLSHand
09662 B9 60 00                            lda Enemy_PageLoc,y        ;store horizontal coordinates (high and low) of lakitu
09665 95 60                               sta Enemy_PageLoc,x        ;into the coordinates of the spiny we're going to create
09667 B9 79 00                            lda Enemy_X_Position,y
0966A 95 79                               sta Enemy_X_Position,x
0966C A9 01                               lda #$01                   ;put spiny within vertical screen unit
0966E 95 A8                               sta Enemy_Y_HighPos,x
09670 B9 C1 00                            lda Enemy_Y_Position,y     ;put spiny eight pixels above where lakitu is
09673 38                                  sec
09674 E9 08                               sbc #$08
09676 95 C1                               sta Enemy_Y_Position,x
09678 BD A7 07                            lda PseudoRandomBitReg,x   ;get 2 LSB of LSFR and save to Y
0967B 29 03                               and #%00000011
0967D A8                                  tay
0967E A2 02                               ldx #$02
09680 B9 F9 95                  DifLoop:  lda PRDiffAdjustData,y     ;get three values and save them
09683 95 01                               sta $01,x                  ;to $01-$03
09685 C8                                  iny
09686 C8                                  iny                        ;increment Y four bytes for each value
09687 C8                                  iny
09688 C8                                  iny
09689 CA                                  dex                        ;decrement X for each one
0968A 10 F4                               bpl DifLoop                ;loop until all three are written
0968C A6 08                               ldx ObjectOffset           ;get enemy object buffer offset
0968E 20 A3 CB                            jsr PlayerLakituDiff       ;move enemy, change direction, get value - difference
09691 A4 49                               ldy Player_X_Speed         ;check player's horizontal speed
09693 C0 08                               cpy #$08
09695 B0 0E                               bcs SetSpSpd               ;if moving faster than a certain amount, branch elsewhere
09697 A8                                  tay                        ;otherwise save value in A to Y for now
09698 BD A8 07                            lda PseudoRandomBitReg+1,x
0969B 29 03                               and #%00000011             ;get one of the LSFR parts and save the 2 LSB
0969D F0 05                               beq UsePosv                ;branch if neither bits are set
0969F 98                                  tya
096A0 49 FF                               eor #%11111111             ;otherwise get two's compliment of Y
096A2 A8                                  tay
096A3 C8                                  iny
096A4 98                        UsePosv:  tya                        ;put value from A in Y back to A (they will be lost anyway)
096A5                           SetSpSpd: 
096A5                                     if SPINYFIX !=1
096A5                                           jsr SmallBBox        ;set bounding box control, init attributes, lose contents of A
096A5                                     endif
096A5 A0 02                               ldy #$02
096A7 C9 00                     		  cmp #$00
096A9 10 03                     		  bpl +
096AB A9 F8                     		  lda #$f8
096AD 2C                        		  .db $2c
096AE A9 08                     +:        lda #$08
096B0 95 4A                     		  sta Enemy_X_Speed,x        ;set horizontal speed to zero because previous contents
096B2                                     ;cmp #$00                   ;of A were lost...branch here will never be taken for
096B2 30 06                               bmi SpinyRte               ;the same reason
096B4 88                                  dey
096B5                                     if SPINYFIX ==1
096B5 20 9C 95                                  jsr SmallBBox        ;set bounding box control, init attributes
096B8                                     endif
096B8 A0 01                     		  ldy #$01
096BA 94 43                     SpinyRte: sty Enemy_MovingDir,x      ;set moving direction to the right
096BC A9 FD                               lda #$fd
096BE 95 92                               sta Enemy_Y_Speed,x        ;set vertical speed to move upwards
096C0 A9 06                     		  lda #Goomba
096C2 95 15                     		  sta Enemy_ID,x
096C4 A9 01                               lda #$01
096C6 95 0F                               sta Enemy_Flag,x           ;enable enemy object by setting flag
096C8                                     ;lda #$05
096C8 A9 00                               lda #$00
096CA 95 1C                     		  sta Enemy_State,x          ;put spiny in egg state and leave
096CC 60                        ChpChpEx: rts
096CD                           
096CD                           ;--------------------------------
096CD                           
096CD                           FirebarSpinSpdData:
096CD 28 38 28 38 28                  .db $28, $38, $28, $38, $28
096D2                           
096D2                           FirebarSpinDirData:
096D2 00 00 10 10 10                  .db $00, $00, $10, $10, $10
096D7                           
096D7                           InitLongFirebar:
096D7 20 99 98                        jsr DuplicateEnemyObj       ;create enemy object for long firebar
096DA                           
096DA                           InitShortFirebar:
096DA A9 00                           lda #$00                    ;initialize low byte of spin state
096DC 95 4A                           sta FirebarSpinState_Low,x
096DE B5 15                           lda Enemy_ID,x              ;subtract $1b from enemy identifier
096E0 38                              sec                         ;to get proper offset for firebar data
096E1 E9 1B                           sbc #$1b
096E3 A8                              tay
096E4 B9 CD 96                        lda FirebarSpinSpdData,y    ;get spinning speed of firebar
096E7 9D 88 03                        sta FirebarSpinSpeed,x
096EA B9 D2 96                        lda FirebarSpinDirData,y    ;get spinning direction of firebar
096ED 95 32                           sta FirebarSpinDirection,x
096EF B5 C1                           lda Enemy_Y_Position,x
096F1 18                              clc                         ;add four pixels to vertical coordinate
096F2 69 04                           adc #$04
096F4 95 C1                           sta Enemy_Y_Position,x
096F6 B5 79                           lda Enemy_X_Position,x
096F8 18                              clc                         ;add four pixels to horizontal coordinate
096F9 69 04                           adc #$04
096FB 95 79                           sta Enemy_X_Position,x
096FD B5 60                           lda Enemy_PageLoc,x
096FF 69 00                           adc #$00                    ;add carry to page location
09701 95 60                           sta Enemy_PageLoc,x
09703 60                              rts
09704                           	  ;jmp TallBBox2               ;set bounding box control (not used) and leave
09704                           
09704                           ;--------------------------------
09704                           ;$00-$01 - used to hold pseudorandom bits
09704                           
09704                           FlyCCXPositionData:
09704 80 30 40 80                     .db $80, $30, $40, $80
09708 30 50 50 70                     .db $30, $50, $50, $70
0970C 20 40 80 A0                     .db $20, $40, $80, $a0
09710 70 40 90 68                     .db $70, $40, $90, $68
09714                           
09714                           FlyCCXSpeedData:
09714 0E 05 06 0E                     .db $0e, $05, $06, $0e
09718 1C 20 10 0C                     .db $1c, $20, $10, $0c
0971C 1E 22 18 14                     .db $1e, $22, $18, $14
09720                           
09720                           FlyCCTimerData:
09720 10 60 20 48                     .db $10, $60, $20, $48
09724                           
09724 60                        ChpChpEx2: rts
09725                           
09725                           InitFlyingCheepCheep:
09725 AD 92 07                           lda FrenzyEnemyTimer       ;if timer here not expired yet, branch to leave
09728 D0 FA                              bne ChpChpEx2
0972A 20 9C 95                           jsr SmallBBox              ;jump to set bounding box size $09 and init other values
0972D BD A8 07                           lda PseudoRandomBitReg+1,x
09730 29 03                              and #%00000011             ;set pseudorandom offset here
09732 A8                                 tay
09733 B9 20 97                           lda FlyCCTimerData,y       ;load timer with pseudorandom offset
09736 4A                        		 lsr
09737 4A                        		 lsr
09738 8D 92 07                           sta FrenzyEnemyTimer
0973B A0 03                              ldy #$03                   ;load Y with default value
0973D AD CC 06                           lda SecondaryHardMode
09740 F0 01                              beq MaxCC                  ;if secondary hard mode flag not set, do not increment Y
09742 C8                                 iny                        ;otherwise, increment Y to allow as many as four onscreen
09743 84 00                     MaxCC:   sty $00                    ;store whatever pseudorandom bits are in Y
09745 E4 00                              cpx $00                    ;compare enemy object buffer offset with Y
09747 B0 DB                              bcs ChpChpEx2              ;if X => Y, branch to leave
09749 BD A7 07                           lda PseudoRandomBitReg,x
0974C 29 03                              and #%00000011             ;get last two bits of LSFR, first part
0974E 85 00                              sta $00                    ;and store in two places
09750 85 01                              sta $01
09752 A9 FB                              lda #$fb                   ;set vertical speed for cheep-cheep
09754 95 92                              sta Enemy_Y_Speed,x
09756 A9 00                              lda #$00                   ;load default value
09758 A4 49                              ldy Player_X_Speed         ;check player's horizontal speed
0975A F0 07                              beq GSeed                  ;if player not moving left or right, skip this part
0975C A9 04                              lda #$04
0975E C0 19                              cpy #$19                   ;if moving to the right but not very quickly,
09760 90 01                              bcc GSeed                  ;do not change A
09762 0A                                 asl                        ;otherwise, multiply A by 2
09763 48                        GSeed:   pha                        ;save to stack
09764 18                                 clc
09765 65 00                              adc $00                    ;add to last two bits of LSFR we saved earlier
09767 85 00                              sta $00                    ;save it there
09769 BD A8 07                           lda PseudoRandomBitReg+1,x
0976C 29 03                              and #%00000011             ;if neither of the last two bits of second LSFR set,
0976E F0 07                              beq RSeed                  ;skip this part and save contents of $00
09770 BD A9 07                           lda PseudoRandomBitReg+2,x
09773 29 0F                              and #%00001111             ;otherwise overwrite with lower nybble of
09775 85 00                              sta $00                    ;third LSFR part
09777 68                        RSeed:   pla                        ;get value from stack we saved earlier
09778 18                                 clc
09779 65 01                              adc $01                    ;add to last two bits of LSFR we saved in other place
0977B A8                                 tay                        ;use as pseudorandom offset here
0977C B9 14 97                           lda FlyCCXSpeedData,y      ;get horizontal speed using pseudorandom offset
0977F 95 4A                              sta Enemy_X_Speed,x
09781 A9 01                              lda #$01                   ;set to move towards the right
09783 95 43                              sta Enemy_MovingDir,x
09785 A5 49                              lda Player_X_Speed         ;if player moving left or right, branch ahead of this part
09787 D0 12                              bne D2XPos1
09789 A4 00                              ldy $00                    ;get first LSFR or third LSFR lower nybble
0978B 98                                 tya                        ;and check for d1 set
0978C 29 02                              and #%00000010
0978E F0 0B                              beq D2XPos1                ;if d1 not set, branch
09790 B5 4A                              lda Enemy_X_Speed,x
09792 49 FF                              eor #$ff                   ;if d1 set, change horizontal speed
09794 18                                 clc                        ;into two's compliment, thus moving in the opposite
09795 69 01                              adc #$01                   ;direction
09797 95 4A                              sta Enemy_X_Speed,x
09799 F6 43                              inc Enemy_MovingDir,x      ;increment to move towards the left
0979B 98                        D2XPos1: tya                        ;get first LSFR or third LSFR lower nybble again
0979C 29 02                              and #%00000010
0979E F0 0F                              beq D2XPos2                ;check for d1 set again, branch again if not set
097A0 A5 78                              lda Player_X_Position      ;get player's horizontal position
097A2 18                                 clc
097A3 79 04 97                           adc FlyCCXPositionData,y   ;if d1 set, add value obtained from pseudorandom offset
097A6 95 79                              sta Enemy_X_Position,x     ;and save as enemy's horizontal position
097A8 A5 5F                              lda Player_PageLoc         ;get player's page location
097AA 69 00                              adc #$00                   ;add carry and jump past this part
097AC 4C BB 97                           jmp FinCCSt
097AF A5 78                     D2XPos2: lda Player_X_Position      ;get player's horizontal position
097B1 38                                 sec
097B2 F9 04 97                           sbc FlyCCXPositionData,y   ;if d1 not set, subtract value obtained from pseudorandom
097B5 95 79                              sta Enemy_X_Position,x     ;offset and save as enemy's horizontal position
097B7 A5 5F                              lda Player_PageLoc         ;get player's page location
097B9 E9 00                              sbc #$00                   ;subtract borrow
097BB 95 60                     FinCCSt: sta Enemy_PageLoc,x        ;save as enemy's page location
097BD A9 01                              lda #$01
097BF 95 0F                              sta Enemy_Flag,x           ;set enemy's buffer flag
097C1 95 A8                              sta Enemy_Y_HighPos,x      ;set enemy's high vertical byte
097C3 A9 F8                              lda #$f8
097C5 95 C1                              sta Enemy_Y_Position,x     ;put enemy below the screen, and we are done
097C7 60                                 rts
097C8                           
097C8                           ;--------------------------------
097C8                           BowserPoints:
097C8 05 05 05 05 07 0A 10 20   	  .db $05, $05, $05, $05, $07, $0a, $10, $20
097D0                           InitBowser:
097D0 AD 35 60                        lda BowserKilled
097D3 F0 0A                     	  beq +
097D5 A9 00                     	  lda #$00
097D7 95 0F                     	  sta Enemy_Flag,x
097D9 95 15                     	  sta Enemy_ID,x
097DB EE 0D 7E                  	  inc DontRepeat
097DE 60                        	  rts
097DF 20 99 98                  +:	  jsr DuplicateEnemyObj     ;jump to create another bowser object
097E2 8E 68 05                        stx BowserFront_Offset    ;save offset of first here
097E5 A9 00                           lda #$00
097E7 8D 35 60                  	  sta BowserKilled
097EA 8D 63 05                        sta BowserBodyControls    ;initialize bowser's body controls
097ED 8D 69 05                        sta BridgeCollapseOffset  ;and bridge collapse offset
097F0 B5 79                           lda Enemy_X_Position,x
097F2 8D 66 05                        sta BowserOrigXPos        ;store original horizontal position here
097F5 A9 DF                           lda #$df
097F7 8D 90 07                        sta BowserFireBreathTimer ;store something here
097FA 95 43                           sta Enemy_MovingDir,x     ;and in moving direction
097FC AC 5F 07                  	  ldy WorldNumber
097FF B9 C8 97                  	  lda BowserPoints,y
09802 8D 83 04                  	  sta BowserHitPoints
09805 8E 2B 60                  	  stx temp7
09808 AE 00 64                  		  ldx VRAM_Buffer1_Offset
0980B A9 22                     		  lda #$22
0980D 9D 01 64                  		  sta VRAM_Buffer1,x
09810 A9 C0                     		  lda #$c0
09812 9D 02 64                  		  sta VRAM_Buffer1+1,x
09815 A9 05                     		  lda #$05
09817 9D 03 64                  		  sta VRAM_Buffer1+2,x
0981A A9 11                     		  lda #$11
0981C 9D 04 64                  		  sta VRAM_Buffer1+3,x
0981F A9 19                     		  lda #$19
09821 9D 05 64                  		  sta VRAM_Buffer1+4,x
09824 A9 28                     		  lda #$28
09826 9D 06 64                  		  sta VRAM_Buffer1+5,x
09829 A9 00                     		  lda #$00
0982B 9D 07 64                  		  sta VRAM_Buffer1+6,x
0982E AD 83 04                  	      lda BowserHitPoints             ;otherwise, check number of pts
09831 A8                        		  tay
09832                           +
09832 C9 0A                     	      cmp #10                   ;more than 9 pts?
09834 90 1A                     	      bcc ++
09836 E9 0A                     	      sbc #10                   ;if so, subtract 10 and add one to the 10s digit
09838 A8                        		  tay
09839 A9 01                     	      lda #$01                  ;instead of showing 100 pts, A0 will show, etc.
0983B 9D 07 64                  	      sta VRAM_Buffer1+6,x
0983E 98                        		  tya
0983F                           -
0983F C9 0A                     	      cmp #10
09841 90 0D                     	      bcc ++
09843 E9 0A                     		  sbc #10
09845 FE 07 64                  	      inc VRAM_Buffer1+6,x
09848 4C 3F 98                  	      jmp -
0984B A8                        		  tay
0984C 9D 07 64                  		  sta VRAM_Buffer1+6,x
0984F 98                        		  tya
09850                           ++:	      
09850 9D 08 64                  		  sta VRAM_Buffer1+7,x
09853 A9 00                     		  lda #$00
09855 9D 09 64                  		  sta VRAM_Buffer1+8,x
09858 8A                        		  txa
09859                           		  add #$08
09859 18                        	clc
0985A 69 08                     	adc #$08 ;apparently this sometimes refuses to work correctly lmao
0985C 8D 00 64                  		  sta VRAM_Buffer1_Offset
0985F AE 2B 60                  		  ldx temp7
09862 A9 20                           lda #$20
09864 8D 64 05                        sta BowserFeetCounter     ;set bowser's feet timer and in enemy timer
09867 9D 8A 07                        sta EnemyFrameTimer,x
0986A 8D 65 05                        sta BowserMovementSpeed   ;set default movement speed here
0986D 60                              rts
0986E                           
0986E                           ;--------------------------------
0986E                           Setup_Vine:
0986E A9 2F                             lda #VineObject          ;load identifier for vine object
09870 95 15                             sta Enemy_ID,x           ;store in buffer
09872 A9 01                             lda #$01
09874 95 0F                             sta Enemy_Flag,x         ;set flag for enemy object buffer
09876 B9 68 00                          lda Block_PageLoc,y
09879 95 60                             sta Enemy_PageLoc,x      ;copy page location from previous object
0987B B9 81 00                          lda Block_X_Position,y
0987E 95 79                             sta Enemy_X_Position,x   ;copy horizontal coordinate from previous object
09880 B9 C9 00                          lda Block_Y_Position,y
09883 95 C1                             sta Enemy_Y_Position,x   ;copy vertical coordinate from previous object
09885 AC 98 03                          ldy VineFlagOffset       ;load vine flag/offset to next available vine slot
09888 D0 03                             bne NextVO1               ;if set at all, don't bother to store vertical
0988A 8D 9D 03                          sta VineStart_Y_Position ;otherwise store vertical coordinate here
0988D 8A                        NextVO1: txa                      ;store object offset to next available vine slot
0988E 99 9A 03                          sta VineObjOffset,y      ;using vine flag as offset
09891 EE 98 03                          inc VineFlagOffset       ;increment vine flag offset
09894 A9 04                             lda #Sfx_GrowVine
09896 85 EF                             sta Square2SoundQueue    ;load vine grow sound
09898 60                                rts
09899                           DuplicateEnemyObj:
09899 A0 FF                             ldy #$ff                ;start at beginning of enemy slots
0989B C0 05                     FSLoop: cpy #$05
0989D F0 25                     		beq FlmEx
0989F C8                        		iny                     ;increment one slot
098A0 B9 0F 00                          lda Enemy_Flag,y        ;check enemy buffer flag for empty slot
098A3 D0 F6                             bne FSLoop              ;if set, branch and keep checking
098A5 8C CF 06                          sty DuplicateObj_Offset ;otherwise set offset here
098A8 8A                                txa                     ;transfer original enemy buffer offset
098A9 09 80                             ora #%10000000          ;store with d7 set as flag in new enemy
098AB 99 0F 00                          sta Enemy_Flag,y        ;slot as well as enemy offset
098AE B5 60                             lda Enemy_PageLoc,x
098B0 99 60 00                          sta Enemy_PageLoc,y     ;copy page location and horizontal coordinates
098B3 B5 79                             lda Enemy_X_Position,x  ;from original enemy to new enemy
098B5 99 79 00                          sta Enemy_X_Position,y
098B8 A9 01                             lda #$01
098BA 95 0F                             sta Enemy_Flag,x        ;set flag as normal for original enemy
098BC 99 A8 00                          sta Enemy_Y_HighPos,y   ;set high vertical byte for new enemy
098BF B5 C1                             lda Enemy_Y_Position,x
098C1 99 C1 00                          sta Enemy_Y_Position,y  ;copy vertical coordinate from original to new
098C4 60                        FlmEx:  rts                     ;and then leave
098C5                           
098C5                           ;--------------------------------
098C5                           
098C5                           FlameYPosData:
098C5 90 80 70 90                     .db $90, $80, $70, $90
098C9                           
098C9                           FlameYMFAdderData:
098C9 FF 01                           .db $ff, $01
098CB                           FW:
098CB 38                        	sec
098CC E9 20                     	sbc #$20
098CE 4C FE 98                  	jmp SetFrT
098D1                           InitBowserFlame:
098D1 AD 92 07                          lda FrenzyEnemyTimer        ;if timer not expired yet, branch to leave
098D4 D0 EE                             bne FlmEx
098D6 9D 34 04                          sta Enemy_Y_MoveForce,x     ;reset something here
098D9 A5 EE                             lda NoiseSoundQueue
098DB 09 02                             ora #Sfx_BowserFlame        ;load bowser's flame sound into queue
098DD 85 EE                             sta NoiseSoundQueue
098DF AC 68 05                          ldy BowserFront_Offset      ;get bowser's buffer offset
098E2 B9 15 00                          lda Enemy_ID,y              ;check for bowser
098E5 C9 2D                             cmp #Bowser
098E7 F0 38                             beq SpawnFromMouth          ;branch if found
098E9 20 55 CE                          jsr SetFlameTimer           ;get timer data based on flame counter
098EC 18                                clc
098ED 69 20                             adc #$20                    ;add 32 frames by default
098EF AC 5F 07                  		ldy WorldNumber
098F2 C9 07                     		cmp #FinalWorld
098F4 F0 D5                     		beq FW
098F6 AC CC 06                          ldy SecondaryHardMode
098F9 F0 03                             beq SetFrT                  ;if secondary mode flag not set, use as timer setting
098FB 38                                sec
098FC E9 10                             sbc #$10                    ;otherwise subtract 16 frames for secondary hard mode
098FE 8D 92 07                  SetFrT: sta FrenzyEnemyTimer        ;set timer accordingly
09901 BD A7 07                          lda PseudoRandomBitReg,x
09904 29 03                             and #%00000011              ;get 2 LSB from first part of LSFR
09906 9D 17 04                          sta BowserFlamePRandomOfs,x ;set here
09909 A8                                tay                         ;use as offset
0990A B9 C5 98                          lda FlameYPosData,y         ;load vertical position based on pseudorandom offset
0990D                           
0990D                           PutAtRightExtent:
0990D 95 C1                           sta Enemy_Y_Position,x    ;set vertical position
0990F AD 1D 07                        lda ScreenRight_X_Pos
09912 18                              clc
09913 69 20                           adc #$20                  ;place enemy 32 pixels beyond right side of screen
09915 95 79                           sta Enemy_X_Position,x
09917 AD 1B 07                        lda ScreenRight_PageLoc
0991A 69 00                           adc #$00                  ;add carry
0991C 95 60                           sta Enemy_PageLoc,x
0991E 4C 54 99                        jmp FinishFlame           ;skip this part to finish setting values
09921                           
09921                           SpawnFromMouth:
09921 B9 79 00                         lda Enemy_X_Position,y    ;get bowser's horizontal position
09924 38                               sec
09925 E9 0E                            sbc #$0e                  ;subtract 14 pixels
09927 95 79                            sta Enemy_X_Position,x    ;save as flame's horizontal position
09929 B9 60 00                         lda Enemy_PageLoc,y
0992C 95 60                            sta Enemy_PageLoc,x       ;copy page location from bowser to flame
0992E B9 C1 00                         lda Enemy_Y_Position,y
09931 18                               clc                       ;add 8 pixels to bowser's vertical position
09932 69 08                            adc #$08
09934 95 C1                            sta Enemy_Y_Position,x    ;save as flame's vertical position
09936 BD A7 07                         lda PseudoRandomBitReg,x
09939 29 03                            and #%00000011            ;get 2 LSB from first part of LSFR
0993B 9D 17 04                         sta Enemy_YMF_Dummy,x     ;save here
0993E A8                               tay                       ;use as offset
0993F B9 C5 98                         lda FlameYPosData,y       ;get value here using bits as offset
09942 A0 00                            ldy #$00                  ;load default offset
09944 D5 C1                            cmp Enemy_Y_Position,x    ;compare value to flame's current vertical position
09946 90 01                            bcc SetMF                 ;if less, do not increment offset
09948 C8                               iny                       ;otherwise increment now
09949 B9 C9 98                  SetMF: lda FlameYMFAdderData,y   ;get value here and save
0994C 9D 34 04                         sta Enemy_Y_MoveForce,x   ;to vertical movement force
0994F A9 00                            lda #$00
09951 8D CB 06                         sta EnemyFrenzyBuffer     ;clear enemy frenzy buffer
09954                           
09954                           FinishFlame:
09954 A9 0D                           lda #$0d                 ;set $08 for bounding box control
09956 9D 9A 04                        sta Enemy_BoundBoxCtrl,x
09959 A9 01                           lda #$01                 ;set high byte of vertical and
0995B 95 A8                           sta Enemy_Y_HighPos,x    ;enemy buffer flag
0995D 95 0F                           sta Enemy_Flag,x
0995F 4A                              lsr
09960 9D 01 04                        sta Enemy_X_MoveForce,x  ;initialize horizontal movement force, and
09963 95 1C                           sta Enemy_State,x        ;enemy state
09965 60                              rts
09966                           
09966                           ;--------------------------------
09966                           
09966                           FireworksXPosData:
09966 00 30 60 60 00 20               .db $00, $30, $60, $60, $00, $20
0996C                           
0996C                           FireworksYPosData:
0996C 60 40 70 40 60 30               .db $60, $40, $70, $40, $60, $30
09972                           	  
09972 60                        ExitFWk: rts
09973                           InitFireworks:
09973 AD 92 07                            lda FrenzyEnemyTimer         ;if timer not expired yet, branch to leave
09976 D0 FA                               bne ExitFWk
09978 A9 20                               lda #$20                     ;otherwise reset timer
0997A 8D 92 07                            sta FrenzyEnemyTimer
0997D CE D7 06                            dec FireworksCounter         ;decrement for each explosion
09980 A0 06                               ldy #$06                     ;start at last slot
09982 88                        StarFChk: dey
09983                                     ;lda Enemy_ID,y               ;check for presence of star flag object
09983                                     ;cmp #StarFlagObject          ;if there isn't a star flag object,
09983                                     ;bne StarFChk                 ;routine goes into infinite loop = crash (fixed)
09983 B9 79 00                            lda Enemy_X_Position,y
09986 38                                  sec                          ;get horizontal coordinate of star flag object, then
09987 E9 30                               sbc #$30                     ;subtract 48 pixels from it and save to
09989 48                                  pha                          ;the stack
0998A B9 60 00                            lda Enemy_PageLoc,y
0998D E9 00                               sbc #$00                     ;subtract the carry from the page location
0998F 85 00                               sta $00                      ;of the star flag object
09991 AD D7 06                            lda FireworksCounter         ;get fireworks counter
09994 18                                  clc
09995 79 1C 00                            adc Enemy_State,y            ;add state of star flag object (possibly not necessary)
09998 A8                                  tay                          ;use as offset
09999 68                                  pla                          ;get saved horizontal coordinate of star flag - 48 pixels
0999A 18                                  clc
0999B 79 66 99                            adc FireworksXPosData,y      ;add number based on offset of fireworks counter
0999E 95 79                               sta Enemy_X_Position,x       ;store as the fireworks object horizontal coordinate
099A0 A5 00                               lda $00
099A2 69 00                               adc #$00                     ;add carry and store as page location for
099A4 95 60                               sta Enemy_PageLoc,x          ;the fireworks object
099A6 B9 6C 99                            lda FireworksYPosData,y      ;get vertical position using same offset
099A9 95 C1                               sta Enemy_Y_Position,x       ;and store as vertical coordinate for fireworks object
099AB A9 01                               lda #$01
099AD 95 A8                               sta Enemy_Y_HighPos,x        ;store in vertical high byte
099AF 95 0F                               sta Enemy_Flag,x             ;and activate enemy buffer flag
099B1 4A                                  lsr
099B2 95 4A                               sta ExplosionGfxCounter,x    ;initialize explosion counter
099B4 A9 08                               lda #$08
099B6 9D 31 60                            sta ExplosionTimerCounter,x  ;set explosion timing counter
099B9 60                        		  rts
099BA                           
099BA                           ;--------------------------------
099BA                           
099BA                           Bitmasks:
099BA 01 02 04 08 10 20 40 80         .db %00000001, %00000010, %00000100, %00001000, %00010000, %00100000, %01000000, %10000000
099C2                           
099C2                           Enemy17YPosData:
099C2 40 30 90 50 20 60 A0 70         .db $40, $30, $90, $50, $20, $60, $a0, $70
099CA                           
099CA                           SwimCC_IDData:
099CA 0A 0B                           .db $0a, $0b
099CC                           
099CC                           BulletBillCheepCheep:
099CC AD 92 07                           lda FrenzyEnemyTimer      ;if timer not expired yet, branch to leave
099CF D0 6F                              bne ExF17
099D1 AD 4E 07                           lda AreaType              ;are we in a water-type level?
099D4 D0 57                              bne DoBulletBills         ;if not, branch elsewhere
099D6 E0 03                              cpx #$03                  ;are we past third enemy slot?
099D8 B0 66                              bcs ExF17                 ;if so, branch to leave
099DA A0 00                              ldy #$00                  ;load default offset
099DC BD A7 07                           lda PseudoRandomBitReg,x
099DF C9 AA                              cmp #$aa                  ;check first part of LSFR against preset value
099E1 90 01                              bcc ChkW2                 ;if less than preset, do not increment offset
099E3 C8                                 iny                       ;otherwise increment
099E4 AD 5F 07                  ChkW2:   lda WorldNumber           ;check world number
099E7 C9 01                              cmp #World2
099E9 F0 01                              beq Get17ID               ;if we're on world 2, do not increment offset
099EB C8                                 iny                       ;otherwise increment
099EC 98                        Get17ID: tya
099ED 29 01                              and #%00000001            ;mask out all but last bit of offset
099EF A8                                 tay
099F0 B9 CA 99                           lda SwimCC_IDData,y       ;load identifier for cheep-cheeps
099F3 95 15                     Set17ID: sta Enemy_ID,x            ;store whatever's in A as enemy identifier
099F5 AD DD 06                           lda BitMFilter
099F8 C9 FF                              cmp #$ff                  ;if not all bits set, skip init part and compare bits
099FA D0 05                              bne GetRBit
099FC A9 00                              lda #$00                  ;initialize vertical position filter
099FE 8D DD 06                           sta BitMFilter
09A01 BD A7 07                  GetRBit: lda PseudoRandomBitReg,x  ;get first part of LSFR
09A04 29 07                              and #%00000111            ;mask out all but 3 LSB
09A06 A8                        ChkRBit: tay                       ;use as offset
09A07 B9 BA 99                           lda Bitmasks,y            ;load bitmask
09A0A 2C DD 06                           bit BitMFilter            ;perform AND on filter without changing it
09A0D F0 07                              beq AddFBit
09A0F C8                                 iny                       ;increment offset
09A10 98                                 tya
09A11 29 07                              and #%00000111            ;mask out all but 3 LSB thus keeping it 0-7
09A13 4C 06 9A                           jmp ChkRBit               ;do another check
09A16 0D DD 06                  AddFBit: ora BitMFilter            ;add bit to already set bits in filter
09A19 8D DD 06                           sta BitMFilter            ;and store
09A1C B9 C2 99                           lda Enemy17YPosData,y     ;load vertical position using offset
09A1F 20 0D 99                           jsr PutAtRightExtent      ;set vertical position and other values
09A22 9D 17 04                           sta Enemy_YMF_Dummy,x     ;initialize dummy variable
09A25 A9 20                              lda #$20                  ;set timer
09A27 8D 92 07                           sta FrenzyEnemyTimer
09A2A 4C 67 92                           jmp CheckpointEnemyID     ;process our new enemy object
09A2D                           
09A2D                           DoBulletBills:
09A2D A0 FF                               ldy #$ff                   ;start at beginning of enemy slots
09A2F C8                        BB_SLoop: iny                        ;move onto the next slot
09A30 C0 05                               cpy #$05                   ;branch to play sound if we've done all slots
09A32 B0 0D                               bcs FireBulletBill
09A34 B9 0F 00                            lda Enemy_Flag,y           ;if enemy buffer flag not set,
09A37 F0 F6                               beq BB_SLoop               ;loop back and check another slot
09A39 B9 15 00                            lda Enemy_ID,y
09A3C C9 08                               cmp #BulletBill_FrenzyVar  ;check enemy identifier for
09A3E D0 EF                               bne BB_SLoop               ;bullet bill object (frenzy variant)
09A40 60                        ExF17:    rts                        ;if found, leave
09A41                           
09A41                           FireBulletBill:
09A41 A5 EF                           lda Square2SoundQueue
09A43 09 08                           ora #Sfx_Blast            ;play fireworks/gunfire sound
09A45 85 EF                           sta Square2SoundQueue
09A47 A9 08                           lda #BulletBill_FrenzyVar ;load identifier for bullet bill object
09A49 D0 A8                           bne Set17ID               ;unconditional branch
09A4B                           
09A4B                           ;--------------------------------
09A4B                           ;$00 - used to store Y position of group enemies
09A4B                           ;$01 - used to store enemy ID
09A4B                           ;$02 - used to store page location of right side of screen
09A4B                           ;$03 - used to store X position of right side of screen
09A4B                           
09A4B                           HandleGroupEnemies:
09A4B A0 00                             ldy #$00                  ;load value for green koopa troopa
09A4D 38                                sec
09A4E E9 37                             sbc #$37                  ;subtract $37 from second byte read
09A50 48                                pha                       ;save result in stack for now
09A51 C9 04                             cmp #$04                  ;was byte in $3b-$3e range?
09A53 B0 0B                             bcs SnglID                ;if so, branch
09A55 48                                pha                       ;save another copy to stack
09A56 A0 06                             ldy #Goomba               ;load value for goomba enemy
09A58 AD 6A 07                          lda PrimaryHardMode       ;if primary hard mode flag not set,
09A5B F0 02                             beq PullID                ;branch, otherwise change to value
09A5D A0 02                             ldy #BuzzyBeetle          ;for buzzy beetle
09A5F 68                        PullID: pla                       ;get second copy from stack
09A60 84 01                     SnglID: sty $01                   ;save enemy id here
09A62 A0 B0                             ldy #$b0                  ;load default y coordinate
09A64 29 02                             and #$02                  ;check to see if d1 was set
09A66 F0 02                             beq SetYGp                ;if so, move y coordinate up,
09A68 A0 70                             ldy #$70                  ;otherwise branch and use default
09A6A 84 00                     SetYGp: sty $00                   ;save y coordinate here
09A6C AD 1B 07                          lda ScreenRight_PageLoc   ;get page number of right edge of screen
09A6F 85 02                             sta $02                   ;save here
09A71 AD 1D 07                          lda ScreenRight_X_Pos     ;get pixel coordinate of right edge
09A74 85 03                             sta $03                   ;save here
09A76 A0 02                             ldy #$02                  ;load two enemies by default
09A78 68                                pla                       ;get first copy from stack
09A79 4A                                lsr                       ;check to see if d0 was set
09A7A 90 01                             bcc CntGrp                ;if not, use default value
09A7C C8                                iny                       ;otherwise increment to three enemies
09A7D 8C D3 06                  CntGrp: sty NumberofGroupEnemies  ;save number of enemies here
09A80 A2 FF                     GrLoop: ldx #$ff                  ;start at beginning of enemy buffers
09A82 E8                        GSltLp: inx                       ;increment and branch if past
09A83 E0 05                             cpx #$05                  ;end of buffers
09A85 B0 2D                             bcs NextED
09A87 B5 0F                             lda Enemy_Flag,x          ;check to see if enemy is already
09A89 D0 F7                             bne GSltLp                ;stored in buffer, and branch if so
09A8B A5 01                             lda $01
09A8D 95 15                             sta Enemy_ID,x            ;store enemy object identifier
09A8F A5 02                             lda $02
09A91 95 60                             sta Enemy_PageLoc,x       ;store page location for enemy object
09A93 A5 03                             lda $03
09A95 95 79                             sta Enemy_X_Position,x    ;store x coordinate for enemy object
09A97 18                                clc
09A98 69 18                             adc #$18                  ;add 24 pixels for next enemy
09A9A 85 03                             sta $03
09A9C A5 02                             lda $02                   ;add carry to page location for
09A9E 69 00                             adc #$00                  ;next enemy
09AA0 85 02                             sta $02
09AA2 A5 00                             lda $00                   ;store y coordinate for enemy object
09AA4 95 C1                             sta Enemy_Y_Position,x
09AA6 A9 01                             lda #$01                  ;activate flag for buffer, and
09AA8 95 A8                             sta Enemy_Y_HighPos,x     ;put enemy within the screen vertically
09AAA 95 0F                             sta Enemy_Flag,x
09AAC                           		             ;get identifier back and use as offset for jump engine
09AAC 20 67 92                          jsr CheckpointEnemyID     ;process each enemy object separately
09AAF CE D3 06                          dec NumberofGroupEnemies  ;do this until we run out of enemy objects
09AB2 D0 CC                             bne GrLoop
09AB4 4C 4E 92                  NextED: jmp Inc2B                 ;jump to increment data offset and leave
09AB7                           
09AB7                           ;--------------------------------
09AB7 09 03                     PPhitbox: .db $09, $03
09AB9                           InitPiranhaPlant:
09AB9 B5 79                     	  lda Enemy_X_Position,x
09ABB                           	  add #$08
09ABB 18                        	clc
09ABC 69 08                     	adc #$08 ;apparently this sometimes refuses to work correctly lmao
09ABE 95 79                     	  sta Enemy_X_Position,x
09AC0 B5 C1                     	  lda Enemy_Y_Position,x
09AC2                           	  add #$08
09AC2 18                        	clc
09AC3 69 08                     	adc #$08 ;apparently this sometimes refuses to work correctly lmao
09AC5 95 C1                     	  sta Enemy_Y_Position,x
09AC7                           InitPiranhaPlant1:
09AC7 A9 01                     	  lda #$01                    ;set initial speed
09AC9 95 4A                           sta PiranhaPlant_Y_Speed,x
09ACB 4A                              lsr
09ACC 95 1C                           sta Enemy_State,x            ;initialize enemy state and what would normally
09ACE 95 92                           sta PiranhaPlant_MoveFlag,x  ;be used as vertical speed, but not in this case
09AD0 B5 C1                           lda Enemy_Y_Position,x
09AD2 9D 34 04                        sta PiranhaPlantDownYPos,x   ;save original vertical coordinate here
09AD5 38                              sec
09AD6 E9 19                           sbc #$19
09AD8 9D 17 04                        sta PiranhaPlantUpYPos,x     ;save original vertical coordinate - 24 pixels here
09ADB AC 52 60                  	  ldy HardModeFlag
09ADE B9 B7 9A                        lda PPhitbox,y
09AE1 4C 46 9B                        jmp SetBBox2                 ;set specific value for bounding box control
09AE4                           	  
09AE4                           InitUDPiranhaPlant:
09AE4 B5 79                     	  lda Enemy_X_Position,x
09AE6                           	  add #$08
09AE6 18                        	clc
09AE7 69 08                     	adc #$08 ;apparently this sometimes refuses to work correctly lmao
09AE9 95 79                     	  sta Enemy_X_Position,x
09AEB B5 C1                     	  lda Enemy_Y_Position,x
09AED                           	  add #$06
09AED 18                        	clc
09AEE 69 06                     	adc #$06 ;apparently this sometimes refuses to work correctly lmao
09AF0 95 C1                     	  sta Enemy_Y_Position,x
09AF2                           InitUDPiranhaPlant1:
09AF2 A9 01                     	  lda #$01                    ;set initial speed
09AF4 95 4A                           sta PiranhaPlant_Y_Speed,x
09AF6 4A                              lsr
09AF7 95 1C                           sta Enemy_State,x            ;initialize enemy state and what would normally
09AF9 95 92                           sta PiranhaPlant_MoveFlag,x  ;be used as vertical speed, but not in this case
09AFB B5 C1                           lda Enemy_Y_Position,x
09AFD 9D 34 04                        sta PiranhaPlantDownYPos,x   ;save original vertical coordinate here
09B00 38                              sec
09B01 E9 19                           sbc #$19
09B03 9D 17 04                        sta PiranhaPlantUpYPos,x     ;save original vertical coordinate - 24 pixels here
09B06 A9 0F                           lda #$0f
09B08 4C 46 9B                        jmp SetBBox2                 ;set specific value for bounding box control
09B0B                           ;--------------------------------
09B0B                           
09B0B                           InitEnemyFrenzy:
09B0B B5 15                           lda Enemy_ID,x        ;load enemy identifier
09B0D 8D CB 06                        sta EnemyFrenzyBuffer ;save in enemy frenzy buffer
09B10 38                              sec
09B11 E9 12                           sbc #$12              ;subtract 12 and use as offset for jump engine
09B13                           	  if shufflelevels == 1
09B13                           		cmp #$06
09B13                           		bcc +
09B13                           		lda #$01
09B13                           +:
09B13                           	  endif
09B13 20 A0 F7                        jsr JumpEngine
09B16                           
09B16                           ;frenzy object jump table
09B16 3D 95                           .dw InitNormalEnemy
09B18 22 9B                           .dw NoFrenzyCode
09B1A 25 97                           .dw InitFlyingCheepCheep
09B1C D1 98                           .dw InitBowserFlame
09B1E 73 99                           .dw InitFireworks
09B20 CC 99                           .dw BulletBillCheepCheep
09B22                           
09B22                           ;--------------------------------
09B22                           
09B22                           NoFrenzyCode:
09B22 60                              rts
09B23                           
09B23                           ;--------------------------------
09B23                           
09B23                           EndFrenzy:
09B23 A0 04                                ldy #$04               ;start at last slot
09B25 B9 15 00                  LakituChk: lda Enemy_ID,y         ;check enemy identifiers
09B28 C9 11                                cmp #Lakitu            ;for lakitu
09B2A D0 05                                bne NextFSlot
09B2C A9 01                                lda #$01               ;if found, set state
09B2E 99 1C 00                             sta Enemy_State,y
09B31 88                        NextFSlot: dey                    ;move onto the next slot
09B32 10 F1                                bpl LakituChk          ;do this until all slots are checked
09B34 A9 00                                lda #$00
09B36 8D CB 06                             sta EnemyFrenzyBuffer  ;empty enemy frenzy buffer
09B39 95 0F                                sta Enemy_Flag,x       ;disable enemy buffer flag for this object
09B3B 60                                   rts
09B3C                           
09B3C                           ;--------------------------------
09B3C                           
09B3C                           InitJumpGPTroopa:
09B3C A9 02                                lda #$02                  ;set for movement to the left
09B3E 95 43                                sta Enemy_MovingDir,x
09B40 A9 F8                                lda #$f8                  ;set horizontal speed
09B42 95 4A                                sta Enemy_X_Speed,x
09B44 A9 03                     TallBBox2: lda #$03                  ;set specific value for bounding box control
09B46 9D 9A 04                  SetBBox2:  sta Enemy_BoundBoxCtrl,x  ;set bounding box control then leave
09B49 60                                   rts
09B4A                           
09B4A                           ;--------------------------------
09B4A                           
09B4A                           InitBalPlatform:
09B4A D6 C1                             dec Enemy_Y_Position,x    ;raise vertical position by two pixels
09B4C D6 C1                             dec Enemy_Y_Position,x
09B4E AC CC 06                          ldy SecondaryHardMode     ;if secondary hard mode flag not set,
09B51 D0 05                             bne AlignP                ;branch ahead
09B53 A0 02                             ldy #$02                  ;otherwise set value here
09B55 20 E0 9B                          jsr PosPlatform           ;do a sub to add or subtract pixels
09B58 A0 FF                     AlignP: ldy #$ff                  ;set default value here for now
09B5A AD A0 03                          lda BalPlatformAlignment  ;get current balance platform alignment
09B5D 95 1C                             sta Enemy_State,x         ;set platform alignment to object state here
09B5F 10 02                             bpl SetBPA                ;if old alignment $ff, put $ff as alignment for negative
09B61 8A                                txa                       ;if old contents already $ff, put
09B62 A8                                tay                       ;object offset as alignment to make next positive
09B63 8C A0 03                  SetBPA: sty BalPlatformAlignment  ;store whatever value's in Y here
09B66 A9 00                             lda #$00
09B68 95 43                             sta Enemy_MovingDir,x     ;init moving direction
09B6A A8                                tay                       ;init Y
09B6B 20 E0 9B                          jsr PosPlatform           ;do a sub to add 8 pixels, then run shared code here
09B6E                           
09B6E                           ;--------------------------------
09B6E                           
09B6E                           InitDropPlatform:
09B6E A9 FF                           lda #$ff
09B70 9D A2 03                        sta PlatformCollisionFlag,x  ;set some value here
09B73 4C 93 9B                        jmp CommonPlatCode           ;then jump ahead to execute more code
09B76                           
09B76                           ;--------------------------------
09B76                           
09B76                           InitHoriPlatform:
09B76 A9 00                           lda #$00
09B78 95 4A                           sta XMoveSecondaryCounter,x  ;init one of the moving counters
09B7A 4C 93 9B                        jmp CommonPlatCode           ;jump ahead to execute more code
09B7D                           
09B7D                           ;--------------------------------
09B7D                           
09B7D                           InitVertPlatform:
09B7D A0 40                            ldy #$40                    ;set default value here
09B7F B5 C1                            lda Enemy_Y_Position,x      ;check vertical position
09B81 10 07                            bpl SetYO                   ;if above a certain point, skip this part
09B83 49 FF                            eor #$ff
09B85 18                               clc                         ;otherwise get two's compliment
09B86 69 01                            adc #$01
09B88 A0 C0                            ldy #$c0                    ;get alternate value to add to vertical position
09B8A 9D 01 04                  SetYO: sta YPlatformTopYPos,x      ;save as top vertical position
09B8D 98                               tya
09B8E 18                               clc                         ;load value from earlier, add number of pixels 
09B8F 75 C1                            adc Enemy_Y_Position,x      ;to vertical position
09B91 95 4A                            sta YPlatformCenterYPos,x   ;save result as central vertical position
09B93                           
09B93                           ;--------------------------------
09B93                           
09B93                           CommonPlatCode: 
09B93 A9 00                             lda #$00                    ;initialize vertical speed
09B95 95 92                             sta Enemy_Y_Speed,x         ;and movement force
09B97 9D 34 04                          sta Enemy_Y_MoveForce,x
09B9A A9 05                     SPBBox: lda #$05                  ;set default bounding box size control
09B9C AC 4E 07                          ldy AreaType
09B9F C0 03                             cpy #$03                  ;check for castle-type level
09BA1 F0 07                             beq CasPBB                ;use default value if found
09BA3 AC CC 06                          ldy SecondaryHardMode     ;otherwise check for secondary hard mode flag
09BA6 D0 02                             bne CasPBB                ;if set, use default value
09BA8 A9 06                             lda #$06                  ;use alternate value if not castle or secondary not set
09BAA 9D 9A 04                  CasPBB: sta Enemy_BoundBoxCtrl,x  ;set bounding box size control here and leave
09BAD 60                                rts
09BAE                           
09BAE                           ;--------------------------------
09BAE                           
09BAE                           LargeLiftUp:
09BAE 20 BA 9B                        jsr PlatLiftUp       ;execute code for platforms going up
09BB1 4C B7 9B                        jmp LargeLiftBBox    ;overwrite bounding box for large platforms
09BB4                           
09BB4                           LargeLiftDown:
09BB4 20 C6 9B                        jsr PlatLiftDown     ;execute code for platforms going down
09BB7                           
09BB7                           LargeLiftBBox:
09BB7 4C 9A 9B                        jmp SPBBox           ;jump to overwrite bounding box size control
09BBA                           
09BBA                           ;--------------------------------
09BBA                           
09BBA                           PlatLiftUp:
09BBA A9 10                           lda #$10                 ;set movement amount here
09BBC 9D 34 04                        sta Enemy_Y_MoveForce,x
09BBF A9 FF                           lda #$ff                 ;set moving speed for platforms going up
09BC1 95 92                           sta Enemy_Y_Speed,x
09BC3 4C CF 9B                        jmp CommonSmallLift      ;skip ahead to part we should be executing
09BC6                           
09BC6                           ;--------------------------------
09BC6                           
09BC6                           PlatLiftDown:
09BC6 A9 F0                           lda #$f0                 ;set movement amount here
09BC8 9D 34 04                        sta Enemy_Y_MoveForce,x
09BCB A9 00                           lda #$00                 ;set moving speed for platforms going down
09BCD 95 92                           sta Enemy_Y_Speed,x
09BCF                           
09BCF                           ;--------------------------------
09BCF                           
09BCF                           CommonSmallLift:
09BCF A0 01                           ldy #$01
09BD1 20 E0 9B                        jsr PosPlatform           ;do a sub to add 12 pixels due to preset value  
09BD4 A9 04                           lda #$04
09BD6 9D 9A 04                        sta Enemy_BoundBoxCtrl,x  ;set bounding box control for small platforms
09BD9 60                              rts
09BDA                           
09BDA                           ;--------------------------------
09BDA                           
09BDA                           PlatPosDataLow:
09BDA 08 0C F8                        .db $08,$0c,$f8
09BDD                           
09BDD                           PlatPosDataHigh:
09BDD 00 00 FF                        .db $00,$00,$ff
09BE0                           
09BE0                           PosPlatform:
09BE0 B5 79                           lda Enemy_X_Position,x  ;get horizontal coordinate
09BE2 18                              clc
09BE3 79 DA 9B                        adc PlatPosDataLow,y    ;add or subtract pixels depending on offset
09BE6 95 79                           sta Enemy_X_Position,x  ;store as new horizontal coordinate
09BE8 B5 60                           lda Enemy_PageLoc,x
09BEA 79 DD 9B                        adc PlatPosDataHigh,y   ;add or subtract page location depending on offset
09BED 95 60                           sta Enemy_PageLoc,x     ;store as new page location
09BEF 60                              rts                     ;and go back
09BF0                           
09BF0                           ;--------------------------------
09BF0                           
09BF0                           EndOfEnemyInitCode:
09BF0 60                              rts
09BF1                           GameText1:
09BF1                           TopStatusBarLine1:
09BF1                             ;.db $20, $43, $05, $16, $0a, $1b, $12, $18 ; "MARIO"
09BF1 20 43 0E 16 0A 1B 12 18..   .db $20, $43, $0e, "MARIO"-55, $24, $24, $24, $24, $24, $16, $29, $00, $05
09C02                           if CHEATS && CHEAT_REMOVE_TIMER
09C02                               .db $20, $52, $05, $20, $18, $1b, $15, $0d ; "WORLD"
09C02                             else
09C02 20 52 0B 20 18 1B 15 0D       .db $20, $52, $0b, $20, $18, $1b, $15, $0d ; "WORLD  TIME"
09C0A 24 24 1D 12 16 0E             .db $24, $24, $1d, $12, $16, $0e
09C10                             endif
09C10 20 68 05 00 24 24 2E 29     .db $20, $68, $05, $00, $24, $24, $2e, $29 ; score trailing digit and coin display
09C18 23 C0 7F AA                 .db $23, $c0, $7f, $aa ; attribute table data, clears name table 0 to palette 2
09C1C 23 C2 01 EA                 .db $23, $c2, $01, $ea ; attribute table data, used for coin icon in status bar
09C20 FF                          .db $ff ; end of data block
09C21                           
09C21                           WorldLivesDisplay1:
09C21 21 CD 07 24 24              .db $21, $cd, $07, $24, $24 ; cross with spaces used on
09C26 29 24 24 24 24              .db $29, $24, $24, $24, $24 ; lives display
09C2B 21 4B 09 20 18              .db $21, $4b, $09, $20, $18 ; "WORLD  - " used on lives display
09C30 1B 15 0D 24 24 28 24        .db $1b, $15, $0d, $24, $24, $28, $24
09C37 22 0C 47 24                 .db $22, $0c, $47, $24 ; possibly used to clear time up
09C3B                             if LIVES_FIX !=1
09C3B                                   .db $23, $dc, $01, $ba ; attribute table data for crown if more than 9 lives
09C3B                             endif
09C3B FF                          .db $ff
09C3C                           
09C3C                           ;TwoPlayerTimeUp1:
09C3C                            ; .db $21, $cd, $05, $16, $0a, $1b, $12, $18 ; "MARIO"
09C3C                           OnePlayerTimeUp1:
09C3C 22 0C 07 1D 12 16 0E 24..   .db $22, $0c, $07, $1d, $12, $16, $0e, $24, $1e, $19 ; "TIME UP"
09C46 FF                          .db $ff
09C47                           
09C47                           if GAME_OVER_MENU == 1
09C47                               TwoPlayerGameOver1:
09C47 21 2D 05 16 0A 1B 12 18         .db $21, $2d, $05, $16, $0a, $1b, $12, $18 ; "MARIO"
09C4F                               OnePlayerGameOver1:
09C4F                               GameOver1:
09C4F 21 6B 09 10 0A 16 0E 24         .db $21, $6b, $09, $10, $0a, $16, $0e, $24 ;"GAME OVER"
09C57 18 1F 0E 1B                     .db $18, $1f, $0e, $1b
09C5B 21 EB 08 0C 18 17 1D 12..       .db $21, $eb, $08, $0c, $18, $17, $1d, $12, $17, $1e, $0e ;"CONTINUE"
09C66 22 0C 47 24                     .db $22, $0c, $47, $24
09C6A 22 4B 03 0E 17 0D               .db $22, $4b, $03, "END"-55 ;"END"
09C70 FF                              .db $ff
09C71                           else
09C71                               TwoPlayerGameOver1:
09C71                                 .db $21, $cd, $05, $16, $0a, $1b, $12, $18 ; "MARIO"
09C71                               OnePlayerGameOver1:
09C71                                 .db $22, $0b, $09, $10, $0a, $16, $0e, $24 ; "GAME OVER"
09C71                                 .db $18, $1f, $0e, $1b
09C71                                 .db $ff
09C71                           endif
09C71                           
09C71                           WarpZoneWelcome1:
09C71 25 84 15 20 0E 15 0C 18..   .db $25, $84, $15, $20, $0e, $15, $0c, $18, $16 ; "WELCOME TO WARP ZONE!"
09C7A 0E 31 1D 18 30 20 0A 1B..   .db $0e, $31, $1d, $18, $30, $20, $0a, $1b, $19
09C83 31 23 18 17 0E 2B           .db $31, $23, $18, $17, $0e, $2b
09C89 26 25 01 24                 .db $26, $25, $01, $24         ; placeholder for left pipe
09C8D 26 2D 01 24                 .db $26, $2d, $01, $24         ; placeholder for middle pipe
09C91 26 35 01 24                 .db $26, $35, $01, $24         ; placeholder for right pipe
09C95 27 D9 46 AA                 .db $27, $d9, $46, $aa         ; attribute data
09C99 27 E1 45 AA                 .db $27, $e1, $45, $aa
09C9D FF                          .db $ff
09C9E                           
09C9E                           ;LuigiName:
09C9E                           ;  .db $15, $1e, $12, $10, $12    ; "LUIGI", no address or length00         ; world 4-2 to world 5
09C9E                           
09C9E                           GameTextOffsets1:
09C9E 00 00                       .db TopStatusBarLine1-GameText1, TopStatusBarLine1-GameText1
09CA0 30 30                       .db WorldLivesDisplay1-GameText1, WorldLivesDisplay1-GameText1
09CA2 4B 4B                       .db OnePlayerTimeUp1-GameText1, OnePlayerTimeUp1-GameText1
09CA4 5E 5E                       .db GameOver1-GameText1, GameOver1-GameText1
09CA6 80 80                       .db WarpZoneWelcome1-GameText1, WarpZoneWelcome1-GameText1
09CA8                           
09CA8                           WriteGameText1:
09CA8 48                        			   pha                      ;save text number to stack
09CA9 0A                                       asl
09CAA A8                                       tay                      ;multiply by 2 and use as offset
09CAB C0 04                                    cpy #$04                 ;if set to do top status bar or world/lives display,
09CAD 90 07                                    bcc LdGameText1           ;branch to use current offset as-is
09CAF C0 08                                    cpy #$08                 ;if set to do time-up or game over,
09CB1 90 02                                    bcc Chk2Players1         ;branch to check players
09CB3 A0 08                                    ldy #$08                 ;otherwise warp zone, therefore set offset
09CB5                           Chk2Players1:  ;lda NumberOfPlayers     ;check for number of players
09CB5                                          ;bne LdGameText          ;if there are two, use current offset to also print name
09CB5 C8                                       iny                      ;otherwise increment offset by one to not print name
09CB6 BE 9E 9C                  LdGameText1:   ldx GameTextOffsets1,y    ;get offset to message we want to print
09CB9 A0 00                                    ldy #$00
09CBB BD F1 9B                  GameTextLoop1: lda GameText1,x           ;load message data
09CBE C9 FF                                    cmp #$ff                 ;check for terminator
09CC0 F0 07                                    beq EndGameText1          ;branch to end text if found
09CC2 99 01 64                                 sta VRAM_Buffer1,y       ;otherwise write data to buffer
09CC5 E8                        			   inx                      ;and increment increment
09CC6 C8                                       iny
09CC7 D0 F2                                    bne GameTextLoop1         ;do this for 256 bytes if no terminator found
09CC9 A9 00                     EndGameText1:  lda #$00                 ;put null terminator at end
09CCB 99 01 64                                 sta VRAM_Buffer1,y
09CCE 68                                       pla                      ;pull original text number from stack
09CCF AA                                       tax
09CD0 C9 04                                    cmp #$04                 ;are we printing warp zone?
09CD2 E9 04                                    sbc #$04               ;subtract 4 and then shift to the left
09CD4 0A                                       asl                    ;twice to get proper warp zone number
09CD5 0A                                       asl                    ;offset
09CD6 AA                                       tax
09CD7 A0 00                                    ldy #$00
09CD9 BD F5 8F                  WarpNumLoop1:  lda WarpZoneNumbers1,x  ;print warp zone numbers into the
09CDC 99 1C 64                  			   sta VRAM_Buffer1+27,y  ;placeholders from earlier
09CDF E8                                       inx
09CE0 C8                                       iny                    ;put a number in every fourth space
09CE1 C8                                       iny
09CE2 C8                        			   iny
09CE3 C8                                       iny
09CE4 C0 0C                                    cpy #$0c
09CE6 90 F1                                    bcc WarpNumLoop1
09CE8 A9 2C                                    lda #$2c               ;load new buffer pointer at end of message
09CEA 8D 00 64                                 sta VRAM_Buffer1_Offset
09CED 60                        			   rts
09CEE                           	
09CEE                           PaletteMTtable:
09CEE 00 00 00 00 00 00 00 00.. 	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09CFE 00 00 00 00 00 00 00 00.. 	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00	
09D0E 00 00 00 00 00 00 00 00.. 	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09D1E 00 00 00 00 00 00 00 00.. 	.db $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
09D2E                           	
09D2E 01 01 01 01 01 01 01 01.. 	.db $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01	
09D3E 01 01 01 01 01 01 01 01.. 	.db $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
09D4E 01 01 01 01 01 01 01 01.. 	.db $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
09D5E 01 01 01 01 01 01 01 01.. 	.db $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
09D6E                           	
09D6E 02 02 02 02 02 02 02 02.. 	.db $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02	
09D7E 02 02 02 02 02 02 02 02.. 	.db $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
09D8E 02 02 02 02 02 02 02 02.. 	.db $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
09D9E 02 02 02 02 02 02 02 02.. 	.db $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
09DAE                           	
09DAE 03 03 03 03 03 03 03 03.. 	.db $03, $03, $03, $03, $03, $03, $03, $03, $01, $01, $01, $01, $01, $01, $01, $01	
09DBE 01 01 03 03 03 03 01 01.. 	.db $01, $01, $03, $03, $03, $03, $01, $01, $01, $00, $00, $00, $01, $01, $02, $02
09DCE 02 02 01 01 01 01 00 01.. 	.db $02, $02, $01, $01, $01, $01, $00, $01, $00, $00, $00, $00, $00, $00, $00, $00
09DDE 00 00 03 03 03 03 03 03.. 	.db $00, $00, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03
09DEE                           	
09DEE                           	
09DEE                           
09DEE                           	
09DEE                           		
09DEE                           WorldAddrOffsets:
09DEE 00 05                           .db World1Areas-AreaAddrOffsets, World2Areas-AreaAddrOffsets
09DF0 0A 0E                           .db World3Areas-AreaAddrOffsets, World4Areas-AreaAddrOffsets
09DF2 12 16                           .db World5Areas-AreaAddrOffsets, World6Areas-AreaAddrOffsets
09DF4 1A 1F                           .db World7Areas-AreaAddrOffsets, World8Areas-AreaAddrOffsets
09DF6 23                              .db World9Areas-AreaAddrOffsets ;world 9
09DF7                           
09DF7                           AreaAddrOffsets:
09DF7 45 49 80 46 C0            World1Areas: .db $45, $49, $80, $46, $c0 ; Why is it $c0 and not $40?  Does it matter?
09DFC 48 49 01 47 C2            World2Areas: .db $48, $49, $01, $47, $c2
09E01 44 55 40 C3               World3Areas: .db $44, $55, $40, $c3
09E05 42 56 4C C1               World4Areas: .db $42, $56, $4c, $c1
09E09 4A 51 57 C6               World5Areas: .db $4a, $51, $57, $c6
09E0D 4E 43 4D C7               World6Areas: .db $4e, $43, $4d, $c7
09E11 53 49 02 58 C4            World7Areas: .db $53, $49, $02, $58, $c4
09E16 50 52 41 C5               World8Areas: .db $50, $52, $41, $c5
09E1A 59 49 5A C8               World9Areas: .db $59, $49, $5a, $c8
09E1E                           
09E1E                           
09E1E                           ;AreaAddrOffsets:
09E1E                           ;World1Areas: .db $25, $29, $40, $26, $60 ; Why is it $c0 and not $40?  Does it matter?
09E1E                           ;World2Areas: .db $28, $29, $01, $27, $62
09E1E                           ;World3Areas: .db $24, $35, $20, $63
09E1E                           ;World4Areas: .db $22, $29, $41, $2c, $61
09E1E                           ;World5Areas: .db $2a, $31, $26, $62
09E1E                           ;World6Areas: .db $2e, $23, $2d, $60
09E1E                           ;World7Areas: .db $33, $29, $01, $27, $64
09E1E                           ;World8Areas: .db $30, $32, $21, $65
09E1E                           ;World9Areas: .db $27, $66
09E1E                           
09E1E                           ;bonus area data offsets, included here for comparison purposes
09E1E                           ;underground bonus area  - c2
09E1E                           ;cloud area 1 (day)      - 2b
09E1E                           ;cloud area 2 (night)    - 34
09E1E                           ;water area (5-2/6-2)    - 00
09E1E                           ;water area (8-4)        - 02
09E1E                           ;warp zone area (4-2)    - 2f
09E1E                           
09E1E                           ;EnemyAddrHOffsets:
09E1E                           ;      .db $1f, $06, $1c, $00
09E1E                           
09E1E                           ;EnemyDataAddrLow:
09E1E                           ;      .db <E_CastleArea1, <E_CastleArea2, <E_CastleArea3, <E_CastleArea4, <E_CastleArea5, <E_CastleArea6
09E1E                           ;      .db <E_GroundArea1, <E_GroundArea2, <E_GroundArea3, <E_GroundArea4, <E_GroundArea5, <E_GroundArea6
09E1E                           ;      .db <E_GroundArea7, <E_GroundArea8, <E_GroundArea9, <E_GroundArea10, <E_GroundArea11, <E_GroundArea12
09E1E                           ;      .db <E_GroundArea13, <E_GroundArea14, <E_GroundArea15, <E_GroundArea16, <E_GroundArea17, <E_GroundArea18
09E1E                           ;      .db <E_GroundArea19, <E_GroundArea20, <E_GroundArea21, <E_GroundArea22, <E_UndergroundArea1
09E1E                           ;      .db <E_UndergroundArea2, <E_UndergroundArea3, <E_WaterArea1, <E_WaterArea2, <E_WaterArea3
09E1E                           
09E1E                           EnemyAddrHOffsets:
09E1E 26                              .db EnemyDataAddrLow_WaterStart - EnemyDataAddrLow          ; Water
09E1F 08                              .db EnemyDataAddrLow_GroundStart - EnemyDataAddrLow         ; Ground
09E20 23                              .db EnemyDataAddrLow_UndergroundStart - EnemyDataAddrLow    ; Underground
09E21 00                              .db EnemyDataAddrLow_CastleStart - EnemyDataAddrLow         ; castle
09E22                           ;.db "98uj3urh3q2nwfyw3q2ghf276"
09E22                           
09E22                           EnemyDataAddrLow:
09E22                               ; Castle
09E22                               EnemyDataAddrLow_CastleStart:
09E22 00 00 00 00 36 37 EC CF         .db <E_CastleArea1, <E_CastleArea2, <E_CastleArea3, <E_CastleArea4, <E_CastleArea5, <E_CastleArea6, <E54, <E64
09E2A                               ; Ground
09E2A                               EnemyDataAddrLow_GroundStart:
09E2A 39 39 76 51 B1 3A               .db <E_GroundArea1, <E_GroundArea2, <E_GroundArea3, <E_GroundArea4, <E_GroundArea5, <E_GroundArea6
09E30 60 3D A1 DC 7A DF               .db <E_GroundArea7, <E_GroundArea8, <E_GroundArea9, <E_GroundArea10, <E_GroundArea11, <E_GroundArea12
09E36 0B 88 00 E0 E1 45               .db <E_GroundArea13, <E_GroundArea14, <E_GroundArea15, <E_GroundArea16, <E_GroundArea17, <E_GroundArea18
09E3C E2 00 E3 E4 BC B1 6F 6F..       .db <E_GroundArea19, <E_GroundArea20, <E_GroundArea21, <E_GroundArea22, <E42, <E53, <E73, <E91, <E93
09E45                               ; UnderGround
09E45                               EnemyDataAddrLow_UndergroundStart:
09E45 E4 2E 2F                        .db <E_UndergroundArea1, <E_UndergroundArea2, <E_UndergroundArea3
09E48                               ; Water
09E48                               EnemyDataAddrLow_WaterStart:
09E48 30 72 31                        .db <E_WaterArea1, <E_WaterArea2, <E_WaterArea3
09E4B                           
09E4B                           EnemyDataAddrHigh:
09E4B                               ; Castle
09E4B A0 A0 A0 A0 A0 A0 A0 A0         .db >E_CastleArea1, >E_CastleArea2, >E_CastleArea3, >E_CastleArea4, >E_CastleArea5, >E_CastleArea6, >E54, >E64
09E53                               ; Ground
09E53 A0 A0 A0 A0 A0 A0               .db >E_GroundArea1, >E_GroundArea2, >E_GroundArea3, >E_GroundArea4, >E_GroundArea5, >E_GroundArea6
09E59 A0 A0 A0 A0 A0 A0               .db >E_GroundArea7, >E_GroundArea8, >E_GroundArea9, >E_GroundArea10, >E_GroundArea11, >E_GroundArea12
09E5F A1 A0 A0 A0 A0 A0               .db >E_GroundArea13, >E_GroundArea14, >E_GroundArea15, >E_GroundArea16, >E_GroundArea17, >E_GroundArea18
09E65 A0 A1 A0 A0 A0 A0 BD BD..       .db >E_GroundArea19, >E_GroundArea20, >E_GroundArea21, >E_GroundArea22, >E42, >E53, >E73, >E91, >E93
09E6E                               ; Underground
09E6E A0 A1 A1                        .db >E_UndergroundArea1, >E_UndergroundArea2, >E_UndergroundArea3
09E71                               ; Water
09E71 A1 A0 A1                        .db >E_WaterArea1, >E_WaterArea2, >E_WaterArea3
09E74                           
09E74                           ;AreaDataHOffsets:
09E74                           ;      .db $00, $03, $19, $1c
09E74                           ;.db "AreaDataHOffsets"
09E74                           AreaDataHOffsets:
09E74 00                        	.db AreaDataAddrLow_WaterStart - AreaDataAddrLow            ; Water
09E75 03                        	.db AreaDataAddrLow_GroundStart - AreaDataAddrLow           ; Ground
09E76 1E                        	.db AreaDataAddrLow_UndergroundStart - AreaDataAddrLow      ; Underground
09E77 21                        	.db AreaDataAddrLow_CastleStart - AreaDataAddrLow           ; castle
09E78                           
09E78                           AreaDataAddrLow:
09E78                               ; Water
09E78                               AreaDataAddrLow_WaterStart:
09E78 69 45 6C                        .db <L_WaterArea1, <L_WaterArea2, <L_WaterArea3
09E7B                               ; Ground
09E7B                               AreaDataAddrLow_GroundStart:
09E7B 33 DE E6 0C 4E E1               .db <L_GroundArea1, <L_GroundArea2, <L_GroundArea3, <L_GroundArea4, <L_GroundArea5, <L_GroundArea6
09E81 1D 53 C0 CD CE 42               .db <L_GroundArea7, <L_GroundArea8, <L_GroundArea9, <L_GroundArea10, <L_GroundArea11, <L_GroundArea12
09E87 7D 0D 3B 57 5A 33               .db <L_GroundArea13, <L_GroundArea14, <L_GroundArea15, <L_GroundArea16, <L_GroundArea17, <L_GroundArea18
09E8D 5D 37 60 A0 A8 52 70 70..       .db <L_GroundArea19, <L_GroundArea20, <L_GroundArea21, <L_GroundArea22, <L42, <L53, <L73, <L91, <L93
09E96                               ; Underground
09E96                               AreaDataAddrLow_UndergroundStart:
09E96 C6 63 66                        .db <L_UndergroundArea1, <L_UndergroundArea2, <L_UndergroundArea3
09E99                               ; Castle
09E99                               AreaDataAddrLow_CastleStart:
09E99 32 27 1B 3E D5 D8 3B 9C         .db <L_CastleArea1, <L_CastleArea2, <L_CastleArea3, <L_CastleArea4, <L_CastleArea5, <L_CastleArea6, <L54, <L64
09EA1                           
09EA1                           AreaDataAddrHigh:
09EA1                               ; Water
09EA1 BD B5 BD                        .db >L_WaterArea1, >L_WaterArea2, >L_WaterArea3
09EA4                               ; Ground
09EA4 A5 A6 A9 A7 A6 A6               .db >L_GroundArea1, >L_GroundArea2, >L_GroundArea3, >L_GroundArea4, >L_GroundArea5, >L_GroundArea6
09EAA AF AA B5 BC A5 BD               .db >L_GroundArea7, >L_GroundArea8, >L_GroundArea9, >L_GroundArea10, >L_GroundArea11, >L_GroundArea12
09EB0 AF AD A1 BD BD AC               .db >L_GroundArea13, >L_GroundArea14, >L_GroundArea15, >L_GroundArea16, >L_GroundArea17, >L_GroundArea18
09EB6 BD B6 BD B0 B6 B2 BD BD..       .db >L_GroundArea19, >L_GroundArea20, >L_GroundArea21, >L_GroundArea22, >L42, >L53, >L73, >L91, >L93
09EBF                               ; Underground
09EBF AA BD BD                        .db >L_UndergroundArea1, >L_UndergroundArea2, >L_UndergroundArea3
09EC2                               ; Castle
09EC2 A1 A1 A1 A1 A6 A6 B8 B3         .db >L_CastleArea1, >L_CastleArea2, >L_CastleArea3, >L_CastleArea4, >L_CastleArea5, >L_CastleArea6, >L54, >L64
09ECA                           
09ECA                           ;ENEMY OBJECT DATA
09ECA                           
09ECA                            			   
09ECA                           			   
09ECA 00 00 00 00 00 00 00 00.. pad $a0000A000 00 00 00 00 00 00 00 00.. pad $c000
0C000                           
0C000                           ; bank 05 -- level banks
0C000                           
0C000                                                ; bank identifier
0C000                           include code\bank05.asm
0C000                           ; -----------
0C000                           ; LEVEL BANKS
0C000                           ; -----------
0C000                           
0C000                           ExLVLID = 1
0C000                           ;07
0C000                           base $a000
0A000                           include code\leveldata\levelData.asm
0A000                           ; [e] used in enemy data
0A000                           ; [l] used in level data
0A000                           TwoGoombas = #$37    ; [e] Two Goombas
0A000                           ThreeGoombas = #$38    ; [e] Three Goombas
0A000                           PageSkip = #$0f      ; [e] Use on first byte to skip a number of pages specified by the second byte.
0A000                           PageFlag = #$80      ; [e,l] Add to second byte to skip to the next page
0A000                           Objects1Flag = #$10  ; [l] Tree ledge to Vertical pipe.  Add to second byte
0A000                           Objects2Flag = #$0c  ; [l] Hole to low ? blocks.  Add to first byte
0A000                           Objects3Flag = #$0d  ; [l] Intro pipe to loop keeper.  Add to first byte.  use this for flagpole
0A000                           Objects4Flag = #$0f  ; [l] Intro pipe to loop keeper.  Add to first byte
0A000                           WarpFlag = #$08      ; [l] Add this to a pipe to make it a warp pipe
0A000                           
0A000                           
0A000                           ONOFFS = #$8d
0A000                           
0A000                           
0A000                           powerup = #$00
0A000                           coin = #$01
0A000                           hcoin = #$02
0A000                           h1up = #$03
0A000                           bpowerup = #$04
0A000                           bvine = #$05
0A000                           bstar = #$06
0A000                           bcoins = #$07
0A000                           b1up = #$08
0A000                           custom = #$0b
0A000                           hpowerup = #$0c
0A000                           hstar = #$0d
0A000                           star = #$0e
0A000                           oneup = #$0f
0A000                           
0A000                           
0A000                           ;GAME LEVELS DATA
0A000                           ;.db "GAMELEVELSDATA"
0A000                           
0A000                           
0A000                           ;.db "ENEMYOBJECTDATA"
0A000                           ;level 1-4
0A000                           E_CastleArea1:
0A000                           
0A000 A5 40 07                   .db #10 * $10 + 5, #64, $07
0A003 0F 02                      .db PageSkip, #2
0A005 0F 03                      .db PageSkip, #3
0A007 0F 04                      .db PageSkip, #4
0A009                           
0A009 B5 83                      .db #11 * $10 + 5, #3 + $80
0A00B                           
0A00B 8B 89                      .db #8 * $10 + 11, #9 + $80
0A00D BB 09                      .db #11 * $10 + 11, #9
0A00F                           
0A00F F2 8C                      .db #15 * $10 + 2, #12 + $80
0A011                           
0A011 32 8C                      .db #3 * $10 + 2, #12 + $80
0A013 72 0C                      .db #7 * $10 + 2, #12
0A015                           
0A015 06 8C                      .db #0 * $10 + 6, #12 + $80
0A017 93 0C                      .db #9 * $10 + 3, #12
0A019 D6 03                      .db #13 * $10 + 6, #3
0A01B                           
0A01B A6 83                      .db #10 * $10 + 6, #3 + $80
0A01D                           
0A01D 77 92                      .db #7 * $10 + 7, #18 + $80
0A01F E7 0C                      .db #14 * $10 + 7, #12
0A021                           
0A021 98 83                      .db #9 * $10 + 8, #3 + $80
0A023 F7 03                      .db #15 * $10 + 7, #3
0A025 FA 1D                      .db #15 * $10 + 10, #29
0A027                           
0A027 A5 8C                      .db #10 * $10 + 5, #12 + $80
0A029 E7 00                      .db #14 * $10 + 7, #0
0A02B                           
0A02B 37 80                      .db #3 * $10 + 7, #0 + $80
0A02D 85 0C                      .db #8 * $10 + 5, #12
0A02F                           
0A02F 48 AD                      .db #4 * $10 + 8, #45 + $80
0A031                           
0A031 1B C1                      .db #1 * $10 + 11, #65 + $80
0A033 9B 35                      .db #9 * $10 + 11, #53
0A035 FF                              .db $ff
0A036                           
0A036                           
0A036                           
0A036                           ;level 7-4
0A036                           E_CastleArea5:
0A036 FF                              .db $ff
0A037                           
0A037                           ;level 8-4
0A037                           E_CastleArea6:
0A037 FF                              .db $ff
0A038                           ;level 9-2
0A038                           E_CastleArea7:
0A038 FF                              .db $ff
0A039                           
0A039                           ;level 8-3
0A039                           E_GroundArea2:
0A039 FF                              .db $ff
0A03A                           
0A03A                           
0A03A                           
0A03A                           ;level 1-1
0A03A                           E_GroundArea6:
0A03A                           ;      .db $1e, $c2, $00, $6b, $06, $8b, $86, $63, $b7, $0f, $05
0A03A                           ;      .db $03, $06, $23, $06, $4b, $b7, $bb, $00, $5b, $b7
0A03A                           ;      .db $fb, $37, $3b, $b7, $0f, $0b, $1b, $37
0A03A                           ;      .db $ff
0A03A                           
0A03A                           ;TwoGoombas = $37
0A03A                           ;PageFlag = $80
0A03A                           ;PageSkip = $0f
0A03A                           
0A03A                                 ;.db $55, $16 + $80
0A03A                                 ;.db $55, $1b + $80 ; clockwise firebar
0A03A                                 ;.db $55, $1c + $80 ; fast clockwise firebar
0A03A                                 ;.db $55, $1d + $80 ; counterclockwise firebar
0A03A                                 ;.db $55, $1e + $80 ; fast counterclockwise firebar
0A03A                                 ;.db $55, $1f + $80 ; clockwise long firebar
0A03A                           ;      .db $55, $20 + $80 ; glitchy firebar (counterclockwise long firebar)
0A03A                           ;      .db $55, $21 + $80 ; glitchy firebar (clockwise fast long firebar)
0A03A                           ;      .db $55, $22 + $80 ; glitchy firebar (counterclockwise fast long firebar)
0A03A                           ;      .db $ff
0A03A                           
0A03A                                 ;.db $00, $b5 ; Mushroom Retainer
0A03A                           	
0A03A                                 ;.db $8b, PageFlag+Spiny
0A03A                           
0A03A                                 ;.db $1e, PageFlag+$42, $00
0A03A                           	  
0A03A                           	  
0A03A                           	  
0A03A                           	  
0A03A                           	  
0A03A                           	  ;.db $4a, HammerBro + PageFlag
0A03A                           	  ;.db $5a, HammerBro
0A03A                           	  ;.db $6a, HammerBro
0A03A                           	  ;.db $7a, HammerBro
0A03A                           	  ;.db $8a, HammerBro
0A03A                           	  ;.db $9a, HammerBro
0A03A                            
0A03A 4A 86                     	  .db $4a, Goomba + PageFlag
0A03C 5B 40 01                  	  .db $5b, Sign, $01
0A03F                           	  ;.db $94, PowerUpObject, $00
0A03F AA 06                     	  .db $aa, Goomba
0A041 8A BB                     	  .db $8a, $3b + PageFlag
0A043 97 06                     	  .db $97, Goomba
0A045 AA 06                     	  .db $aa, Goomba
0A047                           	  
0A047 4A 80                     	  .db $4a, GreenKoopa + PageFlag
0A049 8A 00                     	  .db $8a, GreenKoopa
0A04B                           	  
0A04B 2A 86                     	  .db $2a, Goomba + PageFlag
0A04D                           	  
0A04D BA B8                     	  .db $ba, ThreeGoombas + PageFlag
0A04F                           	  
0A04F 24 8E                     	  .db $24, GreenParatroopaJump + PageFlag
0A051 9A 03                     	  .db $9a, RedKoopa
0A053 EA 06                     	  .db $ea, Goomba
0A055                           	  
0A055 A9 A1                     	  .db $a9, UDPiranhaPlant + PageFlag
0A057 CA 00                     	  .db $ca, GreenKoopa
0A059 FA 03                     	  .db $fa, RedKoopa
0A05B                           	  
0A05B                           	  
0A05B 0F 09                     	  .db PageSkip, $09
0A05D                           	  
0A05D 22 B0                     	  .db $22, $30 + PageFlag
0A05F                           	  
0A05F                           	  
0A05F FF                        	  .db $ff
0A060                           	  
0A060                           	  
0A060                           
0A060                           ;level 1-3
0A060                           E_GroundArea7:
0A060                           
0A060 19 8D                           .db $19, PiranhaPlant + PageFlag
0A062 5A 00                     	  .db $5a, GreenKoopa
0A064 CA 06                     	  .db $ca, Goomba
0A066 DA 06                     	  .db $da, Goomba
0A068                           	  
0A068 AA 86                     	  .db $aa, Goomba + PageFlag
0A06A                           	  ;.db $aa, $14 ;fish
0A06A BA 06                     	  .db $ba, Goomba
0A06C C6 00                     	  .db $c6, GreenKoopa
0A06E                           	  
0A06E 7A A1                     	  .db $7a, UDPiranhaPlant + PageFlag
0A070 E6 0F                     	  .db $e6, RedParatroopa
0A072                           	  
0A072 99 8D                     	  .db $99, PiranhaPlant + PageFlag
0A074 EA 06                     	  .db $ea, Goomba
0A076 FA 06                     	  .db $fa, Goomba
0A078                           	  
0A078 7A A1                     	  .db $7a, UDPiranhaPlant + PageFlag
0A07A D9 02                     	  .db $d9, BuzzyBeetle
0A07C                           	  
0A07C 0F 07                     	  .db PageSkip, $07
0A07E 0A 86                     	  .db $0a, Goomba + PageFlag
0A080 1A 06                     	  .db $1a, Goomba
0A082 2A 06                     	  .db $2a, Goomba
0A084 89 0D                     	  .db $89, PiranhaPlant
0A086                           	  
0A086 15 83                     	  .db $15, RedKoopa + PageFlag
0A088 A7 0D                     	  .db $a7, PiranhaPlant
0A08A                           	  
0A08A 0A A1                     	  .db $0a, UDPiranhaPlant + PageFlag
0A08C BA 00                     	  .db $ba, GreenKoopa
0A08E E9 0D                     	  .db $e9, PiranhaPlant
0A090                           	  
0A090 2A 86                     	  .db $2a, Goomba + PageFlag
0A092 3A 06                     	  .db $3a, Goomba
0A094 4A 06                     	  .db $4a, Goomba
0A096                           	  
0A096 68 A1                     	  .db $68, UDPiranhaPlant + PageFlag
0A098 D6 05                     	  .db $d6, HammerBro
0A09A                           	  
0A09A 2A 86                     	  .db $2a, Goomba + PageFlag
0A09C 3A 06                     	  .db $3a, Goomba
0A09E 81 30                     	  .db $81, $30
0A0A0                           	  
0A0A0 FF                              .db $ff
0A0A1                           
0A0A1                           
0A0A1                           ;level 2-1
0A0A1                           E_GroundArea9:
0A0A1                                 
0A0A1 EB 40 03                  .db #14 * $10 + 11, #64, $03
0A0A4                           
0A0A4 57 A2                      .db #5 * $10 + 7, #34 + $80
0A0A6                           
0A0A6 A9 83                      .db #10 * $10 + 9, #3 + $80
0A0A8 C9 40 05                   .db #12 * $10 + 9, #64, $05
0A0AB                           
0A0AB D4 83                      .db #13 * $10 + 4, #3 + $80
0A0AD DA 06                      .db #13 * $10 + 10, #6
0A0AF EA 06                      .db #14 * $10 + 10, #6
0A0B1                           
0A0B1 4A 8D                      .db #4 * $10 + 10, #13 + $80
0A0B3 E8 03                      .db #14 * $10 + 8, #3
0A0B5                           
0A0B5 17 8D                      .db #1 * $10 + 7, #13 + $80
0A0B7 98 12                      .db #9 * $10 + 8, #18
0A0B9 C8 12                      .db #12 * $10 + 8, #18
0A0BB 0F 07                      .db PageSkip, #7
0A0BD                           
0A0BD 19 80                      .db #1 * $10 + 9, #0 + $80
0A0BF A7 06                      .db #10 * $10 + 7, #6
0A0C1 F7 06                      .db #15 * $10 + 7, #6
0A0C3 0F 09                      .db PageSkip, #9
0A0C5                           
0A0C5 18 80                      .db #1 * $10 + 8, #0 + $80
0A0C7 45 00                      .db #4 * $10 + 5, #0
0A0C9                           
0A0C9 0B 80                      .db #0 * $10 + 11, #0 + $80
0A0CB 2B 00                      .db #2 * $10 + 11, #0
0A0CD 48 20                      .db #4 * $10 + 8, #32
0A0CF                           
0A0CF 25 83                      .db #2 * $10 + 5, #3 + $80
0A0D1                           
0A0D1 3A 86                      .db #3 * $10 + 10, #6 + $80
0A0D3 D6 03                      .db #13 * $10 + 6, #3
0A0D5                           
0A0D5 52 B0                      .db #5 * $10 + 2, #48 + $80
0A0D7 0F 0F                      .db PageSkip, #15
0A0D9 0F 10                      .db PageSkip, #16
0A0DB FF                         .db $ff
0A0DC                           ;end of data terminator here is also used by pipe intro area
0A0DC                           E_GroundArea10:
0A0DC 00 C1                           .db $00, ScrollLockEnemy + PageFlag
0A0DE FF                        	  .db $ff
0A0DF                           
0A0DF                           ;cloud level used in levels 2-1 and 5-2
0A0DF                           E_GroundArea12:
0A0DF FF                              .db $ff
0A0E0                           
0A0E0                           
0A0E0                           
0A0E0                           
0A0E0                           
0A0E0                           ;warp zone area used in level 4-2
0A0E0                           E_GroundArea16:
0A0E0 FF                              .db $ff
0A0E1                           
0A0E1                           ;level 8-1
0A0E1                           E_GroundArea17:
0A0E1 FF                              .db $ff
0A0E2                           
0A0E2                           
0A0E2                           
0A0E2                           ;level 8-2
0A0E2                           E_GroundArea19:
0A0E2 FF                              .db $ff
0A0E3                           
0A0E3                           
0A0E3                           ;cloud level used in levels 3-1 and 6-2
0A0E3                           E_GroundArea21:
0A0E3 FF                              .db $ff
0A0E4                           
0A0E4                           ;level 1-2
0A0E4                           E_UndergroundArea1:
0A0E4 EE 45 08 00               	  .db $ee, $45, $08, $00
0A0E8 19 86                     	  .db $19, Goomba + PageFlag
0A0EA 28 06                     	  .db $28, Goomba
0A0EC 5B 40 02                  	  .db $5b, Sign, $02
0A0EF 6A 06                     	  .db $6a, Goomba
0A0F1 79 21                     	  .db $79, UDPiranhaPlant
0A0F3 C9 0D                     	  .db $c9, PiranhaPlant
0A0F5                           	  
0A0F5 9A 80                     	  .db $9a, GreenKoopa + PageFlag
0A0F7 A9 21                     	  .db $a9, UDPiranhaPlant
0A0F9 BA 02                     	  .db $ba, BuzzyBeetle
0A0FB                           	  
0A0FB 39 A0                     	  .db $39, RedPiranhaPlant + PageFlag
0A0FD 9A 21                     	  .db $9a, UDPiranhaPlant
0A0FF C5 20                     	  .db $c5, RedPiranhaPlant
0A101 CA 21                     	  .db $ca, UDPiranhaPlant
0A103                           	  
0A103 39 A2                     	  .db $39, RUDPiranhaPlant + PageFlag
0A105 8A 00                     	  .db $8a, GreenKoopa
0A107 9A 00                     	  .db $9a, GreenKoopa
0A109 B9 0D                     	  .db $b9, PiranhaPlant
0A10B                           	  
0A10B 4A 85                     	  .db $4a, HammerBro + PageFlag
0A10D 66 06                     	  .db $66, Goomba
0A10F D9 22                     	  .db $d9, RUDPiranhaPlant
0A111                           	  
0A111 BA 86                     	  .db $ba, Goomba + PageFlag
0A113 CA 06                     	  .db $ca, Goomba
0A115                           	  
0A115 6A 86                     	  .db $6a, Goomba + PageFlag
0A117 AA 22                     	  .db $aa, RUDPiranhaPlant
0A119 FA 02                     	  .db $fa, BuzzyBeetle
0A11B                           	  
0A11B 95 8E                     	  .db $95, GreenParatroopaJump + PageFlag
0A11D DA 21                     	  .db $da, UDPiranhaPlant
0A11F                           	  
0A11F 99 93                     	  .db $99, BlackParatroopa + PageFlag
0A121                           	  
0A121 2A 89                     	  .db $2a, FastGoomba + PageFlag
0A123 FA 0D                     	  .db $fa, PiranhaPlant
0A125                           	  
0A125 4A A1                     	  .db $4a, UDPiranhaPlant + PageFlag
0A127 8A 00                     	  .db $8a, GreenKoopa
0A129 9A 00                     	  .db $9a, GreenKoopa
0A12B                           	  
0A12B 33 C1                     	  .db $33, ScrollLockEnemy + PageFlag
0A12D                           	  
0A12D FF                              .db $ff
0A12E                           
0A12E                           ;level 9-2
0A12E                           E_UndergroundArea2:
0A12E FF                              .db $ff
0A12F                           
0A12F                           ;underground bonus rooms area used in many levels
0A12F                           E_UndergroundArea3:
0A12F FF                              .db $ff
0A130                           
0A130                           ;water area used in levels 5-2 and 6-2
0A130                           E_WaterArea1:
0A130 FF                              .db $ff
0A131                           
0A131                           
0A131                           
0A131                           ;level 7-2
0A131                           E_WaterArea3:
0A131 FF                              .db $ff
0A132                           
0A132                           ;AREA OBJECT DATA
0A132                           ;.db "AREAOBJECTDATA"
0A132                           
0A132                           ;level 1-4/6-4
0A132                           L_CastleArea1:
0A132 9B 07                           .db $9b, $07
0A134                                 include "code\leveldata\levels\1-4.asm"
0A134                           
0A134 0F 62 0C 00 01 62 06 00.. .db $0f, $62, $0c, $00, $01, $62, $06, $00, $02, $c2, $03, $00, $01, $62, $00, $00
0A144 00 62 0B 00 01 62 00 00.. .db $00, $62, $0b, $00, $01, $62, $00, $00, $01, $62, $0a, $00, $01, $62, $00, $8c
0A154 05 62 02 00 00 62 01 63.. .db $05, $62, $02, $00, $00, $62, $01, $63, $00, $00, $08, $62, $02, $00, $00, $62
0A164 02 00 08 62 02 00 00 62.. .db $02, $00, $08, $62, $02, $00, $00, $62, $02, $00, $08, $62, $02, $90, $00, $62
0A174 01 63 00 00 08 62 02 91.. .db $01, $63, $00, $00, $08, $62, $02, $91, $00, $62, $05, $00, $05, $62, $02, $91
0A184 00 62 05 00 05 62 02 91.. .db $00, $62, $05, $00, $05, $62, $02, $91, $00, $62, $05, $1a, $05, $62, $02, $91
0A194 00 62 05 91 0F 62 00 00.. .db $00, $62, $05, $91, $0f, $62, $00, $00, $00, $26, $0e, $00, $00, $26, $0e, $00
0A1A4 00 26 0E 00 00 26 0E 00.. .db $00, $26, $0e, $00, $00, $26, $0e, $00, $00, $26, $00, $00, $02, $62, $02, $00
0A1B4 02 62 02 63 00 62 00 00.. .db $02, $62, $02, $63, $00, $62, $00, $00, $00, $26, $00, $00, $02, $62, $08, $00
0A1C4 00 62 00 00 00 26 00 00.. .db $00, $62, $00, $00, $00, $26, $00, $00, $02, $62, $00, $28, $02, $00, $00, $c1
0A1D4 02 00 00 34 00 62 00 00.. .db $02, $00, $00, $34, $00, $62, $00, $00, $00, $26, $00, $00, $02, $62, $01, $28
0A1E4 04 00 01 28 00 62 00 00.. .db $04, $00, $01, $28, $00, $62, $00, $00, $00, $26, $00, $00, $02, $62, $02, $28
0A1F4 02 00 02 28 00 62 00 00.. .db $02, $00, $02, $28, $00, $62, $00, $00, $00, $26, $00, $00, $02, $62, $08, $63
0A204 00 62 02 1A 02 62 08 90.. .db $00, $62, $02, $1a, $02, $62, $08, $90, $00, $62, $02, $91, $02, $62, $08, $91
0A214 10 62 03 00 00 26 02 00.. .db $10, $62, $03, $00, $00, $26, $02, $00, $00, $26, $0a, $00, $00, $26, $02, $00
0A224 00 26 02 00 03 C2 03 00.. .db $00, $26, $02, $00, $03, $c2, $03, $00, $00, $26, $02, $00, $00, $26, $0a, $00
0A234 00 26 02 00 00 26 06 00.. .db $00, $26, $02, $00, $00, $26, $06, $00, $00, $62, $02, $00, $00, $26, $02, $00
0A244 00 26 01 00 03 62 00 63.. .db $00, $26, $01, $00, $03, $62, $00, $63, $00, $62, $02, $00, $00, $26, $02, $00
0A254 00 26 01 00 00 28 03 00.. .db $00, $26, $01, $00, $00, $28, $03, $00, $00, $62, $02, $00, $00, $26, $02, $00
0A264 00 26 01 00 00 28 03 00.. .db $00, $26, $01, $00, $00, $28, $03, $00, $00, $62, $02, $00, $00, $26, $02, $00
0A274 00 26 01 00 00 28 03 00.. .db $00, $26, $01, $00, $00, $28, $03, $00, $00, $62, $06, $00, $00, $26, $01, $00
0A284 00 28 01 00 00 C7 00 63.. .db $00, $28, $01, $00, $00, $c7, $00, $63, $00, $62, $09, $00, $00, $28, $03, $00
0A294 00 62 09 90 00 61 03 00.. .db $00, $62, $09, $90, $00, $61, $03, $00, $00, $62, $09, $91, $13, $62, $00, $34
0A2A4 0B 00 00 62 05 00 01 C2.. .db $0b, $00, $00, $62, $05, $00, $01, $c2, $06, $00, $00, $62, $00, $2a, $0d, $00
0A2B4 00 62 04 00 03 0B 05 00.. .db $00, $62, $04, $00, $03, $0b, $05, $00, $00, $62, $01, $00, $00, $8b, $00, $63
0A2C4 00 62 03 63 01 62 08 00.. .db $00, $62, $03, $63, $01, $62, $08, $00, $00, $62, $03, $00, $02, $62, $07, $00
0A2D4 00 62 03 00 03 62 00 00.. .db $00, $62, $03, $00, $03, $62, $00, $00, $04, $62, $00, $00, $00, $62, $03, $90
0A2E4 03 62 00 00 04 62 00 63.. .db $03, $62, $00, $00, $04, $62, $00, $63, $00, $62, $03, $91, $03, $62, $00, $00
0A2F4 04 62 00 00 00 62 03 91.. .db $04, $62, $00, $00, $00, $62, $03, $91, $03, $62, $00, $90, $04, $62, $00, $00
0A304 00 62 03 91 03 62 00 91.. .db $00, $62, $03, $91, $03, $62, $00, $91, $06, $62, $03, $91, $03, $62, $00, $91
0A314 15 62 0E 00 00 62 04 00.. .db $15, $62, $0e, $00, $00, $62, $04, $00, $02, $c2, $05, $00, $00, $c2, $00, $62
0A324 0E 00 00 62 13 00 00 62.. .db $0e, $00, $00, $62, $13, $00, $00, $62, $02, $63, $01, $00, $00, $62, $01, $00
0A334 01 62 03 00 01 62 01 00.. .db $01, $62, $03, $00, $01, $62, $01, $00, $02, $63, $00, $62, $01, $63, $00, $62
0A344 00 00 01 62 00 00 02 62.. .db $00, $00, $01, $62, $00, $00, $02, $62, $02, $63, $01, $00, $00, $62, $01, $00
0A354 00 62 00 90 01 62 00 00.. .db $00, $62, $00, $90, $01, $62, $00, $00, $02, $62, $01, $00, $03, $63, $01, $00
0A364 00 62 00 91 01 62 00 00.. .db $00, $62, $00, $91, $01, $62, $00, $00, $06, $62, $01, $90, $00, $35, $00, $8b
0A374 00 62 00 91 01 62 00 90.. .db $00, $62, $00, $91, $01, $62, $00, $90, $06, $62, $01, $91, $02, $62, $00, $91
0A384 01 62 00 91 06 62 01 91.. .db $01, $62, $00, $91, $06, $62, $01, $91, $02, $62, $00, $91, $01, $62, $00, $91
0A394 06 62 01 91 02 62 00 91.. .db $06, $62, $01, $91, $02, $62, $00, $91, $07, $62, $01, $90, $05, $62, $06, $00
0A3A4 00 62 01 91 00 62 00 00.. .db $00, $62, $01, $91, $00, $62, $00, $00, $00, $26, $02, $00, $02, $c2, $03, $00
0A3B4 00 62 01 91 00 62 00 00.. .db $00, $62, $01, $91, $00, $62, $00, $00, $00, $26, $09, $00, $00, $62, $01, $91
0A3C4 00 62 00 00 00 26 09 00.. .db $00, $62, $00, $00, $00, $26, $09, $00, $00, $62, $01, $91, $00, $62, $00, $00
0A3D4 00 26 00 00 05 62 01 63.. .db $00, $26, $00, $00, $05, $62, $01, $63, $00, $00, $00, $62, $01, $91, $00, $62
0A3E4 00 00 00 26 00 00 00 62.. .db $00, $00, $00, $26, $00, $00, $00, $62, $03, $00, $00, $62, $02, $00, $00, $62
0A3F4 01 91 00 62 00 00 00 26.. .db $01, $91, $00, $62, $00, $00, $00, $26, $00, $00, $00, $62, $03, $90, $00, $62
0A404 02 00 03 62 00 00 00 26.. .db $02, $00, $03, $62, $00, $00, $00, $26, $00, $00, $00, $62, $03, $91, $00, $62
0A414 01 63 05 00 00 26 00 00.. .db $01, $63, $05, $00, $00, $26, $00, $00, $00, $62, $03, $91, $00, $62, $07, $00
0A424 00 26 00 00 00 62 03 91.. .db $00, $26, $00, $00, $00, $62, $03, $91, $00, $62, $07, $00, $00, $26, $00, $00
0A434 00 62 03 91 0B 62 10 91.. .db $00, $62, $03, $91, $0b, $62, $10, $91, $0f, $62, $1a, $00, $02, $c0, $11, $00
0A444 02 62 00 29 00 00 00 C0.. .db $02, $62, $00, $29, $00, $00, $00, $c0, $00, $00, $00, $29, $00, $62, $08, $00
0A454 00 62 04 00 01 62 05 00.. .db $00, $62, $04, $00, $01, $62, $05, $00, $01, $90, $00, $62, $04, $00, $06, $62
0A464 00 00 01 91 00 62 04 00.. .db $00, $00, $01, $91, $00, $62, $04, $00, $06, $62, $00, $00, $01, $91, $00, $62
0A474 00 29 00 00 00 C1 00 00.. .db $00, $29, $00, $00, $00, $c1, $00, $00, $00, $29, $06, $62, $00, $00, $01, $91
0A484 00 62 04 00 06 62 00 90.. .db $00, $62, $04, $00, $06, $62, $00, $90, $01, $91, $00, $62, $04, $00, $06, $62
0A494 02 91 00 62 04 00 06 62.. .db $02, $91, $00, $62, $04, $00, $06, $62, $02, $91, $0c, $62, $00, $91, $0f, $62
0A4A4 10 00 00 C2 02 00 00 C2.. .db $10, $00, $00, $c2, $02, $00, $00, $c2, $02, $00, $00, $c2, $06, $00, $00, $c2
0A4B4 02 00 00 C2 02 00 00 C2.. .db $02, $00, $00, $c2, $02, $00, $00, $c2, $02, $00, $01, $c2, $20, $00, $02, $62
0A4C4 00 00 02 62 00 00 02 62.. .db $00, $00, $02, $62, $00, $00, $02, $62, $01, $00, $01, $62, $00, $00, $02, $62
0A4D4 00 00 02 62 00 00 02 62.. .db $00, $00, $02, $62, $00, $00, $02, $62, $01, $00, $01, $62, $00, $00, $02, $62
0A4E4 00 00 02 62 00 00 02 62.. .db $00, $00, $02, $62, $00, $00, $02, $62, $04, $00, $02, $62, $00, $90, $02, $62
0A4F4 00 90 02 62 04 90 02 62.. .db $00, $90, $02, $62, $04, $90, $02, $62, $00, $91, $02, $62, $00, $91, $02, $62
0A504 04 91 02 62 00 91 02 62.. .db $04, $91, $02, $62, $00, $91, $02, $62, $00, $91, $02, $62, $04, $91, $02, $62
0A514 00 91 02 62 00 91 02 62.. .db $00, $91, $02, $62, $00, $91, $02, $62, $04, $91, $0f, $62, $15, $00, $01, $c2
0A524 13 00 02 C2 12 00 01 C2.. .db $13, $00, $02, $c2, $12, $00, $01, $c2, $01, $00, $01, $62, $0d, $00, $01, $62
0A534 02 00 04 62 0A 00 04 62.. .db $02, $00, $04, $62, $0a, $00, $04, $62, $01, $00, $01, $62, $06, $90, $04, $62
0A544 01 90 01 62 06 91 04 62.. .db $01, $90, $01, $62, $06, $91, $04, $62, $0a, $91, $04, $62, $0a, $91, $04, $62
0A554 0A 91 14 62 22 00 01 C2.. .db $0a, $91, $14, $62, $22, $00, $01, $c2, $03, $00, $02, $c2, $15, $00, $03, $0b
0A564 0B 00 00 C0 01 63 00 C7.. .db $0b, $00, $00, $c0, $01, $63, $00, $c7, $01, $00, $04, $62, $0a, $00, $04, $62
0A574 01 00 00 61 07 00 04 62.. .db $01, $00, $00, $61, $07, $00, $04, $62, $01, $00, $00, $62, $07, $8e, $04, $62
0A584 01 90 00 62 07 90 04 62.. .db $01, $90, $00, $62, $07, $90, $04, $62, $01, $91, $00, $62, $07, $91, $04, $62
0A594 01 91 00 62 07 91 04 62.. .db $01, $91, $00, $62, $07, $91, $04, $62, $01, $91, $10, $62, $0d, $00, $00, $62
0A5A4 0E 00 00 62 00 00 02 C2.. .db $0e, $00, $00, $62, $00, $00, $02, $c2, $00, $00, $00, $8d, $00, $00, $02, $c2
0A5B4 04 00 00 62 0E 00 00 C4.. .db $04, $00, $00, $62, $0e, $00, $00, $c4, $10, $00, $08, $0b, $06, $00, $00, $61
0A5C4 06 63 01 61 05 00 00 62.. .db $06, $63, $01, $61, $05, $00, $00, $62, $06, $00, $01, $62, $01, $00, $03, $8e
0A5D4 00 62 06 90 01 62 05 90.. .db $00, $62, $06, $90, $01, $62, $05, $90, $00, $62, $06, $91, $01, $62, $05, $91
0A5E4 00 62 06 91 01 62 05 91.. .db $00, $62, $06, $91, $01, $62, $05, $91, $00, $62, $06, $91, $01, $62, $05, $91
0A5F4 0F 62 3E 00 00 C2 07 00.. .db $0f, $62, $3e, $00, $00, $c2, $07, $00, $02, $c2, $17, $00, $01, $61, $08, $00
0A604 01 62 00 8E 01 00 01 62.. .db $01, $62, $00, $8e, $01, $00, $01, $62, $01, $00, $04, $62, $01, $00, $00, $62
0A614 00 C4 02 90 01 62 01 00.. .db $00, $c4, $02, $90, $01, $62, $01, $00, $04, $62, $01, $00, $01, $62, $02, $91
0A624 01 62 01 90 04 62 01 90.. .db $01, $62, $01, $90, $04, $62, $01, $90, $01, $62, $02, $91, $01, $62, $01, $91
0A634 04 62 01 91 01 62 02 91.. .db $04, $62, $01, $91, $01, $62, $02, $91, $01, $62, $01, $91, $04, $62, $01, $91
0A644 11 62 23 00 02 C2 05 00.. .db $11, $62, $23, $00, $02, $c2, $05, $00, $02, $c0, $22, $00, $04, $62, $07, $00
0A654 00 62 01 00 04 62 03 00.. .db $00, $62, $01, $00, $04, $62, $03, $00, $00, $61, $02, $63, $00, $62, $01, $00
0A664 04 62 07 00 00 62 01 90.. .db $04, $62, $07, $00, $00, $62, $01, $90, $04, $62, $07, $90, $00, $62, $01, $91
0A674 04 62 07 91 00 62 01 91.. .db $04, $62, $07, $91, $00, $62, $01, $91, $04, $62, $07, $91, $00, $62, $01, $91
0A684 04 62 07 91 0F 62 21 00.. .db $04, $62, $07, $91, $0f, $62, $21, $00, $00, $c0, $00, $c1, $00, $c0, $3a, $00
0A694 04 63 00 61 13 00 05 62.. .db $04, $63, $00, $61, $13, $00, $05, $62, $09, $90, $05, $62, $09, $91, $05, $62
0A6A4 1F 91 0F 62 0D 00 01 62.. .db $1f, $91, $0f, $62, $0d, $00, $01, $62, $0d, $00, $01, $62, $0d, $00, $01, $62
0A6B4 2C 00 00 C5 0E 00 02 62.. .db $2c, $00, $00, $c5, $0e, $00, $02, $62, $0c, $89, $02, $62, $0c, $00, $02, $62
0A6C4 0C 90 02 62 0C 91 02 62.. .db $0c, $90, $02, $62, $0c, $91, $02, $62, $0c, $91, $12, $62, $9f, $00, $1f, $620A6D4                           	  
0A6D4 FD                        	  .db $fd
0A6D5                           
0A6D5                           ;level 7-4
0A6D5                           L_CastleArea5:
0A6D5 5B 07                           .db $5b, $07
0A6D7                                 
0A6D7 FD                              .db $fd
0A6D8                           
0A6D8                           ;level 8-4
0A6D8                           L_CastleArea6:
0A6D8 5B 06                           .db $5b, $06
0A6DA                                
0A6DA FD                              .db $fd
0A6DB                           ;level 9-2
0A6DB                           L_CastleArea7:
0A6DB 50                              .db $00 + $02*$08 + $01*$40
0A6DC 21                              .db $01 + $02*$10 + $00*$40
0A6DD                                 
0A6DD FD                              .db $fd
0A6DE                           
0A6DE                           ;level 8-3
0A6DE                           L_GroundArea2:
0A6DE 90 B1                           .db $90, $b1
0A6E0                                 
0A6E0 FD                              .db $fd
0A6E1                           
0A6E1                           
0A6E1                           
0A6E1                           ;level 1-1
0A6E1                           ;L_GroundArea6:
0A6E1                                
0A6E1                           L_GroundArea6:
0A6E1                           	  
0A6E1 50                        	  .db $00 + $02*$08 + $01*$40                               ; header (first byte)
0A6E2 21                              .db $01 + $02*$10 + $00*$40
0A6E3                           	 ; .db $24, $00, $01, $8C, $02, $00, $01, $8C, $01, $00, $01, $8C, $0A, $00, $01, $88, $02, $00, $01, $88, $01, $00, $01, $88, $0D, $00, $01, $88, $01, $00, $01, $88, $0D, $00, $01, $88, $01, $00, $01, $88, $0A, $00, $01, $88, $03, $00, $01, $88, $05, $00, $02, $C2, $0E, $00, $02, $C2, $0E, $00, $02, $C2, $0E, $00, $02, $C2, $0D, $00, $03, $C2, $20, $54, $A0, $00, $01, $C2, $0F, $00, $02, $54, $0E, $00, $02, $54, $AE, $00
0A6E3                           	  
0A6E3                           	  ;.db $00 + $02*$08 + $01*$40                               ; header (first byte)
0A6E3                                 ;.db $01 + $02*$10 + $00*$40                               ; header (second byte)
0A6E3                           	  ;.db Objects3Flag + $06 * $10, $40 + $01 + PageFlag        ; (6,) flagpole
0A6E3                                 ; x=10, id=02, y=06
0A6E3                                 ;.db Objects4Flag + $0a * $10, $02 * $10 + $06             ; (10,6) castle
0A6E3                           	  ;.db $fd
0A6E3                           	  
0A6E3                           ;L_GroundArea6a:
0A6E3                                 ; Still needs work; have to see how castle terrain and water levels work.
0A6E3                                 
0A6E3                                 ; PageFlag = $80      ; Add to second byte to skip to the next page
0A6E3                                 ; Objects1Flag = $10  ; Tree ledge to Vertical pipe.  Add to second byte
0A6E3                                 ; Objects2Flag = $0c  ; Hole to low ? blocks.  Add to first byte
0A6E3                                 ; Objects3Flag = $0d  ; Intro pipe to loop keeper.  Add to first byte.  use this for flagpole
0A6E3                                 ; Objects4Flag = $0f  ; Intro pipe to loop keeper.  Add to first byte
0A6E3                                 ; WarpFlag = $08      ; Add this to a pipe to make it a warp pipe
0A6E3                           
0A6E3                                 ; ----------------------------------------------------------------------------------------------------
0A6E3                                 ; Header (first byte): scenery/bg color + player entrance control * $08 + timer setting * $40
0A6E3                                 
0A6E3                                 ; Scenery/bg color (3 bits 00000xxx)
0A6E3                                 ; 00 = green bushes
0A6E3                                 ; 01 = water
0A6E3                                 ; 02 = castle wall
0A6E3                                 ; 03 = green bushes
0A6E3                                 ; 04 = night sky, green bushes
0A6E3                                 ; 05 = snow bushes, pipes
0A6E3                                 ; 06 = night sky, snow bushes, pipes
0A6E3                                 ; 07 = night sky, snow bushes, pipes, terrain, enemies
0A6E3                                 
0A6E3                                 ; Player entrance control (3 bits 00xxx000)
0A6E3                                 ; 00 = drop in from top of screen on the left
0A6E3                                 ; 01 = drop in from near top of screen on the left
0A6E3                                 ; 02 = start standing to the left
0A6E3                                 ; 03 = drop in from middle height on the left
0A6E3                                 ; 04 = drop in from top of screen on the left
0A6E3                                 ; 05 = drop in from top of screen on the left
0A6E3                                 ; 06 = start to the left, auto walk to right
0A6E3                                 ; 07 = start to the left, auto walk to right
0A6E3                                 
0A6E3                                 ; Timer setting (2 bits xx000000)
0A6E3                                 ; 00 = 0
0A6E3                                 ; 01 = 300
0A6E3                                 ; 02 = 200
0A6E3                                 ; 03 = 100
0A6E3                                 ; ----------------------------------------------------------------------------------------------------
0A6E3                                 
0A6E3                                 ; ----------------------------------------------------------------------------------------------------
0A6E3                                 ; Header (second byte): terrain control + background scenery type * $10 + background scenery * $40
0A6E3                                 
0A6E3                                 ; terrain control (4 bits xxxx0000)
0A6E3                                 ; 00 = (no terrain)
0A6E3                                 ; 01 = ground (1 block height)
0A6E3                                 ; 02 = ground (1 block height) + ceiling (1 block height)
0A6E3                                 ; 03 = ground (1 block height) + ceiling (3 block height)
0A6E3                                 ; 04 = ground (1 block height) + ceiling (4 block height)
0A6E3                                 ; 05 = ground (1 block height) + ceiling (8 block height)
0A6E3                                 ; 06 = ground (5 block height) + ceiling (1 block height)
0A6E3                                 ; 07 = ground (5 block height) + ceiling (3 block height)
0A6E3                                 ; 08 = ground (5 block height) + ceiling (4 block height)
0A6E3                                 ; 09 = ground (6 block height) + ceiling (1 block height)
0A6E3                                 ; 0a = ceiling (1 block height)
0A6E3                                 ; 0b = ground (6 block height) + ceiling (4 block height)
0A6E3                                 ; 0c = ground (9 block height) + ceiling (1 block height)
0A6E3                                 ; 0d = ground (2 block height) + ceiling (1 block height), middle section (y=03, 5 block height)
0A6E3                                 ; 0e = ground (2 block height) + ceiling (1 block height), middle section (y=04, 5 block height)
0A6E3                                 ; 0f = full of blocks (13 block height)
0A6E3                                 
0A6E3                                 ; background scenery type (2 bits 0000xx00)
0A6E3                                 ; 00 = no scenery
0A6E3                                 ; 01 = clouds
0A6E3                                 ; 02 = hills, bushes, clouds
0A6E3                                 ; 03 = fences
0A6E3                                 
0A6E3                                 ; background scenery (2 bits 000000xx)
0A6E3                                 ; 00 = green pipes and bushes
0A6E3                                 ; 01 = copper color pipes and bushes
0A6E3                                 ; 02 = green pipes and bushes
0A6E3                                 ; 03 = cloud type override
0A6E3                                 ; ----------------------------------------------------------------------------------------------------
0A6E3                                 
0A6E3                           	  
0A6E3                           	  ;.db $4a, custom, $71
0A6E3                           	  ;.db $59, custom, $71
0A6E3                           	  ;.db $5a, coin
0A6E3                           	  ;.db $69, coin
0A6E3                           	  include "code\leveldata\levels\1-1.asm"
0A6E3                           
0A6E3 27 00 00 80 01 81 00 82.. .db $27, $00, $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85
0A6F3 45 00 00 07 0D 00 00 05.. .db $45, $00, $00, $07, $0d, $00, $00, $05, $00, $06, $00, $08, $0b, $00, $00, $05
0A703 02 0A 00 08 00 00 03 4D.. .db $02, $0a, $00, $08, $00, $00, $03, $4d, $00, $00, $00, $02, $02, $03, $00, $04
0A713 1F 54 31 00 00 80 00 81.. .db $1f, $54, $31, $00, $00, $80, $00, $81, $00, $82, $0c, $00, $00, $83, $00, $84
0A723 00 85 00 60 01 00 00 C0.. .db $00, $85, $00, $60, $01, $00, $00, $c0, $00, $c1, $00, $00, $00, $c2, $0e, $00
0A733 00 C2 17 00 01 C0 0F 00.. .db $00, $c2, $17, $00, $01, $c0, $0f, $00, $00, $0d, $05, $00, $00, $12, $00, $13
0A743 01 00 00 07 03 00 00 0F.. .db $01, $00, $00, $07, $03, $00, $00, $0f, $00, $00, $00, $12, $00, $13, $02, $00
0A753 00 14 00 15 00 00 00 05.. .db $00, $14, $00, $15, $00, $00, $00, $05, $00, $06, $00, $08, $02, $00, $00, $4e
0A763 00 00 00 14 00 15 02 00.. .db $00, $00, $00, $14, $00, $15, $02, $00, $00, $14, $00, $15, $00, $00, $1f, $54
0A773 10 00 00 80 01 81 00 82.. .db $10, $00, $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85
0A783 08 00 00 80 00 81 07 00.. .db $08, $00, $00, $80, $00, $81, $07, $00, $00, $80, $00, $81, $00, $82, $02, $00
0A793 00 83 00 84 07 00 00 83.. .db $00, $83, $00, $84, $07, $00, $00, $83, $00, $84, $00, $85, $06, $00, $02, $c2
0A7A3 1B 00 04 51 01 00 02 C0.. .db $1b, $00, $04, $51, $01, $00, $02, $c0, $14, $00, $00, $0e, $0e, $00, $00, $4e
0A7B3 00 00 02 4D 01 00 00 02.. .db $00, $00, $02, $4d, $01, $00, $00, $02, $02, $03, $00, $04, $03, $00, $0c, $54
0A7C3 01 00 0D 54 01 00 00 54.. .db $01, $00, $0d, $54, $01, $00, $00, $54, $16, $00, $00, $80, $01, $81, $00, $82
0A7D3 04 00 01 81 00 82 03 00.. .db $04, $00, $01, $81, $00, $82, $03, $00, $00, $83, $01, $84, $00, $85, $04, $00
0A7E3 01 84 00 85 1A 00 00 80.. .db $01, $84, $00, $85, $1a, $00, $00, $80, $00, $81, $0d, $00, $00, $83, $00, $84
0A7F3 0A 00 01 C2 04 00 01 C0.. .db $0a, $00, $01, $c2, $04, $00, $01, $c0, $06, $00, $01, $c2, $04, $00, $00, $07
0A803 0D 00 00 05 00 06 00 08.. .db $0d, $00, $00, $05, $00, $06, $00, $08, $01, $00, $00, $61, $08, $00, $00, $05
0A813 02 0A 00 08 00 00 00 61.. .db $02, $0a, $00, $08, $00, $00, $00, $61, $02, $00, $00, $c1, $02, $61, $00, $03
0A823 00 04 1F 54 1C 00 00 80.. .db $00, $04, $1f, $54, $1c, $00, $00, $80, $00, $81, $00, $82, $02, $00, $00, $80
0A833 03 81 00 82 03 00 00 83.. .db $03, $81, $00, $82, $03, $00, $00, $83, $00, $84, $00, $85, $02, $00, $00, $83
0A843 03 84 00 85 06 00 00 82.. .db $03, $84, $00, $85, $06, $00, $00, $82, $0e, $00, $00, $85, $2b, $00, $00, $c6
0A853 00 C0 05 00 00 12 00 13.. .db $00, $c0, $05, $00, $00, $12, $00, $13, $08, $00, $00, $12, $00, $13, $02, $00
0A863 00 14 00 15 08 00 00 14.. .db $00, $14, $00, $15, $08, $00, $00, $14, $00, $15, $02, $4d, $00, $14, $00, $15
0A873 03 00 02 4D 01 00 06 54.. .db $03, $00, $02, $4d, $01, $00, $06, $54, $03, $00, $0b, $54, $03, $00, $04, $54
0A883 1B 00 00 80 02 81 0B 00.. .db $1b, $00, $00, $80, $02, $81, $0b, $00, $00, $83, $02, $84, $13, $00, $00, $80
0A893 01 81 00 82 0B 00 00 83.. .db $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85, $0e, $00, $01, $51
0A8A3 0A 00 01 51 05 00 01 C0.. .db $0a, $00, $01, $51, $05, $00, $01, $c0, $09, $00, $00, $07, $0d, $00, $00, $05
0A8B3 00 06 00 08 05 00 00 02.. .db $00, $06, $00, $08, $05, $00, $00, $02, $02, $03, $00, $04, $00, $00, $00, $05
0A8C3 02 0A 00 08 00 00 00 02.. .db $02, $0a, $00, $08, $00, $00, $00, $02, $00, $03, $00, $04, $00, $00, $1f, $54
0A8D3 0E 00 00 61 00 81 00 82.. .db $0e, $00, $00, $61, $00, $81, $00, $82, $0c, $00, $00, $14, $00, $84, $00, $85
0A8E3 08 00 00 80 01 81 00 82.. .db $08, $00, $00, $80, $01, $81, $00, $82, $00, $14, $03, $00, $00, $80, $00, $81
0A8F3 00 82 03 00 00 83 01 84.. .db $00, $82, $03, $00, $00, $83, $01, $84, $00, $85, $00, $14, $03, $00, $00, $83
0A903 00 84 00 85 07 00 00 14.. .db $00, $84, $00, $85, $07, $00, $00, $14, $0d, $00, $00, $60, $00, $14, $03, $00
0A913 02 C2 07 00 00 14 02 00.. .db $02, $c2, $07, $00, $00, $14, $02, $00, $00, $c2, $02, $00, $00, $c2, $06, $00
0A923 00 14 0E 00 00 2C 0A 00.. .db $00, $14, $0e, $00, $00, $2c, $0a, $00, $00, $12, $00, $13, $04, $00, $00, $61
0A933 04 00 00 61 01 00 00 14.. .db $04, $00, $00, $61, $01, $00, $00, $14, $00, $15, $00, $02, $01, $03, $02, $54
0A943 04 00 0A 54 04 00 07 54.. .db $04, $00, $0a, $54, $04, $00, $07, $54, $00, $61, $0e, $00, $00, $15, $0b, $00
0A953 00 80 01 81 00 15 00 00.. .db $00, $80, $01, $81, $00, $15, $00, $00, $00, $80, $01, $81, $00, $82, $06, $00
0A963 00 83 01 84 00 15 00 00.. .db $00, $83, $01, $84, $00, $15, $00, $00, $00, $83, $01, $84, $00, $85, $00, $00
0A973 00 80 00 81 00 82 05 00.. .db $00, $80, $00, $81, $00, $82, $05, $00, $00, $15, $05, $00, $00, $83, $00, $84
0A983 00 85 05 00 00 15 08 00.. .db $00, $85, $05, $00, $00, $15, $08, $00, $01, $61, $03, $00, $00, $15, $08, $00
0A993 00 14 00 15 03 00 00 15.. .db $00, $14, $00, $15, $03, $00, $00, $15, $01, $00, $02, $c2, $03, $00, $00, $2c
0A9A3 00 2D 00 00 02 C2 00 2D.. .db $00, $2d, $00, $00, $02, $c2, $00, $2d, $14, $00, $00, $61, $02, $00, $00, $0e
0A9B3 04 00 00 03 00 04 00 4D.. .db $04, $00, $00, $03, $00, $04, $00, $4d, $02, $00, $00, $61, $01, $4d, $00, $00
0A9C3 00 4E 00 00 00 02 02 03.. .db $00, $4e, $00, $00, $00, $02, $02, $03, $02, $54, $02, $00, $0c, $54, $02, $00
0A9D3 09 54 0F 00 00 81 00 82.. .db $09, $54, $0f, $00, $00, $81, $00, $82, $0a, $00, $00, $80, $01, $81, $00, $84
0A9E3 00 85 0A 00 00 83 01 84.. .db $00, $85, $0a, $00, $00, $83, $01, $84, $02, $00, $00, $80, $00, $81, $00, $82
0A9F3 02 00 01 61 07 00 00 83.. .db $02, $00, $01, $61, $07, $00, $00, $83, $00, $84, $00, $85, $01, $00, $02, $61
0AA03 0B 00 03 61 0A 00 04 61.. .db $0b, $00, $03, $61, $0a, $00, $04, $61, $05, $00, $00, $c1, $02, $00, $05, $61
0AA13 09 00 05 61 07 00 00 12.. .db $09, $00, $05, $61, $07, $00, $00, $12, $00, $13, $05, $61, $04, $00, $00, $04
0AA23 00 00 00 61 00 14 00 15.. .db $00, $00, $00, $61, $00, $14, $00, $15, $05, $61, $02, $00, $01, $4d, $1f, $54
0AA33 01 00 00 24 0C 00 00 82.. .db $01, $00, $00, $24, $0c, $00, $00, $82, $00, $00, $00, $25, $0c, $00, $00, $85
0AA43 00 00 00 25 02 00 00 80.. .db $00, $00, $00, $25, $02, $00, $00, $80, $02, $81, $00, $82, $06, $00, $00, $25
0AA53 02 00 00 83 02 84 00 85.. .db $02, $00, $00, $83, $02, $84, $00, $85, $06, $00, $00, $25, $0e, $00, $00, $25
0AA63 0E 00 00 25 03 00 02 45.. .db $0e, $00, $00, $25, $03, $00, $02, $45, $07, $00, $00, $25, $03, $00, $00, $46
0AA73 00 47 00 48 07 00 00 25.. .db $00, $47, $00, $48, $07, $00, $00, $25, $02, $00, $00, $45, $02, $49, $00, $45
0AA83 06 00 00 25 02 00 01 47.. .db $06, $00, $00, $25, $02, $00, $01, $47, $00, $4a, $01, $47, $04, $00, $01, $4d
0AA93 00 61 02 00 01 47 00 4B.. .db $00, $61, $02, $00, $01, $47, $00, $4b, $00, $70, $00, $47, $02, $03, $00, $04
0AAA3 00 00 1F 54 4F 00 00 80.. .db $00, $00, $1f, $54, $4f, $00, $00, $80, $00, $81, $00, $82, $0c, $00, $00, $83
0AAB3 00 84 00 85 4C 00 1F 54.. .db $00, $84, $00, $85, $4c, $00, $1f, $54, $ff, $00, $ff, $00, $ff, $00, $ff, $00
0AAC3 0F 00                     .db $0f, $000AAC5                           	  
0AAC5 FD                        	  .db $fd
0AAC6                           
0AAC6                           ;level 1-2
0AAC6                           L_UndergroundArea1:
0AAC6 48 0F                           .db $48, $0f
0AAC8                           	  include "code\leveldata\levels\1-2.asm"
0AAC8                           
0AAC8 00 54 03 00 0B 54 03 00.. .db $00, $54, $03, $00, $0b, $54, $03, $00, $0b, $54, $03, $00, $00, $14, $00, $15
0AAD8 01 00 00 14 00 15 04 00.. .db $01, $00, $00, $14, $00, $15, $04, $00, $00, $54, $03, $00, $00, $14, $00, $15
0AAE8 01 00 00 14 00 15 04 00.. .db $01, $00, $00, $14, $00, $15, $04, $00, $00, $54, $03, $00, $00, $14, $00, $15
0AAF8 01 00 00 14 00 15 04 00.. .db $01, $00, $00, $14, $00, $15, $04, $00, $00, $54, $03, $00, $00, $14, $00, $15
0AB08 01 00 00 14 00 15 04 00.. .db $01, $00, $00, $14, $00, $15, $04, $00, $00, $54, $03, $00, $00, $2c, $00, $2d
0AB18 01 00 00 14 00 15 04 00.. .db $01, $00, $00, $14, $00, $15, $04, $00, $00, $54, $07, $00, $00, $2c, $00, $2d
0AB28 00 00 00 C1 00 C0 01 00.. .db $00, $00, $00, $c1, $00, $c0, $01, $00, $00, $54, $0e, $00, $00, $54, $0e, $00
0AB38 00 54 0E 00 3F 54 06 00.. .db $00, $54, $0e, $00, $3f, $54, $06, $00, $00, $14, $00, $15, $0d, $00, $00, $14
0AB48 00 15 0D 00 00 14 00 15.. .db $00, $15, $0d, $00, $00, $14, $00, $15, $07, $00, $03, $c2, $01, $00, $00, $14
0AB58 00 15 01 00 03 C2 07 00.. .db $00, $15, $01, $00, $03, $c2, $07, $00, $00, $14, $00, $15, $0d, $00, $00, $2c
0AB68 00 2D 12 00 00 12 00 13.. .db $00, $2d, $12, $00, $00, $12, $00, $13, $03, $00, $01, $61, $07, $00, $00, $14
0AB78 00 15 01 00 03 61 07 00.. .db $00, $15, $01, $00, $03, $61, $07, $00, $00, $14, $00, $15, $01, $00, $3f, $54
0AB88 09 00 00 14 00 15 05 00.. .db $09, $00, $00, $14, $00, $15, $05, $00, $02, $c2, $04, $00, $00, $14, $00, $15
0AB98 0D 00 00 14 00 15 0D 00.. .db $0d, $00, $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15, $01, $00, $01, $c2
0ABA8 00 00 04 61 03 00 00 14.. .db $00, $00, $04, $61, $03, $00, $00, $14, $00, $15, $07, $00, $01, $61, $03, $00
0ABB8 00 2C 00 2D 05 00 00 C1.. .db $00, $2c, $00, $2d, $05, $00, $00, $c1, $00, $00, $01, $61, $0d, $00, $01, $61
0ABC8 08 00 00 61 03 00 01 61.. .db $08, $00, $00, $61, $03, $00, $01, $61, $07, $00, $01, $61, $3f, $54, $07, $00
0ABD8 00 61 0E 00 00 61 00 00.. .db $00, $61, $0e, $00, $00, $61, $00, $00, $00, $c7, $0c, $00, $00, $61, $02, $00
0ABE8 00 12 00 13 01 00 00 C2.. .db $00, $12, $00, $13, $01, $00, $00, $c2, $06, $00, $00, $61, $02, $00, $00, $14
0ABF8 00 15 09 00 07 61 08 00.. .db $00, $15, $09, $00, $07, $61, $08, $00, $00, $14, $00, $15, $00, $00, $00, $14
0AC08 00 15 01 00 00 61 01 00.. .db $00, $15, $01, $00, $00, $61, $01, $00, $00, $12, $00, $13, $03, $00, $00, $2c
0AC18 00 2D 00 00 00 2C 00 2D.. .db $00, $2d, $00, $00, $00, $2c, $00, $2d, $01, $00, $00, $61, $01, $00, $00, $14
0AC28 00 15 0A 00 00 61 01 00.. .db $00, $15, $0a, $00, $00, $61, $01, $00, $00, $14, $00, $15, $0a, $00, $3f, $54
0AC38 02 00 00 14 00 15 0D 00.. .db $02, $00, $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15, $0d, $00, $00, $14
0AC48 00 15 0D 00 00 14 00 15.. .db $00, $15, $0d, $00, $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15, $0b, $00
0AC58 00 5F 00 00 00 2C 00 2D.. .db $00, $5f, $00, $00, $00, $2c, $00, $2d, $00, $00, $03, $c2, $03, $00, $01, $c2
0AC68 0A 00 00 12 00 13 0D 00.. .db $0a, $00, $00, $12, $00, $13, $0d, $00, $00, $14, $00, $15, $0d, $00, $00, $14
0AC78 00 15 02 00 2C 54 00 14.. .db $00, $15, $02, $00, $2c, $54, $00, $14, $00, $15, $0d, $54, $00, $14, $00, $15
0AC88 00 1D 0C 00 00 14 00 15.. .db $00, $1d, $0c, $00, $00, $14, $00, $15, $00, $20, $0c, $00, $00, $14, $00, $15
0AC98 03 00 03 C2 05 00 00 14.. .db $03, $00, $03, $c2, $05, $00, $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15
0ACA8 0D 00 00 14 00 15 00 00.. .db $0d, $00, $00, $14, $00, $15, $00, $00, $00, $c2, $00, $00, $04, $52, $00, $5a
0ACB8 00 00 02 C2 00 00 00 2C.. .db $00, $00, $02, $c2, $00, $00, $00, $2c, $00, $2d, $30, $00, $20, $54, $00, $00
0ACC8 03 C2 01 00 00 C7 01 00.. .db $03, $c2, $01, $00, $00, $c7, $01, $00, $03, $c2, $00, $00, $00, $36, $00, $00
0ACD8 03 C2 04 00 03 C2 00 00.. .db $03, $c2, $04, $00, $03, $c2, $00, $00, $00, $37, $0e, $90, $06, $61, $02, $91
0ACE8 05 61 05 00 01 61 00 91.. .db $05, $61, $05, $00, $01, $61, $00, $91, $01, $61, $0c, $00, $00, $91, $0e, $00
0ACF8 00 91 07 00 01 C2 01 00.. .db $00, $91, $07, $00, $01, $c2, $01, $00, $00, $c1, $01, $c0, $00, $91, $02, $c0
0AD08 01 00 01 C2 07 00 00 91.. .db $01, $00, $01, $c2, $07, $00, $00, $91, $0e, $00, $00, $91, $0e, $00, $00, $91
0AD18 06 00 07 54 00 91 0E 54.. .db $06, $00, $07, $54, $00, $91, $0e, $54, $00, $91, $26, $54, $00, $61, $08, $00
0AD28 00 14 00 15 03 00 00 61.. .db $00, $14, $00, $15, $03, $00, $00, $61, $08, $00, $00, $14, $00, $15, $0d, $00
0AD38 00 14 00 15 02 00 00 60.. .db $00, $14, $00, $15, $02, $00, $00, $60, $09, $00, $00, $14, $00, $15, $0d, $00
0AD48 00 14 00 15 05 00 00 12.. .db $00, $14, $00, $15, $05, $00, $00, $12, $00, $13, $01, $00, $01, $c2, $01, $00
0AD58 00 14 00 15 01 00 01 C0.. .db $00, $14, $00, $15, $01, $00, $01, $c0, $01, $00, $00, $14, $00, $15, $05, $00
0AD68 00 2C 00 2D 05 00 00 14.. .db $00, $2c, $00, $2d, $05, $00, $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15
0AD78 0B 00 3F 54 0C 00 00 14.. .db $0b, $00, $3f, $54, $0c, $00, $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15
0AD88 00 00 00 5F 04 00 01 C2.. .db $00, $00, $00, $5f, $04, $00, $01, $c2, $04, $00, $00, $14, $00, $15, $0d, $00
0AD98 00 14 00 15 09 00 01 61.. .db $00, $14, $00, $15, $09, $00, $01, $61, $01, $00, $00, $14, $00, $15, $00, $00
0ADA8 00 C1 00 C0 06 00 01 61.. .db $00, $c1, $00, $c0, $06, $00, $01, $61, $01, $00, $00, $14, $00, $15, $04, $00
0ADB8 00 61 03 90 01 61 01 00.. .db $00, $61, $03, $90, $01, $61, $01, $00, $00, $2c, $00, $2d, $04, $00, $00, $61
0ADC8 03 91 01 61 08 00 00 61.. .db $03, $91, $01, $61, $08, $00, $00, $61, $03, $91, $01, $61, $04, $00, $04, $54
0ADD8 03 91 0B 54 03 91 26 54.. .db $03, $91, $0b, $54, $03, $91, $26, $54, $0b, $00, $00, $14, $00, $15, $0d, $00
0ADE8 00 14 00 15 00 8C 0C 00.. .db $00, $14, $00, $15, $00, $8c, $0c, $00, $00, $14, $00, $15, $00, $61, $04, $00
0ADF8 00 C1 06 00 00 14 00 15.. .db $00, $c1, $06, $00, $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15, $0d, $00
0AE08 00 14 00 15 00 00 00 61.. .db $00, $14, $00, $15, $00, $00, $00, $61, $03, $00, $00, $61, $00, $00, $04, $c2
0AE18 00 00 00 2C 00 2D 04 00.. .db $00, $00, $00, $2c, $00, $2d, $04, $00, $01, $61, $06, $00, $01, $72, $03, $00
0AE28 02 61 06 00 01 72 01 00.. .db $02, $61, $06, $00, $01, $72, $01, $00, $3f, $54, $09, $00, $00, $14, $00, $15
0AE38 0B 00 00 60 00 00 00 14.. .db $0b, $00, $00, $60, $00, $00, $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15
0AE48 0A 00 02 72 00 14 00 15.. .db $0a, $00, $02, $72, $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15, $0d, $00
0AE58 00 14 00 15 07 00 00 52.. .db $00, $14, $00, $15, $07, $00, $00, $52, $00, $5d, $00, $52, $02, $00, $00, $2c
0AE68 00 2D 06 00 04 52 01 00.. .db $00, $2d, $06, $00, $04, $52, $01, $00, $01, $c2, $02, $00, $00, $12, $02, $00
0AE78 04 52 01 00 01 C2 02 00.. .db $04, $52, $01, $00, $01, $c2, $02, $00, $00, $14, $2d, $54, $00, $14, $00, $15
0AE88 0D 54 00 14 00 15 03 00.. .db $0d, $54, $00, $14, $00, $15, $03, $00, $00, $14, $00, $15, $07, $00, $00, $14
0AE98 00 15 03 00 00 14 00 15.. .db $00, $15, $03, $00, $00, $14, $00, $15, $05, $00, $00, $60, $00, $00, $00, $14
0AEA8 00 15 03 00 00 14 00 15.. .db $00, $15, $03, $00, $00, $14, $00, $15, $00, $00, $03, $c2, $02, $00, $00, $14
0AEB8 00 15 03 00 00 14 00 15.. .db $00, $15, $03, $00, $00, $14, $00, $15, $00, $00, $03, $c2, $00, $00, $00, $c2
0AEC8 00 00 00 14 00 15 03 00.. .db $00, $00, $00, $14, $00, $15, $03, $00, $00, $14, $00, $15, $00, $00, $03, $c2
0AED8 00 00 00 C2 00 00 00 14.. .db $00, $00, $00, $c2, $00, $00, $00, $14, $00, $15, $03, $00, $00, $14, $00, $15
0AEE8 00 00 03 C2 02 00 00 14.. .db $00, $00, $03, $c2, $02, $00, $00, $14, $00, $15, $03, $00, $00, $2c, $00, $2d
0AEF8 07 00 00 14 00 15 00 13.. .db $07, $00, $00, $14, $00, $15, $00, $13, $0a, $00, $00, $1c, $00, $1d, $00, $1e
0AF08 01 15 0A 00 00 1F 00 20.. .db $01, $15, $0a, $00, $00, $1f, $00, $20, $00, $21, $00, $15, $ef, $54, $ff, $00
0AF18 FF 00 6F 00               .db $ff, $00, $6f, $000AF1C                           	  
0AF1C FD                        	  .db $fd
0AF1D                           
0AF1D                           	 
0AF1D                           	 
0AF1D                           	 
0AF1D                           	 
0AF1D                           TestLevel:
0AF1D                           ;	  .db $17, $0c
0AF1D                           ;	  .db $37, $0d
0AF1D                           ;	  .db $57, $0e
0AF1D                           ;	  .db $77, $0f
0AF1D                           ;	  ;.db $07, $01 + PageFlag                                   ; (0,7) ? block with coin (+0x80 for page skip)
0AF1D                           ;	  ;.db $00, Objects1Flag + $05 * $10 + $02 - $01             ; (14,10) column of 3D blocks (1 high)
0AF1D                           ;	  ;.db $09, Objects1Flag + $05 * $10 + $02 - $01             ; (14,10) column of 3D blocks (1 high)
0AF1D                           ;	  .db Objects4Flag + $01 * $10, $06 * $10 + $06 - $01 + PageFlag, $00  ; (6,1) upside down pipe
0AF1D                           ;	  .db Objects4Flag + 1*$10, $07 * $10 + 4 - $01, (1-$01)*$10+ 9, $36 ;1,9,4,1,$36 ;x,y,w,h,mt
0AF1D                           ;	  ;customobj 3,2,3,1,$20 ;x,y,w,h,mt
0AF1D                           ;	  .db Objects4Flag + 3*$10, $07 * $10 + 3 - $01, (1-$01)*$10+ 2, $20
0AF1D                           ;	  .db $57, Objects1Flag + $06 * $10 + $02 - $01             ; (12,9) Vertical pipe (2 blocks height)
0AF1D                           ;	  ;customobj 5,9,2,2,$61
0AF1D                           ;	  .db Objects4Flag + 5*$10, $07 * $10 + 2 - $01, (2-$01)*$10+ 9, $61
0AF1D                           ;	  .db Objects4Flag + 7*$10, $07 * $10 + 5 - $01, (3-$01)*$10+ 8, $90
0AF1D                           ;	  ;customobj 7,8,5,3,$90 ;x,y,w,h,mt
0AF1D                           ;	  .db Objects4Flag + 7*$10, $07 * $10 + 3 - $01, (1-$01)*$10+ 9, $20
0AF1D                           ;	  ;customobj 7,9,3,1,$20 ;x,y,w,h,mt
0AF1D                           ;	  .db $c6, Objects1Flag + $06 * $10 + $05 - $01
0AF1D                           ;	  .db Objects4Flag + $d*$10, $07 * $10 + 1 - $01, (1-$01)*$10+ 2, $8d
0AF1D                           ;	  ;customobj $d,2,1,1,$8d ;x,y,w,h,mt
0AF1D                           ;	  
0AF1D                           ;	  
0AF1D                           ;	  ;.db Objects4Flag + $01 * $10, $07 * $10 + $09 - $01, $05	; (12,6) bridge
0AF1D                           ;      ;.db $47, Objects1Flag + $01 * $10 + $05 - $01             ; (4,7) row of 5 bricks
0AF1D                           ;      ;.db $57, $00                                              ; (5,7) ? block with power-up
0AF1D                           ;	  
0AF1D                           ;	  ;customobj 5,6,1,1,$71									;commented this until i fix those fucking slopes
0AF1D                           ;	  ;customobj 6,5,1,1,$71
0AF1D                           ;	  
0AF1D                           ;      ;.db $66, Objects1Flag + $02 * $10 + $01 - $01
0AF1D                           ;	  ;.db $75, Objects1Flag + $02 * $10 + $01 - $01
0AF1D                           ;	  
0AF1D                           ;	  ;.db $63, $01                                               ; (6,3) ? block with coin
0AF1D                           ;	  ;.db Objects4Flag + 7*$10, $07 * $10 + 1 - $01 +$80, (1-$01)*$10+ 6, $8c
0AF1D                           ;	  ;customobj 7,6,1,1,$8c ;x,y,w,h,mt
0AF1D                           ;	  ;customobj 7,6,1,1,$8c ;x,y,w,h,mt
0AF1D                           ;
0AF1D                           ;	  ;.db Objects4Flag + $07 * $10, $07 * $10 + $01 - $01, $06, $8c
0AF1D                           ;      ;.db $77, $01                                              ; (7,7) ? block with coin
0AF1D                           ;	  ;.db $d0, Objects1Flag + $05 * $10 + $02 - $01             ; (14,10) column of 3D blocks (1 high)
0AF1D                           ;	  .db Objects4Flag + $e*$10, $07 * $10 + 8 - $01, (1-$01)*$10+ $b, $8a
0AF1D                           ;	  ;customobj $e,$b,8,1,$8a ;x,y,w,h,mt
0AF1D                           ;	  .db Objects4Flag + $e*$10, $07 * $10 + 8 - $01, (1-$01)*$10+ 8, $8e
0AF1D                           ;	  ;customobj $e,8,8,1,$8e ;x,y,w,h,mt
0AF1D                           ;	  ;customobjp $5,11,1,2,$00 ;x,y,w,h,mt
0AF1D                           ;	  .db Objects4Flag + 6*$10, $07 * $10 + 1 - $01 + $80, (6-$01)*$10 + 2, $8f
0AF1D                           ;	  ;customobjp 6,2,1,6,$8f ;x,y,w,h,mt
0AF1D                           ;	  
0AF1D                           ;      .db $68, Objects1Flag + $06 * $10 + $03 - $01; + PageFlag  ; (6,8) Vertical pipe (3 blocks height)
0AF1D                           ;	  
0AF1D                           ;      .db $e7, Objects1Flag + $06 * $10 + $04 - $01             ; (14,7) Vertical pipe (4 blocks height)
0AF1D                           ;      .db $97, Objects1Flag + $06 * $10 + WarpFlag + $04 - $01 + PageFlag ; (9,7) Vertical warp pipe (4 blocks height)
0AF1D                           ;	  .db Objects4Flag + $b*$10, $07 * $10 + 1 - $01, (1-$01)*$10+ $a, $8c
0AF1D                           ;      .db $06, $03 + PageFlag                                   ; (0,6) invisible block with 1-up
0AF1D                           ;	  customobj 0,4,6,1,$72 ;x,y,w,h,mt
0AF1D                           ;	  ;customobj 0,10,1,1,$8c ;x,y,w,h,mt
0AF1D                           ;	  
0AF1D                           ;	  .db $60, Objects1Flag + $02 * $10 + $02 - $01				; (6,0) row of blocks
0AF1D                           ;	  .db Objects4Flag + $06 * $10, $06 * $10 + $08 - $01, $01  ; (6,1) upside down pipe
0AF1D                           ;	  ;.db $83, Objects1Flag + $02 * $10 + $03 - $01
0AF1D                           ;	  .db $90, Objects1Flag + $02 * $10 + $02 - $01				; (9,0) row of blocks
0AF1D                           ;	  .db Objects4Flag + $09 * $10, $05 * $10 + $06 - $01, $01  ; (9,1) upside down pipe (enterable)
0AF1D                           ;	  
0AF1D                           ;	  ;.db Objects4Flag + $0b * $10, $07 * $10 + $05 - $01, $27, $8b	; (11,7) custom object with customizable lenght and height
0AF1D                           ;	  customobj 11,3,5,1,$72  ;x,y,w,h,mt
0AF1D                           ;	  customobj 12,7,5,3,$8b ;x,y,w,h,mt
0AF1D                           ;      ; x = 5, id = 0, width = 2
0AF1D                           ;      .db Objects2Flag + $05 * $10, $00 * $10 + $02 - $01       ; (5,) pit (2 blocks wide)
0AF1D                           ;      ; x = 13, y=7, id = 1, width = 3
0AF1D                           ;      .db $d7, Objects1Flag + $01 * $10 + $03 - $01             ; (13,7) row of 3 bricks
0AF1D                           ;      .db $e7, $00                                              ; (14,7) ? block with power-up
0AF1D                           ;      .db $03, Objects1Flag + $01 * $10 + $08 - $01 + PageFlag  ; (0,3) row of 8 bricks
0AF1D                           ;      ; x = 6, id = 0, width = 3
0AF1D                           ;      .db Objects2Flag + $06 * $10, $00 * $10 + $03 - $01       ; (6,) pit (3 blocks wide)
0AF1D                           ;
0AF1D                           ;      .db $b3, Objects1Flag + $01 * $10 + $03 - $01             ; (11,3) row of 3 bricks
0AF1D                           ;      .db $e3, $01                                              ; (14,3) ? block with coin
0AF1D                           ;      .db $e7, $07                                              ; (14,7) brick with multi-coin
0AF1D                           ;      .db $47, Objects1Flag + $01 * $10 + $01 - $01 + PageFlag  ; (4,7) single brick
0AF1D                           ;      .db $57, $06                                              ; (5,7) brick with starman
0AF1D                           ;      .db $a7, $01                                              ; (10,7) ? block with coin
0AF1D                           ;      .db $d3, $00                                              ; (13,3) ? block with power-up
0AF1D                           ;      .db $d7, $01                                              ; (13,7) ? block with coin
0AF1D                           ;      .db $07, $01 + PageFlag                                   ; (0,7) ? block with coin
0AF1D                           ;      .db $67, Objects1Flag + $01 * $10 + $01 - $01             ; (6,7) single brick
0AF1D                           ;
0AF1D                           ;      .db $93, Objects1Flag + $01 * $10 + $03 - $01             ; (9,3) row of 3 bricks
0AF1D                           ;      .db $03, Objects1Flag + $01 * $10 + $04 - $01 + PageFlag  ; (0,3) row of 4 bricks
0AF1D                           ;      ; x=1, id = 6, width = 2
0AF1D                           ;      .db Objects2Flag + $01 * $10, $06 * $10 + $02 - $01       ; (0,3) high ?-block row (2 wide)
0AF1D                           ;      .db $17, Objects1Flag + $01 * $10 + $02 - $01             ; (1,7) row of 2 bricks
0AF1D                           ;      ; x=6, id=3, width = 4
0AF1D                           ;      .db Objects4Flag + $06 * $10, $03 * $10 + $04 - $01       ; (6,) 3D block stairs ascending (4 width)
0AF1D                           ;      
0AF1D                           ;      ; x=12, y=7, id=5, height = 4
0AF1D                           ;      .db $c7, Objects1Flag + $05 * $10 + $04 - $01             ; (12,7) column of 3D blocks (4 high)
0AF1D                           ;      .db $d8, Objects1Flag + $05 * $10 + $03 - $01             ; (13,8) column of 3D blocks (3 high)
0AF1D                           ;      .db $e9, Objects1Flag + $05 * $10 + $02 - $01             ; (14,9) column of 3D blocks (2 high)
0AF1D                           ;      .db $fa, Objects1Flag + $05 * $10 + $01 - $01             ; (15,10) column of 3D blocks (1 high)
0AF1D                           ;      .db Objects4Flag + $04 * $10, $03 * $10 + $03 + PageFlag  ; (6,) 3D block stairs ascending (4 width)
0AF1D                           ;      
0AF1D                           ;      .db $87, Objects1Flag + $05 * $10 + $04 - $01             ; (8,7) column of 3D blocks (4 high)
0AF1D                           ;      .db Objects2Flag + $09 * $10, $00 * $10 + $02 - $01       ; (9,) pit (2 blocks wide)
0AF1D                           ;      .db $b7, Objects1Flag + $05 * $10 + $04 - $01             ; (11,7) column of 3D blocks (4 high)
0AF1D                           ;      .db $c8, Objects1Flag + $05 * $10 + $03 - $01             ; (12,8) column of 3D blocks (3 high)
0AF1D                           ;      .db $d9, Objects1Flag + $05 * $10 + $02 - $01             ; (13,9) column of 3D blocks (2 high)
0AF1D                           ;
0AF1D                           ;      .db $ea, Objects1Flag + $05 * $10 + $01 - $01             ; (14,10) column of 3D blocks (1 high)
0AF1D                           ;      .db $39, Objects1Flag + $06 * $10 + $02 - $01 + PageFlag  ; (3,9) Vertical pipe (2 blocks height)
0AF1D                           ;      .db $87, Objects1Flag + $01 * $10 + $02 - $01             ; (8,7) row of 2 bricks
0AF1D                           ;      .db $a7, $01                                              ; (10,7) ? block with coin
0AF1D                           ;      .db $b7, Objects1Flag + $01 * $10 + $01 - $01             ; (11,7) single brick
0AF1D                           ;      
0AF1D                           ;      .db $39, Objects1Flag + $06 * $10 + $02 - $01 + PageFlag  ; (3,9) Vertical pipe (2 blocks height)
0AF1D                           ;      ; x=5, id=3, width = 9
0AF1D                           ;      .db Objects4Flag + $05 * $10, $03 * $10 + $09 - $01       ; (5,) 3D block stairs ascending (9 width)
0AF1D                           ;      ; x=6, ?=$40, id = 1 
0AF1D                           ;      .db Objects3Flag + $06 * $10, $40 + $01 + PageFlag        ; (6,) flagpole
0AF1D                           ;      ; x=10, id=02, y=06
0AF1D                           ;      .db Objects4Flag + $0a * $10, $02 * $10 + $06             ; (10,6) castle
0AF1D                           ;
0AF1D                           ;      .db $fd                                                   ; end of level data marker
0AF1D                           	  
0AF1D                           	  ;.db $50, $21, $98, $72, $c6, $00, $d7, $00, $e7, $14
0AF1D                                 ;.db $e8, $00, $f6, $15, $f9, $00, $0a, $80, $18, $11
0AF1D                                 ;.db $29, $00, $38, $00, $47, $00, $56, $00, $68, $f2
0AF1D                                 ;.db $e7, $73, $97, $fb, $06, $83, $5c, $01, $d7, $22
0AF1D                                 ;.db $e7, $00, $03, $a7, $6c, $02, $b3, $22, $e3, $01
0AF1D                                 ;.db $e7, $07, $47, $a0, $57, $06, $a7, $01, $d3, $00
0AF1D                                 ;.db $d7, $01, $07, $81, $67, $20, $93, $22, $03, $a3
0AF1D                                 ;.db $17, $21, $1c, $61, $6f, $33, $c7, $63, $d8, $62
0AF1D                                 ;.db $e9, $61, $fa, $60, $4f, $b3, $87, $63, $9c, $01
0AF1D                                 ;.db $b7, $63, $c8, $62, $d9, $61, $ea, $60, $39, $f1
0AF1D                                 ;.db $87, $21, $a7, $01, $b7, $20, $39, $f1, $5f, $38
0AF1D                                 ;.db $6d, $c1, $af, $26, $fd
0AF1D                                 
0AF1D                           
0AF1D                           ;level 1-3/5-3
0AF1D                           L_GroundArea7:
0AF1D 50 11                           .db $50, $11
0AF1F                                 
0AF1F                           	  
0AF1F                                 include "code\leveldata\levels\1-3.asm"
0AF1F                           
0AF1F 15 00 00 80 01 81 00 82.. .db $15, $00, $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85
0AF2F 36 00 02 45 09 00 00 C2.. .db $36, $00, $02, $45, $09, $00, $00, $c2, $01, $00, $00, $46, $00, $47, $00, $48
0AF3F 03 00 03 C0 03 00 00 45.. .db $03, $00, $03, $c0, $03, $00, $00, $45, $02, $49, $00, $45, $0a, $00, $01, $47
0AF4F 00 4A 01 47 08 00 00 61.. .db $00, $4a, $01, $47, $08, $00, $00, $61, $00, $00, $01, $47, $00, $4b, $00, $70
0AF5F 00 47 00 00 01 4D 00 02.. .db $00, $47, $00, $00, $01, $4d, $00, $02, $02, $03, $00, $04, $00, $00, $00, $61
0AF6F 00 03 1F 54 18 00 00 80.. .db $00, $03, $1f, $54, $18, $00, $00, $80, $00, $81, $00, $82, $0c, $00, $00, $83
0AF7F 00 84 00 85 03 00 00 80.. .db $00, $84, $00, $85, $03, $00, $00, $80, $02, $81, $00, $82, $08, $00, $01, $8a
0AF8F 00 83 02 84 00 85 08 00.. .db $00, $83, $02, $84, $00, $85, $08, $00, $00, $61, $09, $00, $00, $c2, $03, $00
0AF9F 00 61 0E 00 00 61 05 00.. .db $00, $61, $0e, $00, $00, $61, $05, $00, $00, $8d, $07, $00, $00, $61, $01, $00
0AFAF 00 12 00 13 02 00 00 07.. .db $00, $12, $00, $13, $02, $00, $00, $07, $01, $00, $00, $61, $03, $8f, $00, $61
0AFBF 01 00 00 14 00 15 01 00.. .db $01, $00, $00, $14, $00, $15, $01, $00, $00, $05, $00, $06, $00, $08, $00, $00
0AFCF 00 61 03 00 00 8F 00 00.. .db $00, $61, $03, $00, $00, $8f, $00, $00, $00, $04, $00, $14, $00, $15, $00, $00
0AFDF 00 05 02 0A 00 08 00 61.. .db $00, $05, $02, $0a, $00, $08, $00, $61, $00, $00, $01, $4d, $00, $00, $00, $8f
0AFEF 00 00 1F 54 06 00 00 C7.. .db $00, $00, $1f, $54, $06, $00, $00, $c7, $02, $00, $00, $54, $0e, $00, $00, $54
0AFFF 07 00 00 61 05 00 00 54.. .db $07, $00, $00, $61, $05, $00, $00, $54, $03, $1d, $03, $8a, $07, $54, $03, $20
0B00F 03 00 00 8E 00 00 00 80.. .db $03, $00, $00, $8e, $00, $00, $00, $80, $01, $81, $00, $82, $06, $00, $00, $c2
0B01F 01 00 00 8E 00 00 00 83.. .db $01, $00, $00, $8e, $00, $00, $00, $83, $01, $84, $00, $85, $06, $00, $00, $c2
0B02F 01 00 00 8E 0E 00 03 54.. .db $01, $00, $00, $8e, $0e, $00, $03, $54, $01, $8e, $05, $54, $00, $00, $00, $c1
0B03F 01 00 00 8F 06 00 00 0D.. .db $01, $00, $00, $8f, $06, $00, $00, $0d, $00, $00, $00, $8d, $00, $54, $03, $00
0B04F 00 8F 06 00 00 0F 01 00.. .db $00, $8f, $06, $00, $00, $0f, $01, $00, $00, $54, $00, $02, $00, $03, $00, $04
0B05F 00 00 00 8F 01 00 00 02.. .db $00, $00, $00, $8f, $01, $00, $00, $02, $01, $03, $00, $04, $00, $4d, $00, $4e
0B06F 01 00 20 54 01 00 00 80.. .db $01, $00, $20, $54, $01, $00, $00, $80, $01, $81, $00, $82, $00, $00, $00, $14
0B07F 00 15 08 00 00 83 01 84.. .db $00, $15, $08, $00, $00, $83, $01, $84, $00, $85, $00, $00, $00, $14, $00, $15
0B08F 06 00 06 1D 00 1E 00 15.. .db $06, $00, $06, $1d, $00, $1e, $00, $15, $06, $00, $06, $20, $00, $21, $00, $15
0B09F 00 00 00 5F 0B 00 00 14.. .db $00, $00, $00, $5f, $0b, $00, $00, $14, $00, $15, $02, $00, $00, $80, $02, $81
0B0AF 06 00 00 14 00 15 02 00.. .db $06, $00, $00, $14, $00, $15, $02, $00, $00, $83, $02, $84, $06, $00, $00, $14
0B0BF 00 15 00 5F 07 00 02 C2.. .db $00, $15, $00, $5f, $07, $00, $02, $c2, $01, $00, $00, $14, $00, $15, $0c, $00
0B0CF 00 6F 00 2C 00 2D 00 00.. .db $00, $6f, $00, $2c, $00, $2d, $00, $00, $00, $0d, $0e, $00, $00, $0f, $05, $00
0B0DF 00 02 02 03 00 04 00 00.. .db $00, $02, $02, $03, $00, $04, $00, $00, $01, $4d, $00, $00, $00, $4e, $00, $00
0B0EF 00 61 02 00 0C 54 02 00.. .db $00, $61, $02, $00, $0c, $54, $02, $00, $0c, $54, $0f, $00, $00, $61, $01, $90
0B0FF 05 00 00 80 03 81 00 82.. .db $05, $00, $00, $80, $03, $81, $00, $82, $00, $00, $00, $61, $01, $91, $05, $00
0B10F 00 83 03 84 00 85 00 00.. .db $00, $83, $03, $84, $00, $85, $00, $00, $00, $61, $00, $91, $00, $c1, $0c, $00
0B11F 00 61 01 91 00 82 0B 00.. .db $00, $61, $01, $91, $00, $82, $0b, $00, $00, $61, $01, $91, $00, $85, $0b, $00
0B12F 02 61 12 00 03 C2 08 00.. .db $02, $61, $12, $00, $03, $c2, $08, $00, $00, $61, $07, $00, $00, $12, $00, $13
0B13F 02 00 00 07 00 00 00 61.. .db $02, $00, $00, $07, $00, $00, $00, $61, $07, $00, $00, $14, $00, $15, $01, $00
0B14F 00 05 00 06 00 08 00 61.. .db $00, $05, $00, $06, $00, $08, $00, $61, $00, $00, $00, $02, $03, $03, $00, $04
0B15F 00 00 00 14 00 15 00 00.. .db $00, $00, $00, $14, $00, $15, $00, $00, $00, $05, $02, $0a, $1f, $54, $08, $90
0B16F 00 61 05 00 08 91 00 61.. .db $00, $61, $05, $00, $08, $91, $00, $61, $05, $00, $00, $91, $00, $c7, $00, $91
0B17F 06 61 05 00 02 91 00 61.. .db $06, $61, $05, $00, $02, $91, $00, $61, $02, $00, $00, $14, $00, $15, $00, $00
0B18F 00 5F 04 00 02 91 00 61.. .db $00, $5f, $04, $00, $02, $91, $00, $61, $00, $00, $00, $c2, $00, $00, $00, $14
0B19F 00 15 01 00 00 80 00 81.. .db $00, $15, $01, $00, $00, $80, $00, $81, $00, $82, $01, $00, $03, $61, $00, $00
0B1AF 00 C1 00 00 00 14 00 15.. .db $00, $c1, $00, $00, $00, $14, $00, $15, $01, $00, $00, $83, $00, $84, $00, $85
0B1BF 08 00 00 14 00 15 01 00.. .db $08, $00, $00, $14, $00, $15, $01, $00, $00, $5f, $0a, $00, $00, $14, $00, $15
0B1CF 01 00 00 C2 05 00 00 0D.. .db $01, $00, $00, $c2, $05, $00, $00, $0d, $00, $00, $02, $88, $00, $2c, $00, $2d
0B1DF 01 00 00 C2 05 00 00 0F.. .db $01, $00, $00, $c2, $05, $00, $00, $0f, $0c, $00, $00, $08, $00, $00, $00, $4e
0B1EF 00 00 01 4D 00 00 00 02.. .db $00, $00, $01, $4d, $00, $00, $00, $02, $02, $03, $00, $04, $00, $00, $00, $61
0B1FF 01 C2 1F 54 09 00 00 61.. .db $01, $c2, $1f, $54, $09, $00, $00, $61, $08, $00, $00, $80, $02, $81, $00, $82
0B20F 00 00 00 61 08 00 00 83.. .db $00, $00, $00, $61, $08, $00, $00, $83, $02, $84, $00, $85, $00, $00, $00, $61
0B21F 0E 00 00 61 03 00 00 80.. .db $0e, $00, $00, $61, $03, $00, $00, $80, $02, $c0, $06, $00, $00, $61, $03, $00
0B22F 00 83 04 00 02 C2 01 00.. .db $00, $83, $04, $00, $02, $c2, $01, $00, $00, $61, $0e, $00, $00, $8f, $0e, $00
0B23F 00 8F 01 00 02 C2 00 00.. .db $00, $8f, $01, $00, $02, $c2, $00, $00, $00, $8b, $07, $00, $00, $8f, $02, $00
0B24F 00 07 01 00 09 61 01 00.. .db $00, $07, $01, $00, $09, $61, $01, $00, $00, $05, $00, $06, $00, $08, $06, $c2
0B25F 01 52 00 8D 00 61 00 00.. .db $01, $52, $00, $8d, $00, $61, $00, $00, $00, $05, $02, $0a, $00, $54, $07, $8a
0B26F 16 54 18 00 00 80 02 81.. .db $16, $54, $18, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83, $02, $84
0B27F 00 85 01 00 00 81 00 82.. .db $00, $85, $01, $00, $00, $81, $00, $82, $0d, $00, $00, $84, $00, $85, $08, $00
0B28F 00 C2 14 00 00 C2 0B 00.. .db $00, $c2, $14, $00, $00, $c2, $0b, $00, $00, $16, $00, $17, $02, $00, $02, $c2
0B29F 08 00 00 4C 07 00 00 12.. .db $08, $00, $00, $4c, $07, $00, $00, $12, $00, $13, $01, $00, $00, $61, $01, $00
0B2AF 00 4C 07 00 00 14 00 15.. .db $00, $4c, $07, $00, $00, $14, $00, $15, $00, $00, $01, $61, $01, $00, $00, $4c
0B2BF 00 08 00 00 00 02 02 03.. .db $00, $08, $00, $00, $00, $02, $02, $03, $00, $04, $00, $00, $00, $14, $00, $15
0B2CF 02 61 01 00 00 4C 0C 54.. .db $02, $61, $01, $00, $00, $4c, $0c, $54, $02, $8a, $0f, $54, $07, $00, $00, $c2
0B2DF 0E 00 00 C2 06 00 00 C1.. .db $0e, $00, $00, $c2, $06, $00, $00, $c1, $00, $c0, $09, $00, $00, $80, $00, $81
0B2EF 00 82 03 00 00 80 01 81.. .db $00, $82, $03, $00, $00, $80, $01, $81, $00, $82, $04, $00, $00, $83, $00, $84
0B2FF 00 85 03 00 00 83 01 84.. .db $00, $85, $03, $00, $00, $83, $01, $84, $00, $85, $02, $88, $15, $00, $02, $17
0B30F 00 18 05 00 00 12 00 13.. .db $00, $18, $05, $00, $00, $12, $00, $13, $03, $00, $02, $4c, $06, $00, $00, $14
0B31F 00 15 00 00 01 C2 00 00.. .db $00, $15, $00, $00, $01, $c2, $00, $00, $02, $4c, $02, $00, $00, $0d, $02, $00
0B32F 00 14 00 15 03 00 02 4C.. .db $00, $14, $00, $15, $03, $00, $02, $4c, $02, $00, $00, $0f, $02, $00, $00, $14
0B33F 00 15 03 00 02 4C 01 4D.. .db $00, $15, $03, $00, $02, $4c, $01, $4d, $00, $00, $00, $4e, $02, $00, $00, $14
0B34F 00 15 00 00 01 4D 00 00.. .db $00, $15, $00, $00, $01, $4d, $00, $00, $09, $8a, $15, $54, $01, $8a, $0d, $00
0B35F 00 14 00 15 0D 00 00 14.. .db $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15, $01, $00, $00, $80, $01, $81
0B36F 00 82 07 00 00 14 00 15.. .db $00, $82, $07, $00, $00, $14, $00, $15, $01, $00, $00, $83, $01, $84, $00, $85
0B37F 07 00 00 14 00 15 09 00.. .db $07, $00, $00, $14, $00, $15, $09, $00, $00, $80, $02, $81, $00, $14, $00, $15
0B38F 04 00 00 C0 03 00 00 83.. .db $04, $00, $00, $c0, $03, $00, $00, $83, $02, $84, $00, $14, $00, $15, $0d, $00
0B39F 00 14 00 15 00 00 02 C2.. .db $00, $14, $00, $15, $00, $00, $02, $c2, $09, $00, $00, $2c, $00, $2d, $07, $00
0B3AF 00 07 02 00 00 12 00 13.. .db $00, $07, $02, $00, $00, $12, $00, $13, $06, $00, $00, $61, $00, $00, $00, $05
0B3BF 00 06 00 08 01 00 00 14.. .db $00, $06, $00, $08, $01, $00, $00, $14, $00, $15, $00, $02, $02, $03, $00, $04
0B3CF 01 00 00 61 00 05 02 0A.. .db $01, $00, $00, $61, $00, $05, $02, $0a, $00, $08, $00, $00, $00, $14, $00, $15
0B3DF 1F 54 14 00 00 80 02 81.. .db $1f, $54, $14, $00, $00, $80, $02, $81, $00, $82, $01, $00, $00, $c7, $07, $00
0B3EF 00 83 02 84 00 85 15 00.. .db $00, $83, $02, $84, $00, $85, $15, $00, $00, $82, $0b, $00, $00, $80, $01, $81
0B3FF 00 85 0A 00 00 8E 00 83.. .db $00, $85, $0a, $00, $00, $8e, $00, $83, $01, $84, $14, $00, $00, $8d, $21, $00
0B40F 02 8F 02 8E 02 00 00 02.. .db $02, $8f, $02, $8e, $02, $00, $00, $02, $02, $03, $00, $04, $01, $00, $00, $8f
0B41F 00 C7 00 8F 00 8E 00 C1.. .db $00, $c7, $00, $8f, $00, $8e, $00, $c1, $00, $8e, $01, $00, $1f, $54, $04, $00
0B42F 01 C2 14 00 00 80 02 81.. .db $01, $c2, $14, $00, $00, $80, $02, $81, $01, $00, $00, $c2, $08, $00, $00, $83
0B43F 02 84 03 00 03 61 07 00.. .db $02, $84, $03, $00, $03, $61, $07, $00, $00, $82, $02, $00, $00, $61, $00, $00
0B44F 00 14 00 15 07 00 00 85.. .db $00, $14, $00, $15, $07, $00, $00, $85, $03, $61, $00, $00, $00, $14, $00, $15
0B45F 08 00 00 14 00 15 02 00.. .db $08, $00, $00, $14, $00, $15, $02, $00, $00, $2c, $00, $2d, $08, $00, $00, $14
0B46F 00 15 07 00 00 55 03 51.. .db $00, $15, $07, $00, $00, $55, $03, $51, $00, $00, $00, $2c, $00, $2d, $05, $00
0B47F 00 0D 0E 00 00 0F 05 00.. .db $00, $0d, $0e, $00, $00, $0f, $05, $00, $00, $02, $01, $03, $00, $04, $04, $00
0B48F 00 4E 00 02 01 03 00 04.. .db $00, $4e, $00, $02, $01, $03, $00, $04, $00, $00, $00, $4d, $05, $54, $01, $00
0B49F 0D 54 01 00 07 54 07 00.. .db $0d, $54, $01, $00, $07, $54, $07, $00, $00, $24, $06, $00, $00, $82, $06, $00
0B4AF 00 25 06 00 00 85 06 00.. .db $00, $25, $06, $00, $00, $85, $06, $00, $00, $25, $02, $00, $00, $80, $00, $81
0B4BF 00 82 08 00 00 25 02 00.. .db $00, $82, $08, $00, $00, $25, $02, $00, $00, $83, $00, $84, $00, $85, $05, $00
0B4CF 00 80 00 81 00 82 00 25.. .db $00, $80, $00, $81, $00, $82, $00, $25, $09, $00, $01, $61, $00, $83, $00, $84
0B4DF 00 85 00 25 04 00 01 45.. .db $00, $85, $00, $25, $04, $00, $01, $45, $07, $00, $00, $25, $04, $00, $01, $47
0B4EF 00 5F 06 00 00 25 04 00.. .db $00, $5f, $06, $00, $00, $25, $04, $00, $01, $47, $03, $00, $00, $07, $02, $00
0B4FF 00 25 04 00 01 47 02 00.. .db $00, $25, $04, $00, $01, $47, $02, $00, $00, $05, $00, $06, $00, $08, $01, $00
0B50F 00 25 04 00 01 47 00 4D.. .db $00, $25, $04, $00, $01, $47, $00, $4d, $00, $00, $00, $05, $02, $0a, $00, $08
0B51F 00 00 00 61 00 02 03 03.. .db $00, $00, $00, $61, $00, $02, $03, $03, $01, $47, $1f, $54, $00, $00, $02, $45
0B52F 0C 00 00 46 00 47 00 48.. .db $0c, $00, $00, $46, $00, $47, $00, $48, $0b, $00, $00, $45, $02, $49, $00, $45
0B53F 0A 00 01 47 00 4A 01 47.. .db $0a, $00, $01, $47, $00, $4a, $01, $47, $01, $00, $00, $80, $00, $81, $00, $82
0B54F 05 00 01 47 00 4B 00 70.. .db $05, $00, $01, $47, $00, $4b, $00, $70, $00, $47, $01, $00, $00, $83, $00, $84
0B55F 00 85 05 00 04 49 01 45.. .db $00, $85, $05, $00, $04, $49, $01, $45, $08, $00, $00, $47, $00, $4a, $00, $47
0B56F 00 4A 02 47 05 00 00 80.. .db $00, $4a, $02, $47, $05, $00, $00, $80, $00, $81, $00, $82, $00, $47, $00, $4b
0B57F 00 47 00 4B 02 47 05 00.. .db $00, $47, $00, $4b, $02, $47, $05, $00, $00, $83, $00, $84, $00, $85, $06, $47
0B58F 00 00 00 0D 06 00 00 4A.. .db $00, $00, $00, $0d, $06, $00, $00, $4a, $00, $47, $00, $4a, $00, $47, $00, $4a
0B59F 01 47 00 00 00 0F 06 00.. .db $01, $47, $00, $00, $00, $0f, $06, $00, $00, $4b, $00, $70, $00, $4b, $00, $47
0B5AF 00 4B 01 47 00 00 00 4E.. .db $00, $4b, $01, $47, $00, $00, $00, $4e, $06, $00, $1f, $54, $ff, $00, $9f, $000B5BF                           	  
0B5BF FD                              .db $fd
0B5C0                           
0B5C0                           
0B5C0                           
0B5C0                           ;level 2-1
0B5C0                           L_GroundArea9:
0B5C0 52 31                           .db $52, $31
0B5C2                                 include "code\leveldata\levels\2-1.asm"
0B5C2                           
0B5C2 02 00 02 45 0C 00 00 46.. .db $02, $00, $02, $45, $0c, $00, $00, $46, $00, $47, $00, $48, $0b, $00, $00, $45
0B5D2 02 49 00 45 0A 00 01 47.. .db $02, $49, $00, $45, $0a, $00, $01, $47, $00, $4a, $01, $47, $0a, $00, $01, $47
0B5E2 00 4B 00 70 00 47 08 00.. .db $00, $4b, $00, $70, $00, $47, $08, $00, $01, $45, $04, $49, $01, $45, $06, $00
0B5F2 02 47 00 4A 00 47 00 4A.. .db $02, $47, $00, $4a, $00, $47, $00, $4a, $02, $47, $06, $00, $02, $47, $00, $4b
0B602 00 47 00 4B 02 47 06 00.. .db $00, $47, $00, $4b, $02, $47, $06, $00, $08, $47, $02, $00, $00, $0d, $02, $00
0B612 01 47 00 4A 00 47 00 4A.. .db $01, $47, $00, $4a, $00, $47, $00, $4a, $00, $47, $00, $4a, $01, $47, $02, $00
0B622 00 0F 02 00 01 47 00 4B.. .db $00, $0f, $02, $00, $01, $47, $00, $4b, $00, $70, $00, $4b, $00, $47, $00, $4b
0B632 01 47 01 03 00 04 00 4E.. .db $01, $47, $01, $03, $00, $04, $00, $4e, $02, $00, $1f, $54, $04, $00, $01, $61
0B642 0D 00 00 14 00 15 0D 00.. .db $0d, $00, $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15, $00, $80, $01, $81
0B652 00 82 04 00 00 80 02 81.. .db $00, $82, $04, $00, $00, $80, $02, $81, $00, $82, $00, $14, $00, $15, $00, $83
0B662 01 84 00 85 00 00 00 80.. .db $01, $84, $00, $85, $00, $00, $00, $80, $00, $81, $00, $82, $00, $00, $00, $83
0B672 02 84 00 85 00 14 00 15.. .db $02, $84, $00, $85, $00, $14, $00, $15, $04, $00, $00, $83, $00, $84, $00, $85
0B682 05 00 00 2C 00 2D 01 00.. .db $05, $00, $00, $2c, $00, $2d, $01, $00, $00, $8d, $19, $00, $00, $07, $02, $00
0B692 02 0B 01 00 02 8E 02 00.. .db $02, $0b, $01, $00, $02, $8e, $02, $00, $00, $05, $00, $06, $00, $08, $01, $00
0B6A2 02 63 03 00 00 05 01 00.. .db $02, $63, $03, $00, $00, $05, $01, $00, $00, $05, $00, $0a, $02, $54, $06, $00
0B6B2 00 05 00 0A 00 00 00 05.. .db $00, $05, $00, $0a, $00, $00, $00, $05, $00, $09, $03, $54, $05, $00, $00, $05
0B6C2 01 0A 06 54 04 00 00 05.. .db $01, $0a, $06, $54, $04, $00, $00, $05, $01, $0a, $00, $09, $06, $54, $03, $00
0B6D2 00 05 03 0A 20 00 00 80.. .db $00, $05, $03, $0a, $20, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83
0B6E2 02 84 00 85 00 C2 00 00.. .db $02, $84, $00, $85, $00, $c2, $00, $00, $00, $80, $03, $81, $00, $82, $07, $00
0B6F2 00 C2 00 00 00 83 03 84.. .db $00, $c2, $00, $00, $00, $83, $03, $84, $00, $85, $00, $00, $00, $80, $09, $00
0B702 00 C0 00 C1 00 C0 01 00.. .db $00, $c0, $00, $c1, $00, $c0, $01, $00, $00, $83, $04, $00, $00, $02, $00, $03
0B712 00 04 02 00 00 0D 03 00.. .db $00, $04, $02, $00, $00, $0d, $03, $00, $00, $07, $03, $00, $02, $54, $02, $00
0B722 00 0F 03 00 00 06 00 08.. .db $00, $0f, $03, $00, $00, $06, $00, $08, $01, $8e, $00, $00, $00, $54, $00, $4c
0B732 00 54 00 03 00 04 00 00.. .db $00, $54, $00, $03, $00, $04, $00, $00, $00, $4e, $01, $4d, $01, $00, $01, $0a
0B742 00 08 01 00 00 54 00 4C.. .db $00, $08, $01, $00, $00, $54, $00, $4c, $06, $54, $01, $00, $00, $0a, $00, $06
0B752 00 0A 00 08 00 00 00 54.. .db $00, $0a, $00, $08, $00, $00, $00, $54, $06, $4c, $00, $54, $01, $90, $03, $0a
0B762 00 08 00 54 06 4C 00 54.. .db $00, $08, $00, $54, $06, $4c, $00, $54, $01, $91, $04, $0a, $00, $54, $06, $4c
0B772 00 54 01 91 1C 00 00 C7.. .db $00, $54, $01, $91, $1c, $00, $00, $c7, $16, $00, $02, $c2, $07, $00, $02, $81
0B782 00 82 00 00 02 C2 03 00.. .db $00, $82, $00, $00, $02, $c2, $03, $00, $00, $19, $00, $1a, $00, $1b, $00, $00
0B792 02 84 00 85 08 00 00 4F.. .db $02, $84, $00, $85, $08, $00, $00, $4f, $05, $00, $00, $19, $02, $1a, $00, $1b
0B7A2 03 00 00 50 04 00 00 0E.. .db $03, $00, $00, $50, $04, $00, $00, $0e, $01, $00, $00, $4f, $05, $00, $00, $50
0B7B2 04 00 00 4E 01 00 00 50.. .db $04, $00, $00, $4e, $01, $00, $00, $50, $01, $4d, $03, $00, $00, $50, $00, $07
0B7C2 02 00 06 54 03 00 00 50.. .db $02, $00, $06, $54, $03, $00, $00, $50, $00, $09, $00, $08, $01, $90, $00, $54
0B7D2 04 4C 00 54 01 00 04 54.. .db $04, $4c, $00, $54, $01, $00, $04, $54, $01, $91, $00, $54, $04, $4c, $00, $54
0B7E2 01 90 00 54 02 4C 00 54.. .db $01, $90, $00, $54, $02, $4c, $00, $54, $01, $91, $00, $54, $04, $4c, $00, $54
0B7F2 01 91 00 54 02 4C 00 54.. .db $01, $91, $00, $54, $02, $4c, $00, $54, $18, $00, $00, $80, $03, $81, $00, $82
0B802 09 00 00 83 03 84 00 85.. .db $09, $00, $00, $83, $03, $84, $00, $85, $01, $00, $00, $80, $02, $81, $00, $82
0B812 0A 00 00 83 02 84 00 85.. .db $0a, $00, $00, $83, $02, $84, $00, $85, $15, $00, $02, $c0, $2a, $00, $00, $36
0B822 04 1D 03 00 00 12 00 13.. .db $04, $1d, $03, $00, $00, $12, $00, $13, $02, $00, $00, $07, $00, $37, $04, $20
0B832 00 08 02 00 00 14 00 15.. .db $00, $08, $02, $00, $00, $14, $00, $15, $01, $00, $00, $05, $00, $06, $00, $08
0B842 04 00 00 06 00 08 01 00.. .db $04, $00, $00, $06, $00, $08, $01, $00, $00, $14, $00, $15, $00, $00, $00, $05
0B852 02 0A 00 08 03 00 01 0A.. .db $02, $0a, $00, $08, $03, $00, $01, $0a, $00, $08, $00, $00, $00, $14, $00, $15
0B862 00 05 04 0A 00 08 24 00.. .db $00, $05, $04, $0a, $00, $08, $24, $00, $00, $80, $01, $81, $00, $82, $0b, $00
0B872 00 83 01 84 00 85 0E 00.. .db $00, $83, $01, $84, $00, $85, $0e, $00, $00, $c0, $00, $c1, $00, $00, $01, $c2
0B882 00 00 01 C0 01 00 00 80.. .db $00, $00, $01, $c0, $01, $00, $00, $80, $0e, $00, $00, $83, $00, $00, $00, $12
0B892 00 13 09 00 00 0E 02 00.. .db $00, $13, $09, $00, $00, $0e, $02, $00, $00, $14, $00, $15, $00, $00, $00, $02
0B8A2 02 03 00 04 00 00 01 4D.. .db $02, $03, $00, $04, $00, $00, $01, $4d, $00, $00, $00, $4e, $01, $00, $00, $1d
0B8B2 00 1E 00 15 0B 54 00 00.. .db $00, $1e, $00, $15, $0b, $54, $00, $00, $00, $20, $00, $21, $00, $15, $00, $54
0B8C2 09 4C 00 54 01 00 00 14.. .db $09, $4c, $00, $54, $01, $00, $00, $14, $00, $15, $00, $54, $09, $4c, $00, $54
0B8D2 01 00 00 14 00 15 00 54.. .db $01, $00, $00, $14, $00, $15, $00, $54, $09, $4c, $00, $54, $01, $00, $00, $14
0B8E2 00 15 00 54 09 4C 00 54.. .db $00, $15, $00, $54, $09, $4c, $00, $54, $18, $00, $00, $80, $03, $81, $00, $82
0B8F2 09 00 00 83 03 84 00 85.. .db $09, $00, $00, $83, $03, $84, $00, $85, $11, $00, $03, $81, $00, $82, $02, $00
0B902 01 C2 05 00 03 84 00 85.. .db $01, $c2, $05, $00, $03, $84, $00, $85, $08, $00, $01, $c0, $01, $00, $01, $c2
0B912 02 00 00 02 01 03 00 04.. .db $02, $00, $00, $02, $01, $03, $00, $04, $0b, $00, $03, $61, $05, $00, $00, $02
0B922 01 03 00 04 01 00 00 61.. .db $01, $03, $00, $04, $01, $00, $00, $61, $01, $69, $00, $61, $01, $00, $02, $0b
0B932 00 00 03 61 01 00 00 61.. .db $00, $00, $03, $61, $01, $00, $00, $61, $01, $69, $00, $61, $01, $00, $02, $63
0B942 00 00 00 61 01 69 00 61.. .db $00, $00, $00, $61, $01, $69, $00, $61, $01, $00, $00, $61, $01, $69, $00, $61
0B952 00 08 04 00 00 61 01 69.. .db $00, $08, $04, $00, $00, $61, $01, $69, $00, $61, $00, $00, $00, $05, $00, $61
0B962 01 69 00 61 00 0A 00 08.. .db $01, $69, $00, $61, $00, $0a, $00, $08, $03, $00, $00, $61, $01, $69, $00, $61
0B972 00 05 00 0A 00 61 01 69.. .db $00, $05, $00, $0a, $00, $61, $01, $69, $00, $61, $01, $0a, $00, $08, $11, $00
0B982 00 73 28 00 02 C2 07 00.. .db $00, $73, $28, $00, $02, $c2, $07, $00, $00, $80, $01, $81, $00, $82, $00, $00
0B992 02 C2 00 00 00 07 00 00.. .db $02, $c2, $00, $00, $00, $07, $00, $00, $00, $5f, $01, $c0, $01, $00, $00, $83
0B9A2 01 84 00 85 03 00 00 05.. .db $01, $84, $00, $85, $03, $00, $00, $05, $00, $06, $00, $08, $05, $00, $05, $4d
0B9B2 00 05 02 0A 05 00 06 54.. .db $00, $05, $02, $0a, $05, $00, $06, $54, $02, $61, $03, $0b, $01, $00, $00, $54
0B9C2 04 4C 00 54 02 61 03 63.. .db $04, $4c, $00, $54, $02, $61, $03, $63, $01, $00, $00, $54, $04, $4c, $00, $54
0B9D2 02 61 05 00 00 54 04 4C.. .db $02, $61, $05, $00, $00, $54, $04, $4c, $00, $54, $02, $0a, $05, $00, $00, $54
0B9E2 04 4C 00 54 01 0A 00 09.. .db $04, $4c, $00, $54, $01, $0a, $00, $09, $05, $00, $00, $54, $04, $4c, $00, $54
0B9F2 02 0A 1F 00 00 80 01 81.. .db $02, $0a, $1f, $00, $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84
0BA02 00 85 02 00 02 C2 0C 00.. .db $00, $85, $02, $00, $02, $c2, $0c, $00, $02, $c2, $10, $00, $00, $80, $00, $81
0BA12 00 82 01 00 00 08 09 00.. .db $00, $82, $01, $00, $00, $08, $09, $00, $00, $83, $00, $84, $00, $85, $01, $00
0BA22 00 61 00 08 03 00 00 19.. .db $00, $61, $00, $08, $03, $00, $00, $19, $02, $1a, $00, $1b, $04, $00, $00, $61
0BA32 00 0A 00 08 04 00 00 4F.. .db $00, $0a, $00, $08, $04, $00, $00, $4f, $04, $00, $00, $19, $00, $1a, $00, $61
0BA42 01 0A 00 08 03 00 00 50.. .db $01, $0a, $00, $08, $03, $00, $00, $50, $06, $00, $01, $0a, $00, $06, $00, $0a
0BA52 00 08 02 00 00 50 06 00.. .db $00, $08, $02, $00, $00, $50, $06, $00, $04, $0a, $00, $08, $01, $00, $00, $50
0BA62 06 00 05 0A 00 08 00 00.. .db $06, $00, $05, $0a, $00, $08, $00, $00, $00, $50, $29, $00, $00, $c2, $01, $00
0BA72 00 80 01 81 00 82 08 00.. .db $00, $80, $01, $81, $00, $82, $08, $00, $00, $c2, $01, $00, $00, $83, $01, $84
0BA82 00 85 15 00 00 C1 00 00.. .db $00, $85, $15, $00, $00, $c1, $00, $00, $00, $19, $00, $1a, $00, $1b, $0d, $00
0BA92 00 4F 0E 00 00 50 08 00.. .db $00, $4f, $0e, $00, $00, $50, $08, $00, $00, $80, $01, $81, $01, $1a, $00, $1b
0BAA2 00 50 08 00 00 83 01 84.. .db $00, $50, $08, $00, $00, $83, $01, $84, $00, $4f, $01, $00, $00, $50, $0b, $00
0BAB2 00 50 01 00 00 50 00 19.. .db $00, $50, $01, $00, $00, $50, $00, $19, $02, $1a, $00, $1b, $01, $00, $01, $4d
0BAC2 00 00 00 02 00 03 00 50.. .db $00, $00, $00, $02, $00, $03, $00, $50, $01, $00, $00, $50, $01, $00, $00, $4f
0BAD2 03 00 04 54 00 50 01 00.. .db $03, $00, $04, $54, $00, $50, $01, $00, $00, $50, $01, $00, $00, $50, $03, $00
0BAE2 04 54 13 00 00 80 02 81.. .db $04, $54, $13, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83, $02, $84
0BAF2 00 85 1F 00 00 80 03 81.. .db $00, $85, $1f, $00, $00, $80, $03, $81, $00, $82, $09, $00, $00, $83, $03, $84
0BB02 00 85 00 16 0A 00 01 8B.. .db $00, $85, $00, $16, $0a, $00, $01, $8b, $02, $00, $00, $81, $00, $82, $01, $00
0BB12 00 12 00 13 09 00 00 84.. .db $00, $12, $00, $13, $09, $00, $00, $84, $00, $85, $01, $00, $00, $14, $00, $15
0BB22 0D 00 00 14 00 15 01 00.. .db $0d, $00, $00, $14, $00, $15, $01, $00, $01, $8b, $05, $00, $01, $03, $00, $04
0BB32 00 00 00 14 00 15 09 00.. .db $00, $00, $00, $14, $00, $15, $09, $00, $05, $54, $09, $00, $05, $54, $29, $00
0BB42 03 C2 01 00 00 80 01 81.. .db $03, $c2, $01, $00, $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84
0BB52 00 85 05 00 03 0B 04 00.. .db $00, $85, $05, $00, $03, $0b, $04, $00, $00, $c0, $03, $00, $00, $80, $00, $81
0BB62 03 17 00 18 08 00 00 83.. .db $03, $17, $00, $18, $08, $00, $00, $83, $00, $84, $03, $4c, $04, $00, $00, $0b
0BB72 05 00 03 4C 03 00 00 16.. .db $05, $00, $03, $4c, $03, $00, $00, $16, $00, $17, $00, $18, $02, $00, $00, $c2
0BB82 00 00 03 4C 04 00 00 4C.. .db $00, $00, $03, $4c, $04, $00, $00, $4c, $05, $00, $03, $4c, $02, $00, $00, $07
0BB92 00 00 00 4C 03 00 01 0B.. .db $00, $00, $00, $4c, $03, $00, $01, $0b, $03, $4c, $01, $00, $00, $05, $00, $09
0BBA2 00 08 00 4C 02 00 00 16.. .db $00, $08, $00, $4c, $02, $00, $00, $16, $01, $17, $03, $4c, $00, $00, $00, $05
0BBB2 02 0A 00 4C 03 00 05 4C.. .db $02, $0a, $00, $4c, $03, $00, $05, $4c, $00, $05, $03, $0a, $00, $4c, $00, $08
0BBC2 02 00 01 4C 11 00 00 80.. .db $02, $00, $01, $4c, $11, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83
0BBD2 02 84 00 85 12 00 00 80.. .db $02, $84, $00, $85, $12, $00, $00, $80, $01, $81, $00, $82, $01, $00, $00, $82
0BBE2 08 00 00 83 01 84 00 85.. .db $08, $00, $00, $83, $01, $84, $00, $85, $01, $00, $00, $85, $08, $00, $03, $0b
0BBF2 0A 00 00 16 03 17 00 18.. .db $0a, $00, $00, $16, $03, $17, $00, $18, $00, $00, $03, $c0, $00, $00, $00, $c2
0BC02 03 00 03 4C 0B 00 03 4C.. .db $03, $00, $03, $4c, $0b, $00, $03, $4c, $01, $00, $05, $0b, $03, $00, $03, $4c
0BC12 01 00 05 17 00 18 02 00.. .db $01, $00, $05, $17, $00, $18, $02, $00, $03, $4c, $01, $00, $05, $4c, $03, $00
0BC22 03 4C 01 00 05 4C 03 00.. .db $03, $4c, $01, $00, $05, $4c, $03, $00, $03, $4c, $06, $00, $00, $24, $0e, $00
0BC32 00 25 0E 00 00 25 08 00.. .db $00, $25, $0e, $00, $00, $25, $08, $00, $00, $80, $04, $00, $00, $25, $08, $00
0BC42 00 83 04 00 00 25 00 80.. .db $00, $83, $04, $00, $00, $25, $00, $80, $00, $81, $00, $82, $0b, $00, $00, $25
0BC52 00 83 00 84 00 85 0B 00.. .db $00, $83, $00, $84, $00, $85, $0b, $00, $00, $25, $03, $00, $02, $45, $07, $00
0BC62 00 25 03 00 00 46 00 47.. .db $00, $25, $03, $00, $00, $46, $00, $47, $00, $48, $07, $00, $00, $25, $01, $00
0BC72 00 07 00 45 02 49 00 45.. .db $00, $07, $00, $45, $02, $49, $00, $45, $06, $00, $00, $25, $00, $00, $00, $05
0BC82 00 06 01 47 00 4A 01 47.. .db $00, $06, $01, $47, $00, $4a, $01, $47, $06, $00, $00, $61, $00, $05, $01, $0a
0BC92 01 47 00 4B 00 70 00 47.. .db $01, $47, $00, $4b, $00, $70, $00, $47, $01, $03, $04, $00, $0a, $54, $04, $00
0BCA2 0A 54 1F 00 03 81 00 82.. .db $0a, $54, $1f, $00, $03, $81, $00, $82, $0a, $00, $03, $84, $00, $85, $20, $00
0BCB2 00 80 02 81 00 82 0A 00.. .db $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83, $02, $84, $00, $85, $34, $00
0BCC2 00 04 0E 00 1F 54 AF 00.. .db $00, $04, $0e, $00, $1f, $54, $af, $00, $1f, $540BCCC                           	  
0BCCC FD                              .db $fd
0BCCD                           
0BCCD                           ;pipe intro area
0BCCD                           L_GroundArea10:
0BCCD 38 11                           .db $38, $11
0BCCF                                 include "code\leveldata\levels\entry.asm"
0BCCF                           
0BCCF 25 00 00 80 00 81 00 82.. .db $25, $00, $00, $80, $00, $81, $00, $82, $0c, $00, $00, $83, $00, $84, $00, $85
0BCDF 00 00 00 80 02 81 00 82.. .db $00, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83, $02, $84, $00, $85
0BCEF 11 00 02 45 0C 00 00 46.. .db $11, $00, $02, $45, $0c, $00, $00, $46, $00, $47, $00, $48, $07, $00, $00, $10
0BCFF 00 11 01 00 00 45 02 49.. .db $00, $11, $01, $00, $00, $45, $02, $49, $00, $45, $06, $00, $00, $14, $00, $15
0BD0F 01 00 01 47 00 4A 01 47.. .db $01, $00, $01, $47, $00, $4a, $01, $47, $04, $00, $00, $1c, $00, $1d, $00, $1e
0BD1F 00 15 01 00 01 47 00 4B.. .db $00, $15, $01, $00, $01, $47, $00, $4b, $00, $70, $00, $47, $00, $02, $00, $03
0BD2F 00 04 01 00 00 1F 00 20.. .db $00, $04, $01, $00, $00, $1f, $00, $20, $00, $21, $00, $15, $01, $00, $1f, $54
0BD3F CF 00                     .db $cf, $000BD41 FD                              .db $fd
0BD42                           
0BD42                           ;cloud level used in levels 2-1 and 5-2
0BD42                           L_GroundArea12:
0BD42 00 C1                           .db $00, $c1
0BD44 4C 00 F4 4F 0D 02 02 42..       .db $4c, $00, $f4, $4f, $0d, $02, $02, $42, $43, $4f
0BD4E 52 C2 DE 00 5A C2 4D C7         .db $52, $c2, $de, $00, $5a, $c2, $4d, $c7
0BD56 FD                              .db $fd
0BD57                           
0BD57                           
0BD57                           
0BD57                           ;warp zone area used in level 4-2
0BD57                           L_GroundArea16:
0BD57 10 51                           .db $10, $51
0BD59 FD                              .db $fd
0BD5A                           
0BD5A                           ;level 8-1
0BD5A                           L_GroundArea17:
0BD5A 92 31                           .db $92, $31
0BD5C FD                              .db $fd
0BD5D                           
0BD5D                           ;level 8-2
0BD5D                           L_GroundArea19:
0BD5D 50 B1                           .db $50, $b1
0BD5F FD                              .db $fd
0BD60                           
0BD60                           
0BD60                           ;cloud level used in levels 3-1 and 6-2
0BD60                           L_GroundArea21:
0BD60 06 C1                           .db $06, $c1
0BD62 FD                              .db $fd
0BD63                           
0BD63                           
0BD63                           	  
0BD63                           ;level 4-2
0BD63                           L_UndergroundArea2:
0BD63 48 0F                           .db $48, $0f
0BD65 FD                              .db $fd
0BD66                           
0BD66                           ;underground bonus rooms area used in many levels
0BD66                           L_UndergroundArea3:
0BD66 48 01                           .db $48, $01
0BD68 FD                              .db $fd
0BD69                           
0BD69                           ;water area used in levels 5-2 and 6-2
0BD69                           L_WaterArea1:
0BD69 41 01                           .db $41, $01
0BD6B FD                              .db $fd
0BD6C                           
0BD6C                           ;level 2-2/7-2
0BD6C                           
0BD6C                           
0BD6C                           ;level 7-2
0BD6C                           L_WaterArea3:
0BD6C 49 0F                           .db $49, $0f
0BD6E FD                              .db $fd
0BD6F                           	  
0BD6F                           
0BD6F                           
0BD6F                           E73:
0BD6F                           E91:
0BD6F                           E93:
0BD6F                           
0BD6F FF                        	.db $ff
0BD70                           
0BD70                           L73:
0BD70                           L91:
0BD70                           L93:
0BD70                           
0BD70 90 51                     	.db $90, $51
0BD72 FD                        	.db $fd
0BD73                           
0BD73                           
0BD73                           ;-------------------------------------------------------------------------------------
0BD73 00 00 00 00 00 00 00 00.. pad $c000
0C000                           
0C000                           base $a000
0A000                           include code\leveldata\levelData2.asm
0A000                           ;level 2-4
0A000                           E_CastleArea3:
0A000 94 0C                     	 .db #9 * $10 + 4, #12
0A002                           
0A002 35 8C                      .db #3 * $10 + 5, #12 + $80
0A004 A4 0C                      .db #10 * $10 + 4, #12
0A006 F8 09                      .db #15 * $10 + 8, #9
0A008                           
0A008 68 89                      .db #6 * $10 + 8, #9 + $80
0A00A                           
0A00A 3B 83                      .db #3 * $10 + 11, #3 + $80
0A00C 5B 03                      .db #5 * $10 + 11, #3
0A00E                           
0A00E 05 8C                      .db #0 * $10 + 5, #12 + $80
0A010 3A 1C                      .db #3 * $10 + 10, #28
0A012 F7 02                      .db #15 * $10 + 7, #2
0A014                           
0A014 0A 9D                      .db #0 * $10 + 10, #29 + $80
0A016 DA 1B                      .db #13 * $10 + 10, #27
0A018                           
0A018 E4 8C                      .db #14 * $10 + 4, #12 + $80
0A01A                           
0A01A 86 8C                      .db #8 * $10 + 6, #12 + $80
0A01C                           
0A01C 18 86                      .db #1 * $10 + 8, #6 + $80
0A01E 38 06                      .db #3 * $10 + 8, #6
0A020 96 0C                      .db #9 * $10 + 6, #12
0A022                           
0A022 25 8C                      .db #2 * $10 + 5, #12 + $80
0A024 77 06                      .db #7 * $10 + 7, #6
0A026 EA 1B                      .db #14 * $10 + 10, #27
0A028                           
0A028 5A 9D                      .db #5 * $10 + 10, #29 + $80
0A02A E7 06                      .db #14 * $10 + 7, #6
0A02C                           
0A02C B5 8C                      .db #11 * $10 + 5, #12 + $80
0A02E                           
0A02E 35 8C                      .db #3 * $10 + 5, #12 + $80
0A030 A8 05                      .db #10 * $10 + 8, #5
0A032                           
0A032 56 8C                      .db #5 * $10 + 6, #12 + $80
0A034                           
0A034 26 8C                      .db #2 * $10 + 6, #12 + $80
0A036 48 2D                      .db #4 * $10 + 8, #45
0A038                           
0A038 1B C1                      .db #1 * $10 + 11, #65 + $80
0A03A 9B 35                      .db #9 * $10 + 11, #53
0A03C FF                              .db $ff
0A03D                           
0A03D                           ;level 2-3
0A03D                           E_GroundArea8:
0A03D 0F 01                     		.db PageSkip, #1
0A03F                           
0A03F 26 83                      .db #2 * $10 + 6, #3 + $80
0A041 89 0D                      .db #8 * $10 + 9, #13
0A043 DA 06                      .db #13 * $10 + 10, #6
0A045                           
0A045 5A A1                      .db #5 * $10 + 10, #33 + $80
0A047                           
0A047 09 8D                      .db #0 * $10 + 9, #13 + $80
0A049 98 06                      .db #9 * $10 + 8, #6
0A04B C8 06                      .db #12 * $10 + 8, #6
0A04D 0F 05                      .db PageSkip, #5
0A04F                           
0A04F 87 86                      .db #8 * $10 + 7, #6 + $80
0A051 B7 06                      .db #11 * $10 + 7, #6
0A053                           
0A053 A8 80                      .db #10 * $10 + 8, #0 + $80
0A055                           
0A055 59 80                      .db #5 * $10 + 9, #0 + $80
0A057                           
0A057 3A 83                      .db #3 * $10 + 10, #3 + $80
0A059 59 0D                      .db #5 * $10 + 9, #13
0A05B AB 0D                      .db #10 * $10 + 11, #13
0A05D                           
0A05D 79 80                      .db #7 * $10 + 9, #0 + $80
0A05F 99 00                      .db #9 * $10 + 9, #0
0A061 0F 0B                      .db PageSkip, #11
0A063                           
0A063 A6 86                      .db #10 * $10 + 6, #6 + $80
0A065 C6 06                      .db #12 * $10 + 6, #6
0A067                           
0A067 07 A0                      .db #0 * $10 + 7, #32 + $80
0A069 99 00                      .db #9 * $10 + 9, #0
0A06B                           
0A06B 89 93                      .db #8 * $10 + 9, #19 + $80
0A06D                           
0A06D 42 B0                      .db #4 * $10 + 2, #48 + $80
0A06F 0F 10                      .db PageSkip, #16
0A071 FF                              .db $ff
0A072                           ;level 2-2
0A072                           E_WaterArea2:
0A072 EE 45 28 00               	  .db $ee, $45, $28, $00
0A076 0F 01                     	   .db PageSkip, #1
0A078 48 8D                      .db #4 * $10 + 8, #13 + $80
0A07A 76 0A                      .db #7 * $10 + 6, #10
0A07C B9 21                      .db #11 * $10 + 9, #33
0A07E 3A 8B                      .db #3 * $10 + 10, #11 + $80
0A080 26 8A                      .db #2 * $10 + 6, #10 + $80
0A082 88 0B                      .db #8 * $10 + 8, #11
0A084 46 8A                      .db #4 * $10 + 6, #10 + $80
0A086 54 8B                      .db #5 * $10 + 4, #11 + $80
0A088 8A 0A                      .db #8 * $10 + 10, #10
0A08A 47 8B                      .db #4 * $10 + 7, #11 + $80
0A08C 8A 8A                      .db #8 * $10 + 10, #10 + $80
0A08E 54 8B                      .db #5 * $10 + 4, #11 + $80
0A090 43 87                      .db #4 * $10 + 3, #7 + $80
0A092 A4 0B                      .db #10 * $10 + 4, #11
0A094 0A A2                      .db #0 * $10 + 10, #34 + $80
0A096 3B 0A                      .db #3 * $10 + 11, #10
0A098 97 0D                      .db #9 * $10 + 7, #13
0A09A 93 8A                      .db #9 * $10 + 3, #10 + $80
0A09C 38 A2                      .db #3 * $10 + 8, #34 + $80
0A09E B7 0B                      .db #11 * $10 + 7, #11
0A0A0 C5 07                      .db #12 * $10 + 5, #7
0A0A2 29 8A                      .db #2 * $10 + 9, #10 + $80
0A0A4 88 0B                      .db #8 * $10 + 8, #11
0A0A6 17 8A                      .db #1 * $10 + 7, #10 + $80
0A0A8 66 07                      .db #6 * $10 + 6, #7
0A0AA 7A 0A                      .db #7 * $10 + 10, #10
0A0AC B4 0B                      .db #11 * $10 + 4, #11
0A0AE 7A C1                      .db #7 * $10 + 10, #65 + $80
0A0B0 FF                              .db $ff
0A0B1                           	  
0A0B1                           
0A0B1                           ;level 3-1
0A0B1                           E_GroundArea5:
0A0B1 0F 01                     	  .db PageSkip, #1
0A0B3                           
0A0B3 2A 8D                      .db #2 * $10 + 10, #13 + $80
0A0B5 69 0D                      .db #6 * $10 + 9, #13
0A0B7 DB 00                      .db #13 * $10 + 11, #0
0A0B9                           
0A0B9 09 8D                      .db #0 * $10 + 9, #13 + $80
0A0BB                           
0A0BB 64 83                      .db #6 * $10 + 4, #3 + $80
0A0BD                           
0A0BD 06 8D                      .db #0 * $10 + 6, #13 + $80
0A0BF 78 00                      .db #7 * $10 + 8, #0
0A0C1 E5 03                      .db #14 * $10 + 5, #3
0A0C3                           
0A0C3 68 80                      .db #6 * $10 + 8, #0 + $80
0A0C5                           
0A0C5 14 8D                      .db #1 * $10 + 4, #13 + $80
0A0C7 84 03                      .db #8 * $10 + 4, #3
0A0C9 0F 08                      .db PageSkip, #8
0A0CB                           
0A0CB 19 A1                      .db #1 * $10 + 9, #33 + $80
0A0CD 3A 06                      .db #3 * $10 + 10, #6
0A0CF 6A 06                      .db #6 * $10 + 10, #6
0A0D1 B7 0D                      .db #11 * $10 + 7, #13
0A0D3                           
0A0D3 3A 89                      .db #3 * $10 + 10, #9 + $80
0A0D5                           
0A0D5 45 83                      .db #4 * $10 + 5, #3 + $80
0A0D7 0F 0C                      .db PageSkip, #12
0A0D9                           
0A0D9 D8 80                      .db #13 * $10 + 8, #0 + $80
0A0DB 0F 0E                      .db PageSkip, #14
0A0DD                           
0A0DD 2B 83                      .db #2 * $10 + 11, #3 + $80
0A0DF 52 30                      .db #5 * $10 + 2, #48
0A0E1 0F 10                      .db PageSkip, #16
0A0E3 FF                              .db $ff
0A0E4                           	  
0A0E4                           ;level 3-2
0A0E4                           E_GroundArea22:
0A0E4 0F 01                     .db PageSkip, #1
0A0E6                           
0A0E6 3A 8D                      .db #3 * $10 + 10, #13 + $80
0A0E8 57 22                      .db #5 * $10 + 7, #34
0A0EA 7A 0D                      .db #7 * $10 + 10, #13
0A0EC                           
0A0EC 29 86                      .db #2 * $10 + 9, #6 + $80
0A0EE 59 00                      .db #5 * $10 + 9, #0
0A0F0                           
0A0F0 DA 80                      .db #13 * $10 + 10, #0 + $80
0A0F2                           
0A0F2 78 86                      .db #7 * $10 + 8, #6 + $80
0A0F4                           
0A0F4 39 80                      .db #3 * $10 + 9, #0 + $80
0A0F6 79 12                      .db #7 * $10 + 9, #18
0A0F8                           
0A0F8 48 86                      .db #4 * $10 + 8, #6 + $80
0A0FA                           
0A0FA 3A 86                      .db #3 * $10 + 10, #6 + $80
0A0FC 79 0D                      .db #7 * $10 + 9, #13
0A0FE DA 0D                      .db #13 * $10 + 10, #13
0A100                           
0A100 58 8D                      .db #5 * $10 + 8, #13 + $80
0A102 D9 21                      .db #13 * $10 + 9, #33
0A104                           
0A104 BA 86                      .db #11 * $10 + 10, #6 + $80
0A106 EA 06                      .db #14 * $10 + 10, #6
0A108                           
0A108 29 8D                      .db #2 * $10 + 9, #13 + $80
0A10A D6 03                      .db #13 * $10 + 6, #3
0A10C                           
0A10C 1A 86                      .db #1 * $10 + 10, #6 + $80
0A10E 4A 06                      .db #4 * $10 + 10, #6
0A110 79 20                      .db #7 * $10 + 9, #32
0A112                           
0A112 94 8F                      .db #9 * $10 + 4, #15 + $80
0A114                           
0A114 41 8F                      .db #4 * $10 + 1, #15 + $80
0A116                           
0A116 42 B0                      .db #4 * $10 + 2, #48 + $80
0A118 0F 10                      .db PageSkip, #16
0A11A FD                        	  .db $fd
0A11B                           	  
0A11B                           ;level 2-4
0A11B                           L_CastleArea3:
0A11B 9B 07                           .db $9b, $07
0A11D                                 include "code\leveldata\levels\2-4.asm" 
0A11D                           
0A11D 10 62 09 00 00 4E 03 00.. .db $10, $62, $09, $00, $00, $4e, $03, $00, $00, $62, $09, $00, $00, $4e, $03, $00
0A12D 00 62 09 00 00 4E 01 C0.. .db $00, $62, $09, $00, $00, $4e, $01, $c0, $00, $00, $00, $c0, $01, $62, $08, $00
0A13D 00 4E 03 00 03 62 06 00.. .db $00, $4e, $03, $00, $03, $62, $06, $00, $00, $4e, $03, $00, $07, $62, $02, $00
0A14D 00 4E 03 00 07 62 02 00.. .db $00, $4e, $03, $00, $07, $62, $02, $00, $0c, $62, $07, $00, $07, $62, $07, $00
0A15D 07 62 07 90 07 62 07 91.. .db $07, $62, $07, $90, $07, $62, $07, $91, $07, $62, $07, $91, $0f, $62, $00, $00
0A16D 00 4E 02 00 00 4E 01 00.. .db $00, $4e, $02, $00, $00, $4e, $01, $00, $00, $4e, $07, $00, $00, $4e, $02, $00
0A17D 00 4E 01 00 00 4E 06 00.. .db $00, $4e, $01, $00, $00, $4e, $06, $00, $00, $c0, $00, $4e, $02, $00, $00, $4e
0A18D 01 00 00 4E 07 00 00 4E.. .db $01, $00, $00, $4e, $07, $00, $00, $4e, $02, $00, $00, $4e, $01, $c2, $00, $4e
0A19D 07 00 00 4E 02 00 00 4E.. .db $07, $00, $00, $4e, $02, $00, $00, $4e, $01, $00, $00, $4e, $07, $00, $00, $4e
0A1AD 02 00 00 4E 01 00 00 4E.. .db $02, $00, $00, $4e, $01, $00, $00, $4e, $02, $00, $01, $62, $01, $00, $01, $62
0A1BD 02 00 00 4E 01 00 00 4E.. .db $02, $00, $00, $4e, $01, $00, $00, $4e, $02, $00, $01, $62, $06, $00, $03, $62
0A1CD 02 00 03 62 0B 00 03 62.. .db $02, $00, $03, $62, $0b, $00, $03, $62, $0b, $90, $03, $62, $0b, $91, $03, $62
0A1DD 0B 91 13 62 00 00 03 62.. .db $0b, $91, $13, $62, $00, $00, $03, $62, $0b, $00, $03, $62, $0b, $00, $00, $4e
0A1ED 01 00 00 4E 0B 00 00 4E.. .db $01, $00, $00, $4e, $0b, $00, $00, $4e, $01, $00, $00, $4e, $0b, $00, $00, $4e
0A1FD 01 00 00 4E 0B 00 00 4E.. .db $01, $00, $00, $4e, $0b, $00, $00, $4e, $01, $00, $00, $4e, $02, $00, $01, $62
0A20D 06 00 00 4E 01 00 00 4E.. .db $06, $00, $00, $4e, $01, $00, $00, $4e, $02, $00, $01, $62, $05, $00, $09, $62
0A21D 05 00 09 62 05 00 09 62.. .db $05, $00, $09, $62, $05, $00, $09, $62, $05, $00, $09, $62, $03, $00, $0b, $62
0A22D 03 90 11 62 1F 00 04 C0.. .db $03, $90, $11, $62, $1f, $00, $04, $c0, $00, $c7, $39, $00, $00, $c1, $04, $c0
0A23D 06 00 01 62 0C 00 02 62.. .db $06, $00, $01, $62, $0c, $00, $02, $62, $0b, $00, $03, $62, $0a, $00, $04, $62
0A24D 00 90 07 62 01 00 04 62.. .db $00, $90, $07, $62, $01, $00, $04, $62, $00, $91, $07, $62, $01, $90, $04, $62
0A25D 00 91 0F 62 07 00 07 62.. .db $00, $91, $0f, $62, $07, $00, $07, $62, $07, $00, $07, $62, $07, $00, $00, $4e
0A26D 0E 00 00 4E 0E 00 00 4E.. .db $0e, $00, $00, $4e, $0e, $00, $00, $4e, $0e, $00, $00, $4e, $08, $00, $02, $62
0A27D 02 00 07 62 01 00 00 62.. .db $02, $00, $07, $62, $01, $00, $00, $62, $00, $c4, $00, $62, $02, $00, $07, $62
0A28D 01 00 02 62 02 00 07 62.. .db $01, $00, $02, $62, $02, $00, $07, $62, $01, $90, $02, $62, $02, $90, $07, $62
0A29D 01 91 02 62 02 91 07 62.. .db $01, $91, $02, $62, $02, $91, $07, $62, $01, $91, $02, $62, $02, $91, $28, $62
0A2AD 0B 00 02 62 00 4E 0B 00.. .db $0b, $00, $02, $62, $00, $4e, $0b, $00, $00, $4e, $01, $00, $00, $4e, $0b, $00
0A2BD 00 4E 01 00 00 4E 0B 00.. .db $00, $4e, $01, $00, $00, $4e, $0b, $00, $00, $4e, $01, $00, $00, $4e, $0b, $00
0A2CD 00 4E 01 00 01 62 01 00.. .db $00, $4e, $01, $00, $01, $62, $01, $00, $01, $62, $01, $00, $01, $62, $01, $00
0A2DD 03 62 00 C4 00 62 01 00.. .db $03, $62, $00, $c4, $00, $62, $01, $00, $01, $62, $01, $00, $01, $62, $01, $00
0A2ED 00 62 00 C4 03 62 01 00.. .db $00, $62, $00, $c4, $03, $62, $01, $00, $01, $62, $01, $00, $01, $62, $01, $00
0A2FD 05 62 01 90 01 62 01 90.. .db $05, $62, $01, $90, $01, $62, $01, $90, $01, $62, $01, $90, $05, $62, $01, $91
0A30D 01 62 01 91 01 62 01 91.. .db $01, $62, $01, $91, $01, $62, $01, $91, $05, $62, $01, $91, $01, $62, $01, $91
0A31D 01 62 01 91 17 62 02 00.. .db $01, $62, $01, $91, $17, $62, $02, $00, $00, $4e, $03, $00, $00, $4e, $02, $00
0A32D 03 62 02 00 00 4E 00 C0.. .db $03, $62, $02, $00, $00, $4e, $00, $c0, $01, $c2, $00, $c0, $00, $4e, $05, $00
0A33D 00 4E 02 00 00 4E 03 00.. .db $00, $4e, $02, $00, $00, $4e, $03, $00, $00, $4e, $05, $00, $00, $4e, $02, $00
0A34D 00 4E 03 00 00 4E 05 00.. .db $00, $4e, $03, $00, $00, $4e, $05, $00, $00, $4e, $02, $00, $00, $4e, $03, $00
0A35D 00 4E 05 00 00 4E 02 00.. .db $00, $4e, $05, $00, $00, $4e, $02, $00, $05, $62, $02, $00, $03, $62, $0b, $00
0A36D 03 62 0B 00 03 62 0B 00.. .db $03, $62, $0b, $00, $03, $62, $0b, $00, $03, $62, $0b, $90, $03, $62, $0b, $91
0A37D 03 62 0B 91 0F 62 00 4E.. .db $03, $62, $0b, $91, $0f, $62, $00, $4e, $04, $00, $00, $4e, $04, $00, $00, $8f
0A38D 02 C2 00 4E 04 00 00 4E.. .db $02, $c2, $00, $4e, $04, $00, $00, $4e, $04, $00, $00, $8f, $02, $c2, $00, $4e
0A39D 04 00 00 4E 04 00 00 8F.. .db $04, $00, $00, $4e, $04, $00, $00, $8f, $02, $c2, $00, $4e, $04, $c2, $00, $4e
0A3AD 04 00 03 62 00 4E 04 00.. .db $04, $00, $03, $62, $00, $4e, $04, $00, $00, $4e, $04, $00, $00, $4e, $02, $00
0A3BD 00 4E 04 00 00 4E 04 00.. .db $00, $4e, $04, $00, $00, $4e, $04, $00, $00, $4e, $02, $00, $00, $4e, $04, $00
0A3CD 00 4E 04 00 00 4E 02 00.. .db $00, $4e, $04, $00, $00, $4e, $02, $00, $06, $62, $02, $00, $05, $62, $09, $00
0A3DD 05 62 09 90 05 62 09 91.. .db $05, $62, $09, $90, $05, $62, $09, $91, $05, $62, $09, $91, $15, $62, $04, $c2
0A3ED 00 62 04 00 00 4E 03 00.. .db $00, $62, $04, $00, $00, $4e, $03, $00, $04, $c2, $00, $62, $04, $00, $00, $4e
0A3FD 03 00 04 C2 00 62 04 00.. .db $03, $00, $04, $c2, $00, $62, $04, $00, $00, $4e, $03, $c2, $05, $62, $04, $00
0A40D 00 4E 08 00 00 4E 04 00.. .db $00, $4e, $08, $00, $00, $4e, $04, $00, $00, $4e, $08, $00, $00, $4e, $04, $00
0A41D 00 4E 08 00 00 4E 04 00.. .db $00, $4e, $08, $00, $00, $4e, $04, $00, $0c, $62, $07, $00, $07, $62, $07, $00
0A42D 07 62 07 90 07 62 07 91.. .db $07, $62, $07, $90, $07, $62, $07, $91, $07, $62, $07, $91, $0f, $62, $00, $4e
0A43D 0E 00 00 4E 0E 00 00 4E.. .db $0e, $00, $00, $4e, $0e, $00, $00, $4e, $03, $00, $00, $c0, $00, $c1, $00, $c0
0A44D 07 00 00 4E 08 00 01 C2.. .db $07, $00, $00, $4e, $08, $00, $01, $c2, $03, $00, $00, $4e, $0e, $00, $00, $4e
0A45D 0E 00 00 62 02 00 04 62.. .db $0e, $00, $00, $62, $02, $00, $04, $62, $03, $00, $02, $62, $03, $00, $04, $62
0A46D 03 00 00 62 00 C4 00 62.. .db $03, $00, $00, $62, $00, $c4, $00, $62, $03, $00, $04, $62, $03, $90, $02, $62
0A47D 03 90 04 62 03 91 02 62.. .db $03, $90, $04, $62, $03, $91, $02, $62, $03, $91, $04, $62, $03, $91, $02, $62
0A48D 03 91 04 62 03 91 12 62.. .db $03, $91, $04, $62, $03, $91, $12, $62, $2b, $00, $02, $c0, $01, $00, $01, $c2
0A49D 04 00 01 C2 29 00 02 62.. .db $04, $00, $01, $c2, $29, $00, $02, $62, $03, $00, $04, $62, $03, $00, $00, $62
0A4AD 00 C4 00 62 03 00 04 62.. .db $00, $c4, $00, $62, $03, $00, $04, $62, $03, $90, $02, $62, $03, $90, $04, $62
0A4BD 03 91 02 62 03 91 04 62.. .db $03, $91, $02, $62, $03, $91, $04, $62, $03, $91, $02, $62, $03, $91, $04, $62
0A4CD 03 91 02 62 03 91 0A 62.. .db $03, $91, $02, $62, $03, $91, $0a, $62, $00, $8d, $08, $62, $02, $00, $00, $4e
0A4DD 04 00 00 4E 03 00 00 4E.. .db $04, $00, $00, $4e, $03, $00, $00, $4e, $03, $00, $00, $4e, $04, $00, $00, $4e
0A4ED 03 00 00 4E 03 00 00 4E.. .db $03, $00, $00, $4e, $03, $00, $00, $4e, $04, $00, $00, $4e, $03, $00, $00, $4e
0A4FD 00 C2 02 00 00 4E 04 00.. .db $00, $c2, $02, $00, $00, $4e, $04, $00, $00, $4e, $03, $00, $00, $4e, $00, $c2
0A50D 02 00 00 4E 04 00 00 4E.. .db $02, $00, $00, $4e, $04, $00, $00, $4e, $03, $00, $00, $4e, $03, $00, $00, $4e
0A51D 04 00 00 4E 03 00 00 4E.. .db $04, $00, $00, $4e, $03, $00, $00, $4e, $03, $00, $00, $4e, $04, $00, $00, $4e
0A52D 03 00 01 62 02 00 06 62.. .db $03, $00, $01, $62, $02, $00, $06, $62, $15, $00, $0f, $90, $1f, $91, $0f, $62
0A53D 00 4E 0E 00 00 4E 0E 00.. .db $00, $4e, $0e, $00, $00, $4e, $0e, $00, $00, $4e, $0e, $00, $00, $4e, $05, $00
0A54D 01 C0 00 C1 01 C0 03 00.. .db $01, $c0, $00, $c1, $01, $c0, $03, $00, $00, $4e, $0e, $00, $00, $4e, $0e, $00
0A55D 00 62 14 00 06 62 08 00.. .db $00, $62, $14, $00, $06, $62, $08, $00, $06, $62, $02, $00, $05, $90, $06, $62
0A56D 02 00 05 91 06 62 02 90.. .db $02, $00, $05, $91, $06, $62, $02, $90, $05, $91, $06, $62, $02, $91, $0f, $62
0A57D 00 4E 01 00 00 4E 02 00.. .db $00, $4e, $01, $00, $00, $4e, $02, $00, $00, $4e, $01, $00, $00, $4e, $02, $00
0A58D 01 62 00 4E 01 00 00 4E.. .db $01, $62, $00, $4e, $01, $00, $00, $4e, $02, $00, $00, $4e, $01, $00, $00, $4e
0A59D 02 00 01 62 00 4E 01 00.. .db $02, $00, $01, $62, $00, $4e, $01, $00, $00, $4e, $02, $00, $00, $4e, $01, $00
0A5AD 00 4E 02 00 01 62 00 4E.. .db $00, $4e, $02, $00, $01, $62, $00, $4e, $01, $00, $00, $4e, $02, $00, $00, $4e
0A5BD 01 00 00 4E 04 00 00 4E.. .db $01, $00, $00, $4e, $04, $00, $00, $4e, $01, $c2, $00, $4e, $00, $00, $00, $c2
0A5CD 00 00 00 4E 01 C2 00 4E.. .db $00, $00, $00, $4e, $01, $c2, $00, $4e, $04, $00, $00, $4e, $01, $00, $00, $4e
0A5DD 02 00 00 4E 01 00 00 4E.. .db $02, $00, $00, $4e, $01, $00, $00, $4e, $04, $00, $00, $4e, $01, $00, $00, $4e
0A5ED 02 00 00 4E 01 00 00 4E.. .db $02, $00, $00, $4e, $01, $00, $00, $4e, $04, $00, $00, $4e, $01, $00, $00, $4e
0A5FD 02 00 00 4E 01 00 00 4E.. .db $02, $00, $00, $4e, $01, $00, $00, $4e, $02, $00, $05, $62, $02, $00, $03, $62
0A60D 02 00 01 62 0D 00 01 62.. .db $02, $00, $01, $62, $0d, $00, $01, $62, $0d, $90, $01, $62, $0d, $91, $11, $62
0A61D 0D 00 01 62 0D 00 01 62.. .db $0d, $00, $01, $62, $0d, $00, $01, $62, $0d, $00, $01, $62, $05, $00, $02, $8e
0A62D 23 00 00 C5 0E 00 02 62.. .db $23, $00, $00, $c5, $0e, $00, $02, $62, $0c, $89, $02, $62, $0c, $00, $02, $62
0A63D 0C 90 02 62 0C 91 02 62.. .db $0c, $90, $02, $62, $0c, $91, $02, $62, $0c, $91, $12, $62, $9f, $00, $1f, $620A64D FD                              .db $fd
0A64E                           	  
0A64E                           ;level 3-1
0A64E                           L_GroundArea5:
0A64E 54 31                           .db $54, $31
0A650                           	  include "code\leveldata\levels\3-1.asm"
0A650                           
0A650 02 00 02 45 0C 00 00 46.. .db $02, $00, $02, $45, $0c, $00, $00, $46, $00, $47, $00, $48, $0b, $00, $00, $45
0A660 02 49 00 45 0A 00 01 47.. .db $02, $49, $00, $45, $0a, $00, $01, $47, $00, $4a, $01, $47, $0a, $00, $01, $47
0A670 00 4B 00 70 00 47 08 00.. .db $00, $4b, $00, $70, $00, $47, $08, $00, $01, $45, $04, $49, $01, $45, $06, $00
0A680 02 47 00 4A 00 47 00 4A.. .db $02, $47, $00, $4a, $00, $47, $00, $4a, $02, $47, $06, $00, $02, $47, $00, $4b
0A690 00 47 00 4B 02 47 06 00.. .db $00, $47, $00, $4b, $02, $47, $06, $00, $08, $47, $06, $00, $01, $47, $00, $4a
0A6A0 00 47 00 4A 00 47 00 4A.. .db $00, $47, $00, $4a, $00, $47, $00, $4a, $01, $47, $06, $00, $01, $47, $00, $4b
0A6B0 00 70 00 4B 00 47 00 4B.. .db $00, $70, $00, $4b, $00, $47, $00, $4b, $01, $47, $03, $03, $00, $04, $01, $00
0A6C0 1F 54 79 00 02 C0 00 C1.. .db $1f, $54, $79, $00, $02, $c0, $00, $c1, $07, $00, $00, $12, $00, $13, $09, $00
0A6D0 00 12 00 13 01 00 00 14.. .db $00, $12, $00, $13, $01, $00, $00, $14, $00, $15, $07, $00, $01, $4d, $00, $14
0A6E0 00 15 01 00 00 14 00 15.. .db $00, $15, $01, $00, $00, $14, $00, $15, $00, $00, $00, $02, $03, $03, $00, $04
0A6F0 00 00 1F 54 3C 00 01 C2.. .db $00, $00, $1f, $54, $3c, $00, $01, $c2, $1d, $00, $01, $0b, $0c, $00, $00, $61
0A700 01 63 00 61 02 00 00 4D.. .db $01, $63, $00, $61, $02, $00, $00, $4d, $0b, $00, $00, $12, $00, $13, $02, $54
0A710 0A 90 00 14 00 15 02 54.. .db $0a, $90, $00, $14, $00, $15, $02, $54, $0a, $91, $00, $14, $00, $15, $02, $54
0A720 0A 91 1F 54 04 00 00 C1.. .db $0a, $91, $1f, $54, $04, $00, $00, $c1, $2d, $00, $02, $0b, $0b, $00, $00, $61
0A730 02 63 00 61 26 00 00 61.. .db $02, $63, $00, $61, $26, $00, $00, $61, $0c, $00, $00, $4d, $01, $61, $0b, $90
0A740 03 54 0B 91 03 54 0B 91.. .db $03, $54, $0b, $91, $03, $54, $0b, $91, $23, $54, $2a, $00, $04, $c2, $13, $00
0A750 03 C0 07 00 00 12 00 13.. .db $03, $c0, $07, $00, $00, $12, $00, $13, $07, $00, $00, $16, $04, $17, $00, $14
0A760 00 15 08 00 04 4C 00 14.. .db $00, $15, $08, $00, $04, $4c, $00, $14, $00, $15, $00, $02, $02, $03, $00, $04
0A770 01 4D 00 02 00 03 04 4C.. .db $01, $4d, $00, $02, $00, $03, $04, $4c, $4f, $54, $49, $00, $00, $36, $04, $1d
0A780 00 18 08 00 00 37 04 20.. .db $00, $18, $08, $00, $00, $37, $04, $20, $07, $00, $00, $36, $06, $1d, $01, $00
0A790 02 4D 00 00 00 02 00 03.. .db $02, $4d, $00, $00, $00, $02, $00, $03, $00, $37, $06, $20, $4f, $54, $04, $00
0A7A0 02 C0 11 00 02 C2 13 00.. .db $02, $c0, $11, $00, $02, $c2, $13, $00, $00, $12, $00, $13, $01, $4d, $00, $02
0A7B0 02 03 00 04 05 00 00 1D.. .db $02, $03, $00, $04, $05, $00, $00, $1d, $00, $1e, $00, $15, $06, $54, $05, $00
0A7C0 00 20 00 21 00 15 06 54.. .db $00, $20, $00, $21, $00, $15, $06, $54, $02, $00, $02, $4d, $00, $1d, $00, $1e
0A7D0 00 15 06 54 02 00 02 54.. .db $00, $15, $06, $54, $02, $00, $02, $54, $00, $20, $00, $21, $00, $15, $06, $54
0A7E0 02 00 03 54 00 14 00 15.. .db $02, $00, $03, $54, $00, $14, $00, $15, $06, $54, $02, $00, $03, $54, $00, $14
0A7F0 00 15 06 54 02 00 03 54.. .db $00, $15, $06, $54, $02, $00, $03, $54, $00, $14, $00, $15, $06, $54, $02, $00
0A800 03 54 00 14 00 15 06 54.. .db $03, $54, $00, $14, $00, $15, $06, $54, $02, $00, $03, $54, $00, $14, $00, $15
0A810 06 54 02 00 02 54 0C 00.. .db $06, $54, $02, $00, $02, $54, $0c, $00, $01, $61, $00, $5f, $0c, $00, $00, $14
0A820 00 15 0D 00 00 14 00 15.. .db $00, $15, $0d, $00, $00, $14, $00, $15, $00, $00, $02, $c2, $09, $00, $00, $14
0A830 00 15 0D 00 00 14 00 15.. .db $00, $15, $0d, $00, $00, $14, $00, $15, $06, $00, $02, $c2, $03, $00, $00, $14
0A840 00 15 0D 00 00 2C 00 2D.. .db $00, $15, $0d, $00, $00, $2c, $00, $2d, $00, $5f, $02, $00, $02, $4d, $0c, $00
0A850 02 54 0C 00 02 54 03 00.. .db $02, $54, $0c, $00, $02, $54, $03, $00, $00, $02, $02, $03, $00, $04, $03, $00
0A860 02 54 02 00 06 54 02 00.. .db $02, $54, $02, $00, $06, $54, $02, $00, $02, $54, $02, $00, $06, $54, $02, $00
0A870 02 54 02 00 06 54 00 60.. .db $02, $54, $02, $00, $06, $54, $00, $60, $01, $61, $0d, $00, $00, $14, $00, $15
0A880 0D 00 00 14 00 15 0C 00.. .db $0d, $00, $00, $14, $00, $15, $0c, $00, $00, $5f, $00, $14, $00, $15, $0d, $00
0A890 00 14 00 15 0D 00 00 14.. .db $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15
0A8A0 07 00 00 12 00 13 03 00.. .db $07, $00, $00, $12, $00, $13, $03, $00, $00, $2c, $00, $2d, $07, $00, $00, $14
0A8B0 00 15 0C 00 00 61 00 14.. .db $00, $15, $0c, $00, $00, $61, $00, $14, $00, $15, $00, $61, $01, $00, $01, $4d
0A8C0 00 00 00 02 02 03 00 04.. .db $00, $00, $00, $02, $02, $03, $00, $04, $00, $00, $01, $61, $00, $14, $00, $15
0A8D0 01 61 00 4D 2F 54 3A 00.. .db $01, $61, $00, $4d, $2f, $54, $3a, $00, $02, $c2, $1c, $00, $02, $0b, $01, $00
0A8E0 00 C1 02 C0 05 00 00 61.. .db $00, $c1, $02, $c0, $05, $00, $00, $61, $02, $63, $00, $61, $07, $00, $00, $4d
0A8F0 0D 00 01 54 07 90 00 4D.. .db $0d, $00, $01, $54, $07, $90, $00, $4d, $00, $00, $00, $02, $02, $03, $01, $54
0A900 07 91 07 54 07 91 1F 54.. .db $07, $91, $07, $54, $07, $91, $1f, $54, $22, $00, $01, $c2, $15, $00, $02, $c2
0A910 04 00 01 0B 0C 00 00 61.. .db $04, $00, $01, $0b, $0c, $00, $00, $61, $01, $63, $00, $61, $04, $00, $02, $4d
0A920 0B 00 04 54 09 00 05 54.. .db $0b, $00, $04, $54, $09, $00, $05, $54, $00, $00, $07, $90, $06, $54, $00, $00
0A930 07 91 06 54 00 00 07 91.. .db $07, $91, $06, $54, $00, $00, $07, $91, $06, $54, $00, $00, $0e, $54, $00, $00
0A940 0E 54 24 00 01 C2 05 00.. .db $0e, $54, $24, $00, $01, $c2, $05, $00, $03, $c2, $13, $00, $01, $4d, $05, $00
0A950 03 0B 02 00 03 54 03 00.. .db $03, $0b, $02, $00, $03, $54, $03, $00, $00, $61, $03, $63, $01, $00, $04, $54
0A960 0A 00 04 54 0A 00 04 54.. .db $0a, $00, $04, $54, $0a, $00, $04, $54, $0a, $00, $04, $54, $0a, $00, $04, $54
0A970 0A 00 04 54 0A 00 04 54.. .db $0a, $00, $04, $54, $0a, $00, $04, $54, $50, $00, $00, $c0, $00, $c1, $00, $c0
0A980 04 00 00 61 03 00 01 C2.. .db $04, $00, $00, $61, $03, $00, $01, $c2, $04, $00, $01, $c2, $16, $00, $08, $0b
0A990 05 00 00 61 08 63 00 61.. .db $05, $00, $00, $61, $08, $63, $00, $61, $55, $00, $00, $c2, $03, $00, $00, $02
0A9A0 00 03 00 04 06 00 00 C2.. .db $00, $03, $00, $04, $06, $00, $00, $c2, $00, $00, $00, $c2, $02, $00, $02, $54
0A9B0 0B 00 03 54 0A 00 04 54.. .db $0b, $00, $03, $54, $0a, $00, $04, $54, $05, $00, $00, $54, $02, $00, $05, $54
0A9C0 04 00 01 54 02 00 05 54.. .db $04, $00, $01, $54, $02, $00, $05, $54, $03, $00, $02, $54, $02, $00, $05, $54
0A9D0 03 00 02 54 02 00 05 54.. .db $03, $00, $02, $54, $02, $00, $05, $54, $03, $00, $02, $54, $02, $00, $05, $54
0A9E0 03 00 02 54 02 00 05 54.. .db $03, $00, $02, $54, $02, $00, $05, $54, $03, $00, $02, $54, $02, $00, $05, $54
0A9F0 03 00 02 54 02 00 05 54.. .db $03, $00, $02, $54, $02, $00, $05, $54, $07, $00, $00, $24, $0e, $00, $00, $25
0AA00 0E 00 00 25 0E 00 00 25.. .db $0e, $00, $00, $25, $0e, $00, $00, $25, $0e, $00, $00, $25, $0e, $00, $00, $25
0AA10 0E 00 00 25 04 00 02 45.. .db $0e, $00, $00, $25, $04, $00, $02, $45, $06, $00, $00, $25, $04, $00, $00, $46
0AA20 00 47 00 48 06 00 00 25.. .db $00, $47, $00, $48, $06, $00, $00, $25, $03, $00, $00, $45, $02, $49, $00, $45
0AA30 05 00 00 25 03 00 01 47.. .db $05, $00, $00, $25, $03, $00, $01, $47, $00, $4a, $01, $47, $05, $00, $00, $61
0AA40 03 00 01 47 00 4B 00 70.. .db $03, $00, $01, $47, $00, $4b, $00, $70, $00, $47, $00, $00, $1f, $54, $af, $00
0AA50 1F 54                     .db $1f, $540AA52 FD                              .db $fd
0AA53                           	  
0AA53                           ;level 2-3
0AA53                           L_GroundArea8:
0AA53 90 11                           .db $90, $11
0AA55                                 include "code\leveldata\levels\2-3.asm" 
0AA55                           
0AA55 14 00 00 80 02 81 00 82.. .db $14, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83, $02, $84, $00, $85
0AA65 00 00 00 80 00 81 00 82.. .db $00, $00, $00, $80, $00, $81, $00, $82, $0c, $00, $00, $83, $00, $84, $00, $85
0AA75 00 C1 00 C0 20 00 02 45.. .db $00, $c1, $00, $c0, $20, $00, $02, $45, $08, $00, $00, $16, $01, $17, $00, $00
0AA85 00 46 00 47 00 48 09 00.. .db $00, $46, $00, $47, $00, $48, $09, $00, $01, $4c, $00, $45, $02, $49, $00, $45
0AA95 00 00 03 C2 03 00 01 4C.. .db $00, $00, $03, $c2, $03, $00, $01, $4c, $01, $47, $00, $4a, $01, $47, $06, $00
0AAA5 01 4D 01 4C 01 47 00 4B.. .db $01, $4d, $01, $4c, $01, $47, $00, $4b, $00, $70, $00, $47, $00, $00, $03, $4d
0AAB5 00 00 24 54 06 00 00 80.. .db $00, $00, $24, $54, $06, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83
0AAC5 02 84 00 85 13 00 03 C0.. .db $02, $84, $00, $85, $13, $00, $03, $c0, $09, $00, $00, $80, $00, $81, $0d, $00
0AAD5 00 83 00 84 06 00 03 C2.. .db $00, $83, $00, $84, $06, $00, $03, $c2, $04, $00, $03, $17, $00, $18, $0a, $00
0AAE5 03 4C 0B 00 03 4C 03 00.. .db $03, $4c, $0b, $00, $03, $4c, $03, $00, $00, $12, $00, $13, $05, $00, $03, $4c
0AAF5 00 08 02 00 00 14 00 15.. .db $00, $08, $02, $00, $00, $14, $00, $15, $03, $00, $01, $54, $03, $4c, $00, $0a
0AB05 00 08 00 00 00 4D 00 14.. .db $00, $08, $00, $00, $00, $4d, $00, $14, $00, $15, $00, $02, $00, $03, $23, $54
0AB15 1A 00 00 80 03 81 00 00.. .db $1a, $00, $00, $80, $03, $81, $00, $00, $01, $c2, $00, $00, $01, $c2, $04, $00
0AB25 00 83 03 84 00 82 0E 00.. .db $00, $83, $03, $84, $00, $82, $0e, $00, $00, $85, $0e, $00, $06, $61, $0d, $00
0AB35 00 14 00 15 02 00 00 07.. .db $00, $14, $00, $15, $02, $00, $00, $07, $09, $00, $00, $14, $00, $15, $01, $00
0AB45 00 05 00 06 00 08 08 00.. .db $00, $05, $00, $06, $00, $08, $08, $00, $00, $2c, $00, $2d, $00, $00, $00, $05
0AB55 02 0A 01 54 01 00 00 4D.. .db $02, $0a, $01, $54, $01, $00, $00, $4d, $05, $00, $00, $05, $00, $0a, $00, $09
0AB65 00 0A 06 54 02 4D 00 00.. .db $00, $0a, $06, $54, $02, $4d, $00, $00, $00, $05, $02, $0a, $25, $54, $07, $00
0AB75 00 60 06 00 00 82 0A 00.. .db $00, $60, $06, $00, $00, $82, $0a, $00, $00, $80, $01, $81, $00, $82, $00, $85
0AB85 0A 00 00 83 01 84 00 85.. .db $0a, $00, $00, $83, $01, $84, $00, $85, $11, $00, $00, $80, $00, $81, $00, $82
0AB95 01 C0 00 00 00 C1 00 00.. .db $01, $c0, $00, $00, $00, $c1, $00, $00, $01, $c0, $05, $00, $00, $83, $00, $84
0ABA5 00 85 1E 00 08 0B 02 00.. .db $00, $85, $1e, $00, $08, $0b, $02, $00, $00, $12, $00, $13, $00, $00, $00, $61
0ABB5 08 63 00 61 01 00 00 14.. .db $08, $63, $00, $61, $01, $00, $00, $14, $00, $15, $00, $00, $00, $61, $03, $00
0ABC5 00 07 03 00 00 61 01 00.. .db $00, $07, $03, $00, $00, $61, $01, $00, $00, $14, $00, $15, $00, $00, $00, $61
0ABD5 02 00 00 05 00 09 00 08.. .db $02, $00, $00, $05, $00, $09, $00, $08, $02, $00, $00, $61, $01, $00, $01, $54
0ABE5 00 4D 00 61 01 00 00 05.. .db $00, $4d, $00, $61, $01, $00, $00, $05, $01, $0a, $00, $06, $00, $08, $01, $00
0ABF5 00 61 01 00 02 54 00 61.. .db $00, $61, $01, $00, $02, $54, $00, $61, $00, $00, $00, $05, $04, $0a, $00, $08
0AC05 00 00 00 61 1E 00 00 80.. .db $00, $00, $00, $61, $1e, $00, $00, $80, $01, $81, $03, $00, $00, $80, $00, $81
0AC15 00 82 05 00 00 83 01 84.. .db $00, $82, $05, $00, $00, $83, $01, $84, $00, $00, $01, $c2, $00, $00, $00, $83
0AC25 00 84 00 85 01 C2 13 00.. .db $00, $84, $00, $85, $01, $c2, $13, $00, $01, $c2, $01, $00, $01, $0b, $0c, $00
0AC35 00 61 01 63 00 61 01 00.. .db $00, $61, $01, $63, $00, $61, $01, $00, $03, $88, $05, $00, $00, $61, $01, $00
0AC45 00 61 05 00 00 07 00 00.. .db $00, $61, $05, $00, $00, $07, $00, $00, $03, $88, $00, $61, $01, $00, $00, $61
0AC55 04 00 00 05 00 06 00 08.. .db $04, $00, $00, $05, $00, $06, $00, $08, $03, $00, $00, $61, $01, $00, $00, $61
0AC65 03 00 00 05 02 0A 00 08.. .db $03, $00, $00, $05, $02, $0a, $00, $08, $02, $00, $00, $61, $01, $00, $00, $61
0AC75 02 00 00 05 00 0A 00 09.. .db $02, $00, $00, $05, $00, $0a, $00, $09, $02, $0a, $00, $08, $01, $00, $00, $61
0AC85 01 00 00 61 01 00 00 05.. .db $01, $00, $00, $61, $01, $00, $00, $05, $03, $0a, $00, $06, $01, $0a, $00, $08
0AC95 00 00 00 61 01 00 00 61.. .db $00, $00, $00, $61, $01, $00, $00, $61, $00, $00, $00, $05, $08, $0a, $00, $08
0ACA5 0F 00 00 82 0E 00 00 85.. .db $0f, $00, $00, $82, $0e, $00, $00, $85, $13, $00, $01, $c0, $00, $00, $00, $c1
0ACB5 00 00 01 C0 00 80 02 81.. .db $00, $00, $01, $c0, $00, $80, $02, $81, $0b, $00, $00, $83, $02, $84, $22, $00
0ACC5 01 61 06 1D 01 61 04 00.. .db $01, $61, $06, $1d, $01, $61, $04, $00, $01, $61, $06, $20, $01, $61, $04, $00
0ACD5 00 14 00 15 06 00 00 14.. .db $00, $14, $00, $15, $06, $00, $00, $14, $00, $15, $04, $00, $00, $14, $00, $15
0ACE5 06 00 00 14 00 15 04 00.. .db $06, $00, $00, $14, $00, $15, $04, $00, $00, $14, $00, $15, $06, $00, $00, $14
0ACF5 00 15 04 00 00 14 00 15.. .db $00, $15, $04, $00, $00, $14, $00, $15, $06, $00, $00, $14, $00, $15, $18, $00
0AD05 00 80 00 81 00 82 0C 00.. .db $00, $80, $00, $81, $00, $82, $0c, $00, $00, $83, $00, $84, $00, $85, $05, $00
0AD15 00 82 0A 00 00 80 02 81.. .db $00, $82, $0a, $00, $00, $80, $02, $81, $00, $85, $00, $00, $00, $c0, $00, $00
0AD25 04 C2 00 00 00 C0 00 00.. .db $04, $c2, $00, $00, $00, $c0, $00, $00, $00, $83, $02, $84, $21, $00, $08, $0b
0AD35 05 00 00 61 08 63 00 61.. .db $05, $00, $00, $61, $08, $63, $00, $61, $04, $00, $00, $61, $08, $00, $00, $61
0AD45 02 00 00 61 00 00 00 61.. .db $02, $00, $00, $61, $00, $00, $00, $61, $08, $00, $00, $61, $01, $00, $00, $07
0AD55 00 61 00 00 00 61 08 00.. .db $00, $61, $00, $00, $00, $61, $08, $00, $00, $61, $00, $00, $00, $05, $00, $06
0AD65 00 61 00 00 00 61 08 00.. .db $00, $61, $00, $00, $00, $61, $08, $00, $00, $61, $00, $05, $01, $0a, $00, $61
0AD75 17 00 00 80 01 81 00 82.. .db $17, $00, $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85
0AD85 03 00 00 81 00 82 08 00.. .db $03, $00, $00, $81, $00, $82, $08, $00, $00, $c0, $01, $00, $00, $c0, $00, $00
0AD95 00 84 00 85 0C 00 00 80.. .db $00, $84, $00, $85, $0c, $00, $00, $80, $0e, $00, $00, $83, $00, $00, $03, $c2
0ADA5 14 00 01 C0 01 00 01 C0.. .db $14, $00, $01, $c0, $01, $00, $01, $c0, $05, $0b, $09, $00, $05, $63, $00, $61
0ADB5 00 60 0D 00 00 61 02 00.. .db $00, $60, $0d, $00, $00, $61, $02, $00, $00, $02, $03, $03, $00, $04, $05, $00
0ADC5 00 61 01 00 06 54 00 08.. .db $00, $61, $01, $00, $06, $54, $00, $08, $04, $00, $00, $61, $00, $00, $07, $54
0ADD5 16 00 00 80 01 81 00 82.. .db $16, $00, $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85
0ADE5 14 00 01 81 00 82 0C 00.. .db $14, $00, $01, $81, $00, $82, $0c, $00, $01, $84, $00, $85, $0a, $00, $00, $80
0ADF5 00 81 01 00 01 C2 09 00.. .db $00, $81, $01, $00, $01, $c2, $09, $00, $00, $83, $00, $84, $14, $00, $00, $12
0AE05 00 13 05 00 01 C2 05 00.. .db $00, $13, $05, $00, $01, $c2, $05, $00, $00, $14, $00, $15, $08, $00, $00, $4d
0AE15 03 54 00 14 00 15 02 4D.. .db $03, $54, $00, $14, $00, $15, $02, $4d, $00, $12, $00, $13, $03, $00, $09, $54
0AE25 00 14 00 15 02 4D 00 00.. .db $00, $14, $00, $15, $02, $4d, $00, $00, $0f, $54, $16, $00, $00, $80, $02, $81
0AE35 00 82 0A 00 00 83 02 84.. .db $00, $82, $0a, $00, $00, $83, $02, $84, $00, $85, $11, $00, $01, $c0, $0f, $00
0AE45 00 82 01 00 01 C2 00 00.. .db $00, $82, $01, $00, $01, $c2, $00, $00, $00, $c1, $00, $00, $01, $c2, $05, $00
0AE55 00 85 1A 00 00 16 02 17.. .db $00, $85, $1a, $00, $00, $16, $02, $17, $0c, $00, $02, $4c, $01, $00, $00, $16
0AE65 06 17 00 18 01 00 02 4C.. .db $06, $17, $00, $18, $01, $00, $02, $4c, $02, $00, $06, $4c, $02, $00, $02, $4c
0AE75 02 00 06 4C 02 00 02 4C.. .db $02, $00, $06, $4c, $02, $00, $02, $4c, $02, $00, $06, $4c, $02, $00, $02, $4c
0AE85 18 00 00 80 01 81 00 82.. .db $18, $00, $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85
0AE95 10 00 01 C2 00 80 00 81.. .db $10, $00, $01, $c2, $00, $80, $00, $81, $00, $82, $02, $00, $01, $c0, $07, $00
0AEA5 00 83 00 84 00 85 19 00.. .db $00, $83, $00, $84, $00, $85, $19, $00, $02, $88, $00, $17, $00, $18, $0d, $00
0AEB5 00 4C 02 00 05 88 05 00.. .db $00, $4c, $02, $00, $05, $88, $05, $00, $00, $4c, $0e, $00, $00, $4c, $0e, $00
0AEC5 00 4C 0E 00 00 4C 2B 00.. .db $00, $4c, $0e, $00, $00, $4c, $2b, $00, $00, $80, $01, $81, $04, $00, $01, $c2
0AED5 00 00 00 C1 00 00 01 C2.. .db $00, $00, $00, $c1, $00, $00, $01, $c2, $00, $00, $00, $83, $01, $84, $00, $00
0AEE5 00 80 00 81 00 82 0C 00.. .db $00, $80, $00, $81, $00, $82, $0c, $00, $00, $83, $00, $84, $00, $85, $0f, $00
0AEF5 08 0B 02 00 00 88 01 00.. .db $08, $0b, $02, $00, $00, $88, $01, $00, $00, $61, $08, $63, $00, $61, $04, $00
0AF05 00 61 08 00 00 61 04 00.. .db $00, $61, $08, $00, $00, $61, $04, $00, $00, $61, $08, $00, $00, $61, $04, $00
0AF15 00 61 08 00 00 61 00 5F.. .db $00, $61, $08, $00, $00, $61, $00, $5f, $03, $00, $00, $61, $08, $00, $00, $61
0AF25 04 00 00 61 08 00 00 61.. .db $04, $00, $00, $61, $08, $00, $00, $61, $00, $00, $00, $4d, $02, $00, $00, $61
0AF35 08 00 00 61 00 00 00 54.. .db $08, $00, $00, $61, $00, $00, $00, $54, $0f, $00, $01, $81, $00, $82, $09, $00
0AF45 00 80 01 81 01 84 00 85.. .db $00, $80, $01, $81, $01, $84, $00, $85, $09, $00, $00, $83, $01, $84, $15, $00
0AF55 00 80 00 81 00 82 0C 00.. .db $00, $80, $00, $81, $00, $82, $0c, $00, $00, $83, $00, $84, $00, $85, $06, $00
0AF65 00 12 00 13 0D 00 00 14.. .db $00, $12, $00, $13, $0d, $00, $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15
0AF75 03 00 02 4D 06 00 00 14.. .db $03, $00, $02, $4d, $06, $00, $00, $14, $00, $15, $00, $4d, $00, $02, $00, $03
0AF85 04 54 00 02 02 03 00 04.. .db $04, $54, $00, $02, $02, $03, $00, $04, $00, $00, $00, $14, $00, $15, $0c, $54
0AF95 00 00 1F 54 0F 00 00 82.. .db $00, $00, $1f, $54, $0f, $00, $00, $82, $0c, $00, $00, $80, $00, $81, $00, $85
0AFA5 0C 00 00 83 00 84 03 00.. .db $0c, $00, $00, $83, $00, $84, $03, $00, $00, $80, $02, $81, $00, $82, $0a, $00
0AFB5 00 83 02 84 00 85 00 00.. .db $00, $83, $02, $84, $00, $85, $00, $00, $02, $61, $0c, $00, $02, $61, $0c, $00
0AFC5 02 61 03 00 00 C0 00 C1.. .db $02, $61, $03, $00, $00, $c0, $00, $c1, $00, $c0, $00, $00, $02, $c0, $01, $00
0AFD5 02 61 00 5F 0B 00 02 61.. .db $02, $61, $00, $5f, $0b, $00, $02, $61, $0c, $00, $02, $61, $02, $00, $03, $4d
0AFE5 00 00 00 02 02 03 00 04.. .db $00, $00, $00, $02, $02, $03, $00, $04, $02, $61, $02, $4d, $1f, $54, $03, $00
0AFF5 00 24 04 00 02 45 02 00.. .db $00, $24, $04, $00, $02, $45, $02, $00, $01, $81, $00, $82, $00, $00, $00, $25
0B005 04 00 00 46 00 47 00 48.. .db $04, $00, $00, $46, $00, $47, $00, $48, $02, $00, $01, $84, $00, $85, $00, $00
0B015 00 25 03 00 00 45 02 49.. .db $00, $25, $03, $00, $00, $45, $02, $49, $00, $45, $05, $00, $00, $25, $03, $00
0B025 01 47 00 4A 01 47 05 00.. .db $01, $47, $00, $4a, $01, $47, $05, $00, $00, $25, $03, $00, $01, $47, $00, $4b
0B035 00 70 00 47 05 00 00 25.. .db $00, $70, $00, $47, $05, $00, $00, $25, $01, $00, $01, $45, $04, $49, $01, $45
0B045 03 00 00 25 01 00 02 47.. .db $03, $00, $00, $25, $01, $00, $02, $47, $00, $4a, $00, $47, $00, $4a, $02, $47
0B055 03 00 00 25 01 00 02 47.. .db $03, $00, $00, $25, $01, $00, $02, $47, $00, $4b, $00, $47, $00, $4b, $02, $47
0B065 03 00 00 25 01 00 08 47.. .db $03, $00, $00, $25, $01, $00, $08, $47, $03, $00, $00, $25, $01, $00, $01, $47
0B075 00 4A 00 47 00 4A 00 47.. .db $00, $4a, $00, $47, $00, $4a, $00, $47, $00, $4a, $01, $47, $00, $4d, $02, $00
0B085 00 61 00 02 00 03 01 47.. .db $00, $61, $00, $02, $00, $03, $01, $47, $00, $4b, $00, $70, $00, $4b, $00, $47
0B095 00 4B 01 47 1F 54 AF 00.. .db $00, $4b, $01, $47, $1f, $54, $af, $00, $1f, $540B09F FD                        	  .db $fd
0B0A0                           
0B0A0                           ;level 3-2
0B0A0                           L_GroundArea22:
0B0A0 94 31                           .db $94, $31
0B0A2                                 include "code\leveldata\levels\3-2.asm"  
0B0A2                           
0B0A2 5C 00 01 C2 01 00 02 45.. .db $5c, $00, $01, $c2, $01, $00, $02, $45, $0c, $00, $00, $46, $00, $47, $00, $48
0B0B2 0B 00 00 45 02 49 00 45.. .db $0b, $00, $00, $45, $02, $49, $00, $45, $05, $00, $00, $54, $03, $00, $01, $47
0B0C2 00 4A 01 47 04 00 01 54.. .db $00, $4a, $01, $47, $04, $00, $01, $54, $03, $00, $01, $47, $00, $4b, $00, $70
0B0D2 00 47 01 03 00 04 00 00.. .db $00, $47, $01, $03, $00, $04, $00, $00, $02, $54, $03, $00, $0b, $54, $03, $00
0B0E2 0B 54 08 00 00 14 00 15.. .db $0b, $54, $08, $00, $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15, $0d, $00
0B0F2 00 14 00 15 0D 00 00 14.. .db $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15
0B102 0D 00 00 2C 00 2D 03 00.. .db $0d, $00, $00, $2c, $00, $2d, $03, $00, $02, $c2, $1a, $00, $01, $4d, $04, $00
0B112 02 54 05 00 01 54 03 00.. .db $02, $54, $05, $00, $01, $54, $03, $00, $00, $02, $02, $54, $00, $12, $00, $13
0B122 01 00 00 12 00 13 01 54.. .db $01, $00, $00, $12, $00, $13, $01, $54, $02, $00, $04, $54, $00, $14, $00, $15
0B132 01 54 00 14 00 15 01 54.. .db $01, $54, $00, $14, $00, $15, $01, $54, $02, $00, $04, $54, $00, $14, $00, $15
0B142 01 54 00 14 00 15 01 54.. .db $01, $54, $00, $14, $00, $15, $01, $54, $02, $00, $04, $54, $00, $14, $00, $15
0B152 01 54 00 14 00 15 01 54.. .db $01, $54, $00, $14, $00, $15, $01, $54, $02, $00, $01, $54, $21, $00, $01, $c2
0B162 2B 00 00 C1 00 C0 01 00.. .db $2b, $00, $00, $c1, $00, $c0, $01, $00, $01, $c0, $28, $00, $00, $61, $00, $03
0B172 00 04 01 4D 00 02 01 03.. .db $00, $04, $01, $4d, $00, $02, $01, $03, $00, $04, $05, $00, $01, $61, $07, $54
0B182 02 00 01 4D 02 61 07 54.. .db $02, $00, $01, $4d, $02, $61, $07, $54, $01, $00, $0d, $54, $01, $00, $0d, $54
0B192 01 00 05 54 18 00 06 C2.. .db $01, $00, $05, $54, $18, $00, $06, $c2, $0e, $00, $00, $c2, $0e, $00, $00, $c2
0B1A2 0B 00 00 8C 01 00 00 C2.. .db $0b, $00, $00, $8c, $01, $00, $00, $c2, $08, $00, $00, $61, $04, $63, $00, $61
0B1B2 08 00 00 4E 04 00 00 4E.. .db $08, $00, $00, $4e, $04, $00, $00, $4e, $03, $52, $00, $5e, $01, $61, $01, $00
0B1C2 00 4E 04 00 00 4E 04 52.. .db $00, $4e, $04, $00, $00, $4e, $04, $52, $01, $61, $01, $00, $00, $4e, $04, $00
0B1D2 00 4E 04 52 01 61 03 4D.. .db $00, $4e, $04, $52, $01, $61, $03, $4d, $00, $02, $00, $03, $00, $04, $00, $00
0B1E2 00 4E 2F 54 42 00 00 C2.. .db $00, $4e, $2f, $54, $42, $00, $00, $c2, $00, $c1, $01, $c2, $00, $c0, $00, $c2
0B1F2 14 00 01 C2 21 00 00 16.. .db $14, $00, $01, $c2, $21, $00, $00, $16, $05, $17, $00, $18, $02, $00, $02, $0b
0B202 02 00 05 4C 02 00 00 61.. .db $02, $00, $05, $4c, $02, $00, $00, $61, $02, $63, $00, $54, $01, $00, $05, $4c
0B212 02 00 00 4E 02 00 00 54.. .db $02, $00, $00, $4e, $02, $00, $00, $54, $01, $00, $05, $4c, $02, $00, $00, $4e
0B222 02 00 00 54 01 00 05 4C.. .db $02, $00, $00, $54, $01, $00, $05, $4c, $02, $00, $00, $4e, $3c, $00, $03, $c2
0B232 13 00 01 C2 01 00 01 C2.. .db $13, $00, $01, $c2, $01, $00, $01, $c2, $11, $00, $03, $0b, $0a, $00, $00, $61
0B242 03 63 00 61 00 00 08 0B.. .db $03, $63, $00, $61, $00, $00, $08, $0b, $00, $61, $03, $00, $00, $4e, $00, $00
0B252 08 63 00 61 03 00 00 4E.. .db $08, $63, $00, $61, $03, $00, $00, $4e, $09, $00, $00, $4e, $03, $00, $00, $4e
0B262 09 00 00 4E 03 00 00 4E.. .db $09, $00, $00, $4e, $03, $00, $00, $4e, $09, $00, $00, $4e, $03, $00, $00, $4e
0B272 43 00 00 C0 2D 00 02 0B.. .db $43, $00, $00, $c0, $2d, $00, $02, $0b, $03, $00, $00, $02, $00, $03, $00, $04
0B282 04 00 00 61 02 63 00 61.. .db $04, $00, $00, $61, $02, $63, $00, $61, $02, $00, $02, $54, $04, $00, $00, $4e
0B292 02 00 00 4E 02 00 03 54.. .db $02, $00, $00, $4e, $02, $00, $03, $54, $03, $00, $00, $4e, $02, $00, $00, $4e
0B2A2 02 00 04 54 01 1D 00 00.. .db $02, $00, $04, $54, $01, $1d, $00, $00, $00, $4e, $02, $00, $00, $4e, $02, $00
0B2B2 05 54 00 20 00 00 00 4E.. .db $05, $54, $00, $20, $00, $00, $00, $4e, $02, $00, $00, $4e, $02, $00, $06, $54
0B2C2 3C 00 01 C2 0C 00 00 C2.. .db $3c, $00, $01, $c2, $0c, $00, $00, $c2, $01, $00, $00, $c2, $19, $00, $01, $c0
0B2D2 1A 00 00 12 00 13 0D 00.. .db $1a, $00, $00, $12, $00, $13, $0d, $00, $00, $14, $00, $15, $03, $00, $00, $12
0B2E2 00 13 00 00 06 1D 01 61.. .db $00, $13, $00, $00, $06, $1d, $01, $61, $03, $1d, $01, $61, $00, $1d, $06, $20
0B2F2 01 61 03 20 01 61 00 20.. .db $01, $61, $03, $20, $01, $61, $00, $20, $0f, $54, $0c, $00, $00, $14, $00, $15
0B302 0D 00 00 14 00 15 0D 00.. .db $0d, $00, $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15, $0d, $00, $01, $61
0B312 00 1D 0C 00 01 61 00 20.. .db $00, $1d, $0c, $00, $01, $61, $00, $20, $0c, $00, $00, $14, $00, $15, $00, $00
0B322 02 C0 00 C1 08 00 00 14.. .db $02, $c0, $00, $c1, $08, $00, $00, $14, $00, $15, $05, $00, $00, $12, $00, $13
0B332 01 00 01 C2 01 00 00 2C.. .db $01, $00, $01, $c2, $01, $00, $00, $2c, $00, $2d, $05, $00, $00, $14, $00, $15
0B342 0D 00 00 14 00 15 08 00.. .db $0d, $00, $00, $14, $00, $15, $08, $00, $04, $1d, $01, $61, $08, $1d, $04, $20
0B352 01 61 08 20 0F 54 2F 00.. .db $01, $61, $08, $20, $0f, $54, $2f, $00, $0f, $1d, $0f, $20, $09, $00, $02, $61
0B362 06 00 01 C2 03 00 02 61.. .db $06, $00, $01, $c2, $03, $00, $02, $61, $03, $00, $00, $c2, $04, $00, $01, $c2
0B372 04 00 01 C2 03 00 01 61.. .db $04, $00, $01, $c2, $03, $00, $01, $61, $04, $00, $00, $c2, $07, $00, $01, $61
0B382 09 00 0F 1D 0F 20 0F 54.. .db $09, $00, $0f, $1d, $0f, $20, $0f, $54, $01, $00, $05, $54, $09, $00, $05, $54
0B392 09 00 05 54 00 60 02 00.. .db $09, $00, $05, $54, $00, $60, $02, $00, $00, $c1, $02, $00, $01, $1d, $05, $54
0B3A2 07 00 01 20 05 54 21 00.. .db $07, $00, $01, $20, $05, $54, $21, $00, $00, $16, $02, $17, $00, $18, $05, $00
0B3B2 01 C2 03 00 02 4C 03 00.. .db $01, $c2, $03, $00, $02, $4c, $03, $00, $00, $12, $00, $13, $06, $00, $02, $4c
0B3C2 03 00 00 14 00 15 00 00.. .db $03, $00, $00, $14, $00, $15, $00, $00, $00, $02, $02, $03, $00, $04, $00, $00
0B3D2 02 4C 01 00 01 1D 00 1E.. .db $02, $4c, $01, $00, $01, $1d, $00, $1e, $00, $15, $0b, $54, $01, $20, $00, $21
0B3E2 00 15 1B 54 5B 00 00 C0.. .db $00, $15, $1b, $54, $5b, $00, $00, $c0, $03, $00, $03, $c0, $21, $00, $00, $12
0B3F2 00 13 02 00 01 4D 01 00.. .db $00, $13, $02, $00, $01, $4d, $01, $00, $00, $02, $03, $03, $00, $04, $00, $00
0B402 00 14 00 15 01 00 02 54.. .db $00, $14, $00, $15, $01, $00, $02, $54, $01, $00, $08, $54, $01, $00, $02, $54
0B412 01 00 08 54 01 00 02 54.. .db $01, $00, $08, $54, $01, $00, $02, $54, $01, $00, $08, $54, $01, $00, $02, $54
0B422 3F 00 01 C2 00 00 00 C0.. .db $3f, $00, $01, $c2, $00, $00, $00, $c0, $06, $00, $01, $c2, $01, $00, $00, $c2
0B432 09 00 00 C2 17 00 00 4D.. .db $09, $00, $00, $c2, $17, $00, $00, $4d, $08, $00, $00, $12, $00, $13, $02, $00
0B442 02 54 02 00 00 12 00 13.. .db $02, $54, $02, $00, $00, $12, $00, $13, $02, $00, $00, $14, $00, $15, $02, $00
0B452 02 54 02 00 00 14 00 15.. .db $02, $54, $02, $00, $00, $14, $00, $15, $02, $00, $01, $54, $02, $00, $02, $54
0B462 02 00 01 54 02 00 01 54.. .db $02, $00, $01, $54, $02, $00, $01, $54, $02, $00, $02, $54, $02, $00, $01, $54
0B472 02 00 01 54 02 00 02 54.. .db $02, $00, $01, $54, $02, $00, $02, $54, $02, $00, $01, $54, $02, $00, $01, $54
0B482 25 00 00 C2 01 00 00 0B.. .db $25, $00, $00, $c2, $01, $00, $00, $0b, $02, $00, $00, $12, $00, $13, $08, $00
0B492 00 61 00 63 00 61 01 00.. .db $00, $61, $00, $63, $00, $61, $01, $00, $00, $14, $00, $15, $0d, $00, $01, $54
0B4A2 04 00 00 12 00 13 06 00.. .db $04, $00, $00, $12, $00, $13, $06, $00, $01, $54, $04, $00, $00, $14, $00, $15
0B4B2 06 00 01 54 04 00 01 54.. .db $06, $00, $01, $54, $04, $00, $01, $54, $06, $00, $01, $54, $04, $00, $01, $54
0B4C2 06 00 01 54 04 00 01 54.. .db $06, $00, $01, $54, $04, $00, $01, $54, $06, $00, $01, $54, $04, $00, $01, $54
0B4D2 06 00 01 54 04 00 01 54.. .db $06, $00, $01, $54, $04, $00, $01, $54, $06, $00, $01, $54, $04, $00, $01, $54
0B4E2 06 00 01 54 07 00 00 24.. .db $06, $00, $01, $54, $07, $00, $00, $24, $0e, $00, $00, $25, $0e, $00, $00, $25
0B4F2 0E 00 00 25 0E 00 00 25.. .db $0e, $00, $00, $25, $0e, $00, $00, $25, $0e, $00, $00, $25, $0e, $00, $00, $25
0B502 03 00 02 45 07 00 00 25.. .db $03, $00, $02, $45, $07, $00, $00, $25, $03, $00, $00, $46, $00, $47, $00, $48
0B512 07 00 00 25 02 00 00 45.. .db $07, $00, $00, $25, $02, $00, $00, $45, $02, $49, $00, $45, $06, $00, $00, $25
0B522 02 00 01 47 00 4A 01 47.. .db $02, $00, $01, $47, $00, $4a, $01, $47, $06, $00, $00, $61, $02, $00, $01, $47
0B532 00 4B 00 70 00 47 06 00.. .db $00, $4b, $00, $70, $00, $47, $06, $00, $0b, $54, $03, $00, $0b, $54, $af, $00
0B542 1F 54                     .db $1f, $540B544 FD                              .db $fd
0B545                           	  
0B545                           ;level 2-2
0B545                           L_WaterArea2:
0B545 41 01                           .db $41, $01
0B547                                 include "code\leveldata\levels\2-2.asm" 
0B547                           
0B547 00 69 08 90 06 69 0B 91.. .db $00, $69, $08, $90, $06, $69, $0b, $91, $03, $69, $0c, $91, $00, $22, $00, $91
0B557 00 69 0C 91 00 22 00 91.. .db $00, $69, $0c, $91, $00, $22, $00, $91, $00, $69, $0c, $91, $00, $22, $00, $91
0B567 00 69 0E 91 00 69 01 91.. .db $00, $69, $0e, $91, $00, $69, $01, $91, $00, $22, $00, $91, $02, $c2, $07, $91
0B577 00 69 01 91 00 22 07 91.. .db $00, $69, $01, $91, $00, $22, $07, $91, $02, $c2, $00, $91, $02, $69, $00, $22
0B587 0B 91 04 69 03 91 00 22.. .db $0b, $91, $04, $69, $03, $91, $00, $22, $05, $91, $06, $69, $01, $91, $00, $22
0B597 03 91 28 69 03 90 0A 69.. .db $03, $91, $28, $69, $03, $90, $0a, $69, $04, $91, $00, $ce, $02, $69, $05, $91
0B5A7 00 22 04 91 00 CE 00 CF.. .db $00, $22, $04, $91, $00, $ce, $00, $cf, $0d, $91, $00, $ce, $00, $cf, $00, $39
0B5B7 0C 91 00 CE 00 CF 0D 91.. .db $0c, $91, $00, $ce, $00, $cf, $0d, $91, $00, $ce, $00, $cf, $0d, $91, $00, $ce
0B5C7 00 CF 03 91 00 22 01 91.. .db $00, $cf, $03, $91, $00, $22, $01, $91, $00, $cc, $00, $cd, $00, $91, $02, $c2
0B5D7 00 91 00 D0 00 D1 00 91.. .db $00, $91, $00, $d0, $00, $d1, $00, $91, $01, $c0, $00, $91, $00, $22, $01, $91
0B5E7 00 CE 00 CF 0A 91 00 22.. .db $00, $ce, $00, $cf, $0a, $91, $00, $22, $01, $91, $00, $ce, $00, $cf, $09, $91
0B5F7 01 69 01 91 00 CE 00 CF.. .db $01, $69, $01, $91, $00, $ce, $00, $cf, $09, $91, $23, $69, $0b, $90, $00, $22
0B607 0E 91 00 22 08 91 02 C2.. .db $0e, $91, $00, $22, $08, $91, $02, $c2, $02, $91, $00, $22, $11, $91, $03, $c2
0B617 0B 91 03 C2 05 91 00 22.. .db $0b, $91, $03, $c2, $05, $91, $00, $22, $0a, $91, $00, $22, $02, $91, $00, $22
0B627 01 91 01 C0 05 91 06 69.. .db $01, $91, $01, $c0, $05, $91, $06, $69, $08, $91, $07, $69, $06, $91, $08, $69
0B637 00 91 00 22 02 91 38 69.. .db $00, $91, $00, $22, $02, $91, $38, $69, $01, $90, $00, $22, $00, $91, $0b, $69
0B647 05 91 09 69 06 91 00 22.. .db $05, $91, $09, $69, $06, $91, $00, $22, $07, $69, $06, $91, $00, $22, $01, $91
0B657 05 69 0B 91 01 69 00 91.. .db $05, $69, $0b, $91, $01, $69, $00, $91, $00, $22, $0e, $91, $00, $22, $03, $91
0B667 00 22 09 91 00 22 01 91.. .db $00, $22, $09, $91, $00, $22, $01, $91, $00, $69, $00, $91, $00, $22, $0c, $91
0B677 02 69 03 91 00 22 07 91.. .db $02, $69, $03, $91, $00, $22, $07, $91, $04, $69, $01, $91, $00, $22, $02, $91
0B687 03 C2 00 91 06 69 00 22.. .db $03, $c2, $00, $91, $06, $69, $00, $22, $07, $91, $08, $69, $06, $91, $0f, $90
0B697 17 91 00 22 07 91 03 C2.. .db $17, $91, $00, $22, $07, $91, $03, $c2, $02, $91, $03, $69, $0b, $91, $03, $69
0B6A7 0B 91 03 69 0B 91 03 69.. .db $0b, $91, $03, $69, $0b, $91, $03, $69, $06, $91, $00, $22, $05, $91, $00, $22
0B6B7 07 91 00 22 05 91 00 22.. .db $07, $91, $00, $22, $05, $91, $00, $22, $06, $91, $02, $69, $0c, $91, $02, $69
0B6C7 02 91 03 C2 05 91 02 69.. .db $02, $91, $03, $c2, $05, $91, $02, $69, $0c, $91, $02, $69, $0a, $91, $06, $90
0B6D7 08 69 06 91 08 69 06 91.. .db $08, $69, $06, $91, $08, $69, $06, $91, $08, $69, $02, $c2, $03, $91, $08, $69
0B6E7 07 91 06 69 08 91 00 22.. .db $07, $91, $06, $69, $08, $91, $00, $22, $04, $69, $09, $91, $00, $22, $07, $91
0B6F7 00 22 0E 91 00 22 07 91.. .db $00, $22, $0e, $91, $00, $22, $07, $91, $02, $c2, $02, $91, $01, $69, $0d, $91
0B707 02 69 01 91 00 22 09 91.. .db $02, $69, $01, $91, $00, $22, $09, $91, $03, $69, $00, $91, $00, $22, $04, $91
0B717 00 22 03 91 17 69 07 90.. .db $00, $22, $03, $91, $17, $69, $07, $90, $03, $69, $01, $91, $00, $22, $08, $91
0B727 02 69 06 91 03 C2 00 91.. .db $02, $69, $06, $91, $03, $c2, $00, $91, $00, $c0, $00, $69, $00, $91, $00, $22
0B737 0E 91 00 22 17 91 00 22.. .db $0e, $91, $00, $22, $17, $91, $00, $22, $0e, $91, $00, $22, $0a, $91, $00, $22
0B747 02 91 00 22 02 69 07 91.. .db $02, $91, $00, $22, $02, $69, $07, $91, $00, $22, $01, $91, $04, $69, $00, $91
0B757 00 22 05 91 00 22 06 69.. .db $00, $22, $05, $91, $00, $22, $06, $69, $00, $91, $00, $22, $03, $91, $0a, $69
0B767 00 22 01 91 1C 69 01 90.. .db $00, $22, $01, $91, $1c, $69, $01, $90, $04, $69, $08, $90, $01, $91, $04, $69
0B777 08 91 00 C0 00 C1 04 69.. .db $08, $91, $00, $c0, $00, $c1, $04, $69, $04, $91, $03, $c2, $01, $91, $03, $69
0B787 0B 91 03 69 0C 91 02 69.. .db $0b, $91, $03, $69, $0c, $91, $02, $69, $08, $91, $00, $22, $02, $91, $02, $69
0B797 08 91 00 22 04 91 00 22.. .db $08, $91, $00, $22, $04, $91, $00, $22, $08, $91, $00, $22, $04, $91, $00, $22
0B7A7 08 91 00 69 0A 91 00 22.. .db $08, $91, $00, $69, $0a, $91, $00, $22, $01, $91, $01, $69, $00, $91, $00, $22
0B7B7 08 91 00 22 00 91 03 69.. .db $08, $91, $00, $22, $00, $91, $03, $69, $00, $22, $07, $91, $08, $69, $05, $91
0B7C7 06 69 03 90 0A 69 00 90.. .db $06, $69, $03, $90, $0a, $69, $00, $90, $04, $91, $05, $69, $02, $91, $00, $22
0B7D7 07 91 00 22 01 91 00 22.. .db $07, $91, $00, $22, $01, $91, $00, $22, $0e, $91, $00, $22, $0e, $91, $00, $22
0B7E7 24 91 02 69 05 91 02 C2.. .db $24, $91, $02, $69, $05, $91, $02, $c2, $03, $91, $03, $69, $0b, $91, $04, $69
0B7F7 00 C1 02 C0 06 91 04 69.. .db $00, $c1, $02, $c0, $06, $91, $04, $69, $0a, $91, $04, $69, $09, $91, $06, $69
0B807 07 91 01 69 0F 90 2D 91.. .db $07, $91, $01, $69, $0f, $90, $2d, $91, $00, $22, $0c, $91, $03, $69, $04, $91
0B817 00 22 0E 91 00 22 0A 91.. .db $00, $22, $0e, $91, $00, $22, $0a, $91, $00, $22, $02, $91, $00, $22, $01, $69
0B827 04 91 01 C2 01 91 00 22.. .db $04, $91, $01, $c2, $01, $91, $00, $22, $01, $91, $04, $69, $07, $91, $00, $22
0B837 07 69 05 91 0A 69 04 91.. .db $07, $69, $05, $91, $0a, $69, $04, $91, $0a, $69, $04, $91, $0b, $69, $03, $91
0B847 03 90 08 69 02 90 04 91.. .db $03, $90, $08, $69, $02, $90, $04, $91, $05, $69, $00, $91, $00, $22, $03, $91
0B857 00 22 02 91 00 22 03 69.. .db $00, $22, $02, $91, $00, $22, $03, $69, $06, $91, $00, $22, $02, $91, $00, $22
0B867 09 91 01 69 0D 91 00 CE.. .db $09, $91, $01, $69, $0d, $91, $00, $ce, $00, $cf, $01, $91, $02, $c2, $08, $91
0B877 00 CE 00 CF 06 91 00 CC.. .db $00, $ce, $00, $cf, $06, $91, $00, $cc, $00, $cd, $03, $91, $00, $69, $00, $ce
0B887 00 CF 06 91 00 CE 00 CF.. .db $00, $cf, $06, $91, $00, $ce, $00, $cf, $00, $91, $03, $69, $00, $d0, $00, $d1
0B897 03 91 00 22 01 91 00 CE.. .db $03, $91, $00, $22, $01, $91, $00, $ce, $00, $cf, $04, $69, $04, $91, $0a, $69
0B8A7 05 91 00 22 01 91 00 CE.. .db $05, $91, $00, $22, $01, $91, $00, $ce, $00, $cf, $04, $69, $05, $91, $00, $22
0B8B7 01 91 00 CE 00 CF 00 91.. .db $01, $91, $00, $ce, $00, $cf, $00, $91, $03, $69, $08, $91, $00, $ce, $00, $cf
0B8C7 00 91 03 69 0E 90 00 69.. .db $00, $91, $03, $69, $0e, $90, $00, $69, $25, $91, $00, $22, $02, $91, $03, $c2
0B8D7 01 91 00 22 04 91 00 22.. .db $01, $91, $00, $22, $04, $91, $00, $22, $08, $91, $00, $22, $06, $69, $07, $91
0B8E7 08 69 06 91 09 69 00 91.. .db $08, $69, $06, $91, $09, $69, $00, $91, $00, $22, $03, $91, $0a, $69, $00, $22
0B8F7 03 91 0B 69 03 91 0D 69.. .db $03, $91, $0b, $69, $03, $91, $0d, $69, $00, $91, $00, $22, $28, $69, $04, $90
0B907 09 69 06 91 00 69 00 91.. .db $09, $69, $06, $91, $00, $69, $00, $91, $00, $22, $00, $91, $00, $ce, $00, $cf
0B917 00 91 00 22 07 91 00 22.. .db $00, $91, $00, $22, $07, $91, $00, $22, $00, $91, $00, $22, $00, $91, $00, $ce
0B927 00 CF 09 91 00 22 02 91.. .db $00, $cf, $09, $91, $00, $22, $02, $91, $00, $ce, $00, $cf, $03, $91, $02, $c2
0B937 02 91 00 22 02 91 00 CE.. .db $02, $91, $00, $22, $02, $91, $00, $ce, $00, $cf, $0d, $91, $00, $d0, $00, $d1
0B947 21 91 00 22 02 91 00 22.. .db $21, $91, $00, $22, $02, $91, $00, $22, $0a, $91, $00, $22, $00, $91, $02, $69
0B957 0A 91 00 22 06 69 03 91.. .db $0a, $91, $00, $22, $06, $69, $03, $91, $4b, $69, $01, $91, $0a, $69, $05, $91
0B967 08 69 09 91 00 22 0E 91.. .db $08, $69, $09, $91, $00, $22, $0e, $91, $00, $22, $27, $91, $01, $c2, $08, $91
0B977 00 22 06 91 00 22 06 91.. .db $00, $22, $06, $91, $00, $22, $06, $91, $00, $22, $05, $91, $04, $69, $03, $91
0B987 00 22 05 91 0B 69 03 91.. .db $00, $22, $05, $91, $0b, $69, $03, $91, $01, $69, $0a, $90, $03, $69, $0b, $91
0B997 00 22 01 69 00 22 0B 91.. .db $00, $22, $01, $69, $00, $22, $0b, $91, $00, $22, $00, $91, $00, $69, $00, $22
0B9A7 0E 91 00 22 04 91 03 C2.. .db $0e, $91, $00, $22, $04, $91, $03, $c2, $14, $91, $00, $6b, $0e, $91, $00, $6c
0B9B7 0A 91 00 22 01 91 01 69.. .db $0a, $91, $00, $22, $01, $91, $01, $69, $02, $c2, $07, $91, $00, $22, $00, $91
0B9C7 02 69 0A 91 04 69 09 91.. .db $02, $69, $0a, $91, $04, $69, $09, $91, $05, $69, $07, $91, $00, $22, $06, $69
0B9D7 06 91 09 69 00 CE 00 CF.. .db $06, $91, $09, $69, $00, $ce, $00, $cf, $0d, $69, $00, $ce, $00, $cf, $0d, $69
0B9E7 00 CE 00 CF 0D 69 00 CE.. .db $00, $ce, $00, $cf, $0d, $69, $00, $ce, $00, $cf, $0d, $69, $00, $ce, $00, $cf
0B9F7 0C 69 00 C8 00 C9 00 CF.. .db $0c, $69, $00, $c8, $00, $c9, $00, $cf, $0c, $69, $00, $ca, $00, $cb, $00, $cf
0BA07 0D 69 00 CE 00 CF 0D 69.. .db $0d, $69, $00, $ce, $00, $cf, $0d, $69, $00, $ce, $00, $cf, $0d, $69, $00, $ce
0BA17 00 CF 0D 69 00 CE 00 CF.. .db $00, $cf, $0d, $69, $00, $ce, $00, $cf, $0d, $69, $00, $ce, $00, $cf, $0d, $69
0BA27 00 CE 00 CF 0C 69         .db $00, $ce, $00, $cf, $0c, $690BA2D FD                        	  .db $fd
0BA2E                           	  0BA2E 00 00 00 00 00 00 00 00.. pad $c000	
0C000                           ;08
0C000                           base $a000
0A000                           include code\leveldata\levelData3.asm
0A000                           
0A000                           ;level 3-4
0A000                           E_CastleArea4:
0A000 EA 1B                     	  .db #14 * $10 + 10, #27
0A002                           
0A002 25 8C                      .db #2 * $10 + 5, #12 + $80
0A004 97 06                      .db #9 * $10 + 7, #6
0A006 D7 06                      .db #13 * $10 + 7, #6
0A008                           
0A008 4A 9C                      .db #4 * $10 + 10, #28 + $80
0A00A                           
0A00A 39 9B                      .db #3 * $10 + 9, #27 + $80
0A00C 89 1D                      .db #8 * $10 + 9, #29
0A00E                           
0A00E A9 80                      .db #10 * $10 + 9, #0 + $80
0A010                           
0A010 29 80                      .db #2 * $10 + 9, #0 + $80
0A012 C9 00                      .db #12 * $10 + 9, #0
0A014                           
0A014 EA 9B                      .db #14 * $10 + 10, #27 + $80
0A016 0F 08                      .db PageSkip, #8
0A018                           
0A018 15 8C                      .db #1 * $10 + 5, #12 + $80
0A01A 94 0C                      .db #9 * $10 + 4, #12
0A01C                           
0A01C 6B 82                      .db #6 * $10 + 11, #2 + $80
0A01E 96 06                      .db #9 * $10 + 6, #6
0A020 AB 02                      .db #10 * $10 + 11, #2
0A022 EB 02                      .db #14 * $10 + 11, #2
0A024                           
0A024 68 A0                      .db #6 * $10 + 8, #32 + $80
0A026 95 0C                      .db #9 * $10 + 5, #12
0A028                           
0A028 95 8C                      .db #9 * $10 + 5, #12 + $80
0A02A                           
0A02A C9 A1                      .db #12 * $10 + 9, #33 + $80
0A02C                           
0A02C 07 A1                      .db #0 * $10 + 7, #33 + $80
0A02E 4A 0D                      .db #4 * $10 + 10, #13
0A030 88 0D                      .db #8 * $10 + 8, #13
0A032                           
0A032 78 AD                      .db #7 * $10 + 8, #45 + $80
0A034                           
0A034 1B C1                      .db #1 * $10 + 11, #65 + $80
0A036 9B 35                      .db #9 * $10 + 11, #53
0A038 FF                              .db $ff
0A039                           
0A039                           ;level 3-3
0A039                           E_GroundArea1:
0A039 0F 01                     .db PageSkip, #1
0A03B                           
0A03B 3B 80                      .db #3 * $10 + 11, #0 + $80
0A03D D9 00                      .db #13 * $10 + 9, #0
0A03F                           
0A03F 16 8D                      .db #1 * $10 + 6, #13 + $80
0A041 57 0D                      .db #5 * $10 + 7, #13
0A043 B7 00                      .db #11 * $10 + 7, #0
0A045                           
0A045 B8 83                      .db #11 * $10 + 8, #3 + $80
0A047 0F 05                      .db PageSkip, #5
0A049                           
0A049 28 A0                      .db #2 * $10 + 8, #32 + $80
0A04B 89 22                      .db #8 * $10 + 9, #34
0A04D CB 06                      .db #12 * $10 + 11, #6
0A04F                           
0A04F 0B 86                      .db #0 * $10 + 11, #6 + $80
0A051 3A 0D                      .db #3 * $10 + 10, #13
0A053 79 0D                      .db #7 * $10 + 9, #13
0A055                           
0A055 56 85                      .db #5 * $10 + 6, #5 + $80
0A057 6A 06                      .db #6 * $10 + 10, #6
0A059 FA 21                      .db #15 * $10 + 10, #33
0A05B                           
0A05B A8 86                      .db #10 * $10 + 8, #6 + $80
0A05D D8 06                      .db #13 * $10 + 8, #6
0A05F                           
0A05F A8 8D                      .db #10 * $10 + 8, #13 + $80
0A061                           
0A061 0A 8D                      .db #0 * $10 + 10, #13 + $80
0A063                           
0A063 19 8D                      .db #1 * $10 + 9, #13 + $80
0A065 3A 0D                      .db #3 * $10 + 10, #13
0A067 5B 0D                      .db #5 * $10 + 11, #13
0A069                           
0A069 5B 89                      .db #5 * $10 + 11, #9 + $80
0A06B 9B 09                      .db #9 * $10 + 11, #9
0A06D C9 20                      .db #12 * $10 + 9, #32
0A06F 0F 0E                      .db PageSkip, #14
0A071                           
0A071 22 B0                      .db #2 * $10 + 2, #48 + $80
0A073 0F 10                      .db PageSkip, #16
0A075 FF                              .db $ff
0A076                           
0A076                           ;level 4-1
0A076                           E_GroundArea3:
0A076 0F 01                     .db PageSkip, #1
0A078                           
0A078 29 C0 04                   .db #2 * $10 + 9, #64 + $80, $04
0A07B                           
0A07B 1B 83                      .db #1 * $10 + 11, #3 + $80
0A07D 69 0D                      .db #6 * $10 + 9, #13
0A07F A7 0D                      .db #10 * $10 + 7, #13
0A081                           
0A081 19 80                      .db #1 * $10 + 9, #0 + $80
0A083 49 00                      .db #4 * $10 + 9, #0
0A085 E8 03                      .db #14 * $10 + 8, #3
0A087                           
0A087 97 80                      .db #9 * $10 + 7, #0 + $80
0A089                           
0A089 48 86                      .db #4 * $10 + 8, #6 + $80
0A08B 56 20                      .db #5 * $10 + 6, #32
0A08D B8 42                      .db #11 * $10 + 8, #66
0A08F                           
0A08F 88 86                      .db #8 * $10 + 8, #6 + $80
0A091                           
0A091 27 86                      .db #2 * $10 + 7, #6 + $80
0A093 86 42                      .db #8 * $10 + 6, #66
0A095                           
0A095 27 86                      .db #2 * $10 + 7, #6 + $80
0A097 56 20                      .db #5 * $10 + 6, #32
0A099 D8 06                      .db #13 * $10 + 8, #6
0A09B                           
0A09B 06 A0                      .db #0 * $10 + 6, #32 + $80
0A09D 56 06                      .db #5 * $10 + 6, #6
0A09F 85 0D                      .db #8 * $10 + 5, #13
0A0A1 C9 0D                      .db #12 * $10 + 9, #13
0A0A3                           
0A0A3 68 83                      .db #6 * $10 + 8, #3 + $80
0A0A5 D6 03                      .db #13 * $10 + 6, #3
0A0A7                           
0A0A7 69 80                      .db #6 * $10 + 9, #0 + $80
0A0A9 99 00                      .db #9 * $10 + 9, #0
0A0AB C8 0D                      .db #12 * $10 + 8, #13
0A0AD                           
0A0AD 4A 86                      .db #4 * $10 + 10, #6 + $80
0A0AF 79 20                      .db #7 * $10 + 9, #32
0A0B1 B8 20                      .db #11 * $10 + 8, #32
0A0B3                           
0A0B3 64 80                      .db #6 * $10 + 4, #0 + $80
0A0B5 73 00                      .db #7 * $10 + 3, #0
0A0B7                           
0A0B7 22 B0                      .db #2 * $10 + 2, #48 + $80
0A0B9 0F 10                      .db PageSkip, #16
0A0BB FF                              .db $ff	  
0A0BC                           		  
0A0BC                           E42:
0A0BC                           
0A0BC CA 00                     	.db #12 * $10 + 10, #0
0A0BE EA 00                      .db #14 * $10 + 10, #0
0A0C0                           
0A0C0 5A 8D                      .db #5 * $10 + 10, #13 + $80
0A0C2                           
0A0C2 28 8D                      .db #2 * $10 + 8, #13 + $80
0A0C4 49 0D                      .db #4 * $10 + 9, #13
0A0C6 D6 05                      .db #13 * $10 + 6, #5
0A0C8 FA 06                      .db #15 * $10 + 10, #6
0A0CA                           
0A0CA 78 8D                      .db #7 * $10 + 8, #13 + $80
0A0CC                           
0A0CC 17 80                      .db #1 * $10 + 7, #0 + $80
0A0CE 57 00                      .db #5 * $10 + 7, #0
0A0D0 B7 0D                      .db #11 * $10 + 7, #13
0A0D2 E9 0D                      .db #14 * $10 + 9, #13
0A0D4                           
0A0D4 38 A2                      .db #3 * $10 + 8, #34 + $80
0A0D6 4B 00                      .db #4 * $10 + 11, #0
0A0D8 A8 0D                      .db #10 * $10 + 8, #13
0A0DA                           
0A0DA 48 83                      .db #4 * $10 + 8, #3 + $80
0A0DC 78 03                      .db #7 * $10 + 8, #3
0A0DE 97 20                      .db #9 * $10 + 7, #32
0A0E0                           
0A0E0 56 86                      .db #5 * $10 + 6, #6 + $80
0A0E2 96 20                      .db #9 * $10 + 6, #32
0A0E4                           
0A0E4 07 86                      .db #0 * $10 + 7, #6 + $80
0A0E6 9A 0D                      .db #9 * $10 + 10, #13
0A0E8 B9 0D                      .db #11 * $10 + 9, #13
0A0EA                           
0A0EA 29 8D                      .db #2 * $10 + 9, #13 + $80
0A0EC A8 06                      .db #10 * $10 + 8, #6
0A0EE                           
0A0EE 07 86                      .db #0 * $10 + 7, #6 + $80
0A0F0 26 0D                      .db #2 * $10 + 6, #13
0A0F2 77 00                      .db #7 * $10 + 7, #0
0A0F4 A7 0D                      .db #10 * $10 + 7, #13
0A0F6                           
0A0F6 67 A2                      .db #6 * $10 + 7, #34 + $80
0A0F8 69 0D                      .db #6 * $10 + 9, #13
0A0FA                           
0A0FA 0A 82                      .db #0 * $10 + 10, #2 + $80
0A0FC 49 0D                      .db #4 * $10 + 9, #13
0A0FE 7A 0D                      .db #7 * $10 + 10, #13
0A100 A8 0D                      .db #10 * $10 + 8, #13
0A102                           
0A102 8A 83                      .db #8 * $10 + 10, #3 + $80
0A104 CA 03                      .db #12 * $10 + 10, #3
0A106                           
0A106 22 B0                      .db #2 * $10 + 2, #48 + $80
0A108 0F 10                      .db PageSkip, #16
0A10A FF                        	.db $ff
0A10B                           	
0A10B                           ;level 4-3
0A10B                           E_GroundArea13:
0A10B 0F 01                     .db PageSkip, #1
0A10D                           
0A10D FA 83                      .db #15 * $10 + 10, #3 + $80
0A10F 0F 03                      .db PageSkip, #3
0A111                           
0A111 45 83                      .db #4 * $10 + 5, #3 + $80
0A113 B5 03                      .db #11 * $10 + 5, #3
0A115                           
0A115 BA 86                      .db #11 * $10 + 10, #6 + $80
0A117 EA 06                      .db #14 * $10 + 10, #6
0A119                           
0A119 6A 92                      .db #6 * $10 + 10, #18 + $80
0A11B DA 12                      .db #13 * $10 + 10, #18
0A11D                           
0A11D DA 92                      .db #13 * $10 + 10, #18 + $80
0A11F                           
0A11F 2A 92                      .db #2 * $10 + 10, #18 + $80
0A121 95 0D                      .db #9 * $10 + 5, #13
0A123 D4 20                      .db #13 * $10 + 4, #32
0A125                           
0A125 D6 83                      .db #13 * $10 + 6, #3 + $80
0A127                           
0A127 F6 83                      .db #15 * $10 + 6, #3 + $80
0A129                           
0A129 E8 8D                      .db #14 * $10 + 8, #13 + $80
0A12B                           
0A12B 07 8D                      .db #0 * $10 + 7, #13 + $80
0A12D 26 0D                      .db #2 * $10 + 6, #13
0A12F D7 0D                      .db #13 * $10 + 7, #13
0A131 F8 0D                      .db #15 * $10 + 8, #13
0A133                           
0A133 19 8D                      .db #1 * $10 + 9, #13 + $80
0A135 CB 00                      .db #12 * $10 + 11, #0
0A137                           
0A137 0B 80                      .db #0 * $10 + 11, #0 + $80
0A139                           
0A139 32 B0                      .db #3 * $10 + 2, #48 + $80
0A13B 0F 10                      .db PageSkip, #16
0A13D FF                              .db $ff
0A13E                           
0A13E                           ;level 3-4
0A13E                           L_CastleArea4:
0A13E 9B 07                           .db $9b, $07
0A140                                 include "code\leveldata\levels\3-4.asm"
0A140                           
0A140 10 62 0E 00 00 62 0E 00.. .db $10, $62, $0e, $00, $00, $62, $0e, $00, $00, $62, $0e, $00, $00, $62, $0e, $00
0A150 05 62 09 00 0A 62 04 00.. .db $05, $62, $09, $00, $0a, $62, $04, $00, $1d, $62, $00, $c4, $50, $62, $04, $00
0A160 0A 62 09 00 05 62 01 00.. .db $0a, $62, $09, $00, $05, $62, $01, $00, $00, $c2, $0d, $00, $00, $c2, $00, $00
0A170 00 C2 30 00 0A 62 04 00.. .db $00, $c2, $30, $00, $0a, $62, $04, $00, $0a, $62, $04, $90, $0a, $62, $04, $91
0A180 0A 62 04 91 0A 62 04 91.. .db $0a, $62, $04, $91, $0a, $62, $04, $91, $27, $62, $02, $00, $0c, $62, $0a, $00
0A190 04 62 03 00 00 C2 06 00.. .db $04, $62, $03, $00, $00, $c2, $06, $00, $03, $62, $0c, $00, $02, $62, $15, $00
0A1A0 01 62 04 00 02 C2 05 00.. .db $01, $62, $04, $00, $02, $c2, $05, $00, $00, $62, $00, $c4, $00, $62, $09, $00
0A1B0 02 90 03 62 08 00 02 91.. .db $02, $90, $03, $62, $08, $00, $02, $91, $0c, $62, $02, $91, $0c, $62, $02, $91
0A1C0 1C 62 0D 00 01 62 04 00.. .db $1c, $62, $0d, $00, $01, $62, $04, $00, $01, $c2, $3a, $00, $02, $62, $01, $00
0A1D0 02 62 07 00 00 62 00 C4.. .db $02, $62, $07, $00, $00, $62, $00, $c4, $00, $62, $01, $00, $00, $62, $00, $c4
0A1E0 00 62 01 00 03 62 01 00.. .db $00, $62, $01, $00, $03, $62, $01, $00, $02, $62, $01, $00, $02, $62, $01, $00
0A1F0 03 62 01 00 02 62 01 90.. .db $03, $62, $01, $00, $02, $62, $01, $90, $02, $62, $01, $90, $03, $62, $01, $00
0A200 02 62 01 91 02 62 01 91.. .db $02, $62, $01, $91, $02, $62, $01, $91, $03, $62, $01, $90, $02, $62, $01, $91
0A210 02 62 01 91 03 62 01 91.. .db $02, $62, $01, $91, $03, $62, $01, $91, $02, $62, $01, $91, $02, $62, $01, $91
0A220 23 62 0D 00 00 62 0B 00.. .db $23, $62, $0d, $00, $00, $62, $0b, $00, $01, $c2, $00, $00, $00, $62, $0e, $00
0A230 00 62 02 00 04 62 02 00.. .db $00, $62, $02, $00, $04, $62, $02, $00, $04, $62, $02, $00, $00, $62, $0c, $00
0A240 02 62 00 00 01 C2 09 00.. .db $02, $62, $00, $00, $01, $c2, $09, $00, $02, $62, $0c, $00, $5f, $62, $06, $00
0A250 00 62 0A 00 02 C2 00 00.. .db $00, $62, $0a, $00, $02, $c2, $00, $00, $00, $62, $00, $00, $02, $c2, $0a, $00
0A260 00 62 09 00 0A 62 32 00.. .db $00, $62, $09, $00, $0a, $62, $32, $00, $5e, $62, $00, $00, $07, $62, $07, $00
0A270 06 62 08 00 05 62 04 00.. .db $06, $62, $08, $00, $05, $62, $04, $00, $01, $c2, $02, $00, $04, $62, $23, $00
0A280 01 62 01 00 02 62 07 00.. .db $01, $62, $01, $00, $02, $62, $07, $00, $02, $62, $01, $00, $00, $62, $00, $c4
0A290 0B 62 01 90 0D 62 01 91.. .db $0b, $62, $01, $90, $0d, $62, $01, $91, $0d, $62, $01, $91, $0d, $62, $01, $91
0A2A0 12 62 08 00 00 4E 04 00.. .db $12, $62, $08, $00, $00, $4e, $04, $00, $00, $4e, $01, $c2, $06, $00, $00, $4e
0A2B0 04 00 00 4E 08 00 00 4E.. .db $04, $00, $00, $4e, $08, $00, $00, $4e, $00, $00, $00, $c0, $00, $c1, $00, $c0
0A2C0 00 00 00 4E 08 00 00 4E.. .db $00, $00, $00, $4e, $08, $00, $00, $4e, $04, $00, $00, $4e, $01, $00, $04, $62
0A2D0 01 00 00 4E 04 00 00 4E.. .db $01, $00, $00, $4e, $04, $00, $00, $4e, $01, $00, $04, $62, $01, $00, $00, $4e
0A2E0 04 00 00 4E 01 00 04 62.. .db $04, $00, $00, $4e, $01, $00, $04, $62, $01, $00, $06, $61, $01, $00, $04, $62
0A2F0 08 00 01 90 04 62 08 00.. .db $08, $00, $01, $90, $04, $62, $08, $00, $01, $91, $04, $62, $08, $90, $01, $91
0A300 04 62 0A 91 04 62 08 91.. .db $04, $62, $0a, $91, $04, $62, $08, $91, $0f, $62, $02, $00, $00, $4e, $02, $00
0A310 00 4E 0A 00 00 4E 02 00.. .db $00, $4e, $0a, $00, $00, $4e, $02, $00, $00, $4e, $0a, $00, $00, $4e, $02, $00
0A320 00 4E 0A 00 00 4E 02 C2.. .db $00, $4e, $0a, $00, $00, $4e, $02, $c2, $00, $4e, $0a, $00, $00, $4e, $02, $00
0A330 00 4E 0A 00 00 4E 02 00.. .db $00, $4e, $0a, $00, $00, $4e, $02, $00, $00, $4e, $02, $00, $01, $62, $05, $00
0A340 00 4E 02 00 00 4E 02 00.. .db $00, $4e, $02, $00, $00, $4e, $02, $00, $01, $62, $05, $00, $04, $61, $02, $00
0A350 01 62 00 29 0C 00 01 62.. .db $01, $62, $00, $29, $0c, $00, $01, $62, $02, $00, $0a, $90, $01, $62, $02, $00
0A360 0A 91 04 62 0A 91 14 62.. .db $0a, $91, $04, $62, $0a, $91, $14, $62, $07, $00, $02, $62, $07, $00, $02, $c2
0A370 02 00 00 62 02 00 02 C2.. .db $02, $00, $00, $62, $02, $00, $02, $c2, $13, $00, $00, $62, $02, $00, $02, $c2
0A380 02 00 00 62 03 00 02 62.. .db $02, $00, $00, $62, $03, $00, $02, $62, $06, $00, $22, $62, $12, $00, $02, $c2
0A390 01 00 02 C2 01 00 02 C2.. .db $01, $00, $02, $c2, $01, $00, $02, $c2, $0f, $00, $2f, $62, $12, $00, $02, $c2
0A3A0 15 00 02 C2 20 00 02 62.. .db $15, $00, $02, $c2, $20, $00, $02, $62, $08, $00, $02, $0b, $00, $00, $02, $62
0A3B0 02 00 00 12 00 13 02 00.. .db $02, $00, $00, $12, $00, $13, $02, $00, $00, $61, $02, $63, $00, $61, $05, $00
0A3C0 00 14 00 15 02 00 00 61.. .db $00, $14, $00, $15, $02, $00, $00, $61, $02, $00, $00, $61, $05, $00, $00, $14
0A3D0 00 15 02 00 00 61 02 00.. .db $00, $15, $02, $00, $00, $61, $02, $00, $00, $61, $05, $00, $00, $14, $00, $15
0A3E0 02 00 00 61 02 00 00 61.. .db $02, $00, $00, $61, $02, $00, $00, $61, $07, $62, $02, $90, $00, $61, $02, $90
0A3F0 00 61 07 62 02 91 00 61.. .db $00, $61, $07, $62, $02, $91, $00, $61, $02, $91, $00, $61, $0f, $62, $33, $00
0A400 02 C2 2B 00 04 0B 06 00.. .db $02, $c2, $2b, $00, $04, $0b, $06, $00, $00, $62, $01, $00, $00, $61, $04, $63
0A410 00 61 01 00 04 62 01 00.. .db $00, $61, $01, $00, $04, $62, $01, $00, $00, $61, $04, $00, $00, $61, $01, $00
0A420 04 62 01 00 00 61 04 00.. .db $04, $62, $01, $00, $00, $61, $04, $00, $00, $61, $01, $00, $04, $62, $01, $90
0A430 00 61 04 90 00 61 01 90.. .db $00, $61, $04, $90, $00, $61, $01, $90, $04, $62, $01, $91, $00, $61, $04, $91
0A440 00 61 01 91 14 62 0B 00.. .db $00, $61, $01, $91, $14, $62, $0b, $00, $00, $14, $00, $15, $0d, $00, $00, $14
0A450 00 15 07 00 02 C0 02 00.. .db $00, $15, $07, $00, $02, $c0, $02, $00, $00, $14, $00, $15, $0d, $00, $00, $14
0A460 00 15 02 00 01 62 08 00.. .db $00, $15, $02, $00, $01, $62, $08, $00, $00, $14, $00, $15, $01, $00, $02, $62
0A470 08 00 00 14 00 15 01 00.. .db $08, $00, $00, $14, $00, $15, $01, $00, $02, $62, $02, $00, $01, $c0, $00, $c1
0A480 02 00 00 2C 00 2D 01 00.. .db $02, $00, $00, $2c, $00, $2d, $01, $00, $02, $62, $0c, $00, $02, $62, $0c, $00
0A490 02 62 0C 00 02 62 01 90.. .db $02, $62, $0c, $00, $02, $62, $01, $90, $0d, $62, $01, $91, $1a, $62, $00, $14
0A4A0 00 15 09 00 03 62 00 14.. .db $00, $15, $09, $00, $03, $62, $00, $14, $00, $15, $0a, $00, $02, $62, $00, $14
0A4B0 00 15 0B 00 01 62 00 14.. .db $00, $15, $0b, $00, $01, $62, $00, $14, $00, $15, $02, $00, $02, $c2, $06, $00
0A4C0 00 62 00 2C 00 2D 25 00.. .db $00, $62, $00, $2c, $00, $2d, $25, $00, $00, $12, $00, $13, $0d, $00, $00, $14
0A4D0 00 15 04 00 00 62 03 00.. .db $00, $15, $04, $00, $00, $62, $03, $00, $00, $12, $00, $13, $01, $00, $00, $14
0A4E0 00 15 03 00 01 62 03 00.. .db $00, $15, $03, $00, $01, $62, $03, $00, $00, $14, $00, $15, $01, $00, $00, $14
0A4F0 00 15 02 00 44 62 09 00.. .db $00, $15, $02, $00, $44, $62, $09, $00, $04, $62, $0b, $00, $02, $62, $0d, $00
0A500 00 62 1D 00 00 C5 0E 00.. .db $00, $62, $1d, $00, $00, $c5, $0e, $00, $02, $62, $0c, $89, $02, $62, $0c, $00
0A510 02 62 0C 90 02 62 0C 91.. .db $02, $62, $0c, $90, $02, $62, $0c, $91, $02, $62, $0c, $91, $14, $62, $0d, $00
0A520 00 62 5E 00 00 62 0E 00.. .db $00, $62, $5e, $00, $00, $62, $0e, $00, $01, $62, $0d, $00, $02, $62, $0c, $00
0A530 1F 62                     .db $1f, $620A532 FD                              .db $fd
0A533                           	
0A533                           ;level 3-3
0A533                           L_GroundArea1:
0A533 94 11                           .db $94, $11
0A535                                 include "code\leveldata\levels\3-3.asm"
0A535                           
0A535 01 00 0D 54 06 00 08 54.. .db $01, $00, $0d, $54, $06, $00, $08, $54, $07, $00, $07, $54, $08, $00, $06, $54
0A545 09 00 05 54 09 00 05 54.. .db $09, $00, $05, $54, $09, $00, $05, $54, $00, $00, $02, $45, $07, $00, $03, $54
0A555 00 00 00 46 00 47 00 48.. .db $00, $00, $00, $46, $00, $47, $00, $48, $01, $00, $00, $51, $01, $c0, $00, $51
0A565 05 00 00 45 02 49 00 45.. .db $05, $00, $00, $45, $02, $49, $00, $45, $08, $00, $01, $c2, $01, $47, $00, $4a
0A575 01 47 0A 00 01 47 00 4B.. .db $01, $47, $0a, $00, $01, $47, $00, $4b, $00, $70, $00, $47, $00, $00, $01, $4d
0A585 00 02 01 03 00 04 03 00.. .db $00, $02, $01, $03, $00, $04, $03, $00, $4d, $54, $01, $00, $0a, $54, $04, $00
0A595 08 54 06 00 04 54 06 00.. .db $08, $54, $06, $00, $04, $54, $06, $00, $00, $c1, $01, $c0, $00, $00, $01, $54
0A5A5 13 00 03 C2 12 00 02 4D.. .db $13, $00, $03, $c2, $12, $00, $02, $4d, $05, $00, $00, $02, $01, $03, $00, $04
0A5B5 00 00 04 54 00 02 03 03.. .db $00, $00, $04, $54, $00, $02, $03, $03, $3f, $54, $22, $00, $03, $c2, $14, $00
0A5C5 00 12 00 13 0D 00 00 14.. .db $00, $12, $00, $13, $0d, $00, $00, $14, $00, $15, $01, $00, $00, $12, $00, $13
0A5D5 00 00 00 02 01 03 00 04.. .db $00, $00, $00, $02, $01, $03, $00, $04, $04, $00, $00, $14, $00, $15, $01, $00
0A5E5 00 14 00 15 05 54 02 00.. .db $00, $14, $00, $15, $05, $54, $02, $00, $0c, $54, $02, $00, $0c, $54, $02, $00
0A5F5 0C 54 02 00 0C 54 02 00.. .db $0c, $54, $02, $00, $0c, $54, $02, $00, $0c, $54, $02, $00, $0f, $54, $01, $00
0A605 00 26 0E 00 00 26 0E 00.. .db $00, $26, $0e, $00, $00, $26, $0e, $00, $00, $26, $0e, $00, $00, $26, $04, $00
0A615 02 C2 06 00 00 26 0E 00.. .db $02, $c2, $06, $00, $00, $26, $0e, $00, $00, $26, $0e, $00, $00, $26, $03, $00
0A625 04 0B 05 00 00 26 02 00.. .db $04, $0b, $05, $00, $00, $26, $02, $00, $06, $61, $04, $00, $00, $26, $03, $00
0A635 04 61 05 00 00 26 03 00.. .db $04, $61, $05, $00, $00, $26, $03, $00, $04, $61, $0a, $00, $04, $61, $0a, $00
0A645 04 61 03 00 0F 54 11 00.. .db $04, $61, $03, $00, $0f, $54, $11, $00, $00, $c0, $01, $00, $00, $c2, $01, $00
0A655 00 C0 02 00 00 C2 0D 00.. .db $00, $c0, $02, $00, $00, $c2, $0d, $00, $00, $c2, $00, $00, $00, $c2, $12, $00
0A665 02 0B 02 00 02 0B 05 00.. .db $02, $0b, $02, $00, $02, $0b, $05, $00, $04, $61, $00, $00, $04, $61, $05, $00
0A675 02 61 02 00 02 61 06 00.. .db $02, $61, $02, $00, $02, $61, $06, $00, $02, $61, $02, $00, $02, $61, $03, $00
0A685 00 02 00 03 00 00 02 61.. .db $00, $02, $00, $03, $00, $00, $02, $61, $02, $00, $02, $61, $03, $00, $01, $54
0A695 00 00 02 61 02 00 02 61.. .db $00, $00, $02, $61, $02, $00, $02, $61, $03, $00, $01, $54, $00, $00, $02, $61
0A6A5 02 00 02 61 03 00 01 54.. .db $02, $00, $02, $61, $03, $00, $01, $54, $00, $00, $02, $61, $02, $00, $02, $61
0A6B5 03 00 11 54 00 00 0E 54.. .db $03, $00, $11, $54, $00, $00, $0e, $54, $03, $00, $0b, $54, $07, $00, $07, $54
0A6C5 07 00 00 14 00 15 0D 00.. .db $07, $00, $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15, $0d, $00, $00, $14
0A6D5 00 15 07 00 00 12 00 13.. .db $00, $15, $07, $00, $00, $12, $00, $13, $00, $00, $01, $c2, $00, $00, $00, $2c
0A6E5 00 2D 01 00 03 C0 00 03.. .db $00, $2d, $01, $00, $03, $c0, $00, $03, $00, $04, $00, $14, $00, $15, $0b, $00
0A6F5 01 54 00 14 00 15 0B 00.. .db $01, $54, $00, $14, $00, $15, $0b, $00, $05, $54, $02, $4d, $01, $00, $00, $02
0A705 01 03 00 04 00 4D 29 54.. .db $01, $03, $00, $04, $00, $4d, $29, $54, $05, $00, $08, $54, $06, $00, $05, $54
0A715 09 00 01 54 38 00 02 C2.. .db $09, $00, $01, $54, $38, $00, $02, $c2, $01, $00, $00, $c1, $15, $00, $00, $12
0A725 00 13 09 00 00 12 00 13.. .db $00, $13, $09, $00, $00, $12, $00, $13, $01, $00, $00, $14, $00, $15, $02, $00
0A735 00 02 02 03 01 4D 00 00.. .db $00, $02, $02, $03, $01, $4d, $00, $00, $00, $14, $00, $15, $01, $00, $00, $14
0A745 00 15 26 54 5C 00 02 61.. .db $00, $15, $26, $54, $5c, $00, $02, $61, $03, $00, $02, $51, $07, $00, $00, $14
0A755 0E 00 00 14 00 61 0D 00.. .db $0e, $00, $00, $14, $00, $61, $0d, $00, $00, $2c, $02, $61, $00, $00, $00, $02
0A765 00 03 00 04 01 00 00 61.. .db $00, $03, $00, $04, $01, $00, $00, $61, $00, $54, $01, $61, $02, $00, $06, $54
0A775 02 61 00 54 01 61 02 00.. .db $02, $61, $00, $54, $01, $61, $02, $00, $1f, $54, $0b, $00, $00, $60, $01, $00
0A785 00 61 0E 00 00 61 0E 00.. .db $00, $61, $0e, $00, $00, $61, $0e, $00, $00, $61, $0e, $00, $00, $61, $09, $00
0A795 00 51 00 C1 00 51 00 C0.. .db $00, $51, $00, $c1, $00, $51, $00, $c0, $00, $51, $01, $61, $0e, $00, $00, $15
0A7A5 0E 00 00 15 00 00 01 C2.. .db $0e, $00, $00, $15, $00, $00, $01, $c2, $03, $00, $00, $61, $00, $00, $04, $4d
0A7B5 00 00 00 2D 05 00 02 61.. .db $00, $00, $00, $2d, $05, $00, $02, $61, $05, $54, $04, $00, $01, $61, $08, $54
0A7C5 00 00 02 4D 01 61 29 54.. .db $00, $00, $02, $4d, $01, $61, $29, $54, $2f, $00, $00, $8c, $0e, $00, $04, $51
0A7D5 00 58 33 00 00 12 00 13.. .db $00, $58, $33, $00, $00, $12, $00, $13, $00, $00, $01, $c0, $00, $00, $02, $54
0A7E5 01 03 00 04 03 00 00 14.. .db $01, $03, $00, $04, $03, $00, $00, $14, $00, $15, $03, $00, $07, $54, $01, $00
0A7F5 00 14 00 15 03 00 09 54.. .db $00, $14, $00, $15, $03, $00, $09, $54, $00, $14, $00, $15, $00, $02, $01, $03
0A805 00 04 1F 54 29 00 04 C2.. .db $00, $04, $1f, $54, $29, $00, $04, $c2, $29, $00, $06, $0b, $06, $00, $01, $61
0A815 01 C7 04 63 05 00 02 61.. .db $01, $c7, $04, $63, $05, $00, $02, $61, $01, $00, $04, $c2, $04, $00, $03, $61
0A825 01 00 04 C2 00 12 00 13.. .db $01, $00, $04, $c2, $00, $12, $00, $13, $01, $00, $04, $61, $01, $00, $04, $c2
0A835 00 14 00 15 00 00 05 61.. .db $00, $14, $00, $15, $00, $00, $05, $61, $01, $00, $04, $c2, $1f, $54, $52, $00
0A845 01 C2 0A 00 00 8F 0E 00.. .db $01, $c2, $0a, $00, $00, $8f, $0e, $00, $00, $8f, $06, $00, $01, $c0, $00, $c1
0A855 01 C0 02 00 00 61 00 12.. .db $01, $c0, $02, $00, $00, $61, $00, $12, $00, $13, $0c, $00, $00, $61, $00, $14
0A865 00 15 00 12 00 13 09 00.. .db $00, $15, $00, $12, $00, $13, $09, $00, $01, $61, $00, $14, $00, $15, $00, $14
0A875 00 15 00 12 00 13 00 00.. .db $00, $15, $00, $12, $00, $13, $00, $00, $00, $02, $02, $03, $00, $04, $00, $00
0A885 01 61 1F 54 70 00 00 61.. .db $01, $61, $1f, $54, $70, $00, $00, $61, $03, $c0, $00, $00, $03, $c2, $04, $00
0A895 01 61 09 00 00 12 00 13.. .db $01, $61, $09, $00, $00, $12, $00, $13, $00, $00, $02, $61, $09, $00, $00, $14
0A8A5 00 15 00 00 02 61 02 03.. .db $00, $15, $00, $00, $02, $61, $02, $03, $00, $04, $00, $00, $03, $4d, $00, $00
0A8B5 00 14 00 15 00 00 00 61.. .db $00, $14, $00, $15, $00, $00, $00, $61, $1f, $54, $28, $00, $00, $61, $0e, $00
0A8C5 00 61 08 00 00 C2 02 00.. .db $00, $61, $08, $00, $00, $c2, $02, $00, $00, $61, $00, $00, $00, $61, $0b, $00
0A8D5 01 61 00 00 00 61 0B 00.. .db $01, $61, $00, $00, $00, $61, $0b, $00, $01, $61, $00, $00, $00, $61, $07, $00
0A8E5 00 61 00 8D 00 61 00 00.. .db $00, $61, $00, $8d, $00, $61, $00, $00, $01, $61, $00, $00, $00, $61, $05, $00
0A8F5 00 61 00 52 00 61 00 4B.. .db $00, $61, $00, $52, $00, $61, $00, $4b, $00, $61, $00, $00, $01, $61, $00, $00
0A905 00 61 05 00 00 61 02 4B.. .db $00, $61, $05, $00, $00, $61, $02, $4b, $00, $61, $00, $00, $01, $61, $00, $00
0A915 00 61 05 00 00 61 02 4B.. .db $00, $61, $05, $00, $00, $61, $02, $4b, $00, $61, $00, $00, $01, $61, $00, $00
0A925 00 61 05 00 04 54 00 00.. .db $00, $61, $05, $00, $04, $54, $00, $00, $01, $54, $00, $00, $00, $54, $05, $00
0A935 04 54 00 00 01 54 00 00.. .db $04, $54, $00, $00, $01, $54, $00, $00, $00, $54, $07, $00, $00, $24, $05, $00
0A945 02 45 05 00 00 25 05 00.. .db $02, $45, $05, $00, $00, $25, $05, $00, $00, $46, $00, $47, $00, $48, $05, $00
0A955 00 25 04 00 00 45 02 49.. .db $00, $25, $04, $00, $00, $45, $02, $49, $00, $45, $04, $00, $00, $25, $04, $00
0A965 01 47 00 4A 01 47 04 00.. .db $01, $47, $00, $4a, $01, $47, $04, $00, $00, $25, $04, $00, $01, $47, $00, $4b
0A975 00 70 00 47 04 00 00 25.. .db $00, $70, $00, $47, $04, $00, $00, $25, $02, $00, $01, $45, $04, $49, $01, $45
0A985 02 00 00 25 02 00 02 47.. .db $02, $00, $00, $25, $02, $00, $02, $47, $00, $4a, $00, $47, $00, $4a, $02, $47
0A995 02 00 00 25 02 00 02 47.. .db $02, $00, $00, $25, $02, $00, $02, $47, $00, $4b, $00, $47, $00, $4b, $02, $47
0A9A5 02 00 00 25 02 00 08 47.. .db $02, $00, $00, $25, $02, $00, $08, $47, $02, $00, $00, $25, $02, $00, $01, $47
0A9B5 00 4A 00 47 00 4A 00 47.. .db $00, $4a, $00, $47, $00, $4a, $00, $47, $00, $4a, $01, $47, $02, $00, $00, $61
0A9C5 00 00 00 02 00 03 01 47.. .db $00, $00, $00, $02, $00, $03, $01, $47, $00, $4b, $00, $70, $00, $4b, $00, $47
0A9D5 00 4B 01 47 02 00 0D 54.. .db $00, $4b, $01, $47, $02, $00, $0d, $54, $01, $00, $0d, $54, $af, $00, $1f, $540A9E5 FD                              .db $fd
0A9E6                           
0A9E6                           ;level 4-1
0A9E6                           L_GroundArea3:
0A9E6 52 61                           .db $52, $61
0A9E8                                 include "code\leveldata\levels\4-1.asm"
0A9E8                           
0A9E8 02 00 02 45 0C 00 00 46.. .db $02, $00, $02, $45, $0c, $00, $00, $46, $00, $47, $00, $48, $03, $00, $00, $80
0A9F8 02 81 00 82 02 00 00 45.. .db $02, $81, $00, $82, $02, $00, $00, $45, $02, $49, $00, $45, $02, $00, $00, $83
0AA08 02 84 00 85 02 00 01 47.. .db $02, $84, $00, $85, $02, $00, $01, $47, $00, $4a, $01, $47, $0a, $00, $01, $47
0AA18 00 4B 00 70 00 47 08 00.. .db $00, $4b, $00, $70, $00, $47, $08, $00, $01, $45, $04, $49, $01, $45, $06, $00
0AA28 02 47 00 4A 00 47 00 4A.. .db $02, $47, $00, $4a, $00, $47, $00, $4a, $02, $47, $06, $00, $02, $47, $00, $4b
0AA38 00 47 00 4B 02 47 06 00.. .db $00, $47, $00, $4b, $02, $47, $06, $00, $08, $47, $06, $00, $01, $47, $00, $4a
0AA48 00 47 00 4A 00 47 00 4A.. .db $00, $47, $00, $4a, $00, $47, $00, $4a, $01, $47, $05, $00, $00, $61, $01, $47
0AA58 00 4B 00 70 00 4B 00 47.. .db $00, $4b, $00, $70, $00, $4b, $00, $47, $00, $4b, $01, $47, $01, $00, $02, $4d
0AA68 01 61 1F D6 1C 00 00 80.. .db $01, $61, $1f, $d6, $1c, $00, $00, $80, $01, $81, $03, $00, $00, $80, $02, $81
0AA78 00 82 00 D9 00 DA 00 DB.. .db $00, $82, $00, $d9, $00, $da, $00, $db, $00, $00, $00, $83, $01, $84, $03, $00
0AA88 00 83 02 84 00 85 00 00.. .db $00, $83, $02, $84, $00, $85, $00, $00, $00, $4e, $09, $00, $01, $c2, $02, $00
0AA98 00 4E 00 00 01 C2 05 00.. .db $00, $4e, $00, $00, $01, $c2, $05, $00, $00, $c2, $01, $00, $00, $c2, $01, $00
0AAA8 00 4E 02 00 00 C2 0A 00.. .db $00, $4e, $02, $00, $00, $c2, $0a, $00, $00, $4e, $0d, $00, $01, $d6, $0c, $00
0AAB8 02 D6 04 00 00 CC 00 CD.. .db $02, $d6, $04, $00, $00, $cc, $00, $cd, $01, $d6, $03, $00, $02, $d6, $04, $00
0AAC8 00 CE 00 D7 01 D6 03 00.. .db $00, $ce, $00, $d7, $01, $d6, $03, $00, $02, $d6, $04, $00, $03, $d6, $03, $90
0AAD8 02 D6 04 90 03 D6 03 91.. .db $02, $d6, $04, $90, $03, $d6, $03, $91, $02, $d6, $02, $91, $01, $d6, $0b, $00
0AAE8 00 80 00 81 00 82 00 00.. .db $00, $80, $00, $81, $00, $82, $00, $00, $00, $82, $0a, $00, $00, $83, $00, $84
0AAF8 00 85 00 00 00 85 24 00.. .db $00, $85, $00, $00, $00, $85, $24, $00, $00, $80, $00, $81, $00, $82, $09, $00
0AB08 00 D9 00 DA 00 DB 00 83.. .db $00, $d9, $00, $da, $00, $db, $00, $83, $00, $84, $00, $85, $04, $00, $01, $51
0AB18 03 00 00 4E 04 00 00 CC.. .db $03, $00, $00, $4e, $04, $00, $00, $cc, $00, $cd, $07, $00, $00, $4e, $04, $00
0AB28 00 CE 00 D7 07 00 00 4E.. .db $00, $ce, $00, $d7, $07, $00, $00, $4e, $00, $00, $00, $cc, $00, $cd, $01, $00
0AB38 00 CE 00 D7 01 4D 05 00.. .db $00, $ce, $00, $d7, $01, $4d, $05, $00, $00, $4e, $00, $00, $00, $ce, $00, $d7
0AB48 01 00 05 D6 00 00 01 4D.. .db $01, $00, $05, $d6, $00, $00, $01, $4d, $2c, $d6, $0f, $00, $00, $c0, $0b, $00
0AB58 00 80 00 81 00 82 0C 00.. .db $00, $80, $00, $81, $00, $82, $0c, $00, $00, $83, $00, $84, $00, $85, $04, $00
0AB68 00 80 02 81 00 82 0A 00.. .db $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83, $02, $84, $00, $85, $02, $00
0AB78 01 C0 00 00 00 C1 01 51.. .db $01, $c0, $00, $00, $00, $c1, $01, $51, $12, $00, $01, $c2, $13, $00, $03, $0b
0AB88 02 00 00 4D 07 00 03 63.. .db $02, $00, $00, $4d, $07, $00, $03, $63, $04, $d6, $0a, $00, $08, $d6, $06, $90
0AB98 08 D6 06 91 09 D6 05 91.. .db $08, $d6, $06, $91, $09, $d6, $05, $91, $29, $00, $00, $80, $03, $81, $00, $82
0ABA8 01 00 00 C2 02 00 02 C0.. .db $01, $00, $00, $c2, $02, $00, $02, $c0, $00, $00, $00, $83, $03, $84, $00, $85
0ABB8 00 00 00 C2 00 00 00 C2.. .db $00, $00, $00, $c2, $00, $00, $00, $c2, $20, $00, $04, $0b, $0a, $00, $04, $63
0ABC8 24 00 00 4D 0D 90 01 D6.. .db $24, $00, $00, $4d, $0d, $90, $01, $d6, $0b, $91, $03, $d6, $0a, $91, $04, $d6
0ABD8 09 00 00 80 02 81 00 82.. .db $09, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83, $02, $84, $00, $85
0ABE8 13 00 01 C2 01 00 01 C2.. .db $13, $00, $01, $c2, $01, $00, $01, $c2, $08, $00, $00, $c2, $05, $00, $00, $c2
0ABF8 05 00 00 D9 00 DA 00 DB.. .db $05, $00, $00, $d9, $00, $da, $00, $db, $01, $00, $00, $cc, $00, $cd, $09, $00
0AC08 00 4E 02 00 00 CE 00 D7.. .db $00, $4e, $02, $00, $00, $ce, $00, $d7, $09, $00, $00, $4e, $00, $00, $01, $4d
0AC18 00 CE 00 D7 03 00 00 64.. .db $00, $ce, $00, $d7, $03, $00, $00, $64, $04, $00, $00, $4e, $07, $d6, $00, $00
0AC28 00 65 03 00 0B D6 03 90.. .db $00, $65, $03, $00, $0b, $d6, $03, $90, $0c, $d6, $02, $91, $0d, $d6, $01, $91
0AC38 0E D6 00 91 22 00 00 80.. .db $0e, $d6, $00, $91, $22, $00, $00, $80, $00, $81, $00, $82, $0c, $00, $00, $83
0AC48 00 84 00 85 07 00 01 C2.. .db $00, $84, $00, $85, $07, $00, $01, $c2, $01, $00, $00, $c2, $00, $00, $02, $c0
0AC58 00 00 00 C2 23 00 02 0B.. .db $00, $00, $00, $c2, $23, $00, $02, $0b, $00, $00, $08, $0b, $02, $00, $02, $63
0AC68 00 00 08 63 05 00 0F 90.. .db $00, $00, $08, $63, $05, $00, $0f, $90, $2f, $91, $00, $00, $00, $80, $01, $81
0AC78 00 82 0B 00 00 83 01 84.. .db $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85, $1a, $00, $03, $c2, $04, $00
0AC88 00 80 01 81 00 82 0B 00.. .db $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85, $00, $00
0AC98 00 CC 00 CD 07 00 00 64.. .db $00, $cc, $00, $cd, $07, $00, $00, $64, $04, $00, $00, $ce, $00, $d7, $04, $0b
0ACA8 02 00 00 65 02 00 03 D6.. .db $02, $00, $00, $65, $02, $00, $03, $d6, $04, $63, $02, $00, $00, $66, $01, $4d
0ACB8 04 D6 07 00 00 66 06 D6.. .db $04, $d6, $07, $00, $00, $66, $06, $d6, $07, $90, $07, $d6, $06, $91, $08, $d6
0ACC8 05 91 09 D6 04 91 0A D6.. .db $05, $91, $09, $d6, $04, $91, $0a, $d6, $00, $80, $00, $81, $00, $82, $07, $00
0ACD8 00 C0 03 00 00 83 00 84.. .db $00, $c0, $03, $00, $00, $83, $00, $84, $00, $85, $08, $00, $00, $80, $02, $81
0ACE8 02 00 00 D9 00 DA 00 DB.. .db $02, $00, $00, $d9, $00, $da, $00, $db, $05, $00, $00, $83, $02, $84, $01, $00
0ACF8 00 C0 00 00 00 4E 0E 00.. .db $00, $c0, $00, $00, $00, $4e, $0e, $00, $00, $4e, $03, $00, $00, $51, $00, $c0
0AD08 00 51 00 C1 00 51 05 00.. .db $00, $51, $00, $c1, $00, $51, $05, $00, $00, $4e, $00, $cc, $00, $cd, $0c, $00
0AD18 00 4E 00 CE 00 D7 08 00.. .db $00, $4e, $00, $ce, $00, $d7, $08, $00, $04, $d6, $00, $ce, $00, $d7, $08, $00
0AD28 06 D6 00 00 01 4D 45 D6.. .db $06, $d6, $00, $00, $01, $4d, $45, $d6, $0f, $00, $00, $82, $00, $00, $00, $d9
0AD38 00 DA 00 DB 0A 00 00 85.. .db $00, $da, $00, $db, $0a, $00, $00, $85, $01, $00, $00, $4e, $01, $c2, $0c, $00
0AD48 00 4E 0E 00 00 4E 03 00.. .db $00, $4e, $0e, $00, $00, $4e, $03, $00, $00, $cc, $00, $cd, $01, $00, $00, $80
0AD58 00 81 00 82 00 00 00 CC.. .db $00, $81, $00, $82, $00, $00, $00, $cc, $00, $cd, $00, $00, $00, $4e, $01, $00
0AD68 01 4D 00 CE 00 D7 01 00.. .db $01, $4d, $00, $ce, $00, $d7, $01, $00, $00, $83, $00, $84, $00, $85, $00, $00
0AD78 00 CE 00 D7 00 4D 04 D6.. .db $00, $ce, $00, $d7, $00, $4d, $04, $d6, $00, $ce, $00, $d7, $05, $00, $09, $d6
0AD88 00 4D 04 00 0B D6 00 CC.. .db $00, $4d, $04, $00, $0b, $d6, $00, $cc, $00, $cd, $01, $00, $0b, $d6, $00, $ce
0AD98 00 D7 01 00 0D D6 01 90.. .db $00, $d7, $01, $00, $0d, $d6, $01, $90, $1f, $d6, $02, $00, $00, $80, $01, $81
0ADA8 00 82 0B 00 00 83 01 84.. .db $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85, $14, $00, $00, $c1, $10, $00
0ADB8 00 80 00 81 03 00 01 C2.. .db $00, $80, $00, $81, $03, $00, $01, $c2, $07, $00, $00, $83, $00, $84, $0a, $00
0ADC8 02 0B 0C 00 02 63 04 00.. .db $02, $0b, $0c, $00, $02, $63, $04, $00, $03, $0b, $0b, $00, $03, $63, $18, $00
0ADD8 0F 90 00 D6 0E 91 01 D6.. .db $0f, $90, $00, $d6, $0e, $91, $01, $d6, $0d, $91, $19, $00, $00, $80, $02, $81
0ADE8 00 82 0A 00 00 83 02 84.. .db $00, $82, $0a, $00, $00, $83, $02, $84, $00, $85, $00, $00, $01, $81, $00, $82
0ADF8 0C 00 01 84 00 85 0A 00.. .db $0c, $00, $01, $84, $00, $85, $0a, $00, $00, $d9, $00, $da, $02, $00, $04, $c2
0AE08 06 00 00 4E 0E 00 00 4E.. .db $06, $00, $00, $4e, $0e, $00, $00, $4e, $0b, $00, $00, $cc, $00, $cd, $00, $00
0AE18 00 4E 01 00 06 0B 01 00.. .db $00, $4e, $01, $00, $06, $0b, $01, $00, $00, $4d, $00, $ce, $00, $d7, $00, $00
0AE28 00 4E 01 00 06 63 06 D6.. .db $00, $4e, $01, $00, $06, $63, $06, $d6, $07, $90, $07, $d6, $06, $91, $08, $d6
0AE38 04 91 0A D6 3F 00 00 DB.. .db $04, $91, $0a, $d6, $3f, $00, $00, $db, $03, $00, $00, $80, $00, $81, $00, $82
0AE48 0C 00 00 83 00 84 00 85.. .db $0c, $00, $00, $83, $00, $84, $00, $85, $22, $00, $00, $cc, $00, $cd, $09, $00
0AE58 00 CC 00 CD 01 00 00 CE.. .db $00, $cc, $00, $cd, $01, $00, $00, $ce, $00, $d7, $02, $00, $01, $4d, $00, $00
0AE68 03 0B 00 CE 00 D7 01 0B.. .db $03, $0b, $00, $ce, $00, $d7, $01, $0b, $00, $ce, $00, $d7, $02, $0b, $02, $d6
0AE78 0C 63 04 D6 0A 90 06 D6.. .db $0c, $63, $04, $d6, $0a, $90, $06, $d6, $08, $91, $20, $00, $00, $80, $01, $81
0AE88 00 82 02 00 01 61 02 00.. .db $00, $82, $02, $00, $01, $61, $02, $00, $00, $80, $01, $81, $00, $00, $00, $83
0AE98 01 84 00 85 01 00 02 61.. .db $01, $84, $00, $85, $01, $00, $02, $61, $02, $00, $00, $83, $01, $84, $05, $00
0AEA8 03 61 0A 00 04 61 09 00.. .db $03, $61, $0a, $00, $04, $61, $09, $00, $05, $61, $08, $00, $06, $61, $07, $00
0AEB8 07 61 05 00 00 0B 08 61.. .db $07, $61, $05, $00, $00, $0b, $08, $61, $05, $00, $09, $63, $05, $00, $0f, $90
0AEC8 0F 91 01 00 00 24 0E 00.. .db $0f, $91, $01, $00, $00, $24, $0e, $00, $00, $25, $0c, $00, $00, $82, $00, $00
0AED8 00 25 0C 00 00 85 00 00.. .db $00, $25, $0c, $00, $00, $85, $00, $00, $00, $25, $01, $00, $00, $80, $01, $81
0AEE8 00 82 08 00 00 25 01 00.. .db $00, $82, $08, $00, $00, $25, $01, $00, $00, $83, $01, $84, $00, $85, $08, $00
0AEF8 00 25 01 00 02 45 09 00.. .db $00, $25, $01, $00, $02, $45, $09, $00, $00, $25, $01, $00, $00, $46, $00, $47
0AF08 00 48 09 00 00 25 00 00.. .db $00, $48, $09, $00, $00, $25, $00, $00, $00, $45, $02, $49, $00, $45, $08, $00
0AF18 00 25 00 00 01 47 00 4A.. .db $00, $25, $00, $00, $01, $47, $00, $4a, $01, $47, $08, $00, $00, $25, $00, $0b
0AF28 01 47 00 4B 00 70 00 47.. .db $01, $47, $00, $4b, $00, $70, $00, $47, $00, $0b, $07, $00, $00, $61, $06, $63
0AF38 00 61 04 00 0F 90 0F 91.. .db $00, $61, $04, $00, $0f, $90, $0f, $91, $0f, $00, $00, $80, $03, $81, $00, $82
0AF48 09 00 00 83 03 84 00 85.. .db $09, $00, $00, $83, $03, $84, $00, $85, $14, $00, $00, $80, $01, $81, $00, $82
0AF58 0B 00 00 83 01 84 00 85.. .db $0b, $00, $00, $83, $01, $84, $00, $85, $0a, $00, $01, $c7, $2c, $00, $03, $4d
0AF68 01 00 00 D6 07 00 07 D6.. .db $01, $00, $00, $d6, $07, $00, $07, $d6, $06, $00, $08, $d6, $05, $90, $09, $d6
0AF78 04 91 0A D6               .db $04, $91, $0a, $d60AF7C FD                              .db $fd
0AF7D                           	  
0AF7D                           ;level 4-3
0AF7D                           L_GroundArea13:
0AF7D 90 51                           .db $90, $51
0AF7F                                 include "code\leveldata\levels\4-3.asm"
0AF7F                           
0AF7F 22 00 00 80 02 81 00 82.. .db $22, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83, $02, $84, $00, $85
0AF8F 02 00 00 80 03 81 0A 00.. .db $02, $00, $00, $80, $03, $81, $0a, $00, $00, $83, $03, $84, $10, $00, $02, $45
0AF9F 06 00 03 45 01 00 00 46.. .db $06, $00, $03, $45, $01, $00, $00, $46, $00, $47, $00, $48, $01, $00, $01, $c0
0AFAF 00 C1 01 00 03 47 00 00.. .db $00, $c1, $01, $00, $03, $47, $00, $00, $00, $45, $02, $49, $00, $45, $05, $00
0AFBF 03 47 00 00 01 47 00 4A.. .db $03, $47, $00, $00, $01, $47, $00, $4a, $01, $47, $05, $00, $03, $47, $00, $00
0AFCF 01 47 00 4B 00 70 00 47.. .db $01, $47, $00, $4b, $00, $70, $00, $47, $00, $00, $00, $02, $02, $03, $25, $d6
0AFDF 0C 00 00 80 01 81 0C 00.. .db $0c, $00, $00, $80, $01, $81, $0c, $00, $00, $83, $01, $84, $02, $00, $00, $80
0AFEF 02 81 00 82 07 00 00 82.. .db $02, $81, $00, $82, $07, $00, $00, $82, $01, $00, $00, $83, $02, $84, $00, $85
0AFFF 07 00 00 85 12 00 00 D9.. .db $07, $00, $00, $85, $12, $00, $00, $d9, $00, $da, $00, $db, $0d, $00, $00, $4e
0B00F 05 00 03 45 04 00 00 4E.. .db $05, $00, $03, $45, $04, $00, $00, $4e, $05, $00, $03, $47, $04, $00, $00, $4e
0B01F 05 00 03 47 03 00 00 4D.. .db $05, $00, $03, $47, $03, $00, $00, $4d, $00, $4e, $00, $4d, $03, $00, $00, $4d
0B02F 03 47 03 00 02 D6 03 00.. .db $03, $47, $03, $00, $02, $d6, $03, $00, $04, $d6, $03, $90, $02, $d6, $03, $90
0B03F 04 D6 03 91 02 D6 03 91.. .db $04, $d6, $03, $91, $02, $d6, $03, $91, $04, $d6, $00, $81, $00, $82, $0d, $00
0B04F 00 84 00 85 07 00 00 80.. .db $00, $84, $00, $85, $07, $00, $00, $80, $00, $81, $00, $82, $00, $c0, $0b, $00
0B05F 00 83 00 84 00 85 05 00.. .db $00, $83, $00, $84, $00, $85, $05, $00, $00, $80, $00, $81, $00, $82, $02, $c2
0B06F 09 00 00 83 00 84 00 85.. .db $09, $00, $00, $83, $00, $84, $00, $85, $14, $00, $00, $19, $02, $1a, $00, $1b
0B07F 0C 00 00 4F 04 00 00 61.. .db $0c, $00, $00, $4f, $04, $00, $00, $61, $00, $00, $00, $19, $02, $1a, $00, $1b
0B08F 02 00 00 50 03 00 01 61.. .db $02, $00, $00, $50, $03, $00, $01, $61, $02, $0b, $00, $4f, $04, $00, $00, $50
0B09F 01 00 00 4D 02 61 02 63.. .db $01, $00, $00, $4d, $02, $61, $02, $63, $00, $50, $04, $00, $00, $50, $01, $00
0B0AF 03 D6 02 00 00 50 04 00.. .db $03, $d6, $02, $00, $00, $50, $04, $00, $00, $50, $01, $00, $03, $d6, $0b, $90
0B0BF 03 D6 0B 91 0A 00 00 80.. .db $03, $d6, $0b, $91, $0a, $00, $00, $80, $01, $81, $00, $82, $07, $00, $01, $c2
0B0CF 01 00 00 83 01 84 00 85.. .db $01, $00, $00, $83, $01, $84, $00, $85, $01, $00, $00, $c2, $00, $00, $00, $80
0B0DF 00 81 00 82 00 C2 01 00.. .db $00, $81, $00, $82, $00, $c2, $01, $00, $00, $c2, $03, $00, $00, $c2, $03, $00
0B0EF 00 83 00 84 00 85 1C 00.. .db $00, $83, $00, $84, $00, $85, $1c, $00, $02, $61, $03, $00, $02, $61, $06, $00
0B0FF 00 4E 05 00 00 4E 07 00.. .db $00, $4e, $05, $00, $00, $4e, $07, $00, $00, $4e, $05, $00, $00, $4e, $07, $00
0B10F 00 4E 05 00 00 4E 07 00.. .db $00, $4e, $05, $00, $00, $4e, $07, $00, $00, $4e, $05, $00, $00, $4e, $07, $00
0B11F 00 4E 05 00 00 4E 03 00.. .db $00, $4e, $05, $00, $00, $4e, $03, $00, $0f, $90, $0f, $91, $0f, $00, $00, $80
0B12F 03 81 00 82 09 00 00 83.. .db $03, $81, $00, $82, $09, $00, $00, $83, $03, $84, $00, $85, $0b, $00, $00, $d9
0B13F 00 DA 00 DB 03 00 00 80.. .db $00, $da, $00, $db, $03, $00, $00, $80, $02, $81, $00, $82, $04, $00, $00, $4e
0B14F 04 00 00 83 02 84 00 85.. .db $04, $00, $00, $83, $02, $84, $00, $85, $04, $00, $00, $4e, $03, $00, $00, $d9
0B15F 00 DA 00 DB 00 00 00 D9.. .db $00, $da, $00, $db, $00, $00, $00, $d9, $00, $da, $00, $db, $00, $00, $00, $d6
0B16F 01 4D 00 4E 04 00 00 4E.. .db $01, $4d, $00, $4e, $04, $00, $00, $4e, $02, $00, $00, $4e, $01, $00, $02, $d6
0B17F 00 4E 04 00 00 4E 02 00.. .db $00, $4e, $04, $00, $00, $4e, $02, $00, $00, $4e, $00, $00, $00, $5f, $04, $d6
0B18F 00 03 00 04 01 00 00 4E.. .db $00, $03, $00, $04, $01, $00, $00, $4e, $02, $00, $00, $4e, $01, $00, $06, $d6
0B19F 01 4D 00 4E 00 02 00 03.. .db $01, $4d, $00, $4e, $00, $02, $00, $03, $00, $04, $00, $4e, $01, $4d, $2f, $d6
0B1AF 03 00 00 80 01 81 00 82.. .db $03, $00, $00, $80, $01, $81, $00, $82, $08, $00, $01, $c0, $00, $00, $00, $83
0B1BF 01 84 00 85 0F 00 00 D9.. .db $01, $84, $00, $85, $0f, $00, $00, $d9, $00, $da, $00, $db, $01, $00, $00, $80
0B1CF 00 81 00 82 04 00 01 C2.. .db $00, $81, $00, $82, $04, $00, $01, $c2, $01, $00, $00, $4e, $02, $00, $00, $83
0B1DF 00 84 00 85 00 00 01 4D.. .db $00, $84, $00, $85, $00, $00, $01, $4d, $05, $00, $00, $4e, $01, $00, $01, $c2
0B1EF 01 00 03 D6 04 00 00 4E.. .db $01, $00, $03, $d6, $04, $00, $00, $4e, $05, $00, $03, $d6, $04, $00, $00, $4e
0B1FF 05 00 03 D6 03 90 02 D6.. .db $05, $00, $03, $d6, $03, $90, $02, $d6, $03, $00, $00, $02, $03, $d6, $03, $91
0B20F 02 D6 03 90 04 D6 03 91.. .db $02, $d6, $03, $90, $04, $d6, $03, $91, $02, $d6, $03, $91, $30, $d6, $02, $00
0B21F 00 80 02 81 00 82 01 00.. .db $00, $80, $02, $81, $00, $82, $01, $00, $00, $26, $01, $00, $00, $c7, $04, $00
0B22F 00 83 02 84 00 85 01 00.. .db $00, $83, $02, $84, $00, $85, $01, $00, $00, $26, $0b, $00, $00, $80, $00, $81
0B23F 00 82 00 26 0B 00 00 83.. .db $00, $82, $00, $26, $0b, $00, $00, $83, $00, $84, $00, $85, $00, $26, $00, $00
0B24F 02 61 02 00 00 D9 00 DA.. .db $02, $61, $02, $00, $00, $d9, $00, $da, $00, $db, $04, $00, $00, $26, $07, $00
0B25F 00 4E 02 00 00 D9 00 DA.. .db $00, $4e, $02, $00, $00, $d9, $00, $da, $00, $db, $00, $26, $00, $d9, $00, $da
0B26F 00 DB 04 00 00 4E 00 00.. .db $00, $db, $04, $00, $00, $4e, $00, $00, $01, $c2, $00, $00, $00, $4e, $00, $00
0B27F 00 26 00 00 00 4E 00 00.. .db $00, $26, $00, $00, $00, $4e, $00, $00, $01, $c2, $00, $03, $00, $04, $00, $00
0B28F 00 4E 03 00 00 4E 00 00.. .db $00, $4e, $03, $00, $00, $4e, $00, $00, $00, $26, $00, $00, $00, $4e, $02, $00
0B29F 01 D6 00 4D 00 4E 03 00.. .db $01, $d6, $00, $4d, $00, $4e, $03, $00, $00, $4e, $00, $00, $00, $26, $00, $00
0B2AF 00 4E 02 00 04 D6 02 4D.. .db $00, $4e, $02, $00, $04, $d6, $02, $4d, $00, $4e, $00, $4d, $00, $26, $00, $4d
0B2BF 00 4E 00 02 01 03 2F D6.. .db $00, $4e, $00, $02, $01, $03, $2f, $d6, $0a, $00, $01, $c2, $07, $00, $00, $80
0B2CF 02 81 00 82 0A 00 00 83.. .db $02, $81, $00, $82, $0a, $00, $00, $83, $02, $84, $00, $85, $06, $00, $00, $80
0B2DF 01 81 00 82 07 00 00 CC.. .db $01, $81, $00, $82, $07, $00, $00, $cc, $00, $cd, $01, $00, $00, $83, $01, $84
0B2EF 00 85 03 00 00 CC 00 CD.. .db $00, $85, $03, $00, $00, $cc, $00, $cd, $01, $61, $00, $ce, $00, $d7, $00, $00
0B2FF 00 D9 00 DA 00 DB 05 00.. .db $00, $d9, $00, $da, $00, $db, $05, $00, $00, $ce, $00, $d7, $01, $61, $00, $ce
0B30F 00 D7 01 00 00 4E 05 00.. .db $00, $d7, $01, $00, $00, $4e, $05, $00, $00, $4d, $05, $d6, $00, $4d, $00, $00
0B31F 00 4E 04 00 08 D6 00 00.. .db $00, $4e, $04, $00, $08, $d6, $00, $00, $00, $4e, $03, $00, $09, $d6, $00, $04
0B32F 00 4E 02 4D 3A D6 06 00.. .db $00, $4e, $02, $4d, $3a, $d6, $06, $00, $00, $80, $01, $81, $00, $82, $0b, $00
0B33F 00 83 01 84 00 85 05 00.. .db $00, $83, $01, $84, $00, $85, $05, $00, $00, $80, $00, $81, $00, $82, $06, $00
0B34F 00 C0 01 00 00 C0 01 00.. .db $00, $c0, $01, $00, $00, $c0, $01, $00, $00, $83, $00, $84, $00, $85, $01, $c0
0B35F 23 00 05 0B 00 00 05 0B.. .db $23, $00, $05, $0b, $00, $00, $05, $0b, $02, $00, $05, $63, $00, $d6, $05, $63
0B36F 08 00 01 D6 0D 00 02 D6.. .db $08, $00, $01, $d6, $0d, $00, $02, $d6, $0c, $00, $03, $d6, $0b, $90, $04, $d6
0B37F 0A 91 05 D6 09 91 03 00.. .db $0a, $91, $05, $d6, $09, $91, $03, $00, $00, $c1, $12, $00, $00, $80, $00, $81
0B38F 00 82 00 D9 00 DA 00 DB.. .db $00, $82, $00, $d9, $00, $da, $00, $db, $00, $00, $00, $d9, $07, $00, $00, $83
0B39F 00 84 00 85 00 00 00 4E.. .db $00, $84, $00, $85, $00, $00, $00, $4e, $05, $00, $02, $0b, $05, $00, $00, $4e
0B3AF 05 00 02 63 02 00 01 4D.. .db $05, $00, $02, $63, $02, $00, $01, $4d, $00, $00, $00, $4e, $04, $00, $00, $80
0B3BF 02 81 00 82 01 00 01 D6.. .db $02, $81, $00, $82, $01, $00, $01, $d6, $00, $00, $00, $4e, $00, $02, $00, $03
0B3CF 00 04 01 00 00 83 02 84.. .db $00, $04, $01, $00, $00, $83, $02, $84, $00, $85, $01, $00, $06, $d6, $08, $00
0B3DF 06 D6 08 00 06 D6 08 00.. .db $06, $d6, $08, $00, $06, $d6, $08, $00, $06, $d6, $08, $90, $06, $d6, $08, $91
0B3EF 06 D6 08 91 06 D6 0D 00.. .db $06, $d6, $08, $91, $06, $d6, $0d, $00, $00, $80, $00, $81, $00, $da, $00, $db
0B3FF 01 00 00 80 03 81 00 82.. .db $01, $00, $00, $80, $03, $81, $00, $82, $03, $00, $00, $83, $00, $84, $00, $4e
0B40F 02 00 00 83 03 84 00 85.. .db $02, $00, $00, $83, $03, $84, $00, $85, $05, $00, $00, $4e, $02, $00, $02, $c0
0B41F 07 00 00 C2 00 4E 08 00.. .db $07, $00, $00, $c2, $00, $4e, $08, $00, $00, $c1, $01, $c0, $02, $00, $00, $4e
0B42F 0E 00 01 D6 02 4D 00 02.. .db $0e, $00, $01, $d6, $02, $4d, $00, $02, $01, $03, $00, $04, $06, $00, $08, $d6
0B43F 01 4D 00 02 00 03 00 04.. .db $01, $4d, $00, $02, $00, $03, $00, $04, $00, $cc, $00, $cd, $0d, $d6, $00, $ce
0B44F 00 D7 3F D6 00 82 0E 00.. .db $00, $d7, $3f, $d6, $00, $82, $0e, $00, $00, $85, $0a, $00, $00, $80, $01, $81
0B45F 00 82 00 00 01 C2 00 00.. .db $00, $82, $00, $00, $01, $c2, $00, $00, $00, $d9, $00, $da, $00, $db, $04, $00
0B46F 00 83 01 84 00 85 00 C2.. .db $00, $83, $01, $84, $00, $85, $00, $c2, $03, $00, $00, $4e, $00, $00, $02, $c2
0B47F 00 D9 00 DA 00 DB 00 00.. .db $00, $d9, $00, $da, $00, $db, $00, $00, $01, $c2, $04, $00, $00, $4e, $04, $00
0B48F 00 4E 05 00 00 CC 00 CD.. .db $00, $4e, $05, $00, $00, $cc, $00, $cd, $00, $00, $00, $4e, $04, $00, $00, $4e
0B49F 03 00 00 CC 00 CD 00 CE.. .db $03, $00, $00, $cc, $00, $cd, $00, $ce, $00, $d7, $00, $00, $00, $4e, $01, $4d
0B4AF 02 00 00 4E 00 00 00 CC.. .db $02, $00, $00, $4e, $00, $00, $00, $cc, $00, $cd, $00, $00, $00, $ce, $00, $d7
0B4BF 00 CE 00 D7 03 D6 01 03.. .db $00, $ce, $00, $d7, $03, $d6, $01, $03, $00, $04, $00, $4e, $00, $4d, $00, $ce
0B4CF 00 D7 00 CC 00 CE 00 D7.. .db $00, $d7, $00, $cc, $00, $ce, $00, $d7, $00, $ce, $00, $d7, $0a, $d6, $00, $ce
0B4DF 3F D6 0B 00 00 80 01 81.. .db $3f, $d6, $0b, $00, $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84
0B4EF 00 85 13 00 00 80 02 81.. .db $00, $85, $13, $00, $00, $80, $02, $81, $00, $82, $06, $00, $01, $c2, $01, $00
0B4FF 00 83 02 84 00 85 1A 00.. .db $00, $83, $02, $84, $00, $85, $1a, $00, $00, $c0, $01, $00, $00, $d9, $00, $da
0B50F 00 DB 00 C2 00 D9 00 DA.. .db $00, $db, $00, $c2, $00, $d9, $00, $da, $00, $db, $00, $c2, $00, $d9, $00, $cd
0B51F 06 00 00 4E 02 00 00 4E.. .db $06, $00, $00, $4e, $02, $00, $00, $4e, $02, $00, $00, $d7, $00, $cc, $00, $cd
0B52F 04 00 00 4E 02 00 00 4E.. .db $04, $00, $00, $4e, $02, $00, $00, $4e, $02, $00, $00, $d6, $00, $ce, $00, $d7
0B53F 00 02 00 03 00 04 01 00.. .db $00, $02, $00, $03, $00, $04, $01, $00, $00, $4e, $02, $00, $00, $4e, $02, $00
0B54F 05 D6 01 4D 00 4E 00 02.. .db $05, $d6, $01, $4d, $00, $4e, $00, $02, $00, $03, $00, $04, $00, $4e, $00, $02
0B55F 00 03 00 04 1F D6 19 00.. .db $00, $03, $00, $04, $1f, $d6, $19, $00, $00, $80, $02, $81, $00, $82, $0a, $00
0B56F 00 83 02 84 00 85 24 00.. .db $00, $83, $02, $84, $00, $85, $24, $00, $00, $80, $01, $81, $00, $82, $04, $00
0B57F 02 0B 00 DA 00 DB 01 00.. .db $02, $0b, $00, $da, $00, $db, $01, $00, $00, $83, $01, $84, $00, $85, $04, $00
0B58F 02 63 00 4E 04 00 04 0B.. .db $02, $63, $00, $4e, $04, $00, $04, $0b, $04, $00, $00, $4e, $03, $00, $00, $61
0B59F 04 63 04 00 00 4E 02 00.. .db $04, $63, $04, $00, $00, $4e, $02, $00, $01, $61, $09, $00, $00, $4e, $01, $4d
0B5AF 02 61 09 90 05 D6 09 91.. .db $02, $61, $09, $90, $05, $d6, $09, $91, $05, $d6, $09, $91, $02, $00, $00, $24
0B5BF 05 00 02 45 05 00 00 25.. .db $05, $00, $02, $45, $05, $00, $00, $25, $05, $00, $00, $46, $00, $47, $00, $48
0B5CF 00 00 00 80 00 81 02 00.. .db $00, $00, $00, $80, $00, $81, $02, $00, $00, $25, $04, $00, $00, $45, $02, $49
0B5DF 00 45 00 83 00 84 02 00.. .db $00, $45, $00, $83, $00, $84, $02, $00, $00, $25, $00, $00, $00, $80, $00, $81
0B5EF 00 82 00 00 01 47 00 4A.. .db $00, $82, $00, $00, $01, $47, $00, $4a, $01, $47, $04, $00, $00, $25, $00, $00
0B5FF 00 83 00 84 00 85 00 00.. .db $00, $83, $00, $84, $00, $85, $00, $00, $01, $47, $00, $4b, $00, $70, $00, $47
0B60F 04 00 00 25 02 00 01 45.. .db $04, $00, $00, $25, $02, $00, $01, $45, $04, $49, $01, $45, $02, $00, $00, $25
0B61F 02 00 02 47 00 4A 00 47.. .db $02, $00, $02, $47, $00, $4a, $00, $47, $00, $4a, $02, $47, $02, $00, $00, $25
0B62F 02 00 02 47 00 4B 00 47.. .db $02, $00, $02, $47, $00, $4b, $00, $47, $00, $4b, $02, $47, $02, $00, $00, $25
0B63F 02 00 08 47 02 00 00 25.. .db $02, $00, $08, $47, $02, $00, $00, $25, $02, $00, $01, $47, $00, $4a, $00, $47
0B64F 00 4A 00 47 00 4A 01 47.. .db $00, $4a, $00, $47, $00, $4a, $01, $47, $02, $90, $00, $61, $00, $03, $00, $04
0B65F 00 4D 01 47 00 4B 00 70.. .db $00, $4d, $01, $47, $00, $4b, $00, $70, $00, $4b, $00, $47, $00, $4b, $01, $47
0B66F 02 91 0C D6 02 91 0C D6.. .db $02, $91, $0c, $d6, $02, $91, $0c, $d6, $0f, $00, $00, $82, $0a, $00, $00, $80
0B67F 00 81 00 82 00 00 00 85.. .db $00, $81, $00, $82, $00, $00, $00, $85, $0a, $00, $00, $83, $00, $84, $00, $85
0B68F 25 00 00 80 00 81 00 82.. .db $25, $00, $00, $80, $00, $81, $00, $82, $0c, $00, $00, $83, $00, $84, $00, $85
0B69F 37 00 03 4D 0B 00 1F D6   .db $37, $00, $03, $4d, $0b, $00, $1f, $d60B6A7 FD                              .db $fd	  
0B6A8                           
0B6A8                           L42:
0B6A8 52 61                     	  .db $52, $61
0B6AA                           	  include "code\leveldata\levels\4-2.asm"
0B6AA                           
0B6AA 11 00 00 80 02 81 00 82.. .db $11, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83, $02, $84, $00, $85
0B6BA 05 00 00 80 00 81 00 82.. .db $05, $00, $00, $80, $00, $81, $00, $82, $0c, $00, $00, $83, $00, $84, $00, $85
0B6CA 10 00 02 45 0C 00 00 46.. .db $10, $00, $02, $45, $0c, $00, $00, $46, $00, $47, $00, $48, $04, $00, $01, $c0
0B6DA 00 C1 03 00 00 45 02 49.. .db $00, $c1, $03, $00, $00, $45, $02, $49, $00, $45, $0a, $00, $01, $47, $00, $4a
0B6EA 01 47 0A 00 01 47 00 4B.. .db $01, $47, $0a, $00, $01, $47, $00, $4b, $00, $70, $00, $47, $09, $0b, $00, $00
0B6FA 0E 63 00 00 0F 90 0F 91.. .db $0e, $63, $00, $00, $0f, $90, $0f, $91, $33, $00, $00, $80, $02, $81, $00, $82
0B70A 03 00 00 D9 00 DA 00 DB.. .db $03, $00, $00, $d9, $00, $da, $00, $db, $03, $00, $00, $83, $02, $84, $00, $85
0B71A 00 D9 00 DA 00 DB 01 00.. .db $00, $d9, $00, $da, $00, $db, $01, $00, $00, $4e, $0a, $00, $00, $4e, $02, $c2
0B72A 00 4E 0A 00 00 4E 02 00.. .db $00, $4e, $0a, $00, $00, $4e, $02, $00, $00, $4e, $0a, $00, $00, $4e, $02, $00
0B73A 00 4E 0A 00 00 4E 00 00.. .db $00, $4e, $0a, $00, $00, $4e, $00, $00, $03, $d6, $04, $00, $00, $cc, $00, $cd
0B74A 00 02 01 03 05 D6 03 00.. .db $00, $02, $01, $03, $05, $d6, $03, $00, $00, $4d, $00, $ce, $00, $d7, $08, $d6
0B75A 03 90 0B D6 00 91 0E D6.. .db $03, $90, $0b, $d6, $00, $91, $0e, $d6, $0f, $00, $00, $80, $02, $81, $00, $82
0B76A 0A 00 00 83 02 84 00 85.. .db $0a, $00, $00, $83, $02, $84, $00, $85, $06, $00, $02, $c2, $09, $00, $00, $80
0B77A 00 81 00 82 0C 00 00 83.. .db $00, $81, $00, $82, $0c, $00, $00, $83, $00, $84, $00, $85, $09, $00, $00, $d9
0B78A 00 DA 00 DB 0D 00 00 4E.. .db $00, $da, $00, $db, $0d, $00, $00, $4e, $02, $00, $04, $51, $01, $00, $00, $cc
0B79A 00 CD 02 00 00 4E 07 00.. .db $00, $cd, $02, $00, $00, $4e, $07, $00, $01, $4d, $00, $ce, $00, $d7, $00, $cc
0B7AA 00 CD 00 00 00 4E 07 00.. .db $00, $cd, $00, $00, $00, $4e, $07, $00, $01, $d6, $00, $ce, $00, $d7, $00, $ce
0B7BA 00 D7 00 00 00 4E 00 00.. .db $00, $d7, $00, $00, $00, $4e, $00, $00, $00, $02, $01, $03, $00, $04, $02, $00
0B7CA 2F D6 13 00 00 80 02 81.. .db $2f, $d6, $13, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83, $02, $84
0B7DA 00 85 12 00 00 61 02 C0.. .db $00, $85, $12, $00, $00, $61, $02, $c0, $0a, $00, $01, $61, $04, $00, $00, $d9
0B7EA 00 DA 00 DB 04 00 02 61.. .db $00, $da, $00, $db, $04, $00, $02, $61, $05, $00, $00, $4e, $04, $00, $03, $61
0B7FA 00 00 01 4D 02 00 00 4E.. .db $00, $00, $01, $4d, $02, $00, $00, $4e, $01, $00, $00, $61, $00, $cc, $00, $cd
0B80A 02 61 03 D6 02 00 00 4E.. .db $02, $61, $03, $d6, $02, $00, $00, $4e, $00, $00, $01, $61, $00, $ce, $00, $d7
0B81A 00 61 05 D6 02 4D 00 4E.. .db $00, $61, $05, $d6, $02, $4d, $00, $4e, $02, $61, $00, $ce, $00, $d7, $24, $d6
0B82A 01 90 0B D6 03 91 20 00.. .db $01, $90, $0b, $d6, $03, $91, $20, $00, $00, $d9, $00, $da, $00, $db, $05, $00
0B83A 00 80 03 81 00 82 00 C1.. .db $00, $80, $03, $81, $00, $82, $00, $c1, $00, $00, $00, $4e, $00, $00, $02, $51
0B84A 02 00 00 83 03 84 00 85.. .db $02, $00, $00, $83, $03, $84, $00, $85, $01, $00, $00, $4e, $04, $00, $01, $c2
0B85A 07 00 00 4E 0E 00 00 4E.. .db $07, $00, $00, $4e, $0e, $00, $00, $4e, $01, $00, $01, $4d, $03, $00, $00, $cc
0B86A 00 CD 02 00 06 D6 00 02.. .db $00, $cd, $02, $00, $06, $d6, $00, $02, $01, $03, $00, $04, $00, $ce, $00, $d7
0B87A 02 00 0A D6 00 CE 00 D7.. .db $02, $00, $0a, $d6, $00, $ce, $00, $d7, $00, $00, $00, $cc, $00, $cd, $01, $d6
0B88A 02 00 08 D6 00 CE 00 D7.. .db $02, $00, $08, $d6, $00, $ce, $00, $d7, $05, $00, $09, $d6, $07, $90, $07, $d6
0B89A 08 91 06 D6 00 80 00 81.. .db $08, $91, $06, $d6, $00, $80, $00, $81, $00, $82, $0c, $00, $00, $83, $00, $84
0B8AA 00 85 01 61 0D 00 00 CE.. .db $00, $85, $01, $61, $0d, $00, $00, $ce, $00, $d7, $0d, $00, $00, $ce, $00, $d7
0B8BA 06 00 00 D9 00 DA 00 DB.. .db $06, $00, $00, $d9, $00, $da, $00, $db, $03, $00, $00, $ce, $00, $d7, $01, $00
0B8CA 00 80 01 81 00 82 01 00.. .db $00, $80, $01, $81, $00, $82, $01, $00, $00, $4e, $00, $00, $00, $c0, $02, $00
0B8DA 00 CE 00 D7 01 00 00 83.. .db $00, $ce, $00, $d7, $01, $00, $00, $83, $01, $84, $00, $85, $01, $00, $00, $4e
0B8EA 04 00 00 D0 00 D1 07 00.. .db $04, $00, $00, $d0, $00, $d1, $07, $00, $00, $4e, $0b, $00, $00, $cc, $00, $cd
0B8FA 00 00 00 4E 02 00 01 C2.. .db $00, $00, $00, $4e, $02, $00, $01, $c2, $01, $00, $01, $c2, $01, $00, $00, $61
0B90A 00 CE 00 D7 03 D6 07 00.. .db $00, $ce, $00, $d7, $03, $d6, $07, $00, $01, $61, $06, $d6, $00, $00, $00, $02
0B91A 01 03 00 04 00 00 00 61.. .db $01, $03, $00, $04, $00, $00, $00, $61, $06, $d6, $00, $90, $0d, $d6, $01, $91
0B92A 0D D6 01 91 13 00 00 80.. .db $0d, $d6, $01, $91, $13, $00, $00, $80, $02, $81, $00, $82, $03, $00, $00, $d9
0B93A 00 DA 00 DB 03 00 00 83.. .db $00, $da, $00, $db, $03, $00, $00, $83, $02, $84, $00, $85, $04, $00, $00, $4e
0B94A 06 00 00 D9 00 DA 00 DB.. .db $06, $00, $00, $d9, $00, $da, $00, $db, $01, $00, $00, $80, $00, $81, $00, $82
0B95A 00 4E 00 00 00 C0 00 00.. .db $00, $4e, $00, $00, $00, $c0, $00, $00, $00, $c2, $00, $00, $01, $c0, $00, $00
0B96A 00 4E 02 00 00 83 00 84.. .db $00, $4e, $02, $00, $00, $83, $00, $84, $00, $85, $00, $4e, $07, $00, $00, $4e
0B97A 05 00 00 4E 00 4D 06 00.. .db $05, $00, $00, $4e, $00, $4d, $06, $00, $00, $4e, $00, $00, $00, $cc, $00, $cd
0B98A 00 03 00 04 02 D6 04 0B.. .db $00, $03, $00, $04, $02, $d6, $04, $0b, $01, $00, $00, $4e, $00, $00, $00, $ce
0B99A 00 D7 04 D6 04 63 0A D6.. .db $00, $d7, $04, $d6, $04, $63, $0a, $d6, $04, $00, $09, $d6, $00, $00, $05, $90
0B9AA 07 D6 01 90 06 91 05 D6.. .db $07, $d6, $01, $90, $06, $91, $05, $d6, $09, $91, $04, $d6, $03, $91, $18, $00
0B9BA 00 80 02 81 00 82 03 00.. .db $00, $80, $02, $81, $00, $82, $03, $00, $03, $c2, $02, $00, $00, $83, $02, $84
0B9CA 00 85 0E 00 02 C0 0F 00.. .db $00, $85, $0e, $00, $02, $c0, $0f, $00, $00, $4d, $05, $0b, $01, $4d, $00, $cc
0B9DA 00 CD 04 00 00 D6 05 63.. .db $00, $cd, $04, $00, $00, $d6, $05, $63, $01, $d6, $00, $ce, $00, $d7, $04, $00
0B9EA 00 D6 05 00 04 D6 03 C8.. .db $00, $d6, $05, $00, $04, $d6, $03, $c8, $08, $00, $05, $d6, $00, $d8, $08, $00
0B9FA 00 CE 05 D6 08 90 00 CE.. .db $00, $ce, $05, $d6, $08, $90, $00, $ce, $00, $d7, $04, $d6, $08, $91, $00, $ce
0BA0A 00 D7 00 91 03 D6 08 91.. .db $00, $d7, $00, $91, $03, $d6, $08, $91, $00, $ce, $00, $d7, $00, $91, $03, $d6
0BA1A 2B 00 00 80 02 81 00 C1.. .db $2b, $00, $00, $80, $02, $81, $00, $c1, $01, $00, $00, $80, $00, $81, $00, $82
0BA2A 05 00 00 83 02 84 02 00.. .db $05, $00, $00, $83, $02, $84, $02, $00, $00, $83, $00, $84, $00, $85, $0c, $00
0BA3A 00 D9 00 DA 00 DB 08 00.. .db $00, $d9, $00, $da, $00, $db, $08, $00, $00, $d9, $03, $00, $00, $4e, $01, $c2
0BA4A 08 00 01 C8 00 DC 00 00.. .db $08, $00, $01, $c8, $00, $dc, $00, $00, $00, $4e, $0a, $00, $01, $d8, $00, $dd
0BA5A 00 00 00 4E 05 00 00 CC.. .db $00, $00, $00, $4e, $05, $00, $00, $cc, $00, $cd, $00, $61, $01, $00, $02, $d6
0BA6A 00 00 00 4E 03 00 00 CC.. .db $00, $00, $00, $4e, $03, $00, $00, $cc, $00, $cd, $00, $ce, $00, $d7, $01, $61
0BA7A 00 00 05 D6 00 02 00 03.. .db $00, $00, $05, $d6, $00, $02, $00, $03, $00, $04, $00, $ce, $00, $d7, $00, $ce
0BA8A 00 D7 02 61 1F D6 1F 00.. .db $00, $d7, $02, $61, $1f, $d6, $1f, $00, $00, $82, $06, $00, $00, $80, $01, $81
0BA9A 00 82 03 00 00 85 06 00.. .db $00, $82, $03, $00, $00, $85, $06, $00, $00, $83, $01, $84, $00, $85, $00, $00
0BAAA 02 C2 04 00 00 55 04 51.. .db $02, $c2, $04, $00, $00, $55, $04, $51, $04, $00, $00, $da, $00, $db, $0d, $00
0BABA 00 4E 0B 00 00 02 00 03.. .db $00, $4e, $0b, $00, $00, $02, $00, $03, $00, $04, $00, $4e, $07, $00, $02, $4d
0BACA 03 D6 00 4E 00 00 00 CC.. .db $03, $d6, $00, $4e, $00, $00, $00, $cc, $00, $cd, $00, $02, $02, $03, $07, $d6
0BADA 00 4E 00 00 00 CE 00 D7.. .db $00, $4e, $00, $00, $00, $ce, $00, $d7, $09, $d6, $01, $00, $0a, $d6, $04, $00
0BAEA 09 D6 05 90 07 D6 07 91.. .db $09, $d6, $05, $90, $07, $d6, $07, $91, $10, $00, $00, $80, $00, $81, $00, $82
0BAFA 0C 00 00 83 00 84 00 85.. .db $0c, $00, $00, $83, $00, $84, $00, $85, $00, $d9, $00, $da, $00, $db, $00, $d9
0BB0A 00 DA 00 DB 01 00 00 80.. .db $00, $da, $00, $db, $01, $00, $00, $80, $01, $81, $00, $82, $04, $00, $00, $4e
0BB1A 01 00 00 4E 02 00 00 83.. .db $01, $00, $00, $4e, $02, $00, $00, $83, $01, $84, $00, $85, $04, $00, $00, $4e
0BB2A 01 00 00 4E 05 00 00 61.. .db $01, $00, $00, $4e, $05, $00, $00, $61, $01, $00, $00, $cc, $00, $cd, $00, $00
0BB3A 00 4E 01 00 00 4E 04 00.. .db $00, $4e, $01, $00, $00, $4e, $04, $00, $01, $61, $01, $4d, $00, $ce, $00, $d7
0BB4A 00 00 00 4E 01 4D 00 4E.. .db $00, $00, $00, $4e, $01, $4d, $00, $4e, $00, $00, $00, $cc, $00, $cd, $00, $00
0BB5A 02 61 09 D6 00 CE 00 D7.. .db $02, $61, $09, $d6, $00, $ce, $00, $d7, $03, $61, $0f, $d6, $01, $00, $00, $ce
0BB6A 00 D7 0B D6 01 00 00 CE.. .db $00, $d7, $0b, $d6, $01, $00, $00, $ce, $00, $d7, $03, $00, $07, $d6, $01, $90
0BB7A 00 CE 00 D7 06 90 04 D6.. .db $00, $ce, $00, $d7, $06, $90, $04, $d6, $01, $91, $00, $ce, $00, $d7, $0a, $91
0BB8A 00 D6 19 00 00 80 02 81.. .db $00, $d6, $19, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83, $02, $84
0BB9A 00 85 01 00 02 4D 01 00.. .db $00, $85, $01, $00, $02, $4d, $01, $00, $01, $4d, $07, $00, $07, $61, $00, $d9
0BBAA 00 DA 00 DB 0A 00 00 D0.. .db $00, $da, $00, $db, $0a, $00, $00, $d0, $00, $d1, $00, $00, $00, $4e, $05, $00
0BBBA 00 C7 00 00 02 C2 03 00.. .db $00, $c7, $00, $00, $02, $c2, $03, $00, $00, $4e, $02, $00, $00, $61, $01, $51
0BBCA 01 00 02 C2 03 00 00 4E.. .db $01, $00, $02, $c2, $03, $00, $00, $4e, $01, $00, $01, $61, $01, $00, $00, $4d
0BBDA 00 02 02 03 00 04 00 CC.. .db $00, $02, $02, $03, $00, $04, $00, $cc, $00, $cd, $00, $00, $00, $4e, $00, $00
0BBEA 02 61 01 00 09 D6 03 61.. .db $02, $61, $01, $00, $09, $d6, $03, $61, $00, $03, $00, $04, $2f, $d6, $1d, $00
0BBFA 00 80 00 81 0D 00 00 83.. .db $00, $80, $00, $81, $0d, $00, $00, $83, $00, $84, $14, $00, $00, $80, $01, $81
0BC0A 00 82 0B 00 00 83 01 84.. .db $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85, $06, $00, $01, $51, $0a, $00
0BC1A 02 45 09 00 00 CC 00 CD.. .db $02, $45, $09, $00, $00, $cc, $00, $cd, $00, $00, $02, $47, $03, $00, $00, $cc
0BC2A 00 CD 03 00 00 CE 00 D7.. .db $00, $cd, $03, $00, $00, $ce, $00, $d7, $00, $00, $02, $47, $01, $4d, $01, $00
0BC3A 00 CE 00 D7 00 00 00 CC.. .db $00, $ce, $00, $d7, $00, $00, $00, $cc, $00, $cd, $00, $00, $00, $ce, $00, $d7
0BC4A 00 00 01 47 02 D6 00 03.. .db $00, $00, $01, $47, $02, $d6, $00, $03, $00, $04, $00, $ce, $00, $d7, $00, $4d
0BC5A 00 CE 00 D7 00 4D 00 CE.. .db $00, $ce, $00, $d7, $00, $4d, $00, $ce, $00, $d7, $23, $d6, $0f, $00, $02, $81
0BC6A 00 82 09 00 00 80 00 81.. .db $00, $82, $09, $00, $00, $80, $00, $81, $02, $84, $00, $85, $02, $00, $00, $80
0BC7A 00 81 00 82 03 00 00 83.. .db $00, $81, $00, $82, $03, $00, $00, $83, $00, $84, $06, $00, $00, $83, $00, $84
0BC8A 00 85 1B 00 00 D9 00 DA.. .db $00, $85, $1b, $00, $00, $d9, $00, $da, $00, $db, $02, $00, $01, $8b, $01, $00
0BC9A 05 45 00 00 00 4E 00 00.. .db $05, $45, $00, $00, $00, $4e, $00, $00, $06, $45, $05, $47, $00, $00, $00, $4e
0BCAA 00 00 0C 47 00 00 00 4E.. .db $00, $00, $0c, $47, $00, $00, $00, $4e, $00, $00, $06, $47, $04, $d6, $00, $47
0BCBA 00 00 00 4E 00 00 06 47.. .db $00, $00, $00, $4e, $00, $00, $06, $47, $0d, $d6, $01, $47, $1f, $d6, $01, $00
0BCCA 00 24 0C 00 00 81 00 82.. .db $00, $24, $0c, $00, $00, $81, $00, $82, $00, $25, $0c, $00, $00, $84, $00, $85
0BCDA 00 25 01 00 00 80 02 81.. .db $00, $25, $01, $00, $00, $80, $02, $81, $00, $82, $07, $00, $00, $25, $01, $00
0BCEA 00 83 02 84 00 85 07 00.. .db $00, $83, $02, $84, $00, $85, $07, $00, $00, $25, $0e, $00, $00, $25, $0b, $00
0BCFA 00 80 01 45 00 25 00 D9.. .db $00, $80, $01, $45, $00, $25, $00, $d9, $00, $da, $00, $db, $00, $00, $02, $45
0BD0A 00 00 00 D9 00 DA 00 DB.. .db $00, $00, $00, $d9, $00, $da, $00, $db, $00, $00, $00, $83, $01, $47, $00, $25
0BD1A 00 00 00 4E 01 00 00 46.. .db $00, $00, $00, $4e, $01, $00, $00, $46, $00, $47, $00, $48, $01, $00, $00, $4e
0BD2A 02 00 01 47 00 25 00 00.. .db $02, $00, $01, $47, $00, $25, $00, $00, $00, $4e, $00, $00, $00, $45, $02, $49
0BD3A 00 45 00 00 00 4E 02 00.. .db $00, $45, $00, $00, $00, $4e, $02, $00, $01, $47, $00, $25, $00, $00, $00, $4e
0BD4A 00 00 01 47 00 4A 01 47.. .db $00, $00, $01, $47, $00, $4a, $01, $47, $00, $00, $00, $4e, $02, $00, $01, $47
0BD5A 00 61 00 00 00 4E 00 00.. .db $00, $61, $00, $00, $00, $4e, $00, $00, $01, $47, $00, $4b, $00, $70, $00, $47
0BD6A 00 00 00 4E 02 4D 1F D6.. .db $00, $00, $00, $4e, $02, $4d, $1f, $d6, $4f, $00, $00, $81, $00, $82, $0d, $00
0BD7A 00 84 00 85 4D 00 1F D6   .db $00, $84, $00, $85, $4d, $00, $1f, $d60BD82 FD                        	  .db $fd
0BD83 00 00 00 00 00 00 00 00.. pad $c000	
0C000                           
0C000                           base $a000
0A000                           include code\leveldata\levelData4.asm
0A000                           
0A000                           ;level 4-4
0A000                           E_CastleArea2:
0A000 96 1B                     	.db #9 * $10 + 6, #27
0A002                           
0A002 79 8D                      .db #7 * $10 + 9, #13 + $80
0A004 B9 20                      .db #11 * $10 + 9, #32
0A006 F9 0D                      .db #15 * $10 + 9, #13
0A008                           
0A008 39 A0                      .db #3 * $10 + 9, #32 + $80
0A00A 79 0D                      .db #7 * $10 + 9, #13
0A00C                           
0A00C 63 8C                      .db #6 * $10 + 3, #12 + $80
0A00E                           
0A00E CA A2                      .db #12 * $10 + 10, #34 + $80
0A010                           
0A010 4A 8D                      .db #4 * $10 + 10, #13 + $80
0A012 A8 0D                      .db #10 * $10 + 8, #13
0A014                           
0A014 28 C2                      .db #2 * $10 + 8, #66 + $80
0A016 37 42                      .db #3 * $10 + 7, #66
0A018 78 0D                      .db #7 * $10 + 8, #13
0A01A C7 21                      .db #12 * $10 + 7, #33
0A01C                           
0A01C 38 8D                      .db #3 * $10 + 8, #13 + $80
0A01E 57 42                      .db #5 * $10 + 7, #66
0A020 98 42                      .db #9 * $10 + 8, #66
0A022                           
0A022 96 8C                      .db #9 * $10 + 6, #12 + $80
0A024 E5 0C                      .db #14 * $10 + 5, #12
0A026                           
0A026 35 8C                      .db #3 * $10 + 5, #12 + $80
0A028                           
0A028 09 C2                      .db #0 * $10 + 9, #66 + $80
0A02A 4B 06                      .db #4 * $10 + 11, #6
0A02C 7A 42                      .db #7 * $10 + 10, #66
0A02E AB 06                      .db #10 * $10 + 11, #6
0A030 D8 42                      .db #13 * $10 + 8, #66
0A032                           
0A032 59 86                      .db #5 * $10 + 9, #6 + $80
0A034 99 06                      .db #9 * $10 + 9, #6
0A036                           
0A036 66 8C                      .db #6 * $10 + 6, #12 + $80
0A038 D4 0C                      .db #13 * $10 + 4, #12
0A03A                           
0A03A 64 8C                      .db #6 * $10 + 4, #12 + $80
0A03C C6 0C                      .db #12 * $10 + 6, #12
0A03E                           
0A03E 38 AD                      .db #3 * $10 + 8, #45 + $80
0A040                           
0A040 1B C1                      .db #1 * $10 + 11, #65 + $80
0A042 9B 35                      .db #9 * $10 + 11, #53
0A044 FF                        	  .db $ff
0A045                           	  
0A045                           	  
0A045                           ;level 5-2
0A045                           E_GroundArea18:
0A045 EA 06                     .db #14 * $10 + 10, #6
0A047                           
0A047 89 86                      .db #8 * $10 + 9, #6 + $80
0A049 0F 03                      .db PageSkip, #3
0A04B                           
0A04B 84 83                      .db #8 * $10 + 4, #3 + $80
0A04D E6 03                      .db #14 * $10 + 6, #3
0A04F 0F 05                      .db PageSkip, #5
0A051                           
0A051 56 8D                      .db #5 * $10 + 6, #13 + $80
0A053 96 0D                      .db #9 * $10 + 6, #13
0A055 0F 07                      .db PageSkip, #7
0A057 0F 08                      .db PageSkip, #8
0A059                           
0A059 06 8D                      .db #0 * $10 + 6, #13 + $80
0A05B 66 0D                      .db #6 * $10 + 6, #13
0A05D 87 0D                      .db #8 * $10 + 7, #13
0A05F                           
0A05F E5 A2                      .db #14 * $10 + 5, #34 + $80
0A061                           
0A061 25 A2                      .db #2 * $10 + 5, #34 + $80
0A063 65 22                      .db #6 * $10 + 5, #34
0A065 67 00                      .db #6 * $10 + 7, #0
0A067                           
0A067 07 8D                      .db #0 * $10 + 7, #13 + $80
0A069 55 21                      .db #5 * $10 + 5, #33
0A06B A5 20                      .db #10 * $10 + 5, #32
0A06D                           
0A06D 08 8D                      .db #0 * $10 + 8, #13 + $80
0A06F 15 21                      .db #1 * $10 + 5, #33
0A071 46 0D                      .db #4 * $10 + 6, #13
0A073                           
0A073 47 83                      .db #4 * $10 + 7, #3 + $80
0A075                           
0A075 22 B0                      .db #2 * $10 + 2, #48 + $80
0A077 0F 10                      .db PageSkip, #16
0A079 FF                              .db $ff
0A07A                           
0A07A                           ;level 5-1
0A07A                           E_GroundArea11:
0A07A A9 0D                     	.db #10 * $10 + 9, #13
0A07C DA 0D                      .db #13 * $10 + 10, #13
0A07E                           
0A07E 7B 80                      .db #7 * $10 + 11, #0 + $80
0A080 9B 00                      .db #9 * $10 + 11, #0
0A082                           
0A082 78 83                      .db #7 * $10 + 8, #3 + $80
0A084                           
0A084 A6 A0                      .db #10 * $10 + 6, #32 + $80
0A086 F6 22                      .db #15 * $10 + 6, #34
0A088                           
0A088 A7 83                      .db #10 * $10 + 7, #3 + $80
0A08A                           
0A08A 26 83                      .db #2 * $10 + 6, #3 + $80
0A08C 88 03                      .db #8 * $10 + 8, #3
0A08E                           
0A08E 58 86                      .db #5 * $10 + 8, #6 + $80
0A090 98 06                      .db #9 * $10 + 8, #6
0A092                           
0A092 DA 83                      .db #13 * $10 + 10, #3 + $80
0A094                           
0A094 C6 92                      .db #12 * $10 + 6, #18 + $80
0A096                           
0A096 17 8D                      .db #1 * $10 + 7, #13 + $80
0A098 37 0D                      .db #3 * $10 + 7, #13
0A09A 77 06                      .db #7 * $10 + 7, #6
0A09C C6 03                      .db #12 * $10 + 6, #3
0A09E 0F 0B                      .db PageSkip, #11
0A0A0                           
0A0A0 09 83                      .db #0 * $10 + 9, #3 + $80
0A0A2 29 03                      .db #2 * $10 + 9, #3
0A0A4                           
0A0A4 54 83                      .db #5 * $10 + 4, #3 + $80
0A0A6 74 03                      .db #7 * $10 + 4, #3
0A0A8 0F 0E                      .db PageSkip, #14
0A0AA                           
0A0AA 03 8F                      .db #0 * $10 + 3, #15 + $80
0A0AC 22 30                      .db #2 * $10 + 2, #48
0A0AE                           
0A0AE 89 83                      .db #8 * $10 + 9, #3 + $80
0A0B0 FF                        	  .db $ff
0A0B1                           	
0A0B1                           ;level 5-2
0A0B1                           E53:
0A0B1 BB 00                     	.db #11 * $10 + 11, #0
0A0B3 DB 00                      .db #13 * $10 + 11, #0
0A0B5 0F 02                      .db PageSkip, #2
0A0B7                           
0A0B7 06 8D                      .db #0 * $10 + 6, #13 + $80
0A0B9 35 03                      .db #3 * $10 + 5, #3
0A0BB 63 0D                      .db #6 * $10 + 3, #13
0A0BD 0F 04                      .db PageSkip, #4
0A0BF                           
0A0BF 55 86                      .db #5 * $10 + 5, #6 + $80
0A0C1 63 0D                      .db #6 * $10 + 3, #13
0A0C3 94 0D                      .db #9 * $10 + 4, #13
0A0C5 C5 0D                      .db #12 * $10 + 5, #13
0A0C7                           
0A0C7 64 82                      .db #6 * $10 + 4, #2 + $80
0A0C9 0F 07                      .db PageSkip, #7
0A0CB                           
0A0CB 44 83                      .db #4 * $10 + 4, #3 + $80
0A0CD E7 03                      .db #14 * $10 + 7, #3
0A0CF                           
0A0CF 54 83                      .db #5 * $10 + 4, #3 + $80
0A0D1                           
0A0D1 78 83                      .db #7 * $10 + 8, #3 + $80
0A0D3 95 20                      .db #9 * $10 + 5, #32
0A0D5 E8 03                      .db #14 * $10 + 8, #3
0A0D7 0F 0B                      .db PageSkip, #11
0A0D9                           
0A0D9 15 8D                      .db #1 * $10 + 5, #13 + $80
0A0DB 97 20                      .db #9 * $10 + 7, #32
0A0DD C8 0D                      .db #12 * $10 + 8, #13
0A0DF F9 20                      .db #15 * $10 + 9, #32
0A0E1                           
0A0E1 87 85                      .db #8 * $10 + 7, #5 + $80
0A0E3 DB 06                      .db #13 * $10 + 11, #6
0A0E5                           
0A0E5 0B 86                      .db #0 * $10 + 11, #6 + $80
0A0E7                           
0A0E7 22 B0                      .db #2 * $10 + 2, #48 + $80
0A0E9 0F 10                      .db PageSkip, #16
0A0EB FF                        	  .db $ff 
0A0EC                           	  
0A0EC                           E54:
0A0EC CA 1F                     	 .db #12 * $10 + 10, #31
0A0EE                           
0A0EE 49 86                      .db #4 * $10 + 9, #6 + $80
0A0F0 69 06                      .db #6 * $10 + 9, #6
0A0F2 0F 03                      .db PageSkip, #3
0A0F4                           
0A0F4 E8 9D                      .db #14 * $10 + 8, #29 + $80
0A0F6                           
0A0F6 47 9B                      .db #4 * $10 + 7, #27 + $80
0A0F8 A7 1B                      .db #10 * $10 + 7, #27
0A0FA                           
0A0FA 07 9D                      .db #0 * $10 + 7, #29 + $80
0A0FC E9 1F                      .db #14 * $10 + 9, #31
0A0FE                           
0A0FE 4A 9D                      .db #4 * $10 + 10, #29 + $80
0A100 0F 08                      .db PageSkip, #8
0A102                           
0A102 14 8D                      .db #1 * $10 + 4, #13 + $80
0A104 53 20                      .db #5 * $10 + 3, #32
0A106 A6 0D                      .db #10 * $10 + 6, #13
0A108 D7 20                      .db #13 * $10 + 7, #32
0A10A F9 1B                      .db #15 * $10 + 9, #27
0A10C                           
0A10C 64 85                      .db #6 * $10 + 4, #5 + $80
0A10E D7 0D                      .db #13 * $10 + 7, #13
0A110                           
0A110 B6 8D                      .db #11 * $10 + 6, #13 + $80
0A112                           
0A112 A6 82                      .db #10 * $10 + 6, #2 + $80
0A114 D6 02                      .db #13 * $10 + 6, #2
0A116                           
0A116 D6 89                      .db #13 * $10 + 6, #9 + $80
0A118                           
0A118 06 89                      .db #0 * $10 + 6, #9 + $80
0A11A 47 20                      .db #4 * $10 + 7, #32
0A11C 67 20                      .db #6 * $10 + 7, #32
0A11E 87 20                      .db #8 * $10 + 7, #32
0A120                           
0A120 58 AD                      .db #5 * $10 + 8, #45 + $80
0A122                           
0A122 1B C1                      .db #1 * $10 + 11, #65 + $80
0A124 9B 35                      .db #9 * $10 + 11, #53
0A126 FF                        	.db $ff
0A127                           	 
0A127                           ;level 4-4
0A127                           L_CastleArea2:
0A127 5B 07                           .db $5b, $07
0A129                           	  include "code\leveldata\levels\4-4.asm"
0A129                           
0A129 10 62 06 00 08 62 06 00.. .db $10, $62, $06, $00, $08, $62, $06, $00, $08, $62, $06, $00, $08, $62, $06, $00
0A139 00 62 00 C4 0A 62 02 00.. .db $00, $62, $00, $c4, $0a, $62, $02, $00, $0c, $62, $0a, $00, $04, $62, $0a, $00
0A149 04 62 0A 00 09 62 00 00.. .db $04, $62, $0a, $00, $09, $62, $00, $00, $00, $62, $00, $00, $00, $62, $00, $00
0A159 0A 62 00 90 00 62 00 90.. .db $0a, $62, $00, $90, $00, $62, $00, $90, $00, $62, $00, $90, $0a, $62, $00, $91
0A169 00 62 00 91 00 62 00 91.. .db $00, $62, $00, $91, $00, $62, $00, $91, $0a, $62, $00, $91, $00, $62, $00, $91
0A179 00 62 00 91 38 62 05 00.. .db $00, $62, $00, $91, $38, $62, $05, $00, $01, $61, $06, $62, $07, $00, $00, $61
0A189 00 62 03 00 00 50 02 00.. .db $00, $62, $03, $00, $00, $50, $02, $00, $03, $c2, $07, $00, $00, $50, $0e, $00
0A199 00 50 0D 00 02 62 00 12.. .db $00, $50, $0d, $00, $02, $62, $00, $12, $00, $13, $00, $12, $00, $13, $00, $12
0A1A9 00 13 00 12 00 13 00 12.. .db $00, $13, $00, $12, $00, $13, $00, $12, $00, $00, $05, $62, $00, $14, $00, $15
0A1B9 00 14 00 15 00 14 00 15.. .db $00, $14, $00, $15, $00, $14, $00, $15, $00, $14, $00, $15, $00, $14, $00, $90
0A1C9 05 62 00 14 00 15 00 14.. .db $05, $62, $00, $14, $00, $15, $00, $14, $00, $15, $00, $14, $00, $15, $00, $14
0A1D9 00 15 00 14 00 91 0E 62.. .db $00, $15, $00, $14, $00, $91, $0e, $62, $00, $91, $3e, $62, $01, $61, $05, $00
0A1E9 07 62 00 61 07 00 05 62.. .db $07, $62, $00, $61, $07, $00, $05, $62, $03, $00, $03, $c2, $02, $00, $00, $50
0A1F9 01 00 00 50 0B 00 00 50.. .db $01, $00, $00, $50, $0b, $00, $00, $50, $01, $00, $00, $50, $0b, $00, $00, $50
0A209 01 00 00 50 01 00 00 13.. .db $01, $00, $00, $50, $01, $00, $00, $13, $00, $12, $00, $13, $00, $12, $00, $13
0A219 00 12 00 13 00 12 00 13.. .db $00, $12, $00, $13, $00, $12, $00, $13, $06, $62, $00, $15, $00, $14, $00, $15
0A229 00 14 00 15 00 14 00 15.. .db $00, $14, $00, $15, $00, $14, $00, $15, $00, $14, $00, $15, $06, $62, $00, $15
0A239 00 14 00 15 00 14 00 15.. .db $00, $14, $00, $15, $00, $14, $00, $15, $00, $14, $00, $15, $00, $14, $00, $15
0A249 38 62 09 00 04 62 04 00.. .db $38, $62, $09, $00, $04, $62, $04, $00, $01, $c2, $04, $00, $02, $62, $01, $00
0A259 00 C2 07 00 00 C2 01 00.. .db $00, $c2, $07, $00, $00, $c2, $01, $00, $01, $62, $00, $00, $00, $c2, $09, $00
0A269 00 C2 01 00 00 62 13 00.. .db $00, $c2, $01, $00, $00, $62, $13, $00, $00, $61, $03, $00, $00, $61, $09, $00
0A279 00 62 03 00 00 62 09 00.. .db $00, $62, $03, $00, $00, $62, $09, $00, $00, $62, $03, $00, $00, $62, $03, $00
0A289 01 62 03 90 00 62 03 90.. .db $01, $62, $03, $90, $00, $62, $03, $90, $00, $62, $03, $90, $01, $62, $03, $91
0A299 00 62 03 91 00 62 03 91.. .db $00, $62, $03, $91, $00, $62, $03, $91, $01, $62, $03, $91, $00, $62, $03, $91
0A2A9 00 62 03 91 01 62 03 91.. .db $00, $62, $03, $91, $01, $62, $03, $91, $00, $62, $03, $91, $00, $62, $03, $91
0A2B9 15 62 07 00 00 14 00 15.. .db $15, $62, $07, $00, $00, $14, $00, $15, $05, $62, $07, $00, $00, $14, $00, $15
0A2C9 05 62 07 00 00 14 00 15.. .db $05, $62, $07, $00, $00, $14, $00, $15, $05, $62, $01, $00, $03, $c0, $01, $00
0A2D9 00 14 00 15 01 61 00 50.. .db $00, $14, $00, $15, $01, $61, $00, $50, $00, $00, $00, $50, $08, $00, $00, $14
0A2E9 00 15 00 61 00 00 00 50.. .db $00, $15, $00, $61, $00, $00, $00, $50, $00, $00, $00, $50, $08, $00, $00, $14
0A2F9 00 15 01 00 00 50 00 00.. .db $00, $15, $01, $00, $00, $50, $00, $00, $00, $50, $08, $00, $00, $14, $00, $15
0A309 01 00 03 62 01 00 00 C1.. .db $01, $00, $03, $62, $01, $00, $00, $c1, $02, $c0, $01, $00, $00, $2c, $00, $2d
0A319 01 00 03 62 0B 00 03 62.. .db $01, $00, $03, $62, $0b, $00, $03, $62, $0b, $00, $03, $62, $0b, $00, $47, $62
0A329 25 00 01 C2 02 00 03 C2.. .db $25, $00, $01, $c2, $02, $00, $03, $c2, $12, $00, $00, $12, $00, $13, $0d, $00
0A339 00 14 00 15 06 00 00 61.. .db $00, $14, $00, $15, $06, $00, $00, $61, $00, $12, $00, $13, $09, $62, $01, $00
0A349 01 61 00 14 00 15 09 62.. .db $01, $61, $00, $14, $00, $15, $09, $62, $00, $00, $02, $61, $00, $14, $00, $15
0A359 49 62 0B 00 00 14 00 15.. .db $49, $62, $0b, $00, $00, $14, $00, $15, $00, $14, $00, $15, $0b, $00, $00, $14
0A369 00 15 00 2C 00 2D 09 00.. .db $00, $15, $00, $2c, $00, $2d, $09, $00, $00, $c2, $00, $00, $00, $2c, $00, $2d
0A379 04 00 00 64 00 00 00 C7.. .db $04, $00, $00, $64, $00, $00, $00, $c7, $03, $00, $00, $c2, $06, $00, $00, $64
0A389 00 65 02 00 00 12 00 13.. .db $00, $65, $02, $00, $00, $12, $00, $13, $08, $00, $00, $65, $00, $66, $02, $00
0A399 00 14 00 15 06 00 03 62.. .db $00, $14, $00, $15, $06, $00, $03, $62, $00, $90, $00, $62, $00, $90, $0c, $62
0A3A9 00 91 00 62 00 91 0C 62.. .db $00, $91, $00, $62, $00, $91, $0c, $62, $00, $91, $00, $62, $00, $91, $0c, $62
0A3B9 00 91 00 62 00 91 38 62.. .db $00, $91, $00, $62, $00, $91, $38, $62, $34, $00, $00, $64, $00, $00, $00, $c1
0A3C9 0A 00 00 12 00 13 00 65.. .db $0a, $00, $00, $12, $00, $13, $00, $65, $02, $00, $00, $64, $08, $00, $00, $14
0A3D9 00 15 00 66 02 00 00 65.. .db $00, $15, $00, $66, $02, $00, $00, $65, $03, $61, $01, $00, $67, $62, $0b, $00
0A3E9 03 62 0C 00 01 50 06 00.. .db $03, $62, $0c, $00, $01, $50, $06, $00, $00, $c2, $01, $00, $01, $c2, $01, $00
0A3F9 01 50 01 00 00 C2 0A 00.. .db $01, $50, $01, $00, $00, $c2, $0a, $00, $01, $50, $0d, $00, $01, $50, $0c, $00
0A409 03 62 02 00 01 62 06 00.. .db $03, $62, $02, $00, $01, $62, $06, $00, $03, $62, $02, $00, $01, $62, $02, $00
0A419 03 90 03 62 02 90 01 62.. .db $03, $90, $03, $62, $02, $90, $01, $62, $02, $90, $03, $91, $03, $62, $02, $91
0A429 01 62 06 91 03 62 02 91.. .db $01, $62, $06, $91, $03, $62, $02, $91, $01, $62, $02, $91, $1f, $62, $04, $00
0A439 0A 62 04 00 0A 62 05 00.. .db $0a, $62, $04, $00, $0a, $62, $05, $00, $00, $50, $06, $00, $00, $50, $06, $00
0A449 00 50 06 00 00 50 06 00.. .db $00, $50, $06, $00, $00, $50, $06, $00, $00, $50, $06, $00, $00, $50, $00, $00
0A459 01 62 03 00 00 50 06 00.. .db $01, $62, $03, $00, $00, $50, $06, $00, $00, $50, $00, $00, $01, $62, $02, $00
0A469 0C 62 02 00 0C 62 02 90.. .db $0c, $62, $02, $00, $0c, $62, $02, $90, $0c, $62, $02, $91, $0c, $62, $02, $91
0A479 4A 62 0E 00 00 50 0E 00.. .db $4a, $62, $0e, $00, $00, $50, $0e, $00, $00, $50, $0e, $00, $00, $50, $02, $00
0A489 01 C0 04 00 00 C1 01 00.. .db $01, $c0, $04, $00, $00, $c1, $01, $00, $00, $64, $00, $00, $00, $50, $00, $64
0A499 0B 00 00 65 01 62 00 65.. .db $0b, $00, $00, $65, $01, $62, $00, $65, $05, $00, $00, $64, $04, $00, $00, $66
0A4A9 01 62 00 66 05 00 00 65.. .db $01, $62, $00, $66, $05, $00, $00, $65, $04, $00, $00, $66, $53, $62, $03, $00
0A4B9 04 61 04 00 00 50 05 00.. .db $04, $61, $04, $00, $00, $50, $05, $00, $02, $61, $04, $00, $00, $2a, $00, $50
0A4C9 01 00 02 C2 01 00 00 61.. .db $01, $00, $02, $c2, $01, $00, $00, $61, $01, $00, $00, $c2, $03, $00, $00, $50
0A4D9 0E 00 00 50 0B 00 00 61.. .db $0e, $00, $00, $50, $0b, $00, $00, $61, $01, $00, $01, $62, $09, $00, $02, $61
0A4E9 00 00 54 62 0A 00 04 62.. .db $00, $00, $54, $62, $0a, $00, $04, $62, $0a, $00, $04, $62, $07, $00, $01, $c2
0A4F9 00 00 04 62 06 00 00 C2.. .db $00, $00, $04, $62, $06, $00, $00, $c2, $03, $00, $00, $50, $00, $00, $00, $50
0A509 01 00 01 C2 08 00 00 50.. .db $01, $00, $01, $c2, $08, $00, $00, $50, $00, $00, $00, $50, $0c, $00, $00, $50
0A519 00 00 00 50 0C 00 00 50.. .db $00, $00, $00, $50, $0c, $00, $00, $50, $00, $00, $00, $50, $04, $00, $02, $62
0A529 03 00 04 62 03 00 02 62.. .db $03, $00, $04, $62, $03, $00, $02, $62, $03, $90, $04, $62, $03, $90, $02, $62
0A539 03 91 04 62 03 91 02 62.. .db $03, $91, $04, $62, $03, $91, $02, $62, $03, $91, $04, $62, $03, $91, $02, $62
0A549 03 91 0F 62 0D 00 01 62.. .db $03, $91, $0f, $62, $0d, $00, $01, $62, $0d, $00, $01, $62, $05, $00, $00, $c2
0A559 06 00 01 62 0B 00 00 C2.. .db $06, $00, $01, $62, $0b, $00, $00, $c2, $12, $00, $04, $62, $0a, $00, $04, $62
0A569 0A 00 04 62 02 00 02 62.. .db $0a, $00, $04, $62, $02, $00, $02, $62, $02, $00, $06, $62, $02, $90, $02, $62
0A579 02 00 06 62 02 91 02 62.. .db $02, $00, $06, $62, $02, $91, $02, $62, $02, $90, $06, $62, $02, $91, $02, $62
0A589 02 91 06 62 02 91 02 62.. .db $02, $91, $06, $62, $02, $91, $02, $62, $02, $91, $11, $62, $0d, $00, $01, $62
0A599 0D 00 01 62 0D 00 01 62.. .db $0d, $00, $01, $62, $0d, $00, $01, $62, $23, $00, $00, $61, $07, $00, $00, $c5
0A5A9 04 00 01 61 04 00 00 61.. .db $04, $00, $01, $61, $04, $00, $00, $61, $01, $8a, $02, $62, $0c, $89, $02, $62
0A5B9 0C 00 02 62 0C 00 02 62.. .db $0c, $00, $02, $62, $0c, $00, $02, $62, $0c, $90, $02, $62, $0c, $91, $12, $62
0A5C9 9F 00 1F 62               .db $9f, $00, $1f, $620A5CD FD                              .db $fd
0A5CE                           	  
0A5CE                           ;level 5-1
0A5CE                           L_GroundArea11:
0A5CE 90 11                           .db $90, $11
0A5D0                           	  include "code\leveldata\levels\5-1.asm"
0A5D0                           
0A5D0 02 00 02 45 0C 00 00 46.. .db $02, $00, $02, $45, $0c, $00, $00, $46, $00, $47, $00, $48, $0b, $00, $00, $45
0A5E0 02 49 00 45 03 00 00 80.. .db $02, $49, $00, $45, $03, $00, $00, $80, $02, $81, $00, $82, $01, $00, $01, $47
0A5F0 00 4A 01 47 03 00 00 83.. .db $00, $4a, $01, $47, $03, $00, $00, $83, $02, $84, $00, $85, $01, $00, $01, $47
0A600 00 4B 00 70 00 47 08 00.. .db $00, $4b, $00, $70, $00, $47, $08, $00, $01, $45, $04, $49, $01, $45, $06, $00
0A610 02 47 00 4A 00 47 00 4A.. .db $02, $47, $00, $4a, $00, $47, $00, $4a, $02, $47, $06, $00, $02, $47, $00, $4b
0A620 00 47 00 4B 02 47 06 00.. .db $00, $47, $00, $4b, $02, $47, $06, $00, $08, $47, $00, $00, $00, $12, $00, $13
0A630 03 00 01 47 00 4A 00 47.. .db $03, $00, $01, $47, $00, $4a, $00, $47, $00, $4a, $00, $47, $00, $4a, $01, $47
0A640 00 00 00 14 00 15 00 00.. .db $00, $00, $00, $14, $00, $15, $00, $00, $00, $12, $00, $13, $00, $00, $01, $47
0A650 00 4B 00 70 00 4B 00 47.. .db $00, $4b, $00, $70, $00, $4b, $00, $47, $00, $4b, $00, $47, $04, $de, $00, $14
0A660 00 15 00 4D 1F DE 12 00.. .db $00, $15, $00, $4d, $1f, $de, $12, $00, $00, $80, $04, $81, $00, $82, $08, $00
0A670 00 83 04 84 00 85 4A 00.. .db $00, $83, $04, $84, $00, $85, $4a, $00, $02, $51, $00, $55, $0e, $00, $00, $0d
0A680 03 00 00 61 04 00 00 0E.. .db $03, $00, $00, $61, $04, $00, $00, $0e, $03, $00, $00, $0f, $02, $00, $01, $61
0A690 01 00 01 4D 00 00 00 4E.. .db $01, $00, $01, $4d, $00, $00, $00, $4e, $00, $00, $01, $4d, $00, $00, $00, $4e
0A6A0 00 00 00 4D 02 61 00 00.. .db $00, $00, $00, $4d, $02, $61, $00, $00, $00, $80, $0d, $de, $00, $00, $00, $83
0A6B0 0D DE 17 00 00 80 02 81.. .db $0d, $de, $17, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83, $02, $84
0A6C0 00 85 11 00 01 C2 02 00.. .db $00, $85, $11, $00, $01, $c2, $02, $00, $00, $c2, $00, $00, $01, $c0, $00, $00
0A6D0 00 C2 24 00 01 0B 02 00.. .db $00, $c2, $24, $00, $01, $0b, $02, $00, $05, $0b, $03, $00, $00, $df, $01, $e0
0A6E0 00 E1 00 00 00 DF 05 E0.. .db $00, $e1, $00, $00, $00, $df, $05, $e0, $00, $e1, $16, $00, $02, $81, $00, $82
0A6F0 0B 00 02 84 00 85 04 00.. .db $0b, $00, $02, $84, $00, $85, $04, $00, $00, $80, $02, $81, $00, $82, $0a, $00
0A700 00 83 02 84 00 85 10 00.. .db $00, $83, $02, $84, $00, $85, $10, $00, $00, $61, $04, $00, $02, $c0, $00, $00
0A710 00 80 01 81 00 82 01 00.. .db $00, $80, $01, $81, $00, $82, $01, $00, $00, $14, $03, $00, $00, $0d, $03, $00
0A720 00 83 01 84 00 85 00 C2.. .db $00, $83, $01, $84, $00, $85, $00, $c2, $00, $00, $00, $14, $03, $00, $00, $0f
0A730 07 00 00 C2 00 00 00 14.. .db $07, $00, $00, $c2, $00, $00, $00, $14, $03, $00, $00, $4e, $07, $00, $00, $c2
0A740 00 00 00 2C 02 00 02 DE.. .db $00, $00, $00, $2c, $02, $00, $02, $de, $01, $4d, $01, $00, $00, $12, $00, $13
0A750 06 00 04 DE 00 4D 00 00.. .db $06, $00, $04, $de, $00, $4d, $00, $00, $00, $14, $00, $15, $05, $00, $07, $de
0A760 00 14 00 15 03 DE 01 00.. .db $00, $14, $00, $15, $03, $de, $01, $00, $0d, $de, $02, $00, $0c, $de, $02, $00
0A770 0C DE 03 00 0B DE 05 00.. .db $0c, $de, $03, $00, $0b, $de, $05, $00, $09, $de, $00, $61, $07, $00, $00, $80
0A780 03 81 00 82 00 00 00 15.. .db $03, $81, $00, $82, $00, $00, $00, $15, $07, $00, $00, $83, $03, $84, $00, $85
0A790 00 00 00 15 0D 00 00 C1.. .db $00, $00, $00, $15, $0d, $00, $00, $c1, $00, $15, $05, $00, $03, $c2, $04, $00
0A7A0 00 2D 1D 00 00 0B 06 00.. .db $00, $2d, $1d, $00, $00, $0b, $06, $00, $03, $0b, $02, $00, $00, $df, $00, $e0
0A7B0 00 DE 01 4D 02 00 00 DF.. .db $00, $de, $01, $4d, $02, $00, $00, $df, $03, $e0, $00, $e1, $03, $00, $02, $de
0A7C0 0C 00 03 DE 0B 00 03 DE.. .db $0c, $00, $03, $de, $0b, $00, $03, $de, $0b, $00, $02, $de, $03, $00, $00, $80
0A7D0 01 81 00 82 04 00 00 DE.. .db $01, $81, $00, $82, $04, $00, $00, $de, $05, $00, $00, $83, $01, $84, $00, $85
0A7E0 1D 00 00 80 01 81 00 82.. .db $1d, $00, $00, $80, $01, $81, $00, $82, $02, $00, $02, $c0, $05, $00, $00, $83
0A7F0 01 84 00 85 1A 00 01 C2.. .db $01, $84, $00, $85, $1a, $00, $01, $c2, $05, $00, $02, $0b, $0c, $00, $02, $e0
0A800 00 E1 13 00 01 0B 04 00.. .db $00, $e1, $13, $00, $01, $0b, $04, $00, $00, $de, $06, $00, $00, $df, $01, $e0
0A810 00 E1 02 00 01 DE 0D 00.. .db $00, $e1, $02, $00, $01, $de, $0d, $00, $01, $de, $02, $00, $00, $80, $04, $81
0A820 00 82 03 00 01 DE 02 00.. .db $00, $82, $03, $00, $01, $de, $02, $00, $00, $83, $04, $84, $00, $85, $04, $00
0A830 00 DE 23 00 00 C2 02 00.. .db $00, $de, $23, $00, $00, $c2, $02, $00, $00, $c2, $0b, $00, $00, $80, $02, $81
0A840 00 82 0A 00 00 83 02 84.. .db $00, $82, $0a, $00, $00, $83, $02, $84, $00, $85, $08, $00, $01, $c0, $00, $c1
0A850 00 00 02 C0 05 00 00 0E.. .db $00, $00, $02, $c0, $05, $00, $00, $0e, $04, $00, $00, $0d, $04, $00, $00, $0e
0A860 02 00 00 4E 04 00 00 0F.. .db $02, $00, $00, $4e, $04, $00, $00, $0f, $04, $00, $00, $4e, $00, $4d, $01, $00
0A870 01 DE 02 4D 00 00 00 4E.. .db $01, $de, $02, $4d, $00, $00, $00, $4e, $00, $00, $02, $4d, $03, $de, $00, $00
0A880 0E DE 00 00 0E DE 00 00.. .db $0e, $de, $00, $00, $0e, $de, $00, $00, $0d, $de, $01, $00, $0c, $de, $03, $00
0A890 09 DE 17 00 00 80 03 81.. .db $09, $de, $17, $00, $00, $80, $03, $81, $00, $82, $09, $00, $00, $83, $03, $84
0A8A0 00 85 11 00 00 80 01 81.. .db $00, $85, $11, $00, $00, $80, $01, $81, $00, $82, $03, $00, $01, $c2, $05, $00
0A8B0 00 83 01 84 00 85 1B 00.. .db $00, $83, $01, $84, $00, $85, $1b, $00, $02, $c0, $04, $00, $01, $0b, $0c, $00
0A8C0 00 DF 01 E0 00 E1 13 00.. .db $00, $df, $01, $e0, $00, $e1, $13, $00, $04, $0b, $01, $00, $00, $80, $01, $81
0A8D0 00 82 03 00 00 DF 04 E0.. .db $00, $82, $03, $00, $00, $df, $04, $e0, $00, $e1, $00, $00, $00, $83, $01, $84
0A8E0 00 85 38 00 00 80 00 81.. .db $00, $85, $38, $00, $00, $80, $00, $81, $08, $00, $04, $c0, $00, $83, $00, $84
0A8F0 01 00 01 C2 14 00 00 0E.. .db $01, $00, $01, $c2, $14, $00, $00, $0e, $04, $00, $00, $0d, $08, $00, $00, $4e
0A900 00 00 02 4D 00 00 00 0F.. .db $00, $00, $02, $4d, $00, $00, $00, $0f, $01, $00, $01, $0b, $03, $00, $06, $de
0A910 00 4E 00 00 00 DF 01 E0.. .db $00, $4e, $00, $00, $00, $df, $01, $e0, $00, $e1, $01, $00, $08, $de, $06, $00
0A920 08 DE 00 00 00 80 02 81.. .db $08, $de, $00, $00, $00, $80, $02, $81, $00, $82, $01, $00, $07, $de, $00, $00
0A930 00 83 02 84 00 85 02 00.. .db $00, $83, $02, $84, $00, $85, $02, $00, $06, $de, $09, $00, $05, $de, $0a, $00
0A940 04 DE 0F 00 00 81 00 82.. .db $04, $de, $0f, $00, $00, $81, $00, $82, $0a, $00, $00, $80, $01, $81, $00, $84
0A950 00 85 01 C2 05 00 02 C2.. .db $00, $85, $01, $c2, $05, $00, $02, $c2, $00, $83, $01, $84, $05, $00, $01, $c0
0A960 02 00 00 0D 0E 00 00 0F.. .db $02, $00, $00, $0d, $0e, $00, $00, $0f, $0d, $00, $00, $4d, $00, $4e, $00, $4d
0A970 03 00 00 12 00 13 00 12.. .db $03, $00, $00, $12, $00, $13, $00, $12, $00, $13, $00, $00, $02, $4d, $04, $de
0A980 01 00 00 DE 00 14 00 15.. .db $01, $00, $00, $de, $00, $14, $00, $15, $00, $14, $00, $15, $09, $de, $00, $00
0A990 0E DE 00 00 0D DE 01 00.. .db $0e, $de, $00, $00, $0d, $de, $01, $00, $0b, $de, $03, $00, $0a, $de, $04, $00
0A9A0 08 DE 16 00 00 82 0E 00.. .db $08, $de, $16, $00, $00, $82, $0e, $00, $00, $85, $01, $00, $04, $c0, $10, $00
0A9B0 00 80 02 81 00 82 0A 00.. .db $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83, $02, $84, $00, $85, $04, $00
0A9C0 04 0B 02 00 02 C2 00 00.. .db $04, $0b, $02, $00, $02, $c2, $00, $00, $00, $c0, $01, $00, $00, $df, $04, $e0
0A9D0 00 E1 18 00 00 80 03 81.. .db $00, $e1, $18, $00, $00, $80, $03, $81, $00, $82, $02, $00, $04, $0b, $01, $00
0A9E0 00 83 03 84 00 85 01 00.. .db $00, $83, $03, $84, $00, $85, $01, $00, $00, $df, $04, $e0, $0c, $00, $00, $80
0A9F0 01 81 0C 00 00 83 01 84.. .db $01, $81, $0c, $00, $00, $83, $01, $84, $23, $00, $00, $80, $01, $81, $00, $82
0AA00 0B 00 00 83 01 84 00 85.. .db $0b, $00, $00, $83, $01, $84, $00, $85, $02, $00, $00, $c1, $24, $00, $02, $c2
0AA10 05 00 02 0B 0B 00 00 DF.. .db $05, $00, $02, $0b, $0b, $00, $00, $df, $02, $e0, $00, $e1, $00, $00, $00, $80
0AA20 0E 00 00 83 03 0B 03 00.. .db $0e, $00, $00, $83, $03, $0b, $03, $00, $00, $80, $00, $81, $00, $82, $04, $00
0AA30 03 E0 00 E1 02 00 00 83.. .db $03, $e0, $00, $e1, $02, $00, $00, $83, $00, $84, $00, $85, $04, $00, $02, $81
0AA40 00 82 0B 00 02 84 00 85.. .db $00, $82, $0b, $00, $02, $84, $00, $85, $1d, $00, $00, $c2, $00, $00, $01, $c0
0AA50 00 00 00 C2 0F 00 00 80.. .db $00, $00, $00, $c2, $0f, $00, $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83
0AA60 01 84 00 85 05 00 05 0B.. .db $01, $84, $00, $85, $05, $00, $05, $0b, $08, $00, $00, $df, $05, $e0, $00, $e1
0AA70 01 00 00 0D 0E 00 00 0F.. .db $01, $00, $00, $0d, $0e, $00, $00, $0f, $03, $00, $02, $81, $00, $82, $05, $00
0AA80 00 4D 00 4E 00 4D 02 00.. .db $00, $4d, $00, $4e, $00, $4d, $02, $00, $02, $84, $00, $85, $05, $00, $03, $de
0AA90 00 4D 0A 00 05 DE 09 00.. .db $00, $4d, $0a, $00, $05, $de, $09, $00, $05, $de, $03, $00, $00, $80, $01, $81
0AAA0 00 82 02 00 04 DE 03 00.. .db $00, $82, $02, $00, $04, $de, $03, $00, $00, $83, $01, $84, $00, $85, $03, $00
0AAB0 03 DE 0C 00 02 DE 1A 00.. .db $03, $de, $0c, $00, $02, $de, $1a, $00, $00, $80, $00, $81, $00, $82, $0c, $00
0AAC0 00 83 00 84 00 85 0C 00.. .db $00, $83, $00, $84, $00, $85, $0c, $00, $00, $0d, $06, $00, $00, $80, $02, $81
0AAD0 00 82 02 00 00 0F 06 00.. .db $00, $82, $02, $00, $00, $0f, $06, $00, $00, $83, $02, $84, $00, $85, $02, $00
0AAE0 00 4E 01 4D 04 00 01 C2.. .db $00, $4e, $01, $4d, $04, $00, $01, $c2, $03, $00, $00, $4d, $03, $de, $08, $00
0AAF0 00 4D 05 DE 04 00 01 0B.. .db $00, $4d, $05, $de, $04, $00, $01, $0b, $01, $00, $06, $de, $01, $00, $00, $de
0AB00 00 00 00 DF 01 E0 00 E1.. .db $00, $00, $00, $df, $01, $e0, $00, $e1, $00, $00, $06, $de, $01, $00, $00, $de
0AB10 05 00 05 DE 02 00 00 DE.. .db $05, $00, $05, $de, $02, $00, $00, $de, $05, $00, $05, $de, $0a, $00, $03, $de
0AB20 05 00 00 24 0E 00 00 25.. .db $05, $00, $00, $24, $0e, $00, $00, $25, $0e, $00, $00, $25, $00, $00, $00, $80
0AB30 02 81 00 82 08 00 00 25.. .db $02, $81, $00, $82, $08, $00, $00, $25, $00, $00, $00, $83, $02, $84, $00, $85
0AB40 00 00 00 80 01 81 00 82.. .db $00, $00, $00, $80, $01, $81, $00, $82, $03, $00, $00, $25, $06, $00, $00, $83
0AB50 01 84 00 85 03 00 00 25.. .db $01, $84, $00, $85, $03, $00, $00, $25, $0e, $00, $00, $25, $03, $00, $02, $45
0AB60 07 00 00 25 03 00 00 46.. .db $07, $00, $00, $25, $03, $00, $00, $46, $00, $47, $00, $48, $07, $00, $00, $25
0AB70 00 0D 01 00 00 45 02 49.. .db $00, $0d, $01, $00, $00, $45, $02, $49, $00, $45, $06, $00, $00, $25, $00, $0f
0AB80 01 00 01 47 00 4A 01 47.. .db $01, $00, $01, $47, $00, $4a, $01, $47, $00, $00, $01, $4d, $03, $00, $00, $61
0AB90 00 4E 01 4D 01 47 00 4B.. .db $00, $4e, $01, $4d, $01, $47, $00, $4b, $00, $70, $03, $de, $03, $00, $0d, $de
0ABA0 01 00 0D DE 0F 00 00 DE.. .db $01, $00, $0d, $de, $0f, $00, $00, $de, $06, $00, $00, $de, $00, $00, $02, $de
0ABB0 03 00 00 DE 04 00 00 DE.. .db $03, $00, $00, $de, $04, $00, $00, $de, $01, $00, $00, $de, $01, $00, $00, $de
0ABC0 03 00 00 DE 02 00 00 DE.. .db $03, $00, $00, $de, $02, $00, $00, $de, $02, $00, $00, $de, $02, $00, $00, $de
0ABD0 03 00 00 DE 00 00 00 DE.. .db $03, $00, $00, $de, $00, $00, $00, $de, $03, $00, $00, $de, $02, $00, $00, $de
0ABE0 04 00 00 DE 04 00 00 DE.. .db $04, $00, $00, $de, $04, $00, $00, $de, $02, $00, $00, $de, $03, $00, $00, $de
0ABF0 00 00 00 DE 03 00 00 DE.. .db $00, $00, $00, $de, $03, $00, $00, $de, $02, $00, $00, $de, $02, $00, $00, $de
0AC00 02 00 00 DE 02 00 00 DE.. .db $02, $00, $00, $de, $02, $00, $00, $de, $02, $00, $00, $de, $01, $00, $00, $de
0AC10 04 00 00 DE 01 00 00 DE.. .db $04, $00, $00, $de, $01, $00, $00, $de, $01, $00, $00, $de, $01, $00, $00, $de
0AC20 06 00 00 DE 00 00 02 DE.. .db $06, $00, $00, $de, $00, $00, $02, $de, $01, $00, $00, $de, $0d, $00, $00, $c7
0AC30 20 DE                     .db $20, $de0AC32 FD                              .db $fd
0AC33                           
0AC33                           ;level 5-2
0AC33                           L_GroundArea18:
0AC33 90 11                           .db $90, $11
0AC35                           	  include "code\leveldata\levels\5-2.asm"
0AC35                           
0AC35 0C 00 01 61 03 00 00 80.. .db $0c, $00, $01, $61, $03, $00, $00, $80, $04, $81, $00, $82, $02, $00, $00, $14
0AC45 00 15 03 00 00 83 04 84.. .db $00, $15, $03, $00, $00, $83, $04, $84, $00, $85, $02, $00, $00, $14, $00, $15
0AC55 0D 00 00 14 00 15 01 00.. .db $0d, $00, $00, $14, $00, $15, $01, $00, $02, $45, $08, $00, $00, $14, $00, $15
0AC65 01 00 00 46 00 47 00 48.. .db $01, $00, $00, $46, $00, $47, $00, $48, $08, $00, $00, $14, $00, $15, $00, $00
0AC75 00 45 02 49 00 45 03 00.. .db $00, $45, $02, $49, $00, $45, $03, $00, $00, $61, $02, $00, $00, $14, $00, $15
0AC85 00 00 01 47 00 4A 01 47.. .db $00, $00, $01, $47, $00, $4a, $01, $47, $02, $00, $01, $61, $02, $00, $00, $2c
0AC95 00 2D 00 00 01 47 00 4B.. .db $00, $2d, $00, $00, $01, $47, $00, $4b, $00, $70, $00, $47, $01, $4d, $02, $61
0ACA5 05 00 09 DE 01 4D 03 00.. .db $05, $00, $09, $de, $01, $4d, $03, $00, $2f, $de, $11, $00, $00, $80, $02, $81
0ACB5 00 82 0A 00 00 83 02 84.. .db $00, $82, $0a, $00, $00, $83, $02, $84, $00, $85, $05, $00, $00, $80, $01, $81
0ACC5 0C 00 00 83 01 84 16 00.. .db $0c, $00, $00, $83, $01, $84, $16, $00, $01, $c2, $04, $00, $00, $12, $00, $13
0ACD5 0D 00 00 14 00 15 09 00.. .db $0d, $00, $00, $14, $00, $15, $09, $00, $00, $12, $00, $13, $01, $61, $00, $14
0ACE5 00 15 09 00 00 14 00 15.. .db $00, $15, $09, $00, $00, $14, $00, $15, $01, $61, $00, $14, $00, $15, $01, $4d
0ACF5 03 00 00 DF 08 E0 02 DE.. .db $03, $00, $00, $df, $08, $e0, $02, $de, $0c, $00, $02, $de, $00, $00, $00, $80
0AD05 02 81 00 82 06 00 02 DE.. .db $02, $81, $00, $82, $06, $00, $02, $de, $00, $00, $00, $83, $02, $84, $00, $85
0AD15 17 00 01 C2 04 00 00 80.. .db $17, $00, $01, $c2, $04, $00, $00, $80, $00, $81, $00, $82, $00, $c0, $03, $00
0AD25 00 82 06 00 00 83 00 84.. .db $00, $82, $06, $00, $00, $83, $00, $84, $00, $85, $04, $00, $00, $85, $0e, $00
0AD35 03 0B 0B 00 03 63 05 00.. .db $03, $0b, $0b, $00, $03, $63, $05, $00, $00, $df, $00, $e0, $00, $e1, $22, $00
0AD45 03 8A 00 00 00 80 01 81.. .db $03, $8a, $00, $00, $00, $80, $01, $81, $00, $82, $06, $00, $02, $e0, $00, $e1
0AD55 00 00 00 83 01 84 00 85.. .db $00, $00, $00, $83, $01, $84, $00, $85, $3f, $00, $00, $c1, $00, $c0, $10, $00
0AD65 01 C0 09 00 00 C2 05 00.. .db $01, $c0, $09, $00, $00, $c2, $05, $00, $00, $c0, $00, $df, $04, $e0, $00, $e1
0AD75 03 00 00 C2 0A 00 00 DF.. .db $03, $00, $00, $c2, $0a, $00, $00, $df, $00, $e0, $00, $e1, $03, $00, $00, $c2
0AD85 0A 00 00 DF 00 E0 00 E1.. .db $0a, $00, $00, $df, $00, $e0, $00, $e1, $0f, $00, $00, $df, $00, $e0, $00, $e1
0AD95 09 00 00 80 03 81 00 82.. .db $09, $00, $00, $80, $03, $81, $00, $82, $09, $00, $00, $83, $03, $84, $00, $85
0ADA5 00 00 00 80 02 81 00 82.. .db $00, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83, $02, $84, $00, $85
0ADB5 28 00 00 80 11 00 00 80.. .db $28, $00, $00, $80, $11, $00, $00, $80, $02, $81, $00, $82, $08, $00, $00, $c0
0ADC5 00 00 00 83 02 84 00 85.. .db $00, $00, $00, $83, $02, $84, $00, $85, $02, $00, $01, $51, $00, $58, $04, $00
0ADD5 01 C0 08 00 00 80 01 81.. .db $01, $c0, $08, $00, $00, $80, $01, $81, $0c, $00, $00, $83, $01, $84, $00, $00
0ADE5 00 C2 11 00 00 C2 03 00.. .db $00, $c2, $11, $00, $00, $c2, $03, $00, $04, $de, $01, $00, $00, $df, $00, $e0
0ADF5 00 E1 05 00 04 DE 04 00.. .db $00, $e1, $05, $00, $04, $de, $04, $00, $00, $df, $00, $e0, $00, $e1, $02, $00
0AE05 04 DE 29 00 00 80 02 81.. .db $04, $de, $29, $00, $00, $80, $02, $81, $00, $82, $02, $00, $01, $81, $00, $82
0AE15 04 00 00 83 02 84 00 85.. .db $04, $00, $00, $83, $02, $84, $00, $85, $18, $00, $00, $80, $01, $81, $00, $82
0AE25 0B 00 00 83 01 84 00 85.. .db $0b, $00, $00, $83, $01, $84, $00, $85, $05, $00, $00, $82, $00, $00, $01, $c2
0AE35 0B 00 00 85 13 00 00 12.. .db $0b, $00, $00, $85, $13, $00, $00, $12, $00, $13, $00, $12, $00, $13, $00, $12
0AE45 00 13 09 00 00 14 00 15.. .db $00, $13, $09, $00, $00, $14, $00, $15, $00, $14, $00, $15, $00, $14, $00, $15
0AE55 05 00 00 DF 07 E0 00 E1.. .db $05, $00, $00, $df, $07, $e0, $00, $e1, $11, $00, $00, $df, $01, $e0, $08, $00
0AE65 00 80 01 81 00 82 0B 00.. .db $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85, $24, $00
0AE75 00 C1 10 00 00 80 01 81.. .db $00, $c1, $10, $00, $00, $80, $01, $81, $00, $82, $04, $00, $00, $80, $01, $81
0AE85 03 00 00 83 01 84 00 85.. .db $03, $00, $00, $83, $01, $84, $00, $85, $04, $00, $00, $83, $01, $84, $0f, $00
0AE95 00 DF 02 E0 00 E1 1B 00.. .db $00, $df, $02, $e0, $00, $e1, $1b, $00, $02, $c2, $06, $00, $00, $8b, $13, $00
0AEA5 06 E0 00 E1 20 00 00 80.. .db $06, $e0, $00, $e1, $20, $00, $00, $80, $03, $81, $00, $82, $09, $00, $00, $83
0AEB5 03 84 00 85 01 00 00 80.. .db $03, $84, $00, $85, $01, $00, $00, $80, $01, $81, $00, $82, $0b, $00, $01, $c2
0AEC5 00 00 01 C0 00 00 01 C2.. .db $00, $00, $01, $c0, $00, $00, $01, $c2, $00, $00, $00, $80, $00, $81, $00, $82
0AED5 02 00 00 82 08 00 00 83.. .db $02, $00, $00, $82, $08, $00, $00, $83, $00, $84, $00, $85, $02, $00, $00, $85
0AEE5 0B 00 01 C2 10 00 00 DF.. .db $0b, $00, $01, $c2, $10, $00, $00, $df, $07, $e0, $00, $e1, $21, $00, $03, $de
0AEF5 03 00 00 80 01 81 00 82.. .db $03, $00, $00, $80, $01, $81, $00, $82, $03, $00, $03, $de, $03, $00, $00, $83
0AF05 01 84 00 85 04 00 02 DE.. .db $01, $84, $00, $85, $04, $00, $02, $de, $0e, $00, $00, $de, $0b, $00, $00, $80
0AF15 00 81 00 82 0C 00 00 83.. .db $00, $81, $00, $82, $0c, $00, $00, $83, $00, $84, $00, $85, $27, $00, $00, $80
0AF25 05 81 00 82 03 00 01 C2.. .db $05, $81, $00, $82, $03, $00, $01, $c2, $01, $00, $00, $83, $05, $84, $00, $85
0AF35 0B 00 00 C2 0E 00 00 C2.. .db $0b, $00, $00, $c2, $0e, $00, $00, $c2, $03, $00, $00, $12, $00, $13, $03, $00
0AF45 00 12 00 13 06 00 00 61.. .db $00, $12, $00, $13, $06, $00, $00, $61, $00, $14, $00, $15, $03, $61, $00, $14
0AF55 00 15 00 12 00 13 03 00.. .db $00, $15, $00, $12, $00, $13, $03, $00, $01, $61, $05, $de, $00, $14, $00, $15
0AF65 00 14 00 15 02 00 02 61.. .db $00, $14, $00, $15, $02, $00, $02, $61, $2f, $de, $02, $00, $0c, $de, $12, $00
0AF75 00 C2 09 00 01 61 01 00.. .db $00, $c2, $09, $00, $01, $61, $01, $00, $00, $c2, $00, $00, $00, $c2, $02, $00
0AF85 00 80 02 81 00 82 00 00.. .db $00, $80, $02, $81, $00, $82, $00, $00, $00, $14, $00, $15, $00, $00, $00, $c2
0AF95 02 00 00 C2 01 00 00 83.. .db $02, $00, $00, $c2, $01, $00, $00, $83, $02, $84, $00, $85, $00, $00, $00, $14
0AFA5 00 15 0D 00 00 2C 00 2D.. .db $00, $15, $0d, $00, $00, $2c, $00, $2d, $00, $61, $04, $00, $00, $61, $08, $00
0AFB5 00 61 04 00 01 61 07 00.. .db $00, $61, $04, $00, $01, $61, $07, $00, $00, $61, $04, $8a, $02, $61, $06, $00
0AFC5 07 DE 03 00 00 DF 02 E0.. .db $07, $de, $03, $00, $00, $df, $02, $e0, $06, $de, $08, $00, $03, $de, $0b, $00
0AFD5 01 DE 0D 00 00 80 01 81.. .db $01, $de, $0d, $00, $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84
0AFE5 00 85 09 00 00 80 00 81.. .db $00, $85, $09, $00, $00, $80, $00, $81, $01, $00, $01, $61, $01, $00, $01, $61
0AFF5 09 00 00 14 00 15 01 00.. .db $09, $00, $00, $14, $00, $15, $01, $00, $00, $14, $00, $15, $09, $00, $00, $14
0B005 00 15 01 00 00 14 00 15.. .db $00, $15, $01, $00, $00, $14, $00, $15, $09, $00, $00, $2c, $00, $2d, $01, $00
0B015 00 2C 00 2D 37 00 08 E0.. .db $00, $2c, $00, $2d, $37, $00, $08, $e0, $00, $e1, $0f, $00, $00, $80, $02, $81
0B025 00 82 0A 00 00 83 02 84.. .db $00, $82, $0a, $00, $00, $83, $02, $84, $00, $85, $20, $00, $03, $81, $00, $82
0B035 0F 00 01 8A 0D 00 00 14.. .db $0f, $00, $01, $8a, $0d, $00, $00, $14, $00, $15, $02, $00, $00, $80, $02, $81
0B045 00 82 05 00 00 14 00 15.. .db $00, $82, $05, $00, $00, $14, $00, $15, $02, $00, $00, $83, $02, $84, $00, $85
0B055 05 00 00 2C 00 2D 12 00.. .db $05, $00, $00, $2c, $00, $2d, $12, $00, $00, $12, $00, $13, $0d, $00, $00, $14
0B065 00 15 03 00 00 12 00 13.. .db $00, $15, $03, $00, $00, $12, $00, $13, $07, $00, $00, $14, $00, $15, $00, $12
0B075 00 13 00 12 00 13 00 14.. .db $00, $13, $00, $12, $00, $13, $00, $14, $00, $15, $00, $12, $00, $13, $00, $12
0B085 00 13 00 12 00 13 00 12.. .db $00, $13, $00, $12, $00, $13, $00, $12, $00, $13, $00, $14, $00, $15, $00, $14
0B095 00 15 00 14 00 15 00 14.. .db $00, $15, $00, $14, $00, $15, $00, $14, $00, $15, $00, $14, $00, $15, $00, $14
0B0A5 00 15 00 14 00 15 00 14.. .db $00, $15, $00, $14, $00, $15, $00, $14, $00, $15, $00, $14, $00, $15, $00, $14
0B0B5 00 15 00 14 00 15 00 14.. .db $00, $15, $00, $14, $00, $15, $00, $14, $00, $15, $00, $14, $00, $15, $00, $14
0B0C5 00 15 00 14 00 15 00 14.. .db $00, $15, $00, $14, $00, $15, $00, $14, $00, $15, $00, $14, $00, $15, $00, $14
0B0D5 00 15 00 14 00 15 00 DF.. .db $00, $15, $00, $14, $00, $15, $00, $df, $0e, $e0, $20, $00, $01, $8a, $0d, $00
0B0E5 00 14 00 15 0D 00 00 14.. .db $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15, $07, $00, $00, $80, $02, $81
0B0F5 00 82 00 00 00 2C 00 2D.. .db $00, $82, $00, $00, $00, $2c, $00, $2d, $07, $00, $00, $83, $02, $84, $00, $85
0B105 13 00 00 12 00 13 01 00.. .db $13, $00, $00, $12, $00, $13, $01, $00, $00, $df, $05, $e0, $00, $e1, $03, $00
0B115 00 14 00 15 09 00 00 12.. .db $00, $14, $00, $15, $09, $00, $00, $12, $00, $13, $00, $12, $00, $13, $00, $14
0B125 00 15 09 00 00 14 00 15.. .db $00, $15, $09, $00, $00, $14, $00, $15, $00, $14, $00, $15, $00, $14, $00, $15
0B135 09 00 00 14 00 15 00 14.. .db $09, $00, $00, $14, $00, $15, $00, $14, $00, $15, $00, $14, $00, $15, $09, $00
0B145 04 E0 00 E1 01 00 00 80.. .db $04, $e0, $00, $e1, $01, $00, $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83
0B155 01 84 00 85 26 00 00 80.. .db $01, $84, $00, $85, $26, $00, $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83
0B165 01 84 00 85 05 00 00 80.. .db $01, $84, $00, $85, $05, $00, $00, $80, $01, $81, $0c, $00, $00, $83, $01, $84
0B175 09 00 00 DF 00 E1 25 00.. .db $09, $00, $00, $df, $00, $e1, $25, $00, $00, $df, $01, $e0, $00, $e1, $0c, $00
0B185 00 80 03 81 00 82 09 00.. .db $00, $80, $03, $81, $00, $82, $09, $00, $00, $83, $03, $84, $00, $85, $12, $00
0B195 00 80 02 81 0B 00 00 83.. .db $00, $80, $02, $81, $0b, $00, $00, $83, $02, $84, $11, $00, $00, $24, $0e, $00
0B1A5 00 25 00 00 00 80 02 81.. .db $00, $25, $00, $00, $00, $80, $02, $81, $00, $82, $06, $00, $00, $82, $00, $00
0B1B5 00 25 00 00 00 83 02 84.. .db $00, $25, $00, $00, $00, $83, $02, $84, $00, $85, $06, $00, $00, $85, $00, $00
0B1C5 00 25 0E 00 00 25 0E 00.. .db $00, $25, $0e, $00, $00, $25, $0e, $00, $00, $25, $08, $00, $00, $80, $01, $81
0B1D5 00 82 01 00 00 25 03 00.. .db $00, $82, $01, $00, $00, $25, $03, $00, $02, $45, $01, $00, $00, $83, $01, $84
0B1E5 00 85 01 00 00 25 03 00.. .db $00, $85, $01, $00, $00, $25, $03, $00, $00, $46, $00, $47, $00, $48, $07, $00
0B1F5 00 25 01 00 00 0D 00 45.. .db $00, $25, $01, $00, $00, $0d, $00, $45, $02, $49, $00, $45, $06, $00, $00, $25
0B205 01 00 00 0F 01 47 00 4A.. .db $01, $00, $00, $0f, $01, $47, $00, $4a, $01, $47, $04, $00, $00, $82, $00, $00
0B215 00 61 01 4D 00 4E 01 47.. .db $00, $61, $01, $4d, $00, $4e, $01, $47, $00, $4b, $01, $70, $04, $00, $00, $85
0B225 00 00 00 DF 0C E0 31 00.. .db $00, $00, $00, $df, $0c, $e0, $31, $00, $00, $80, $04, $81, $00, $82, $08, $00
0B235 00 83 04 84 00 85 2F 00.. .db $00, $83, $04, $84, $00, $85, $2f, $00, $00, $80, $01, $81, $00, $82, $0b, $00
0B245 00 83 01 84 00 85 32 00.. .db $00, $83, $01, $84, $00, $85, $32, $00, $0f, $e0, $0f, $000B251 FD                              .db $fd
0B252                           	  
0B252                           ;level 5-3
0B252                           L53:
0B252 90 11                     	  .db $90, $11
0B254                           	  include "code\leveldata\levels\5-3.asm"
0B254                           
0B254 27 00 00 80 03 81 00 82.. .db $27, $00, $00, $80, $03, $81, $00, $82, $09, $00, $00, $83, $03, $84, $00, $85
0B264 22 00 02 45 0C 00 00 46.. .db $22, $00, $02, $45, $0c, $00, $00, $46, $00, $47, $00, $48, $05, $00, $00, $c1
0B274 01 C0 02 00 00 45 02 49.. .db $01, $c0, $02, $00, $00, $45, $02, $49, $00, $45, $0a, $00, $01, $47, $00, $4a
0B284 01 47 0A 00 01 47 00 4B.. .db $01, $47, $0a, $00, $01, $47, $00, $4b, $00, $70, $00, $47, $0a, $4d, $0e, $e0
0B294 00 E1 29 00 01 C2 11 00.. .db $00, $e1, $29, $00, $01, $c2, $11, $00, $00, $80, $00, $81, $0d, $00, $00, $83
0B2A4 00 84 02 00 00 C2 12 00.. .db $00, $84, $02, $00, $00, $c2, $12, $00, $00, $61, $0d, $00, $01, $61, $0a, $00
0B2B4 01 4D 02 61 05 00 01 DE.. .db $01, $4d, $02, $61, $05, $00, $01, $de, $01, $00, $00, $df, $03, $e0, $00, $e1
0B2C4 04 00 02 DE 0C 00 02 DE.. .db $04, $00, $02, $de, $0c, $00, $02, $de, $0e, $00, $00, $de, $02, $00, $00, $80
0B2D4 01 81 00 82 0B 00 00 83.. .db $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85, $25, $00, $00, $80
0B2E4 03 81 00 82 02 00 00 12.. .db $03, $81, $00, $82, $02, $00, $00, $12, $00, $13, $04, $00, $00, $83, $03, $84
0B2F4 00 85 02 00 00 14 00 15.. .db $00, $85, $02, $00, $00, $14, $00, $15, $0b, $00, $04, $de, $06, $00, $00, $12
0B304 00 13 07 DE 04 00 00 61.. .db $00, $13, $07, $de, $04, $00, $00, $61, $00, $14, $00, $15, $07, $de, $04, $00
0B314 00 DF 09 DE 05 00 09 DE.. .db $00, $df, $09, $de, $05, $00, $09, $de, $05, $00, $08, $de, $02, $00, $00, $80
0B324 00 81 00 82 00 00 08 DE.. .db $00, $81, $00, $82, $00, $00, $08, $de, $02, $00, $00, $83, $00, $84, $00, $85
0B334 00 00 06 DE 1C 00 01 C2.. .db $00, $00, $06, $de, $1c, $00, $01, $c2, $09, $00, $00, $81, $00, $82, $00, $00
0B344 00 C2 01 00 00 C2 08 00.. .db $00, $c2, $01, $00, $00, $c2, $08, $00, $00, $84, $00, $85, $00, $c2, $03, $00
0B354 00 C2 1B 00 01 8A 04 00.. .db $00, $c2, $1b, $00, $01, $8a, $04, $00, $00, $80, $00, $81, $00, $82, $01, $00
0B364 01 61 01 8A 01 61 01 8A.. .db $01, $61, $01, $8a, $01, $61, $01, $8a, $02, $61, $00, $83, $00, $84, $00, $85
0B374 01 00 09 E0 00 E1 02 00.. .db $01, $00, $09, $e0, $00, $e1, $02, $00, $01, $de, $0c, $00, $02, $de, $04, $00
0B384 00 80 02 81 00 82 02 00.. .db $00, $80, $02, $81, $00, $82, $02, $00, $02, $de, $04, $00, $00, $83, $02, $84
0B394 00 85 03 00 01 DE 39 00.. .db $00, $85, $03, $00, $01, $de, $39, $00, $00, $80, $03, $81, $00, $82, $00, $00
0B3A4 02 C0 00 C1 04 00 00 83.. .db $02, $c0, $00, $c1, $04, $00, $00, $83, $03, $84, $00, $85, $05, $00, $00, $12
0B3B4 00 13 0D 00 00 14 00 15.. .db $00, $13, $0d, $00, $00, $14, $00, $15, $00, $00, $00, $12, $00, $13, $05, $00
0B3C4 03 4D 00 00 00 14 00 15.. .db $03, $4d, $00, $00, $00, $14, $00, $15, $00, $00, $00, $14, $00, $15, $00, $00
0B3D4 00 12 00 13 01 00 06 DE.. .db $00, $12, $00, $13, $01, $00, $06, $de, $00, $15, $00, $00, $00, $14, $00, $15
0B3E4 00 00 00 14 00 15 01 00.. .db $00, $00, $00, $14, $00, $15, $01, $00, $09, $de, $00, $15, $00, $00, $00, $14
0B3F4 00 15 01 00 0A DE 00 00.. .db $00, $15, $01, $00, $0a, $de, $00, $00, $00, $14, $00, $15, $01, $00, $0b, $de
0B404 00 14 00 15 01 00 0C DE.. .db $00, $14, $00, $15, $01, $00, $0c, $de, $00, $15, $01, $00, $0d, $de, $00, $00
0B414 00 80 02 00 09 DE 01 00.. .db $00, $80, $02, $00, $09, $de, $01, $00, $00, $83, $07, $00, $03, $de, $19, $00
0B424 00 80 00 81 00 82 08 00.. .db $00, $80, $00, $81, $00, $82, $08, $00, $01, $c2, $01, $00, $00, $83, $00, $84
0B434 00 85 01 C2 13 00 00 80.. .db $00, $85, $01, $c2, $13, $00, $00, $80, $05, $00, $00, $61, $07, $00, $00, $83
0B444 04 00 02 61 08 00 00 DF.. .db $04, $00, $02, $61, $08, $00, $00, $df, $08, $e0, $00, $e1, $12, $00, $00, $60
0B454 1F 00 01 81 00 82 04 00.. .db $1f, $00, $01, $81, $00, $82, $04, $00, $00, $80, $02, $81, $00, $82, $01, $00
0B464 00 DF 01 84 00 85 04 00.. .db $00, $df, $01, $84, $00, $85, $04, $00, $00, $83, $02, $84, $00, $85, $23, $00
0B474 02 C0 04 00 02 C2 10 00.. .db $02, $c0, $04, $00, $02, $c2, $10, $00, $00, $80, $03, $81, $00, $82, $09, $00
0B484 00 83 03 84 00 85 0C 00.. .db $00, $83, $03, $84, $00, $85, $0c, $00, $04, $61, $02, $00, $04, $61, $02, $8a
0B494 00 4E 02 00 00 61 02 00.. .db $00, $4e, $02, $00, $00, $61, $02, $00, $00, $61, $02, $00, $03, $61, $00, $4e
0B4A4 02 00 00 61 02 8A 00 61.. .db $02, $00, $00, $61, $02, $8a, $00, $61, $06, $00, $00, $4e, $02, $00, $04, $61
0B4B4 06 00 00 4E 0E 00 00 E0.. .db $06, $00, $00, $4e, $0e, $00, $00, $e0, $00, $e1, $03, $00, $00, $80, $03, $81
0B4C4 00 82 09 00 00 83 03 84.. .db $00, $82, $09, $00, $00, $83, $03, $84, $00, $85, $17, $00, $01, $c2, $01, $00
0B4D4 00 80 00 81 00 82 0C 00.. .db $00, $80, $00, $81, $00, $82, $0c, $00, $00, $83, $00, $84, $00, $85, $04, $00
0B4E4 00 82 0E 00 00 85 0B 00.. .db $00, $82, $0e, $00, $00, $85, $0b, $00, $01, $c2, $03, $00, $03, $61, $08, $00
0B4F4 02 8A 00 61 01 00 00 61.. .db $02, $8a, $00, $61, $01, $00, $00, $61, $08, $00, $03, $61, $01, $00, $00, $61
0B504 0E 00 00 61 04 00 03 61.. .db $0e, $00, $00, $61, $04, $00, $03, $61, $05, $00, $00, $61, $04, $8a, $00, $61
0B514 01 00 00 61 00 80 02 81.. .db $01, $00, $00, $61, $00, $80, $02, $81, $00, $82, $00, $00, $06, $61, $01, $00
0B524 00 61 00 83 02 84 00 85.. .db $00, $61, $00, $83, $02, $84, $00, $85, $08, $00, $00, $80, $00, $81, $0d, $00
0B534 00 83 00 84 13 00 02 C2.. .db $00, $83, $00, $84, $13, $00, $02, $c2, $20, $00, $00, $80, $01, $81, $00, $82
0B544 01 C2 09 00 00 83 01 84.. .db $01, $c2, $09, $00, $00, $83, $01, $84, $00, $85, $06, $00, $04, $61, $0a, $00
0B554 00 61 02 00 00 61 0A 00.. .db $00, $61, $02, $00, $00, $61, $0a, $00, $00, $61, $02, $00, $00, $61, $02, $00
0B564 03 61 03 00 00 61 02 00.. .db $03, $61, $03, $00, $00, $61, $02, $00, $00, $61, $02, $00, $00, $61, $01, $00
0B574 00 61 00 00 02 8A 00 61.. .db $00, $61, $00, $00, $02, $8a, $00, $61, $02, $00, $00, $61, $02, $00, $00, $61
0B584 01 00 00 61 00 00 03 61.. .db $01, $00, $00, $61, $00, $00, $03, $61, $02, $00, $00, $61, $02, $00, $00, $61
0B594 01 00 00 61 00 00 02 81.. .db $01, $00, $00, $61, $00, $00, $02, $81, $00, $82, $02, $00, $00, $61, $02, $8a
0B5A4 00 61 01 00 00 61 00 8A.. .db $00, $61, $01, $00, $00, $61, $00, $8a, $02, $84, $00, $85, $02, $00, $04, $61
0B5B4 01 00 01 61 2A 00 00 80.. .db $01, $00, $01, $61, $2a, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83
0B5C4 02 84 00 85 0F 00 00 80.. .db $02, $84, $00, $85, $0f, $00, $00, $80, $01, $81, $00, $82, $02, $c0, $01, $00
0B5D4 00 12 00 13 01 00 02 C0.. .db $00, $12, $00, $13, $01, $00, $02, $c0, $00, $83, $01, $84, $00, $85, $04, $00
0B5E4 00 14 00 15 0D 00 00 14.. .db $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15
0B5F4 06 00 0D 61 01 00 00 61.. .db $06, $00, $0d, $61, $01, $00, $00, $61, $0c, $00, $01, $8a, $00, $61, $00, $80
0B604 02 81 00 82 07 00 02 61.. .db $02, $81, $00, $82, $07, $00, $02, $61, $00, $83, $02, $84, $00, $85, $3f, $00
0B614 00 C0 02 00 00 80 02 81.. .db $00, $c0, $02, $00, $00, $80, $02, $81, $0b, $00, $00, $83, $02, $84, $15, $00
0B624 04 0B 09 00 00 DF 04 E0.. .db $04, $0b, $09, $00, $00, $df, $04, $e0, $00, $e1, $13, $00, $01, $61, $0e, $00
0B634 00 4E 0E 00 00 4E 04 00.. .db $00, $4e, $0e, $00, $00, $4e, $04, $00, $00, $80, $01, $81, $00, $82, $04, $00
0B644 00 DF 00 E0 00 E1 03 00.. .db $00, $df, $00, $e0, $00, $e1, $03, $00, $00, $83, $01, $84, $00, $85, $2c, $00
0B654 00 80 03 81 00 82 01 00.. .db $00, $80, $03, $81, $00, $82, $01, $00, $00, $82, $06, $00, $00, $83, $03, $84
0B664 00 85 01 00 00 85 03 00.. .db $00, $85, $01, $00, $00, $85, $03, $00, $00, $c0, $00, $c1, $09, $00, $00, $12
0B674 00 13 0D 00 00 14 00 15.. .db $00, $13, $0d, $00, $00, $14, $00, $15, $0c, $00, $04, $de, $03, $00, $00, $12
0B684 00 13 04 00 06 DE 01 00.. .db $00, $13, $04, $00, $06, $de, $01, $00, $00, $14, $00, $15, $00, $00, $00, $12
0B694 00 13 01 00 08 DE 00 14.. .db $00, $13, $01, $00, $08, $de, $00, $14, $00, $15, $00, $00, $00, $14, $00, $15
0B6A4 00 00 00 12 0B DE 00 14.. .db $00, $00, $00, $12, $0b, $de, $00, $14, $00, $15, $00, $00, $00, $14, $2f, $de
0B6B4 17 00 00 80 02 81 00 82.. .db $17, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83, $02, $84, $00, $85
0B6C4 09 00 01 C2 01 00 00 DF.. .db $09, $00, $01, $c2, $01, $00, $00, $df, $03, $e0, $20, $00, $00, $80, $00, $81
0B6D4 00 82 09 00 01 C2 00 00.. .db $00, $82, $09, $00, $01, $c2, $00, $00, $00, $83, $00, $84, $00, $85, $00, $00
0B6E4 00 DF 03 E0 00 E1 02 00.. .db $00, $df, $03, $e0, $00, $e1, $02, $00, $01, $c2, $00, $13, $0c, $00, $01, $c2
0B6F4 00 15 0E 00 00 DE 01 00.. .db $00, $15, $0e, $00, $00, $de, $01, $00, $02, $4d, $03, $00, $02, $4d, $02, $00
0B704 1F DE 2B 00 00 80 02 81.. .db $1f, $de, $2b, $00, $00, $80, $02, $81, $02, $e0, $00, $e1, $07, $00, $00, $83
0B714 02 84 01 00 00 80 01 81.. .db $02, $84, $01, $00, $00, $80, $01, $81, $00, $82, $02, $00, $01, $61, $06, $00
0B724 00 83 01 84 00 85 01 00.. .db $00, $83, $01, $84, $00, $85, $01, $00, $02, $61, $04, $00, $00, $c2, $05, $00
0B734 03 61 04 00 00 C2 04 00.. .db $03, $61, $04, $00, $00, $c2, $04, $00, $04, $61, $04, $00, $00, $c2, $03, $00
0B744 05 61 08 00 06 61 05 00.. .db $05, $61, $08, $00, $06, $61, $05, $00, $01, $4d, $07, $61, $00, $4d, $03, $00
0B754 1F DE 01 00 00 24 04 00.. .db $1f, $de, $01, $00, $00, $24, $04, $00, $02, $45, $06, $00, $00, $25, $04, $00
0B764 00 46 00 47 00 48 04 00.. .db $00, $46, $00, $47, $00, $48, $04, $00, $00, $81, $00, $82, $00, $25, $03, $00
0B774 00 45 02 49 00 45 03 00.. .db $00, $45, $02, $49, $00, $45, $03, $00, $00, $84, $00, $85, $00, $25, $03, $00
0B784 01 47 00 4A 01 47 05 00.. .db $01, $47, $00, $4a, $01, $47, $05, $00, $00, $25, $03, $00, $01, $47, $00, $4b
0B794 00 70 00 47 05 00 00 25.. .db $00, $70, $00, $47, $05, $00, $00, $25, $01, $00, $01, $45, $04, $49, $01, $45
0B7A4 03 00 00 25 01 00 02 47.. .db $03, $00, $00, $25, $01, $00, $02, $47, $00, $4a, $00, $47, $00, $4a, $02, $47
0B7B4 03 00 00 25 01 00 02 47.. .db $03, $00, $00, $25, $01, $00, $02, $47, $00, $4b, $00, $47, $00, $4b, $02, $47
0B7C4 03 00 00 25 01 00 08 47.. .db $03, $00, $00, $25, $01, $00, $08, $47, $03, $00, $00, $25, $01, $00, $01, $47
0B7D4 00 4A 00 47 00 4A 00 47.. .db $00, $4a, $00, $47, $00, $4a, $00, $47, $00, $4a, $01, $47, $02, $00, $00, $4d
0B7E4 00 61 01 4D 01 47 00 4B.. .db $00, $61, $01, $4d, $01, $47, $00, $4b, $00, $70, $00, $4b, $00, $47, $00, $4b
0B7F4 01 47 01 00 1F DE 1F 00.. .db $01, $47, $01, $00, $1f, $de, $1f, $00, $00, $80, $02, $81, $00, $82, $07, $00
0B804 00 80 00 81 00 82 00 83.. .db $00, $80, $00, $81, $00, $82, $00, $83, $02, $84, $00, $85, $07, $00, $00, $83
0B814 00 84 00 85 33 00 00 80.. .db $00, $84, $00, $85, $33, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83
0B824 02 84 00 85 13 00 00 80.. .db $02, $84, $00, $85, $13, $00, $00, $80, $00, $81, $00, $82, $0c, $00, $00, $83
0B834 00 84 00 85 1F DE         .db $00, $84, $00, $85, $1f, $de0B83A FD                              .db $fd
0B83B                           
0B83B                           L54:
0B83B 90 11                     	  .db $90, $11
0B83D                           	  include "code\leveldata\levels\5-4.asm"
0B83D                           
0B83D 10 62 00 80 00 81 00 82.. .db $10, $62, $00, $80, $00, $81, $00, $82, $0a, $00, $01, $62, $00, $83, $00, $84
0B84D 00 85 0B 00 00 62 07 00.. .db $00, $85, $0b, $00, $00, $62, $07, $00, $00, $80, $01, $81, $00, $82, $02, $00
0B85D 00 62 07 00 00 83 01 84.. .db $00, $62, $07, $00, $00, $83, $01, $84, $00, $85, $02, $00, $0b, $62, $03, $00
0B86D 0B 62 03 00 0B 62 03 00.. .db $0b, $62, $03, $00, $0b, $62, $03, $00, $0b, $62, $00, $c4, $02, $00, $57, $62
0B87D 07 00 07 62 01 00 00 80.. .db $07, $00, $07, $62, $01, $00, $00, $80, $02, $81, $00, $82, $00, $00, $07, $62
0B88D 01 00 00 83 02 84 00 85.. .db $01, $00, $00, $83, $02, $84, $00, $85, $00, $00, $05, $62, $35, $00, $03, $62
0B89D 08 00 46 62 08 00 06 62.. .db $08, $00, $46, $62, $08, $00, $06, $62, $02, $00, $02, $c2, $0b, $00, $00, $c2
0B8AD 02 00 00 C2 09 00 00 C2.. .db $02, $00, $00, $c2, $09, $00, $00, $c2, $04, $00, $00, $c2, $01, $00, $00, $80
0B8BD 01 81 00 82 0B 00 00 83.. .db $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85, $1e, $00, $01, $62
0B8CD 00 00 00 62 06 00 06 62.. .db $00, $00, $00, $62, $06, $00, $06, $62, $00, $00, $00, $62, $06, $90, $06, $62
0B8DD 00 00 01 62 06 91 05 62.. .db $00, $00, $01, $62, $06, $91, $05, $62, $00, $00, $02, $62, $06, $91, $06, $62
0B8ED 06 91 09 62 06 91 16 62.. .db $06, $91, $09, $62, $06, $91, $16, $62, $08, $00, $06, $62, $08, $00, $06, $62
0B8FD 08 00 06 62 02 00 02 62.. .db $08, $00, $06, $62, $02, $00, $02, $62, $02, $00, $06, $62, $02, $00, $02, $62
0B90D 02 90 06 62 01 00 00 C6.. .db $02, $90, $06, $62, $01, $00, $00, $c6, $02, $62, $02, $91, $04, $62, $00, $c4
0B91D 00 62 02 00 02 62 02 91.. .db $00, $62, $02, $00, $02, $62, $02, $91, $06, $62, $02, $00, $02, $62, $09, $91
0B92D 02 00 02 62 09 91 05 62.. .db $02, $00, $02, $62, $09, $91, $05, $62, $09, $91, $2f, $62, $0e, $91, $00, $62
0B93D 0E 91 00 62 0E 91 00 62.. .db $0e, $91, $00, $62, $0e, $91, $00, $62, $02, $91, $08, $62, $02, $91, $00, $62
0B94D 02 91 00 62 00 C4 04 62.. .db $02, $91, $00, $62, $00, $c4, $04, $62, $00, $c4, $00, $62, $02, $91, $00, $62
0B95D 02 91 08 62 02 91 00 62.. .db $02, $91, $08, $62, $02, $91, $00, $62, $02, $91, $08, $62, $06, $91, $08, $62
0B96D 06 91 08 62 06 91 08 62.. .db $06, $91, $08, $62, $06, $91, $08, $62, $03, $91, $61, $62, $0a, $91, $02, $62
0B97D 00 C4 00 62 0A 91 04 62.. .db $00, $c4, $00, $62, $0a, $91, $04, $62, $0a, $91, $02, $62, $03, $91, $00, $c6
0B98D 00 91 03 62 02 91 00 62.. .db $00, $91, $03, $62, $02, $91, $00, $62, $00, $c4, $00, $62, $05, $91, $03, $62
0B99D 02 91 02 62 05 91 03 62.. .db $02, $91, $02, $62, $05, $91, $03, $62, $0b, $91, $03, $62, $05, $91, $09, $62
0B9AD 05 91 09 62 05 91 0C 62.. .db $05, $91, $09, $62, $05, $91, $0c, $62, $02, $00, $07, $62, $02, $00, $01, $62
0B9BD 01 00 00 80 07 62 02 00.. .db $01, $00, $00, $80, $07, $62, $02, $00, $01, $62, $00, $60, $00, $00, $00, $83
0B9CD 07 62 02 90 01 62 02 00.. .db $07, $62, $02, $90, $01, $62, $02, $00, $0a, $91, $01, $62, $02, $00, $0a, $91
0B9DD 04 62 0A 91 04 62 02 91.. .db $04, $62, $0a, $91, $04, $62, $02, $91, $04, $62, $0a, $91, $00, $62, $00, $c4
0B9ED 02 62 0A 91 04 62 05 91.. .db $02, $62, $0a, $91, $04, $62, $05, $91, $00, $61, $03, $91, $04, $62, $02, $91
0B9FD 04 62 02 91 04 62 02 91.. .db $04, $62, $02, $91, $04, $62, $02, $91, $04, $62, $02, $91, $04, $62, $02, $91
0BA0D 01 62 12 00 02 81 00 82.. .db $01, $62, $12, $00, $02, $81, $00, $82, $0a, $00, $00, $80, $02, $84, $00, $85
0BA1D 00 00 01 C2 00 00 00 80.. .db $00, $00, $01, $c2, $00, $00, $00, $80, $01, $81, $00, $82, $02, $00, $00, $83
0BA2D 07 00 00 83 01 84 00 85.. .db $07, $00, $00, $83, $01, $84, $00, $85, $13, $00, $0a, $62, $02, $00, $0c, $62
0BA3D 02 90 01 62 01 91 00 61.. .db $02, $90, $01, $62, $01, $91, $00, $61, $06, $91, $00, $61, $02, $91, $01, $62
0BA4D 0D 91 01 62 05 91 00 61.. .db $0d, $91, $01, $62, $05, $91, $00, $61, $06, $91, $21, $62, $1f, $00, $00, $81
0BA5D 00 82 0D 00 00 84 00 85.. .db $00, $82, $0d, $00, $00, $84, $00, $85, $02, $00, $00, $12, $00, $13, $00, $00
0BA6D 00 80 02 81 00 82 03 00.. .db $00, $80, $02, $81, $00, $82, $03, $00, $00, $12, $00, $13, $01, $00, $00, $14
0BA7D 00 15 00 00 00 83 02 84.. .db $00, $15, $00, $00, $00, $83, $02, $84, $00, $85, $01, $c2, $01, $00, $00, $14
0BA8D 00 15 01 00 00 14 00 15.. .db $00, $15, $01, $00, $00, $14, $00, $15, $08, $00, $09, $62, $00, $12, $00, $13
0BA9D 03 00 09 62 00 14 00 15.. .db $03, $00, $09, $62, $00, $14, $00, $15, $00, $00, $00, $12, $00, $13, $08, $00
0BAAD 01 62 00 14 00 15 00 00.. .db $01, $62, $00, $14, $00, $15, $00, $00, $00, $14, $00, $15, $00, $c4, $07, $00
0BABD 07 62 00 00 00 80 02 81.. .db $07, $62, $00, $00, $00, $80, $02, $81, $00, $82, $01, $00, $07, $62, $00, $00
0BACD 00 83 02 84 00 85 2A 00.. .db $00, $83, $02, $84, $00, $85, $2a, $00, $00, $80, $01, $81, $00, $82, $0b, $00
0BADD 00 83 01 84 00 85 01 C2.. .db $00, $83, $01, $84, $00, $85, $01, $c2, $12, $00, $00, $80, $02, $81, $00, $82
0BAED 0A 00 00 83 02 84 00 85.. .db $0a, $00, $00, $83, $02, $84, $00, $85, $03, $00, $00, $55, $04, $51, $23, $00
0BAFD 00 12 00 13 0D 00 00 14.. .db $00, $12, $00, $13, $0d, $00, $00, $14, $00, $15, $00, $00, $0e, $62, $00, $00
0BB0D 0E 62 48 00 00 80 01 81.. .db $0e, $62, $48, $00, $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84
0BB1D 00 85 03 00 00 C2 03 00.. .db $00, $85, $03, $00, $00, $c2, $03, $00, $00, $c2, $24, $00, $00, $12, $00, $13
0BB2D 04 00 01 62 06 00 00 14.. .db $04, $00, $01, $62, $06, $00, $00, $14, $00, $15, $04, $00, $01, $62, $02, $00
0BB3D 08 62 01 00 01 62 02 00.. .db $08, $62, $01, $00, $01, $62, $02, $00, $08, $62, $01, $00, $01, $62, $06, $00
0BB4D 00 14 00 15 04 00 01 62.. .db $00, $14, $00, $15, $04, $00, $01, $62, $06, $00, $00, $2c, $00, $2d, $3f, $00
0BB5D 00 80 00 81 00 82 06 00.. .db $00, $80, $00, $81, $00, $82, $06, $00, $00, $c2, $02, $00, $01, $c2, $00, $83
0BB6D 00 84 00 85 01 00 00 C2.. .db $00, $84, $00, $85, $01, $00, $00, $c2, $0d, $00, $00, $80, $02, $81, $00, $82
0BB7D 0A 00 00 83 02 84 00 85.. .db $0a, $00, $00, $83, $02, $84, $00, $85, $0d, $00, $01, $62, $02, $00, $05, $62
0BB8D 00 00 00 62 02 00 01 62.. .db $00, $00, $00, $62, $02, $00, $01, $62, $02, $00, $05, $62, $00, $00, $00, $62
0BB9D 02 00 01 62 22 00 00 80.. .db $02, $00, $01, $62, $22, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83
0BBAD 02 84 00 85 3E 00 00 C0.. .db $02, $84, $00, $85, $3e, $00, $00, $c0, $00, $00, $00, $c1, $07, $00, $00, $80
0BBBD 01 81 00 82 06 00 00 12.. .db $01, $81, $00, $82, $06, $00, $00, $12, $00, $13, $02, $00, $00, $83, $01, $84
0BBCD 00 85 06 00 00 14 00 15.. .db $00, $85, $06, $00, $00, $14, $00, $15, $0d, $00, $0c, $62, $02, $00, $0c, $62
0BBDD 02 00 01 62 0D 00 01 62.. .db $02, $00, $01, $62, $0d, $00, $01, $62, $0d, $00, $01, $62, $06, $00, $00, $80
0BBED 01 81 00 82 02 00 01 62.. .db $01, $81, $00, $82, $02, $00, $01, $62, $06, $00, $00, $83, $01, $84, $00, $85
0BBFD 02 00 01 62 0D 00 00 80.. .db $02, $00, $01, $62, $0d, $00, $00, $80, $03, $81, $00, $82, $09, $00, $00, $83
0BC0D 03 84 00 85 07 00 00 C0.. .db $03, $84, $00, $85, $07, $00, $00, $c0, $28, $00, $00, $80, $02, $81, $00, $82
0BC1D 0A 00 00 83 02 84 00 85.. .db $0a, $00, $00, $83, $02, $84, $00, $85, $03, $62, $00, $12, $00, $13, $00, $12
0BC2D 00 13 00 12 00 13 05 00.. .db $00, $13, $00, $12, $00, $13, $05, $00, $03, $62, $00, $14, $00, $15, $00, $14
0BC3D 00 15 00 14 00 15 07 00.. .db $00, $15, $00, $14, $00, $15, $07, $00, $0d, $62, $01, $00, $0d, $62, $0d, $00
0BC4D 01 62 0D 00 01 62 0D 00.. .db $01, $62, $0d, $00, $01, $62, $0d, $00, $01, $62, $23, $00, $00, $80, $01, $81
0BC5D 00 82 0B 00 00 83 01 84.. .db $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85, $14, $00, $00, $80, $01, $81
0BC6D 0C 00 00 83 01 84 0C 00.. .db $0c, $00, $00, $83, $01, $84, $0c, $00, $00, $c5, $0e, $00, $02, $62, $0c, $89
0BC7D 02 62 0C 00 02 62 0C 90.. .db $02, $62, $0c, $00, $02, $62, $0c, $90, $02, $62, $0c, $91, $02, $62, $0c, $91
0BC8D 02 62 15 00 00 80 00 81.. .db $02, $62, $15, $00, $00, $80, $00, $81, $00, $82, $0c, $00, $00, $83, $00, $84
0BC9D 00 85 16 00 00 81 00 82.. .db $00, $85, $16, $00, $00, $81, $00, $82, $0d, $00, $00, $84, $00, $85, $17, $00
0BCAD 00 80 01 81 00 82 0B 00.. .db $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85, $31, $00
0BCBD 1F 62                     .db $1f, $620BCBF FD                              .db $fd
0BCC0                           
0BCC0                           
0BCC0                           
0BCC0 00 00 00 00 00 00 00 00.. pad $c000	
0C000                           ;09
0C000                           base $a000
0A000                           include code\leveldata\levelData5.asm
0A000                           ;level 6-1
0A000                           E_GroundArea15:
0A000 A8 0D                     .db #10 * $10 + 8, #13
0A002 EA 00                      .db #14 * $10 + 10, #0
0A004                           
0A004 87 8D                      .db #8 * $10 + 7, #13 + $80
0A006 D9 06                      .db #13 * $10 + 9, #6
0A008                           
0A008 19 8D                      .db #1 * $10 + 9, #13 + $80
0A00A 5A 06                      .db #5 * $10 + 10, #6
0A00C 8A 06                      .db #8 * $10 + 10, #6
0A00E B8 0D                      .db #11 * $10 + 8, #13
0A010                           
0A010 09 8D                      .db #0 * $10 + 9, #13 + $80
0A012 6B 05                      .db #6 * $10 + 11, #5
0A014                           
0A014 09 8D                      .db #0 * $10 + 9, #13 + $80
0A016 7B 06                      .db #7 * $10 + 11, #6
0A018 9B 06                      .db #9 * $10 + 11, #6
0A01A BB 06                      .db #11 * $10 + 11, #6
0A01C D9 20                      .db #13 * $10 + 9, #32
0A01E                           
0A01E 8A 86                      .db #8 * $10 + 10, #6 + $80
0A020 EA 20                      .db #14 * $10 + 10, #32
0A022                           
0A022 5B 86                      .db #5 * $10 + 11, #6 + $80
0A024 8B 06                      .db #8 * $10 + 11, #6
0A026                           
0A026 8B 80                      .db #8 * $10 + 11, #0 + $80
0A028 BB 00                      .db #11 * $10 + 11, #0
0A02A EB 00                      .db #14 * $10 + 11, #0
0A02C                           
0A02C 57 8D                      .db #5 * $10 + 7, #13 + $80
0A02E DA 00                      .db #13 * $10 + 10, #0
0A030 FA 00                      .db #15 * $10 + 10, #0
0A032                           
0A032 1A 80                      .db #1 * $10 + 10, #0 + $80
0A034                           
0A034 08 8D                      .db #0 * $10 + 8, #13 + $80
0A036 28 20                      .db #2 * $10 + 8, #32
0A038 37 02                      .db #3 * $10 + 7, #2
0A03A 48 0D                      .db #4 * $10 + 8, #13
0A03C                           
0A03C 17 83                      .db #1 * $10 + 7, #3 + $80
0A03E FB 06                      .db #15 * $10 + 11, #6
0A040                           
0A040 1A 8D                      .db #1 * $10 + 10, #13 + $80
0A042 49 0D                      .db #4 * $10 + 9, #13
0A044 8A 0D                      .db #8 * $10 + 10, #13
0A046 CB 06                      .db #12 * $10 + 11, #6
0A048 EA 0D                      .db #14 * $10 + 10, #13
0A04A 0F 0E                      .db PageSkip, #14
0A04C                           
0A04C 22 B0                      .db #2 * $10 + 2, #48 + $80
0A04E 0F 10                      .db PageSkip, #16
0A050 FF                              .db $ff
0A051                           
0A051                           ;level 6-2
0A051                           E_GroundArea4:
0A051 D7 0D                     .db #13 * $10 + 7, #13
0A053                           
0A053 6A 92                      .db #6 * $10 + 10, #18 + $80
0A055 C8 03                      .db #12 * $10 + 8, #3
0A057 0F 03                      .db PageSkip, #3
0A059                           
0A059 3A 80                      .db #3 * $10 + 10, #0 + $80
0A05B 6A 00                      .db #6 * $10 + 10, #0
0A05D 0F 05                      .db PageSkip, #5
0A05F                           
0A05F 45 86                      .db #4 * $10 + 5, #6 + $80
0A061 75 06                      .db #7 * $10 + 5, #6
0A063 95 0D                      .db #9 * $10 + 5, #13
0A065                           
0A065 58 8D                      .db #5 * $10 + 8, #13 + $80
0A067                           
0A067 2A 83                      .db #2 * $10 + 10, #3 + $80
0A069 B9 03                      .db #11 * $10 + 9, #3
0A06B                           
0A06B 55 A0                      .db #5 * $10 + 5, #32 + $80
0A06D B5 03                      .db #11 * $10 + 5, #3
0A06F                           
0A06F 95 83                      .db #9 * $10 + 5, #3 + $80
0A071                           
0A071 88 86                      .db #8 * $10 + 8, #6 + $80
0A073 A8 06                      .db #10 * $10 + 8, #6
0A075                           
0A075 38 8D                      .db #3 * $10 + 8, #13 + $80
0A077 77 0D                      .db #7 * $10 + 7, #13
0A079 B5 0D                      .db #11 * $10 + 5, #13
0A07B                           
0A07B 93 A0                      .db #9 * $10 + 3, #32 + $80
0A07D                           
0A07D 23 86                      .db #2 * $10 + 3, #6 + $80
0A07F 43 06                      .db #4 * $10 + 3, #6
0A081 A7 20                      .db #10 * $10 + 7, #32
0A083                           
0A083 22 B0                      .db #2 * $10 + 2, #48 + $80
0A085 0F 10                      .db PageSkip, #16
0A087 FF                              .db $ff
0A088                           
0A088                           
0A088                           ;level 6-3
0A088                           E_GroundArea14:
0A088 BA 06                     	.db #11 * $10 + 10, #6
0A08A F9 0D                      .db #15 * $10 + 9, #13
0A08C                           
0A08C 5A 83                      .db #5 * $10 + 10, #3 + $80
0A08E BA 0D                      .db #11 * $10 + 10, #13
0A090                           
0A090 4B 80                      .db #4 * $10 + 11, #0 + $80
0A092 68 00                      .db #6 * $10 + 8, #0
0A094 DA 0D                      .db #13 * $10 + 10, #13
0A096 0F 04                      .db PageSkip, #4
0A098                           
0A098 14 A1                      .db #1 * $10 + 4, #33 + $80
0A09A 17 0D                      .db #1 * $10 + 7, #13
0A09C 84 21                      .db #8 * $10 + 4, #33
0A09E 87 0D                      .db #8 * $10 + 7, #13
0A0A0 0F 06                      .db PageSkip, #6
0A0A2                           
0A0A2 85 93                      .db #8 * $10 + 5, #19 + $80
0A0A4                           
0A0A4 48 80                      .db #4 * $10 + 8, #0 + $80
0A0A6 E8 06                      .db #14 * $10 + 8, #6
0A0A8                           
0A0A8 18 86                      .db #1 * $10 + 8, #6 + $80
0A0AA C9 06                      .db #12 * $10 + 9, #6
0A0AC E9 06                      .db #14 * $10 + 9, #6
0A0AE                           
0A0AE 27 A1                      .db #2 * $10 + 7, #33 + $80
0A0B0 56 22                      .db #5 * $10 + 6, #34
0A0B2                           
0A0B2 09 89                      .db #0 * $10 + 9, #9 + $80
0A0B4 C6 0D                      .db #12 * $10 + 6, #13
0A0B6 E7 20                      .db #14 * $10 + 7, #32
0A0B8                           
0A0B8 04 8D                      .db #0 * $10 + 4, #13 + $80
0A0BA 88 06                      .db #8 * $10 + 8, #6
0A0BC C8 0D                      .db #12 * $10 + 8, #13
0A0BE                           
0A0BE 8B 85                      .db #8 * $10 + 11, #5 + $80
0A0C0 0F 0E                      .db PageSkip, #14
0A0C2                           
0A0C2 22 B0                      .db #2 * $10 + 2, #48 + $80
0A0C4                           
0A0C4 4A C2                      .db #4 * $10 + 10, #66 + $80
0A0C6 59 42                      .db #5 * $10 + 9, #66
0A0C8 68 42                      .db #6 * $10 + 8, #66
0A0CA 77 42                      .db #7 * $10 + 7, #66
0A0CC 86 42                      .db #8 * $10 + 6, #66
0A0CE FF                              .db $ff
0A0CF                           
0A0CF                           ;level 6-4
0A0CF                           E64:
0A0CF 0F 01                     .db PageSkip, #1
0A0D1                           
0A0D1 7A A8                      .db #7 * $10 + 10, #40 + $80
0A0D3                           
0A0D3 2A A8                      .db #2 * $10 + 10, #40 + $80
0A0D5 C6 06                      .db #12 * $10 + 6, #6
0A0D7 E6 06                      .db #14 * $10 + 6, #6
0A0D9                           
0A0D9 29 AA                      .db #2 * $10 + 9, #42 + $80
0A0DB 0F 05                      .db PageSkip, #5
0A0DD                           
0A0DD 05 A1                      .db #0 * $10 + 5, #33 + $80
0A0DF B5 21                      .db #11 * $10 + 5, #33
0A0E1                           
0A0E1 D5 A2                      .db #13 * $10 + 5, #34 + $80
0A0E3 0F 08                      .db PageSkip, #8
0A0E5                           
0A0E5 B5 83                      .db #11 * $10 + 5, #3 + $80
0A0E7                           
0A0E7 56 8C                      .db #5 * $10 + 6, #12 + $80
0A0E9                           
0A0E9 92 C3                      .db #9 * $10 + 2, #67 + $80
0A0EB 97 00                      .db #9 * $10 + 7, #0
0A0ED D7 00                      .db #13 * $10 + 7, #0
0A0EF                           
0A0EF 07 80                      .db #0 * $10 + 7, #0 + $80
0A0F1 98 29                      .db #9 * $10 + 8, #41
0A0F3                           
0A0F3 08 A9                      .db #0 * $10 + 8, #41 + $80
0A0F5 78 29                      .db #7 * $10 + 8, #41
0A0F7 0F 0E                      .db PageSkip, #14
0A0F9                           
0A0F9 78 AD                      .db #7 * $10 + 8, #45 + $80
0A0FB                           
0A0FB 1B C1                      .db #1 * $10 + 11, #65 + $80
0A0FD 9B 35                      .db #9 * $10 + 11, #53
0A0FF FF                        	.db $ff
0A100                           
0A100                           ;level 7-1
0A100                           E_GroundArea20:
0A100 0F 01                     .db PageSkip, #1
0A102                           
0A102 2B 86                      .db #2 * $10 + 11, #6 + $80
0A104 6A 0D                      .db #6 * $10 + 10, #13
0A106 B9 42                      .db #11 * $10 + 9, #66
0A108                           
0A108 1B 80                      .db #1 * $10 + 11, #0 + $80
0A10A 5B 42                      .db #5 * $10 + 11, #66
0A10C B9 0D                      .db #11 * $10 + 9, #13
0A10E FA 00                      .db #15 * $10 + 10, #0
0A110                           
0A110 1A 80                      .db #1 * $10 + 10, #0 + $80
0A112 3A 0D                      .db #3 * $10 + 10, #13
0A114 EA 0D                      .db #14 * $10 + 10, #13
0A116                           
0A116 99 C2                      .db #9 * $10 + 9, #66 + $80
0A118 B8 42                      .db #11 * $10 + 8, #66
0A11A                           
0A11A 48 80                      .db #4 * $10 + 8, #0 + $80
0A11C                           
0A11C 3A A0                      .db #3 * $10 + 10, #32 + $80
0A11E                           
0A11E 96 86                      .db #9 * $10 + 6, #6 + $80
0A120                           
0A120 A7 86                      .db #10 * $10 + 7, #6 + $80
0A122 B6 06                      .db #11 * $10 + 6, #6
0A124 C9 0D                      .db #12 * $10 + 9, #13
0A126                           
0A126 1A 8D                      .db #1 * $10 + 10, #13 + $80
0A128 69 42                      .db #6 * $10 + 9, #66
0A12A 8B 42                      .db #8 * $10 + 11, #66
0A12C                           
0A12C 0A C2                      .db #0 * $10 + 10, #66 + $80
0A12E CA 05                      .db #12 * $10 + 10, #5
0A130                           
0A130 A8 8D                      .db #10 * $10 + 8, #13 + $80
0A132                           
0A132 D7 8F                      .db #13 * $10 + 7, #15 + $80
0A134                           
0A134 EB 83                      .db #14 * $10 + 11, #3 + $80
0A136                           
0A136 22 B0                      .db #2 * $10 + 2, #48 + $80
0A138 0F 10                      .db PageSkip, #16
0A13A FF                              .db $ff
0A13B                           
0A13B                           ; :--
0A13B                           
0A13B                           ;level 6-1
0A13B                           L_GroundArea15:
0A13B 52 21                           .db $52, $21
0A13D                           	  include "code\leveldata\levels\6-1.asm"
0A13D                           
0A13D 02 00 02 45 0C 00 00 46.. .db $02, $00, $02, $45, $0c, $00, $00, $46, $00, $47, $00, $48, $0b, $00, $00, $45
0A14D 02 49 00 45 02 00 00 80.. .db $02, $49, $00, $45, $02, $00, $00, $80, $02, $81, $00, $82, $02, $00, $01, $47
0A15D 00 4A 01 47 02 00 00 83.. .db $00, $4a, $01, $47, $02, $00, $00, $83, $02, $84, $00, $85, $02, $00, $01, $47
0A16D 00 4B 00 70 00 47 08 00.. .db $00, $4b, $00, $70, $00, $47, $08, $00, $01, $45, $04, $49, $01, $45, $06, $00
0A17D 02 47 00 4A 00 47 00 4A.. .db $02, $47, $00, $4a, $00, $47, $00, $4a, $02, $47, $06, $00, $02, $47, $00, $4b
0A18D 00 47 00 4B 02 47 00 00.. .db $00, $47, $00, $4b, $02, $47, $00, $00, $00, $12, $00, $13, $01, $00, $00, $07
0A19D 00 00 08 47 00 00 00 14.. .db $00, $00, $08, $47, $00, $00, $00, $14, $00, $15, $00, $00, $00, $05, $00, $06
0A1AD 00 08 01 47 00 4A 00 47.. .db $00, $08, $01, $47, $00, $4a, $00, $47, $00, $4a, $00, $47, $00, $4a, $01, $47
0A1BD 00 00 00 14 00 15 00 05.. .db $00, $00, $00, $14, $00, $15, $00, $05, $02, $0a, $01, $47, $00, $4b, $00, $70
0A1CD 00 4B 00 47 00 4B 01 47.. .db $00, $4b, $00, $47, $00, $4b, $01, $47, $00, $4d, $0f, $e2, $15, $e3, $29, $00
0A1DD 00 80 03 81 00 82 09 00.. .db $00, $80, $03, $81, $00, $82, $09, $00, $00, $83, $03, $84, $00, $85, $01, $00
0A1ED 00 55 03 51 20 00 00 12.. .db $00, $55, $03, $51, $20, $00, $00, $12, $00, $13, $02, $00, $00, $07, $03, $00
0A1FD 00 02 02 03 00 04 00 4D.. .db $00, $02, $02, $03, $00, $04, $00, $4d, $00, $14, $00, $15, $01, $00, $00, $05
0A20D 00 06 00 08 01 00 06 E2.. .db $00, $06, $00, $08, $01, $00, $06, $e2, $00, $14, $00, $15, $00, $61, $00, $05
0A21D 02 0A 01 08 06 E3 08 E2.. .db $02, $0a, $01, $08, $06, $e3, $08, $e2, $2e, $e3, $03, $00, $00, $80, $01, $81
0A22D 00 82 0B 00 00 83 01 84.. .db $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85, $4c, $00, $03, $c0, $11, $00
0A23D 00 12 00 13 03 00 00 12.. .db $00, $12, $00, $13, $03, $00, $00, $12, $00, $13, $07, $00, $00, $14, $00, $15
0A24D 02 00 00 E2 00 14 00 15.. .db $02, $00, $00, $e2, $00, $14, $00, $15, $00, $02, $01, $03, $00, $04, $00, $00
0A25D 02 4D 00 14 00 15 00 00.. .db $02, $4d, $00, $14, $00, $15, $00, $00, $01, $4d, $00, $e3, $0e, $e2, $1f, $e3
0A26D 2A 00 00 80 00 81 00 82.. .db $2a, $00, $00, $80, $00, $81, $00, $82, $0c, $00, $00, $83, $00, $84, $00, $85
0A27D 02 00 00 80 02 81 00 82.. .db $02, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83, $02, $84, $00, $85
0A28D 14 00 03 C0 04 00 02 51.. .db $14, $00, $03, $c0, $04, $00, $02, $51, $00, $58, $07, $00, $00, $12, $00, $13
0A29D 01 00 00 07 0A 00 00 14.. .db $01, $00, $00, $07, $0a, $00, $00, $14, $00, $15, $00, $00, $00, $05, $00, $06
0A2AD 00 08 04 00 03 4D 00 00.. .db $00, $08, $04, $00, $03, $4d, $00, $00, $00, $14, $00, $15, $00, $05, $02, $0a
0A2BD 00 08 00 02 00 03 00 04.. .db $00, $08, $00, $02, $00, $03, $00, $04, $0f, $e2, $15, $e3, $12, $00, $00, $80
0A2CD 03 81 00 82 09 00 00 83.. .db $03, $81, $00, $82, $09, $00, $00, $83, $03, $84, $00, $85, $23, $00, $00, $80
0A2DD 01 81 0C 00 00 83 01 84.. .db $01, $81, $0c, $00, $00, $83, $01, $84, $13, $00, $01, $c2, $02, $00, $01, $c2
0A2ED 04 00 00 12 00 13 07 00.. .db $04, $00, $00, $12, $00, $13, $07, $00, $00, $07, $01, $00, $00, $12, $00, $13
0A2FD 00 00 00 14 00 15 06 00.. .db $00, $00, $00, $14, $00, $15, $06, $00, $00, $05, $00, $06, $00, $08, $00, $00
0A30D 00 14 00 15 00 00 00 14.. .db $00, $14, $00, $15, $00, $00, $00, $14, $00, $15, $00, $02, $02, $03, $00, $04
0A31D 00 4D 00 05 02 0A 00 08.. .db $00, $4d, $00, $05, $02, $0a, $00, $08, $00, $14, $00, $15, $0f, $e2, $10, $e3
0A32D 15 00 00 80 00 81 00 82.. .db $15, $00, $00, $80, $00, $81, $00, $82, $0c, $00, $00, $83, $00, $84, $00, $85
0A33D 16 00 00 82 0D 00 00 80.. .db $16, $00, $00, $82, $0d, $00, $00, $80, $00, $85, $0d, $00, $00, $83, $12, $00
0A34D 00 61 02 C0 02 00 00 61.. .db $00, $61, $02, $c0, $02, $00, $00, $61, $06, $00, $01, $61, $05, $00, $01, $61
0A35D 04 00 02 61 00 02 02 03.. .db $04, $00, $02, $61, $00, $02, $02, $03, $00, $04, $00, $4d, $02, $61, $00, $00
0A36D 00 12 00 13 0D E2 00 14.. .db $00, $12, $00, $13, $0d, $e2, $00, $14, $00, $15, $0d, $e3, $01, $e2, $0f, $e3
0A37D 16 00 00 80 01 81 00 82.. .db $16, $00, $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85
0A38D 14 00 02 81 00 82 0B 00.. .db $14, $00, $02, $81, $00, $82, $0b, $00, $02, $84, $00, $85, $18, $00, $00, $61
0A39D 04 00 03 51 04 00 01 61.. .db $04, $00, $03, $51, $04, $00, $01, $61, $03, $00, $00, $07, $07, $00, $02, $61
0A3AD 02 00 00 05 00 06 00 08.. .db $02, $00, $00, $05, $00, $06, $00, $08, $05, $00, $03, $61, $00, $4d, $00, $00
0A3BD 00 05 02 0A 00 08 00 00.. .db $00, $05, $02, $0a, $00, $08, $00, $00, $02, $4d, $04, $61, $01, $4d, $0f, $e2
0A3CD 0F E3 07 00 00 80 02 81.. .db $0f, $e3, $07, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83, $02, $84
0A3DD 00 85 22 00 00 80 01 81.. .db $00, $85, $22, $00, $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84
0A3ED 00 85 00 00 08 E2 06 00.. .db $00, $85, $00, $00, $08, $e2, $06, $00, $08, $e3, $01, $00, $02, $c2, $01, $00
0A3FD 00 61 06 C2 00 61 04 00.. .db $00, $61, $06, $c2, $00, $61, $04, $00, $00, $07, $0d, $00, $00, $05, $00, $06
0A40D 00 08 0B 00 00 05 02 0A.. .db $00, $08, $0b, $00, $00, $05, $02, $0a, $00, $08, $00, $00, $01, $4d, $00, $02
0A41D 03 03 00 04 00 00 0F E2.. .db $03, $03, $00, $04, $00, $00, $0f, $e2, $0f, $e3, $0a, $00, $00, $80, $03, $81
0A42D 0A 00 00 83 03 84 10 00.. .db $0a, $00, $00, $83, $03, $84, $10, $00, $00, $80, $01, $81, $00, $82, $0b, $00
0A43D 00 83 01 84 00 85 1F 00.. .db $00, $83, $01, $84, $00, $85, $1f, $00, $00, $12, $00, $13, $04, $00, $03, $c2
0A44D 03 00 00 61 00 14 00 15.. .db $03, $00, $00, $61, $00, $14, $00, $15, $03, $00, $00, $07, $06, $00, $01, $61
0A45D 00 14 00 15 00 12 00 13.. .db $00, $14, $00, $15, $00, $12, $00, $13, $00, $00, $00, $05, $00, $06, $00, $08
0A46D 04 00 02 61 00 14 00 15.. .db $04, $00, $02, $61, $00, $14, $00, $15, $00, $14, $00, $15, $00, $05, $02, $0a
0A47D 00 08 02 4D 03 61 0F E2.. .db $00, $08, $02, $4d, $03, $61, $0f, $e2, $1a, $e3, $00, $82, $0e, $00, $00, $85
0A48D 14 00 01 C2 03 00 00 80.. .db $14, $00, $01, $c2, $03, $00, $00, $80, $00, $81, $00, $82, $05, $00, $00, $c2
0A49D 01 00 00 C2 02 00 00 83.. .db $01, $00, $00, $c2, $02, $00, $00, $83, $00, $84, $00, $85, $04, $00, $00, $c2
0A4AD 03 00 00 C2 08 00 00 C2.. .db $03, $00, $00, $c2, $08, $00, $00, $c2, $05, $00, $00, $c2, $0a, $00, $01, $61
0A4BD 0C 00 03 61 0A 00 05 61.. .db $0c, $00, $03, $61, $0a, $00, $05, $61, $05, $00, $00, $02, $00, $03, $00, $04
0A4CD 07 61 00 02 02 03 00 04.. .db $07, $61, $00, $02, $02, $03, $00, $04, $0f, $e2, $1f, $e3, $07, $00, $00, $80
0A4DD 01 81 00 82 0B 00 00 83.. .db $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85, $14, $00, $03, $c2
0A4ED 16 00 00 61 00 C1 01 C0.. .db $16, $00, $00, $61, $00, $c1, $01, $c0, $0a, $00, $01, $61, $0c, $00, $02, $61
0A4FD 02 00 00 12 00 13 00 12.. .db $02, $00, $00, $12, $00, $13, $00, $12, $00, $13, $00, $12, $00, $13, $02, $00
0A50D 03 61 02 00 00 14 00 15.. .db $03, $61, $02, $00, $00, $14, $00, $15, $00, $14, $00, $15, $00, $14, $00, $15
0A51D 01 00 04 61 02 00 00 14.. .db $01, $00, $04, $61, $02, $00, $00, $14, $00, $15, $00, $14, $00, $15, $00, $14
0A52D 00 15 00 4D 05 61 00 02.. .db $00, $15, $00, $4d, $05, $61, $00, $02, $00, $03, $00, $04, $0f, $e2, $1f, $e3
0A53D 2D 00 00 80 00 81 03 00.. .db $2d, $00, $00, $80, $00, $81, $03, $00, $00, $80, $00, $81, $00, $82, $06, $00
0A54D 00 83 00 84 03 00 00 83.. .db $00, $83, $00, $84, $03, $00, $00, $83, $00, $84, $00, $85, $1d, $00, $01, $c2
0A55D 08 00 02 51 01 00 00 07.. .db $08, $00, $02, $51, $01, $00, $00, $07, $02, $00, $00, $61, $09, $00, $00, $05
0A56D 00 06 00 08 01 00 01 61.. .db $00, $06, $00, $08, $01, $00, $01, $61, $07, $00, $00, $05, $02, $0a, $00, $08
0A57D 00 00 02 61 06 00 05 E2.. .db $00, $00, $02, $61, $06, $00, $05, $e2, $03, $61, $01, $03, $00, $04, $02, $00
0A58D 05 E3 06 E2 02 00 0C E3.. .db $05, $e3, $06, $e2, $02, $00, $0c, $e3, $1f, $00, $01, $81, $00, $82, $0c, $00
0A59D 01 84 00 85 14 00 00 80.. .db $01, $84, $00, $85, $14, $00, $00, $80, $00, $81, $00, $82, $0c, $00, $00, $83
0A5AD 00 84 00 85 28 00 00 12.. .db $00, $84, $00, $85, $28, $00, $00, $12, $00, $13, $0a, $00, $00, $12, $00, $13
0A5BD 00 00 00 14 00 15 01 00.. .db $00, $00, $00, $14, $00, $15, $01, $00, $00, $12, $00, $13, $03, $00, $00, $12
0A5CD 00 13 00 00 00 14 00 15.. .db $00, $13, $00, $00, $00, $14, $00, $15, $00, $00, $00, $14, $00, $15, $01, $4d
0A5DD 00 14 00 15 00 02 01 03.. .db $00, $14, $00, $15, $00, $02, $01, $03, $00, $04, $00, $14, $00, $15, $0f, $e2
0A5ED 0F E3 2C 00 00 80 00 81.. .db $0f, $e3, $2c, $00, $00, $80, $00, $81, $00, $82, $00, $00, $00, $80, $01, $81
0A5FD 00 82 02 00 01 61 02 00.. .db $00, $82, $02, $00, $01, $61, $02, $00, $00, $83, $00, $84, $00, $85, $00, $00
0A60D 00 83 01 84 00 85 01 00.. .db $00, $83, $01, $84, $00, $85, $01, $00, $02, $61, $0b, $00, $03, $61, $0a, $00
0A61D 04 61 09 00 05 61 08 00.. .db $04, $61, $09, $00, $05, $61, $08, $00, $06, $61, $00, $00, $00, $07, $05, $00
0A62D 07 61 00 05 00 06 00 08.. .db $07, $61, $00, $05, $00, $06, $00, $08, $03, $00, $08, $61, $02, $0a, $00, $08
0A63D 00 00 00 02 0F E2 0F E3.. .db $00, $00, $00, $02, $0f, $e2, $0f, $e3, $01, $00, $00, $24, $0e, $00, $00, $25
0A64D 00 00 00 80 02 81 00 82.. .db $00, $00, $00, $80, $02, $81, $00, $82, $03, $00, $00, $80, $01, $81, $01, $00
0A65D 00 25 00 00 00 83 02 84.. .db $00, $25, $00, $00, $00, $83, $02, $84, $00, $85, $03, $00, $00, $83, $01, $84
0A66D 01 00 00 25 0E 00 00 25.. .db $01, $00, $00, $25, $0e, $00, $00, $25, $0e, $00, $00, $25, $0e, $00, $00, $25
0A67D 03 00 02 45 07 00 00 25.. .db $03, $00, $02, $45, $07, $00, $00, $25, $03, $00, $00, $46, $00, $47, $00, $48
0A68D 07 00 00 25 02 00 00 45.. .db $07, $00, $00, $25, $02, $00, $00, $45, $02, $49, $00, $45, $06, $00, $00, $25
0A69D 02 00 01 47 00 4A 01 47.. .db $02, $00, $01, $47, $00, $4a, $01, $47, $04, $00, $00, $03, $00, $04, $00, $61
0A6AD 01 4D 00 00 01 47 00 4B.. .db $01, $4d, $00, $00, $01, $47, $00, $4b, $01, $70, $04, $00, $0f, $e2, $0f, $e3
0A6BD 0F 00 00 82 0E 00 00 85.. .db $0f, $00, $00, $82, $0e, $00, $00, $85, $13, $00, $00, $80, $01, $81, $00, $82
0A6CD 0B 00 00 83 01 84 00 85.. .db $0b, $00, $00, $83, $01, $84, $00, $85, $16, $00, $00, $80, $01, $81, $00, $82
0A6DD 01 00 00 61 00 00 00 61.. .db $01, $00, $00, $61, $00, $00, $00, $61, $00, $00, $00, $61, $04, $00, $00, $83
0A6ED 01 84 00 85 01 00 02 61.. .db $01, $84, $00, $85, $01, $00, $02, $61, $00, $00, $00, $61, $0a, $00, $00, $61
0A6FD 00 00 00 61 00 00 00 61.. .db $00, $00, $00, $61, $00, $00, $00, $61, $24, $00, $0f, $e2, $0f, $e30A70B FD                              .db $fd
0A70C                           	  
0A70C                           ;level 6-2
0A70C                           L_GroundArea4:
0A70C 54 21                           .db $54, $21
0A70E                           	  include "code\leveldata\levels\6-2.asm"
0A70E                           
0A70E 0A 00 00 80 01 81 00 82.. .db $0a, $00, $00, $80, $01, $81, $00, $82, $01, $00, $02, $45, $06, $00, $00, $83
0A71E 01 84 00 85 00 00 00 60.. .db $01, $84, $00, $85, $00, $00, $00, $60, $00, $46, $00, $47, $00, $48, $02, $00
0A72E 00 80 00 81 00 82 05 00.. .db $00, $80, $00, $81, $00, $82, $05, $00, $00, $45, $02, $49, $00, $45, $01, $00
0A73E 00 83 00 84 00 85 05 00.. .db $00, $83, $00, $84, $00, $85, $05, $00, $01, $47, $00, $4a, $01, $47, $0a, $00
0A74E 01 47 00 4B 00 70 00 47.. .db $01, $47, $00, $4b, $00, $70, $00, $47, $00, $02, $01, $03, $00, $04, $01, $4d
0A75E 04 00 0A E2 01 00 00 12.. .db $04, $00, $0a, $e2, $01, $00, $00, $12, $00, $13, $00, $00, $0a, $e3, $01, $e2
0A76E 00 14 00 15 00 00 0C E3.. .db $00, $14, $00, $15, $00, $00, $0c, $e3, $01, $e2, $00, $1d, $0e, $e3, $00, $e2
0A77E 2F E3 1E 00 00 80 0E 00.. .db $2f, $e3, $1e, $00, $00, $80, $0e, $00, $00, $83, $0f, $00, $00, $c1, $01, $c0
0A78E 01 00 00 80 00 81 00 82.. .db $01, $00, $00, $80, $00, $81, $00, $82, $02, $00, $03, $c0, $05, $00, $00, $83
0A79E 00 84 00 85 27 00 02 1D.. .db $00, $84, $00, $85, $27, $00, $02, $1d, $00, $36, $04, $00, $00, $36, $05, $1d
0A7AE 02 20 00 37 00 02 02 03.. .db $02, $20, $00, $37, $00, $02, $02, $03, $00, $04, $00, $37, $01, $20, $0f, $e2
0A7BE 23 E3 0F 00 02 81 00 82.. .db $23, $e3, $0f, $00, $02, $81, $00, $82, $09, $00, $01, $c2, $02, $84, $00, $85
0A7CE 09 00 01 C2 02 00 03 C2.. .db $09, $00, $01, $c2, $02, $00, $03, $c2, $00, $00, $00, $80, $00, $81, $00, $82
0A7DE 0C 00 00 83 00 84 00 85.. .db $0c, $00, $00, $83, $00, $84, $00, $85, $00, $00, $03, $e2, $0c, $00, $02, $e3
0A7EE 00 00 00 36 05 1D 00 36.. .db $00, $00, $00, $36, $05, $1d, $00, $36, $07, $00, $00, $37, $05, $20, $00, $37
0A7FE 05 00 00 C2 09 E2 05 00.. .db $05, $00, $00, $c2, $09, $e2, $05, $00, $09, $e3, $01, $e2, $00, $02, $00, $03
0A80E 00 04 00 00 0B E3 03 E2.. .db $00, $04, $00, $00, $0b, $e3, $03, $e2, $1f, $e3, $03, $00, $0b, $e3, $02, $00
0A81E 00 E2 0B E3 02 00 0C E3.. .db $00, $e2, $0b, $e3, $02, $00, $0c, $e3, $01, $4d, $00, $e2, $0c, $e3, $01, $e2
0A82E 0B E3 01 00 0B E3 0F 00.. .db $0b, $e3, $01, $00, $0b, $e3, $0f, $00, $00, $07, $02, $00, $00, $c2, $05, $00
0A83E 01 C2 01 00 00 05 00 06.. .db $01, $c2, $01, $00, $00, $05, $00, $06, $00, $08, $0b, $00, $00, $05, $02, $0a
0A84E 00 08 00 E2 02 4D 00 00.. .db $00, $08, $00, $e2, $02, $4d, $00, $00, $00, $02, $01, $03, $00, $04, $01, $4d
0A85E 04 E2 00 E3 09 E2 28 E3.. .db $04, $e2, $00, $e3, $09, $e2, $28, $e3, $0a, $00, $00, $0d, $00, $00, $01, $e3
0A86E 0B 00 00 0F 00 00 00 E3.. .db $0b, $00, $00, $0f, $00, $00, $00, $e3, $02, $00, $00, $c2, $03, $00, $00, $02
0A87E 01 03 00 04 00 00 00 4E.. .db $01, $03, $00, $04, $00, $00, $00, $4e, $09, $00, $05, $e2, $00, $05, $01, $00
0A88E 00 C2 00 00 00 0E 01 00.. .db $00, $c2, $00, $00, $00, $0e, $01, $00, $01, $e2, $05, $e3, $00, $e2, $00, $c2
0A89E 00 0D 01 00 00 4E 00 00.. .db $00, $0d, $01, $00, $00, $4e, $00, $00, $00, $e2, $08, $e3, $00, $00, $00, $0f
0A8AE 00 00 00 4D 01 E2 09 E3.. .db $00, $00, $00, $4d, $01, $e2, $09, $e3, $00, $00, $00, $4e, $01, $e2, $0b, $e3
0A8BE 01 E2 4D E3 10 00 00 07.. .db $01, $e2, $4d, $e3, $10, $00, $00, $07, $06, $00, $00, $80, $02, $81, $00, $82
0A8CE 01 00 00 05 00 06 00 08.. .db $01, $00, $00, $05, $00, $06, $00, $08, $05, $00, $00, $83, $02, $84, $00, $85
0A8DE 01 00 02 0A 00 08 0B 00.. .db $01, $00, $02, $0a, $00, $08, $0b, $00, $01, $e2, $01, $0a, $00, $08, $03, $00
0A8EE 00 12 00 13 04 00 01 E3.. .db $00, $12, $00, $13, $04, $00, $01, $e3, $02, $e2, $03, $1d, $00, $1e, $00, $15
0A8FE 00 61 03 00 04 E3 02 E2.. .db $00, $61, $03, $00, $04, $e3, $02, $e2, $00, $20, $00, $21, $00, $15, $01, $61
0A90E 02 00 07 E3 02 E2 02 61.. .db $02, $00, $07, $e3, $02, $e2, $02, $61, $01, $00, $0a, $e3, $01, $e2, $01, $61
0A91E 00 00 0C E3 01 E2 00 61.. .db $00, $00, $0c, $e3, $01, $e2, $00, $61, $0e, $e3, $00, $e2, $1f, $e3, $19, $00
0A92E 00 80 03 81 00 82 09 00.. .db $00, $80, $03, $81, $00, $82, $09, $00, $00, $83, $03, $84, $00, $85, $00, $00
0A93E 00 C2 0E 00 00 C2 00 00.. .db $00, $c2, $0e, $00, $00, $c2, $00, $00, $00, $80, $01, $81, $00, $82, $0b, $00
0A94E 00 83 01 84 00 85 09 00.. .db $00, $83, $01, $84, $00, $85, $09, $00, $00, $c1, $12, $00, $00, $12, $00, $13
0A95E 01 00 01 C0 06 00 00 0E.. .db $01, $00, $01, $c0, $06, $00, $00, $0e, $00, $00, $00, $61, $00, $14, $00, $15
0A96E 08 00 00 03 00 04 00 4E.. .db $08, $00, $00, $03, $00, $04, $00, $4e, $01, $61, $00, $14, $00, $15, $08, $00
0A97E 04 E2 00 14 00 15 00 00.. .db $04, $e2, $00, $14, $00, $15, $00, $00, $03, $4d, $02, $00, $00, $61, $04, $e3
0A98E 07 E2 01 00 00 61 0C E3.. .db $07, $e2, $01, $00, $00, $61, $0c, $e3, $01, $00, $00, $61, $1e, $00, $00, $80
0A99E 0E 00 00 83 21 00 00 80.. .db $0e, $00, $00, $83, $21, $00, $00, $80, $00, $81, $00, $82, $02, $00, $00, $c2
0A9AE 00 00 00 C0 00 00 00 C2.. .db $00, $00, $00, $c0, $00, $00, $00, $c2, $04, $00, $00, $83, $00, $84, $00, $85
0A9BE 0B 00 01 C2 14 00 04 0B.. .db $0b, $00, $01, $c2, $14, $00, $04, $0b, $02, $00, $03, $0b, $02, $00, $00, $61
0A9CE 04 63 00 61 01 00 03 63.. .db $04, $63, $00, $61, $01, $00, $03, $63, $00, $61, $01, $00, $00, $61, $04, $00
0A9DE 00 61 05 00 00 61 01 00.. .db $00, $61, $05, $00, $00, $61, $01, $00, $00, $61, $04, $00, $00, $61, $05, $00
0A9EE 00 61 01 00 00 61 04 00.. .db $00, $61, $01, $00, $00, $61, $04, $00, $00, $61, $11, $00, $01, $81, $00, $82
0A9FE 06 00 02 C0 02 00 01 84.. .db $06, $00, $02, $c0, $02, $00, $01, $84, $00, $85, $13, $00, $00, $0d, $0c, $00
0AA0E 00 12 00 13 00 0F 00 00.. .db $00, $12, $00, $13, $00, $0f, $00, $00, $00, $02, $02, $03, $00, $04, $06, $00
0AA1E 00 14 00 15 00 4E 00 00.. .db $00, $14, $00, $15, $00, $4e, $00, $00, $04, $e2, $00, $4d, $04, $00, $04, $e2
0AA2E 04 E3 01 E2 02 00 00 E2.. .db $04, $e3, $01, $e2, $02, $00, $00, $e2, $0b, $e3, $01, $00, $00, $e2, $0c, $e3
0AA3E 01 00 0D E3 03 00 0A E3.. .db $01, $00, $0d, $e3, $03, $00, $0a, $e3, $05, $00, $00, $14, $07, $e3, $06, $00
0AA4E 00 14 00 15 05 E3 0A 00.. .db $00, $14, $00, $15, $05, $e3, $0a, $00, $00, $80, $00, $81, $00, $82, $0c, $00
0AA5E 00 83 00 84 00 85 29 00.. .db $00, $83, $00, $84, $00, $85, $29, $00, $04, $0b, $09, $00, $00, $61, $04, $63
0AA6E 00 61 08 00 00 61 04 00.. .db $00, $61, $08, $00, $00, $61, $04, $00, $00, $61, $04, $00, $00, $e2, $02, $00
0AA7E 00 61 04 00 00 61 04 00.. .db $00, $61, $04, $00, $00, $61, $04, $00, $00, $e3, $02, $00, $00, $61, $01, $81
0AA8E 00 82 01 00 00 61 03 00.. .db $00, $82, $01, $00, $00, $61, $03, $00, $00, $61, $03, $00, $00, $61, $01, $84
0AA9E 00 85 01 00 00 61 03 00.. .db $00, $85, $01, $00, $00, $61, $03, $00, $00, $61, $03, $00, $00, $61, $04, $00
0AAAE 00 61 03 00 00 61 03 00.. .db $00, $61, $03, $00, $00, $61, $03, $00, $00, $61, $04, $00, $00, $61, $03, $00
0AABE 00 61 03 00 00 61 04 00.. .db $00, $61, $03, $00, $00, $61, $04, $00, $00, $61, $03, $00, $00, $61, $03, $00
0AACE 03 C0 28 00 01 C2 05 00.. .db $03, $c0, $28, $00, $01, $c2, $05, $00, $01, $c2, $03, $00, $00, $80, $00, $00
0AADE 01 C2 00 00 00 C1 02 C0.. .db $01, $c2, $00, $00, $00, $c1, $02, $c0, $00, $00, $01, $c2, $03, $00, $00, $83
0AAEE 1F 00 0B 0B 03 00 0B 63.. .db $1f, $00, $0b, $0b, $03, $00, $0b, $63, $00, $61, $05, $00, $00, $80, $01, $81
0AAFE 00 82 04 00 00 61 05 00.. .db $00, $82, $04, $00, $00, $61, $05, $00, $00, $83, $01, $84, $00, $85, $04, $00
0AB0E 00 61 0E 00 00 61 01 00.. .db $00, $61, $0e, $00, $00, $61, $01, $00, $00, $e2, $0b, $00, $00, $61, $01, $00
0AB1E 00 E3 1C 00 00 80 01 81.. .db $00, $e3, $1c, $00, $00, $80, $01, $81, $0c, $00, $00, $83, $01, $84, $01, $81
0AB2E 00 82 0C 00 01 84 00 85.. .db $00, $82, $0c, $00, $01, $84, $00, $85, $07, $00, $00, $12, $00, $13, $0b, $00
0AB3E 00 0D 00 00 00 14 00 15.. .db $00, $0d, $00, $00, $00, $14, $00, $15, $00, $61, $08, $00, $00, $12, $00, $13
0AB4E 00 0F 00 00 00 14 00 15.. .db $00, $0f, $00, $00, $00, $14, $00, $15, $01, $61, $03, $00, $00, $12, $00, $13
0AB5E 01 00 00 14 00 15 00 4E.. .db $01, $00, $00, $14, $00, $15, $00, $4e, $00, $00, $00, $14, $00, $15, $02, $61
0AB6E 00 02 00 03 00 04 00 14.. .db $00, $02, $00, $03, $00, $04, $00, $14, $00, $15, $01, $00, $00, $14, $0f, $e2
0AB7E 37 E3 0F 00 00 81 00 82.. .db $37, $e3, $0f, $00, $00, $81, $00, $82, $0d, $00, $00, $84, $00, $85, $01, $00
0AB8E 00 07 03 00 00 12 00 13.. .db $00, $07, $03, $00, $00, $12, $00, $13, $00, $02, $03, $03, $02, $00, $00, $05
0AB9E 00 06 00 08 02 00 00 14.. .db $00, $06, $00, $08, $02, $00, $00, $14, $00, $15, $04, $e2, $01, $00, $00, $05
0ABAE 02 0A 00 08 03 E2 04 E3.. .db $02, $0a, $00, $08, $03, $e2, $04, $e3, $00, $00, $00, $05, $00, $0a, $00, $09
0ABBE 00 0A 01 E2 08 E3 00 05.. .db $00, $0a, $01, $e2, $08, $e3, $00, $05, $01, $0a, $01, $e2, $0a, $e3, $02, $e2
0ABCE 5C E3 18 00 00 80 01 81.. .db $5c, $e3, $18, $00, $00, $80, $01, $81, $00, $82, $02, $00, $00, $04, $02, $4d
0ABDE 01 00 00 0D 01 00 00 83.. .db $01, $00, $00, $0d, $01, $00, $00, $83, $01, $84, $00, $85, $02, $00, $04, $e2
0ABEE 00 00 00 0F 08 00 04 E3.. .db $00, $00, $00, $0f, $08, $00, $04, $e3, $00, $e2, $00, $4e, $08, $00, $05, $e3
0ABFE 00 E2 01 4D 06 00 06 E3.. .db $00, $e2, $01, $4d, $06, $00, $06, $e3, $01, $e2, $00, $00, $00, $12, $00, $13
0AC0E 01 00 00 07 00 00 08 E3.. .db $01, $00, $00, $07, $00, $00, $08, $e3, $00, $e2, $00, $14, $00, $15, $00, $00
0AC1E 00 05 00 06 00 08 09 E3.. .db $00, $05, $00, $06, $00, $08, $09, $e3, $01, $e2, $00, $05, $02, $0a, $0b, $e3
0AC2E 02 E2 00 0A 0E E3 00 E2.. .db $02, $e2, $00, $0a, $0e, $e3, $00, $e2, $1f, $e3, $01, $00, $00, $24, $0e, $00
0AC3E 00 25 00 00 00 80 02 81.. .db $00, $25, $00, $00, $00, $80, $02, $81, $00, $82, $08, $00, $00, $25, $00, $00
0AC4E 00 83 02 84 00 85 08 00.. .db $00, $83, $02, $84, $00, $85, $08, $00, $00, $25, $0e, $00, $00, $25, $0e, $00
0AC5E 00 25 0E 00 00 25 03 00.. .db $00, $25, $0e, $00, $00, $25, $03, $00, $02, $45, $07, $00, $00, $25, $03, $00
0AC6E 00 46 00 47 00 48 05 00.. .db $00, $46, $00, $47, $00, $48, $05, $00, $00, $08, $00, $00, $00, $25, $02, $00
0AC7E 00 45 02 49 00 45 04 00.. .db $00, $45, $02, $49, $00, $45, $04, $00, $00, $09, $00, $08, $00, $25, $02, $00
0AC8E 01 47 00 4A 01 47 04 00.. .db $01, $47, $00, $4a, $01, $47, $04, $00, $00, $e2, $00, $0a, $00, $61, $01, $4d
0AC9E 00 00 01 47 00 4B 01 70.. .db $00, $00, $01, $47, $00, $4b, $01, $70, $04, $00, $00, $e3, $0e, $e2, $0f, $e3
0ACAE 33 00 01 61 01 00 00 61.. .db $33, $00, $01, $61, $01, $00, $00, $61, $00, $00, $00, $61, $00, $00, $02, $61
0ACBE 04 00 00 61 00 00 00 61.. .db $04, $00, $00, $61, $00, $00, $00, $61, $00, $00, $00, $61, $00, $00, $00, $61
0ACCE 00 00 00 61 06 00 01 61.. .db $00, $00, $00, $61, $06, $00, $01, $61, $02, $00, $00, $61, $01, $00, $01, $61
0ACDE 01 00 00 80 01 81 00 82.. .db $01, $00, $00, $80, $01, $81, $00, $82, $00, $61, $00, $00, $00, $61, $01, $00
0ACEE 00 61 01 00 00 61 02 00.. .db $00, $61, $01, $00, $00, $61, $02, $00, $00, $83, $01, $84, $00, $85, $01, $61
0ACFE 02 00 00 61 01 00 02 61.. .db $02, $00, $00, $61, $01, $00, $02, $61, $30, $00, $0f, $e2, $0f, $e30AD0C FD                              .db $fd
0AD0D                           	  
0AD0D                           ;level 6-3	  
0AD0D                           L_GroundArea14:
0AD0D 52 21                           .db $52, $21
0AD0F                           	  include "code\leveldata\levels\6-3.asm"
0AD0F                           
0AD0F 1D 00 00 80 00 81 02 00.. .db $1d, $00, $00, $80, $00, $81, $02, $00, $00, $80, $00, $81, $00, $82, $01, $00
0AD1F 00 C1 02 C0 01 00 00 83.. .db $00, $c1, $02, $c0, $01, $00, $00, $83, $00, $84, $02, $00, $00, $83, $00, $84
0AD2F 00 85 1A 00 02 45 0C 00.. .db $00, $85, $1a, $00, $02, $45, $0c, $00, $00, $46, $00, $47, $00, $48, $02, $00
0AD3F 05 51 02 00 00 45 02 49.. .db $05, $51, $02, $00, $00, $45, $02, $49, $00, $45, $01, $00, $00, $07, $01, $00
0AD4F 00 0D 04 00 01 47 00 4A.. .db $00, $0d, $04, $00, $01, $47, $00, $4a, $01, $47, $00, $00, $00, $05, $00, $06
0AD5F 00 08 00 00 00 0F 03 00.. .db $00, $08, $00, $00, $00, $0f, $03, $00, $00, $12, $01, $47, $00, $4b, $00, $70
0AD6F 00 47 00 05 02 0A 00 08.. .db $00, $47, $00, $05, $02, $0a, $00, $08, $00, $4e, $00, $02, $01, $03, $00, $04
0AD7F 00 14 0E E2 00 14 0E E3.. .db $00, $14, $0e, $e2, $00, $14, $0e, $e3, $00, $e2, $0f, $e3, $0f, $00, $01, $81
0AD8F 00 82 0C 00 01 84 00 85.. .db $00, $82, $0c, $00, $01, $84, $00, $85, $34, $00, $00, $80, $01, $81, $00, $82
0AD9F 07 00 03 C2 00 83 01 84.. .db $07, $00, $03, $c2, $00, $83, $01, $84, $00, $85, $13, $00, $00, $13, $00, $00
0ADAF 00 0D 09 00 00 12 00 13.. .db $00, $0d, $09, $00, $00, $12, $00, $13, $00, $00, $00, $15, $00, $00, $00, $0f
0ADBF 05 00 00 0E 00 00 00 12.. .db $05, $00, $00, $0e, $00, $00, $00, $12, $00, $13, $00, $14, $00, $15, $00, $00
0ADCF 00 15 00 00 00 4E 00 00.. .db $00, $15, $00, $00, $00, $4e, $00, $00, $03, $61, $00, $00, $00, $4e, $00, $4d
0ADDF 00 14 00 15 00 14 00 15.. .db $00, $14, $00, $15, $00, $14, $00, $15, $00, $05, $02, $e2, $05, $61, $06, $e2
0ADEF 02 E3 05 E2 06 E3 0F 00.. .db $02, $e3, $05, $e2, $06, $e3, $0f, $00, $00, $80, $01, $81, $00, $82, $0b, $00
0ADFF 00 83 01 84 00 85 32 00.. .db $00, $83, $01, $84, $00, $85, $32, $00, $00, $80, $02, $81, $00, $82, $0a, $00
0AE0F 00 83 02 84 00 85 0F 00.. .db $00, $83, $02, $84, $00, $85, $0f, $00, $00, $61, $03, $00, $00, $07, $04, $51
0AE1F 00 0D 02 00 01 61 01 00.. .db $00, $0d, $02, $00, $01, $61, $01, $00, $01, $05, $00, $06, $00, $08, $03, $00
0AE2F 00 0F 01 00 02 61 00 12.. .db $00, $0f, $01, $00, $02, $61, $00, $12, $00, $13, $00, $61, $02, $0a, $00, $08
0AE3F 00 02 00 03 00 04 00 4E.. .db $00, $02, $00, $03, $00, $04, $00, $4e, $00, $00, $03, $61, $00, $14, $00, $15
0AE4F 00 61 0F E2 0F E3 11 00.. .db $00, $61, $0f, $e2, $0f, $e3, $11, $00, $00, $80, $00, $81, $00, $82, $0c, $00
0AE5F 00 83 00 84 00 85 04 00.. .db $00, $83, $00, $84, $00, $85, $04, $00, $00, $80, $01, $81, $00, $82, $0b, $00
0AE6F 00 83 01 84 00 85 0D 00.. .db $00, $83, $01, $84, $00, $85, $0d, $00, $03, $51, $0e, $00, $00, $0d, $00, $00
0AE7F 00 07 03 00 00 C2 00 61.. .db $00, $07, $03, $00, $00, $c2, $00, $61, $03, $00, $00, $0e, $01, $00, $00, $0f
0AE8F 00 05 00 06 00 08 01 00.. .db $00, $05, $00, $06, $00, $08, $01, $00, $00, $61, $00, $c2, $01, $61, $02, $00
0AE9F 00 4E 01 4D 00 4E 02 0A.. .db $00, $4e, $01, $4d, $00, $4e, $02, $0a, $00, $08, $01, $61, $00, $c2, $02, $61
0AEAF 01 C2 03 E2 00 09 01 0A.. .db $01, $c2, $03, $e2, $00, $09, $01, $0a, $02, $61, $05, $e2, $03, $e3, $00, $61
0AEBF 04 E2 09 E3 00 E2 1E E3.. .db $04, $e2, $09, $e3, $00, $e2, $1e, $e3, $00, $00, $08, $e3, $06, $00, $00, $14
0AECF 00 15 01 61 00 00 01 61.. .db $00, $15, $01, $61, $00, $00, $01, $61, $00, $14, $00, $15, $06, $00, $00, $2c
0AEDF 00 2D 00 61 02 00 00 61.. .db $00, $2d, $00, $61, $02, $00, $00, $61, $00, $2c, $00, $2d, $00, $00, $03, $c2
0AEEF 15 00 00 C1 1A 00 00 12.. .db $15, $00, $00, $c1, $1a, $00, $00, $12, $00, $13, $00, $61, $02, $00, $00, $61
0AEFF 00 12 00 13 00 16 03 17.. .db $00, $12, $00, $13, $00, $16, $03, $17, $00, $18, $00, $00, $00, $14, $00, $15
0AF0F 01 61 00 00 01 61 00 14.. .db $01, $61, $00, $00, $01, $61, $00, $14, $00, $15, $00, $60, $03, $4c, $00, $00
0AF1F 09 E2 00 00 03 4C 00 00.. .db $09, $e2, $00, $00, $03, $4c, $00, $00, $09, $e3, $05, $e2, $2f, $e3, $00, $00
0AF2F 00 80 02 81 00 82 0A 00.. .db $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83, $02, $84, $00, $85, $14, $00
0AF3F 00 80 00 81 00 82 08 00.. .db $00, $80, $00, $81, $00, $82, $08, $00, $02, $c2, $00, $00, $00, $83, $00, $84
0AF4F 00 85 07 00 00 C2 02 00.. .db $00, $85, $07, $00, $00, $c2, $02, $00, $00, $c2, $06, $00, $00, $07, $0b, $00
0AF5F 00 61 00 00 00 05 00 06.. .db $00, $61, $00, $00, $00, $05, $00, $06, $00, $08, $07, $00, $00, $0e, $00, $00
0AF6F 01 61 00 05 02 0A 00 08.. .db $01, $61, $00, $05, $02, $0a, $00, $08, $06, $00, $00, $4e, $02, $61, $04, $e2
0AF7F 06 00 03 E2 04 E3 06 90.. .db $06, $00, $03, $e2, $04, $e3, $06, $90, $08, $e3, $06, $91, $08, $e3, $06, $91
0AF8F 08 E3 06 91 03 E3 04 00.. .db $08, $e3, $06, $91, $03, $e3, $04, $00, $00, $80, $01, $81, $00, $82, $0b, $00
0AF9F 00 83 01 84 00 85 0C 00.. .db $00, $83, $01, $84, $00, $85, $0c, $00, $00, $0d, $0e, $00, $00, $0f, $07, $00
0AFAF 00 80 00 00 00 02 02 03.. .db $00, $80, $00, $00, $00, $02, $02, $03, $00, $04, $00, $4e, $00, $00, $02, $4d
0AFBF 03 00 00 83 0A E2 04 00.. .db $03, $00, $00, $83, $0a, $e2, $04, $00, $02, $e3, $06, $c2, $00, $8f, $04, $00
0AFCF 02 E3 06 C2 00 8F 01 00.. .db $02, $e3, $06, $c2, $00, $8f, $01, $00, $02, $c0, $02, $e3, $06, $c2, $00, $8f
0AFDF 01 00 00 07 01 00 02 E3.. .db $01, $00, $00, $07, $01, $00, $02, $e3, $06, $c2, $00, $8f, $00, $00, $00, $05
0AFEF 00 06 00 08 00 00 02 E3.. .db $00, $06, $00, $08, $00, $00, $02, $e3, $06, $c2, $00, $8f, $00, $05, $02, $0a
0AFFF 00 08 02 E3 0C E2 0F E3.. .db $00, $08, $02, $e3, $0c, $e2, $0f, $e3, $19, $00, $00, $80, $01, $81, $00, $82
0B00F 0B 00 00 83 01 84 00 85.. .db $0b, $00, $00, $83, $01, $84, $00, $85, $01, $00, $02, $81, $00, $82, $0b, $00
0B01F 02 84 00 85 02 00 04 51.. .db $02, $84, $00, $85, $02, $00, $04, $51, $01, $00, $01, $c2, $06, $00, $00, $0d
0B02F 02 00 00 07 0A 00 00 0F.. .db $02, $00, $00, $07, $0a, $00, $00, $0f, $01, $00, $00, $05, $00, $06, $00, $08
0B03F 00 00 00 0E 00 00 00 C1.. .db $00, $00, $00, $0e, $00, $00, $00, $c1, $01, $00, $00, $61, $01, $4d, $00, $61
0B04F 00 4E 00 00 00 05 02 0A.. .db $00, $4e, $00, $00, $00, $05, $02, $0a, $00, $08, $00, $4e, $00, $02, $02, $00
0B05F 0C E2 02 00 07 E3 00 E4.. .db $0c, $e2, $02, $00, $07, $e3, $00, $e4, $00, $e5, $00, $e4, $01, $e3, $00, $00
0B06F 01 4D 01 C2 04 51 00 8E.. .db $01, $4d, $01, $c2, $04, $51, $00, $8e, $00, $8d, $00, $e5, $00, $e4, $01, $e3
0B07F 02 E2 06 8A 01 E2 00 E4.. .db $02, $e2, $06, $8a, $01, $e2, $00, $e4, $12, $e3, $0d, $00, $00, $80, $00, $81
0B08F 0D 00 00 83 00 84 13 00.. .db $0d, $00, $00, $83, $00, $84, $13, $00, $00, $80, $03, $81, $00, $82, $05, $00
0B09F 02 C2 00 00 00 83 03 84.. .db $02, $c2, $00, $00, $00, $83, $03, $84, $00, $85, $0f, $00, $03, $c0, $05, $00
0B0AF 00 12 00 13 06 00 00 07.. .db $00, $12, $00, $13, $06, $00, $00, $07, $01, $00, $01, $03, $00, $04, $00, $00
0B0BF 00 14 00 15 00 61 04 00.. .db $00, $14, $00, $15, $00, $61, $04, $00, $00, $05, $00, $06, $00, $08, $00, $00
0B0CF 03 E2 00 14 00 15 01 61.. .db $03, $e2, $00, $14, $00, $15, $01, $61, $02, $4d, $00, $05, $02, $0a, $00, $08
0B0DF 03 E3 0B E2 2F E3 00 81.. .db $03, $e3, $0b, $e2, $2f, $e3, $00, $81, $00, $82, $01, $61, $00, $00, $01, $61
0B0EF 08 00 00 84 00 85 00 14.. .db $08, $00, $00, $84, $00, $85, $00, $14, $00, $15, $00, $00, $00, $14, $00, $15
0B0FF 0A 00 00 14 00 15 00 00.. .db $0a, $00, $00, $14, $00, $15, $00, $00, $00, $14, $00, $15, $02, $00, $05, $c2
0B10F 01 00 00 14 00 15 00 00.. .db $01, $00, $00, $14, $00, $15, $00, $00, $00, $14, $00, $15, $0a, $00, $00, $14
0B11F 00 15 00 00 00 2C 00 2D.. .db $00, $15, $00, $00, $00, $2c, $00, $2d, $0a, $00, $00, $2c, $00, $2d, $03, $00
0B12F 00 0D 00 16 05 17 07 00.. .db $00, $0d, $00, $16, $05, $17, $07, $00, $00, $0f, $00, $4e, $05, $00, $01, $4d
0B13F 01 00 00 02 01 03 00 04.. .db $01, $00, $00, $02, $01, $03, $00, $04, $01, $4e, $05, $00, $09, $e2, $05, $c2
0B14F 09 E3 05 E2 2F E3 09 00.. .db $09, $e3, $05, $e2, $2f, $e3, $09, $00, $00, $80, $00, $81, $00, $82, $0c, $00
0B15F 00 83 00 84 00 85 02 00.. .db $00, $83, $00, $84, $00, $85, $02, $00, $00, $c2, $10, $00, $00, $80, $01, $81
0B16F 00 82 07 00 01 C2 01 00.. .db $00, $82, $07, $00, $01, $c2, $01, $00, $00, $83, $01, $84, $00, $85, $09, $00
0B17F 00 17 00 18 09 00 00 12.. .db $00, $17, $00, $18, $09, $00, $00, $12, $00, $13, $02, $00, $00, $4e, $00, $16
0B18F 06 17 00 18 00 4D 00 14.. .db $06, $17, $00, $18, $00, $4d, $00, $14, $00, $15, $00, $12, $00, $13, $00, $00
0B19F 01 4E 00 02 03 03 00 04.. .db $01, $4e, $00, $02, $03, $03, $00, $04, $00, $00, $00, $4e, $04, $e2, $00, $c2
0B1AF 09 E2 04 E3 00 E2 3E E3.. .db $09, $e2, $04, $e3, $00, $e2, $3e, $e3, $23, $00, $00, $80, $02, $81, $00, $82
0B1BF 06 00 00 12 00 13 01 00.. .db $06, $00, $00, $12, $00, $13, $01, $00, $00, $83, $02, $84, $00, $85, $06, $00
0B1CF 00 14 00 15 09 00 01 C2.. .db $00, $14, $00, $15, $09, $00, $01, $c2, $01, $00, $00, $14, $00, $15, $00, $36
0B1DF 01 1D 00 36 01 00 00 07.. .db $01, $1d, $00, $36, $01, $00, $00, $07, $06, $00, $00, $2c, $00, $2d, $00, $37
0B1EF 01 20 00 37 00 00 00 05.. .db $01, $20, $00, $37, $00, $00, $00, $05, $00, $06, $00, $08, $00, $00, $00, $61
0B1FF 03 00 05 E2 00 05 02 0A.. .db $03, $00, $05, $e2, $00, $05, $02, $0a, $01, $61, $00, $12, $00, $13, $00, $61
0B20F 00 00 05 E3 03 E2 01 61.. .db $00, $00, $05, $e3, $03, $e2, $01, $61, $00, $14, $00, $15, $01, $61, $09, $e3
0B21F 03 E2 01 61 0D E3 01 E2.. .db $03, $e2, $01, $61, $0d, $e3, $01, $e2, $1f, $e3, $01, $00, $00, $80, $00, $81
0B22F 00 82 0C 00 00 83 00 84.. .db $00, $82, $0c, $00, $00, $83, $00, $84, $00, $85, $32, $00, $00, $80, $01, $81
0B23F 00 82 0B 00 00 83 01 84.. .db $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85, $17, $00, $00, $55, $04, $51
0B24F 01 00 02 C0 06 00 00 07.. .db $01, $00, $02, $c0, $06, $00, $00, $07, $01, $00, $00, $0d, $05, $00, $00, $61
0B25F 03 00 00 05 00 06 00 08.. .db $03, $00, $00, $05, $00, $06, $00, $08, $00, $00, $00, $0f, $05, $00, $01, $e2
0B26F 01 4D 00 05 02 0A 00 08.. .db $01, $4d, $00, $05, $02, $0a, $00, $08, $00, $4e, $00, $02, $03, $03, $00, $04
0B27F 01 E3 0D E2 0F E3 2C 00.. .db $01, $e3, $0d, $e2, $0f, $e3, $2c, $00, $00, $80, $00, $81, $00, $82, $00, $00
0B28F 00 80 01 81 00 82 02 00.. .db $00, $80, $01, $81, $00, $82, $02, $00, $01, $61, $02, $00, $00, $83, $00, $84
0B29F 00 85 00 00 00 83 01 84.. .db $00, $85, $00, $00, $00, $83, $01, $84, $00, $85, $01, $00, $02, $61, $0b, $00
0B2AF 03 61 0A 00 04 61 09 00.. .db $03, $61, $0a, $00, $04, $61, $09, $00, $05, $61, $08, $00, $06, $61, $00, $00
0B2BF 00 07 01 00 00 0D 00 00.. .db $00, $07, $01, $00, $00, $0d, $00, $00, $00, $0e, $00, $00, $07, $61, $00, $05
0B2CF 00 06 00 08 00 00 00 0F.. .db $00, $06, $00, $08, $00, $00, $00, $0f, $00, $00, $00, $4e, $08, $61, $02, $0a
0B2DF 00 08 00 4E 00 02 0F E2.. .db $00, $08, $00, $4e, $00, $02, $0f, $e2, $0f, $e3, $01, $00, $00, $24, $0e, $00
0B2EF 00 25 00 00 00 80 02 81.. .db $00, $25, $00, $00, $00, $80, $02, $81, $00, $82, $08, $00, $00, $25, $00, $00
0B2FF 00 83 02 84 00 85 08 00.. .db $00, $83, $02, $84, $00, $85, $08, $00, $00, $25, $0e, $00, $00, $25, $0e, $00
0B30F 00 25 0E 00 00 25 03 00.. .db $00, $25, $0e, $00, $00, $25, $03, $00, $02, $45, $07, $00, $00, $25, $03, $00
0B31F 00 46 00 47 00 48 07 00.. .db $00, $46, $00, $47, $00, $48, $07, $00, $00, $25, $02, $00, $00, $45, $02, $49
0B32F 00 45 06 00 00 25 01 00.. .db $00, $45, $06, $00, $00, $25, $01, $00, $00, $0e, $01, $47, $00, $4a, $01, $47
0B33F 00 0E 03 00 00 03 00 04.. .db $00, $0e, $03, $00, $00, $03, $00, $04, $00, $61, $01, $4d, $00, $4e, $01, $47
0B34F 00 4B 01 70 00 4E 03 4D.. .db $00, $4b, $01, $70, $00, $4e, $03, $4d, $0f, $e2, $0f, $e3, $57, $00, $00, $64
0B35F 06 00 00 80 01 81 00 82.. .db $06, $00, $00, $80, $01, $81, $00, $82, $02, $00, $00, $64, $00, $65, $06, $00
0B36F 00 83 01 84 00 85 01 00.. .db $00, $83, $01, $84, $00, $85, $01, $00, $00, $64, $00, $65, $00, $66, $0b, $00
0B37F 00 64 00 65 01 66 0A 00.. .db $00, $64, $00, $65, $01, $66, $0a, $00, $00, $64, $00, $65, $02, $66, $06, $00
0B38F 03 4D 00 65 03 66 06 00.. .db $03, $4d, $00, $65, $03, $66, $06, $00, $0f, $e2, $0f, $e30B39B FD                              .db $fd
0B39C                           	  
0B39C                           ;level 6-4
0B39C                           L64:
0B39C 52 21                     	 .db $52, $21
0B39E                           	  include "code\leveldata\levels\6-4.asm"
0B39E                           
0B39E 10 62 0E 00 00 62 0E 00.. .db $10, $62, $0e, $00, $00, $62, $0e, $00, $00, $62, $0e, $00, $00, $62, $0e, $00
0B3AE 00 62 0E 00 7F 62 03 00.. .db $00, $62, $0e, $00, $7f, $62, $03, $00, $0b, $62, $04, $00, $0a, $62, $05, $00
0B3BE 09 62 19 00 02 C2 12 00.. .db $09, $62, $19, $00, $02, $c2, $12, $00, $00, $62, $0e, $00, $01, $62, $07, $00
0B3CE 02 62 02 00 02 62 06 90.. .db $02, $62, $02, $00, $02, $62, $06, $90, $02, $62, $02, $90, $03, $62, $05, $91
0B3DE 02 62 02 91 31 62 0D 00.. .db $02, $62, $02, $91, $31, $62, $0d, $00, $00, $62, $45, $00, $08, $62, $05, $00
0B3EE 09 62 05 00 09 62 05 90.. .db $09, $62, $05, $00, $09, $62, $05, $90, $09, $62, $04, $91, $3a, $62, $33, $00
0B3FE 02 C2 06 00 01 C2 0A 00.. .db $02, $c2, $06, $00, $01, $c2, $0a, $00, $00, $8a, $0e, $00, $00, $62, $0e, $00
0B40E 00 92 0E 00 00 62 03 00.. .db $00, $92, $0e, $00, $00, $62, $03, $00, $0a, $90, $00, $62, $03, $90, $0a, $91
0B41E 00 62 0E 91 00 62 0E 91.. .db $00, $62, $0e, $91, $00, $62, $0e, $91, $00, $62, $03, $91, $0f, $62, $01, $00
0B42E 00 62 0E 00 00 62 0E 00.. .db $00, $62, $0e, $00, $00, $62, $0e, $00, $00, $62, $0e, $00, $00, $62, $01, $00
0B43E 01 C2 0A 00 00 8A 05 00.. .db $01, $c2, $0a, $00, $00, $8a, $05, $00, $00, $8a, $0e, $00, $00, $62, $04, $00
0B44E 00 62 08 00 00 92 04 00.. .db $00, $62, $08, $00, $00, $92, $04, $00, $00, $92, $08, $00, $00, $62, $04, $00
0B45E 00 62 08 90 00 62 04 90.. .db $00, $62, $08, $90, $00, $62, $04, $90, $00, $62, $08, $91, $00, $62, $04, $91
0B46E 00 62 08 91 00 62 04 91.. .db $00, $62, $08, $91, $00, $62, $04, $91, $00, $62, $08, $91, $00, $62, $04, $91
0B47E 10 62 00 14 00 15 08 00.. .db $10, $62, $00, $14, $00, $15, $08, $00, $00, $14, $00, $15, $02, $00, $00, $14
0B48E 00 15 02 00 02 C2 02 00.. .db $00, $15, $02, $00, $02, $c2, $02, $00, $00, $14, $00, $15, $02, $00, $00, $2c
0B49E 00 2D 08 00 00 2C 00 2D.. .db $00, $2d, $08, $00, $00, $2c, $00, $2d, $06, $00, $00, $12, $00, $13, $00, $62
0B4AE 00 12 00 13 0A 00 00 14.. .db $00, $12, $00, $13, $0a, $00, $00, $14, $00, $15, $00, $62, $00, $14, $00, $15
0B4BE 06 00 0D 62 01 00 0D 92.. .db $06, $00, $0d, $62, $01, $00, $0d, $92, $01, $00, $0d, $62, $01, $00, $0d, $62
0B4CE 01 90 0D 62 01 91 0D 62.. .db $01, $90, $0d, $62, $01, $91, $0d, $62, $01, $91, $0d, $62, $01, $91, $0f, $62
0B4DE 0C 00 00 14 00 15 0D 00.. .db $0c, $00, $00, $14, $00, $15, $0d, $00, $00, $14, $00, $15, $0d, $00, $00, $2c
0B4EE 00 2D 01 00 05 C2 12 00.. .db $00, $2d, $01, $00, $05, $c2, $12, $00, $00, $8a, $0e, $00, $05, $62, $09, $00
0B4FE 05 92 09 00 05 62 09 90.. .db $05, $92, $09, $00, $05, $62, $09, $90, $05, $62, $09, $91, $05, $62, $09, $91
0B50E 05 62 09 91 15 62 0C 00.. .db $05, $62, $09, $91, $15, $62, $0c, $00, $02, $62, $0c, $00, $02, $62, $0c, $00
0B51E 02 62 05 00 02 C2 03 00.. .db $02, $62, $05, $00, $02, $c2, $03, $00, $02, $62, $00, $00, $00, $8a, $0a, $00
0B52E 02 8A 01 62 0D 00 01 92.. .db $02, $8a, $01, $62, $0d, $00, $01, $92, $0d, $00, $01, $62, $0d, $00, $01, $62
0B53E 0D 90 01 62 0D 91 01 62.. .db $0d, $90, $01, $62, $0d, $91, $01, $62, $0d, $91, $01, $62, $0d, $91, $12, $62
0B54E 0C 00 02 62 0C 00 02 62.. .db $0c, $00, $02, $62, $0c, $00, $02, $62, $0c, $00, $02, $62, $0c, $00, $02, $8a
0B55E 06 00 03 62 0B 00 03 62.. .db $06, $00, $03, $62, $0b, $00, $03, $62, $0b, $00, $03, $92, $0b, $00, $03, $62
0B56E 01 00 09 90 03 62 01 90.. .db $01, $00, $09, $90, $03, $62, $01, $90, $09, $91, $03, $62, $0b, $91, $03, $62
0B57E 0B 91 03 62 01 91 0F 62.. .db $0b, $91, $03, $62, $01, $91, $0f, $62, $6b, $00, $03, $62, $0b, $00, $03, $62
0B58E 0B 90 03 62 0B 91 03 62.. .db $0b, $90, $03, $62, $0b, $91, $03, $62, $0b, $91, $03, $62, $0b, $91, $13, $62
0B59E 07 00 00 C2 0F 00 00 C2.. .db $07, $00, $00, $c2, $0f, $00, $00, $c2, $07, $00, $08, $c2, $0d, $00, $00, $c2
0B5AE 0D 00 00 C2 16 00 6F 62.. .db $0d, $00, $00, $c2, $16, $00, $6f, $62, $5f, $00, $04, $62, $0a, $00, $04, $62
0B5BE 0A 00 04 62 0A 00 04 62.. .db $0a, $00, $04, $62, $0a, $00, $04, $62, $0a, $90, $04, $62, $0a, $91, $04, $62
0B5CE 0A 91 0F 62 6B 00 01 62.. .db $0a, $91, $0f, $62, $6b, $00, $01, $62, $0d, $00, $01, $62, $0d, $00, $01, $62
0B5DE 01 00 0B 90 03 62 0B 91.. .db $01, $00, $0b, $90, $03, $62, $0b, $91, $03, $62, $0b, $91, $13, $62, $0d, $00
0B5EE 01 62 0D 00 01 62 0D 00.. .db $01, $62, $0d, $00, $01, $62, $0d, $00, $01, $62, $1f, $00, $01, $c0, $00, $c1
0B5FE 03 00 03 C2 22 00 01 62.. .db $03, $00, $03, $c2, $22, $00, $01, $62, $0d, $00, $41, $62, $0d, $00, $01, $62
0B60E 0D 00 01 62 0D 00 01 62.. .db $0d, $00, $01, $62, $0d, $00, $01, $62, $2c, $00, $00, $c5, $0e, $00, $02, $62
0B61E 0C 89 02 62 0C 00 02 62.. .db $0c, $89, $02, $62, $0c, $00, $02, $62, $0c, $00, $02, $62, $0c, $90, $02, $62
0B62E 0C 91 12 62 9F 00 1F 62   .db $0c, $91, $12, $62, $9f, $00, $1f, $620B636 FD                        	 .db $fd
0B637                           
0B637                           ;level 7-1
0B637                           L_GroundArea20:
0B637 52 B1                           .db $52, $b1
0B639                           	  include "code\leveldata\levels\7-1.asm"
0B639                           
0B639 02 00 02 E9 0C 00 00 EA.. .db $02, $00, $02, $e9, $0c, $00, $00, $ea, $00, $eb, $00, $ec, $0b, $00, $00, $e9
0B649 02 ED 00 E9 02 00 00 80.. .db $02, $ed, $00, $e9, $02, $00, $00, $80, $00, $81, $00, $82, $04, $00, $01, $eb
0B659 00 EE 01 EB 02 00 00 83.. .db $00, $ee, $01, $eb, $02, $00, $00, $83, $00, $84, $00, $85, $04, $00, $01, $eb
0B669 00 EF 01 EB 08 00 01 E9.. .db $00, $ef, $01, $eb, $08, $00, $01, $e9, $04, $ed, $01, $e9, $06, $00, $02, $eb
0B679 00 EE 00 EB 00 EE 02 EB.. .db $00, $ee, $00, $eb, $00, $ee, $02, $eb, $06, $00, $02, $eb, $00, $ef, $00, $eb
0B689 00 EF 02 EB 06 00 08 EB.. .db $00, $ef, $02, $eb, $06, $00, $08, $eb, $01, $00, $00, $e6, $03, $00, $01, $eb
0B699 00 EE 00 EB 00 EE 00 EB.. .db $00, $ee, $00, $eb, $00, $ee, $00, $eb, $00, $ee, $01, $eb, $01, $00, $00, $e6
0B6A9 01 00 00 E6 00 00 01 EB.. .db $01, $00, $00, $e6, $00, $00, $01, $eb, $00, $ef, $00, $eb, $00, $ef, $00, $eb
0B6B9 00 EF 01 EB 00 F1 00 00.. .db $00, $ef, $01, $eb, $00, $f1, $00, $00, $00, $e6, $01, $00, $00, $e6, $00, $00
0B6C9 1F D6 1E 00 00 80 0E 00.. .db $1f, $d6, $1e, $00, $00, $80, $0e, $00, $00, $83, $14, $00, $00, $80, $01, $81
0B6D9 00 82 0B 00 00 83 01 84.. .db $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85, $06, $00, $02, $27, $1b, $00
0B6E9 00 C0 00 E7 08 00 00 E8.. .db $00, $c0, $00, $e7, $08, $00, $00, $e8, $00, $64, $02, $00, $00, $e7, $00, $4e
0B6F9 00 00 00 E7 02 00 00 12.. .db $00, $00, $00, $e7, $02, $00, $00, $12, $00, $13, $00, $00, $01, $e8, $00, $65
0B709 02 00 01 4E 00 00 00 4E.. .db $02, $00, $01, $4e, $00, $00, $00, $4e, $00, $00, $01, $e6, $00, $14, $00, $15
0B719 02 E8 00 66 01 F1 00 00.. .db $02, $e8, $00, $66, $01, $f1, $00, $00, $00, $4e, $1f, $d6, $0f, $00, $02, $81
0B729 00 82 0B 00 02 84 00 85.. .db $00, $82, $0b, $00, $02, $84, $00, $85, $25, $00, $00, $80, $01, $81, $00, $82
0B739 0B 00 00 83 01 84 00 85.. .db $0b, $00, $00, $83, $01, $84, $00, $85, $10, $00, $00, $27, $00, $c0, $00, $c1
0B749 0B 00 00 E7 0A 00 00 E6.. .db $0b, $00, $00, $e7, $0a, $00, $00, $e6, $00, $12, $00, $13, $00, $00, $00, $4e
0B759 07 00 00 E6 01 F1 00 E6.. .db $07, $00, $00, $e6, $01, $f1, $00, $e6, $00, $14, $00, $15, $00, $00, $00, $4e
0B769 01 00 02 F1 00 00 00 64.. .db $01, $00, $02, $f1, $00, $00, $00, $64, $29, $d6, $16, $00, $00, $80, $03, $81
0B779 00 82 09 00 00 83 03 84.. .db $00, $82, $09, $00, $00, $83, $03, $84, $00, $85, $28, $00, $02, $c2, $06, $00
0B789 00 27 1B 00 00 E8 01 00.. .db $00, $27, $1b, $00, $00, $e8, $01, $00, $00, $e7, $06, $00, $00, $e7, $02, $00
0B799 01 E8 01 00 00 4E 01 F1.. .db $01, $e8, $01, $00, $00, $4e, $01, $f1, $00, $12, $00, $13, $00, $00, $00, $e7
0B7A9 00 00 00 4E 01 00 02 E8.. .db $00, $00, $00, $4e, $01, $00, $02, $e8, $00, $12, $00, $13, $02, $d6, $00, $14
0B7B9 00 15 00 00 00 4E 00 00.. .db $00, $15, $00, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $03, $e8, $00, $14
0B7C9 00 15 04 D6 00 00 00 4E.. .db $00, $15, $04, $d6, $00, $00, $00, $4e, $00, $e7, $00, $4e, $00, $00, $0a, $d6
0B7D9 00 00 02 4E 00 00 05 D6.. .db $00, $00, $02, $4e, $00, $00, $05, $d6, $0a, $00, $00, $80, $02, $81, $00, $82
0B7E9 0A 00 00 83 02 84 00 85.. .db $0a, $00, $00, $83, $02, $84, $00, $85, $21, $00, $00, $80, $01, $81, $00, $82
0B7F9 0A 00 00 C2 00 83 01 84.. .db $0a, $00, $00, $c2, $00, $83, $01, $84, $00, $85, $06, $00, $00, $e7, $00, $00
0B809 00 E8 00 00 00 C2 0A 00.. .db $00, $e8, $00, $00, $00, $c2, $0a, $00, $00, $4e, $01, $e8, $05, $00, $01, $c2
0B819 02 00 00 64 00 00 02 E8.. .db $02, $00, $00, $64, $00, $00, $02, $e8, $02, $00, $00, $e7, $04, $00, $00, $64
0B829 00 00 00 65 03 E8 02 00.. .db $00, $00, $00, $65, $03, $e8, $02, $00, $00, $4e, $00, $e8, $00, $e7, $02, $00
0B839 00 65 05 D6 02 E6 01 E8.. .db $00, $65, $05, $d6, $02, $e6, $01, $e8, $00, $4e, $02, $f1, $00, $66, $25, $d6
0B849 37 00 00 80 00 81 00 82.. .db $37, $00, $00, $80, $00, $81, $00, $82, $06, $00, $02, $27, $02, $00, $00, $83
0B859 00 84 00 85 07 00 00 E7.. .db $00, $84, $00, $85, $07, $00, $00, $e7, $08, $00, $00, $e7, $01, $00, $00, $e6
0B869 00 00 00 E7 00 4E 03 00.. .db $00, $00, $00, $e7, $00, $4e, $03, $00, $00, $e6, $03, $00, $00, $4e, $00, $00
0B879 00 E8 00 E6 00 00 01 4E.. .db $00, $e8, $00, $e6, $00, $00, $01, $4e, $01, $00, $00, $e6, $00, $00, $00, $e6
0B889 00 00 02 E6 00 4E 01 E8.. .db $00, $00, $02, $e6, $00, $4e, $01, $e8, $01, $e6, $01, $e8, $02, $e6, $48, $d6
0B899 21 00 00 80 01 81 00 82.. .db $21, $00, $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83, $01, $84, $00, $85
0B8A9 19 00 00 E8 0C 00 00 80.. .db $19, $00, $00, $e8, $0c, $00, $00, $80, $00, $81, $00, $e8, $0c, $00, $00, $83
0B8B9 00 84 00 E8 07 00 02 27.. .db $00, $84, $00, $e8, $07, $00, $02, $27, $03, $00, $02, $d6, $01, $00, $00, $e7
0B8C9 00 00 00 E6 01 00 00 E7.. .db $00, $00, $00, $e6, $01, $00, $00, $e7, $04, $00, $02, $d6, $00, $12, $00, $13
0B8D9 00 4E 00 00 00 E6 01 00.. .db $00, $4e, $00, $00, $00, $e6, $01, $00, $00, $4e, $01, $00, $00, $e6, $01, $00
0B8E9 06 D6 00 E6 00 00 00 E6.. .db $06, $d6, $00, $e6, $00, $00, $00, $e6, $00, $4e, $01, $00, $00, $e6, $01, $00
0B8F9 1F D6 05 00 00 80 02 81.. .db $1f, $d6, $05, $00, $00, $80, $02, $81, $00, $82, $0a, $00, $00, $83, $02, $84
0B909 00 85 34 00 00 81 00 82.. .db $00, $85, $34, $00, $00, $81, $00, $82, $02, $00, $05, $0b, $04, $00, $00, $84
0B919 00 85 01 00 00 E8 05 63.. .db $00, $85, $01, $00, $00, $e8, $05, $63, $07, $00, $01, $e8, $02, $00, $00, $e7
0B929 04 00 00 E7 02 00 01 E8.. .db $04, $00, $00, $e7, $02, $00, $01, $e8, $03, $00, $00, $4e, $02, $00, $00, $e7
0B939 00 00 00 4E 01 00 01 E8.. .db $00, $00, $00, $4e, $01, $00, $01, $e8, $00, $00, $00, $e7, $02, $00, $00, $4e
0B949 02 00 00 4E 00 00 00 4E.. .db $02, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $01, $e8, $01, $00, $00, $4e
0B959 02 00 00 4E 02 00 00 4E.. .db $02, $00, $00, $4e, $02, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $01, $d6
0B969 01 00 00 4E 02 00 00 4E.. .db $01, $00, $00, $4e, $02, $00, $00, $4e, $02, $00, $00, $4e, $00, $00, $00, $4e
0B979 00 00 01 D6 01 00 00 4E.. .db $00, $00, $01, $d6, $01, $00, $00, $4e, $02, $00, $00, $4e, $02, $00, $00, $4e
0B989 00 00 00 4E 1B 00 00 80.. .db $00, $00, $00, $4e, $1b, $00, $00, $80, $01, $81, $00, $82, $0b, $00, $00, $83
0B999 01 84 00 85 11 00 00 80.. .db $01, $84, $00, $85, $11, $00, $00, $80, $03, $81, $00, $82, $09, $00, $00, $83
0B9A9 03 84 00 85 13 00 00 E8.. .db $03, $84, $00, $85, $13, $00, $00, $e8, $0d, $00, $01, $e8, $02, $00, $00, $e7
0B9B9 08 00 02 E8 00 12 00 13.. .db $08, $00, $02, $e8, $00, $12, $00, $13, $00, $00, $00, $4e, $01, $00, $01, $d6
0B9C9 01 00 00 E7 00 00 03 E8.. .db $01, $00, $00, $e7, $00, $00, $03, $e8, $00, $14, $00, $15, $00, $00, $00, $4e
0B9D9 01 00 01 D6 01 00 00 4E.. .db $01, $00, $01, $d6, $01, $00, $00, $4e, $04, $e8, $00, $14, $00, $15, $00, $00
0B9E9 00 4E 01 00 01 D6 01 00.. .db $00, $4e, $01, $00, $01, $d6, $01, $00, $04, $e8, $04, $d6, $01, $00, $01, $d6
0B9F9 00 00 03 E8 06 D6 52 00.. .db $00, $00, $03, $e8, $06, $d6, $52, $00, $00, $80, $01, $81, $00, $82, $0b, $00
0BA09 00 83 01 84 00 85 13 00.. .db $00, $83, $01, $84, $00, $85, $13, $00, $00, $c1, $01, $c0, $07, $00, $00, $64
0BA19 09 00 00 12 00 13 00 E7.. .db $09, $00, $00, $12, $00, $13, $00, $e7, $01, $00, $00, $65, $09, $00, $00, $14
0BA29 00 15 00 4E 01 00 00 66.. .db $00, $15, $00, $4e, $01, $00, $00, $66, $00, $00, $00, $64, $00, $00, $01, $4d
0BA39 00 00 02 E6 1F D6 10 00.. .db $00, $00, $02, $e6, $1f, $d6, $10, $00, $00, $80, $02, $81, $00, $82, $0a, $00
0BA49 00 83 02 84 00 85 27 00.. .db $00, $83, $02, $84, $00, $85, $27, $00, $00, $80, $00, $81, $0d, $00, $00, $83
0BA59 00 84 02 00 00 E8 04 00.. .db $00, $84, $02, $00, $00, $e8, $04, $00, $05, $27, $02, $00, $00, $e7, $01, $e8
0BA69 05 00 00 E7 05 00 00 4E.. .db $05, $00, $00, $e7, $05, $00, $00, $4e, $02, $e8, $04, $00, $00, $4e, $02, $00
0BA79 00 E7 00 64 00 00 00 4E.. .db $00, $e7, $00, $64, $00, $00, $00, $4e, $03, $e8, $00, $00, $02, $f1, $00, $4e
0BA89 02 F1 00 4E 00 65 2E D6.. .db $02, $f1, $00, $4e, $00, $65, $2e, $d6, $09, $00, $00, $80, $03, $81, $00, $82
0BA99 09 00 00 83 03 84 00 85.. .db $09, $00, $00, $83, $03, $84, $00, $85, $1f, $00, $00, $82, $0e, $00, $00, $85
0BAA9 1C 00 01 C2 08 00 00 E6.. .db $1c, $00, $01, $c2, $08, $00, $00, $e6, $00, $12, $00, $13, $02, $00, $00, $e7
0BAB9 01 00 01 F1 00 00 02 E6.. .db $01, $00, $01, $f1, $00, $00, $02, $e6, $00, $00, $00, $e6, $00, $14, $00, $15
0BAC9 00 00 00 E7 00 00 00 4E.. .db $00, $00, $00, $e7, $00, $00, $00, $4e, $00, $00, $08, $d6, $00, $14, $00, $15
0BAD9 00 00 00 4E 00 00 00 4E.. .db $00, $00, $00, $4e, $00, $00, $00, $4e, $2f, $d6, $0d, $00, $00, $80, $00, $81
0BAE9 0D 00 00 83 00 84 20 00.. .db $0d, $00, $00, $83, $00, $84, $20, $00, $00, $80, $00, $81, $00, $82, $0c, $00
0BAF9 00 83 00 84 00 85 0B 00.. .db $00, $83, $00, $84, $00, $85, $0b, $00, $00, $c2, $01, $00, $00, $c0, $01, $00
0BB09 02 C2 02 00 01 C2 08 00.. .db $02, $c2, $02, $00, $01, $c2, $08, $00, $00, $e7, $0a, $00, $00, $e7, $02, $00
0BB19 00 4E 03 00 00 E7 02 00.. .db $00, $4e, $03, $00, $00, $e7, $02, $00, $01, $f1, $00, $00, $00, $4e, $01, $f1
0BB29 00 00 00 4E 03 00 00 4E.. .db $00, $00, $00, $4e, $03, $00, $00, $4e, $00, $00, $00, $e7, $00, $00, $09, $d6
0BB39 01 00 00 4E 00 00 00 4E.. .db $01, $00, $00, $4e, $00, $00, $00, $4e, $00, $00, $09, $d6, $01, $00, $00, $4e
0BB49 00 00 00 4E 00 00 09 D6.. .db $00, $00, $00, $4e, $00, $00, $09, $d6, $01, $00, $00, $4e, $00, $00, $00, $4e
0BB59 00 00 02 81 00 82 0B 00.. .db $00, $00, $02, $81, $00, $82, $0b, $00, $02, $84, $00, $85, $23, $00, $01, $e8
0BB69 0C 00 02 E8 01 00 00 80.. .db $0c, $00, $02, $e8, $01, $00, $00, $80, $01, $81, $00, $82, $05, $00, $03, $e8
0BB79 01 00 00 83 01 84 00 85.. .db $01, $00, $00, $83, $01, $84, $00, $85, $04, $00, $04, $e8, $09, $00, $05, $e8
0BB89 08 00 06 E8 07 00 07 E8.. .db $08, $00, $06, $e8, $07, $00, $07, $e8, $03, $00, $00, $e7, $00, $00, $00, $d6
0BB99 08 E8 03 F1 00 4E 00 00.. .db $08, $e8, $03, $f1, $00, $4e, $00, $00, $1f, $d6, $01, $00, $00, $24, $0e, $00
0BBA9 00 25 0E 00 00 25 0E 00.. .db $00, $25, $0e, $00, $00, $25, $0e, $00, $00, $25, $03, $00, $00, $80, $02, $81
0BBB9 00 82 05 00 00 25 03 00.. .db $00, $82, $05, $00, $00, $25, $03, $00, $00, $83, $02, $84, $00, $85, $05, $00
0BBC9 00 25 0E 00 00 25 03 00.. .db $00, $25, $0e, $00, $00, $25, $03, $00, $02, $e9, $07, $00, $00, $25, $03, $00
0BBD9 00 EA 00 EB 00 EC 05 00.. .db $00, $ea, $00, $eb, $00, $ec, $05, $00, $00, $e7, $00, $00, $00, $25, $02, $00
0BBE9 00 E9 02 ED 00 E9 04 00.. .db $00, $e9, $02, $ed, $00, $e9, $04, $00, $00, $4e, $00, $00, $00, $25, $00, $e7
0BBF9 01 00 01 EB 00 EE 01 EB.. .db $01, $00, $01, $eb, $00, $ee, $01, $eb, $01, $00, $00, $e7, $01, $00, $00, $4e
0BC09 00 00 00 E8 00 4E 01 F1.. .db $00, $00, $00, $e8, $00, $4e, $01, $f1, $01, $eb, $00, $ef, $00, $f0, $00, $eb
0BC19 01 F1 00 4E 01 00 1F D6.. .db $01, $f1, $00, $4e, $01, $00, $1f, $d6, $1a, $00, $00, $80, $00, $81, $00, $82
0BC29 0C 00 00 83 00 84 00 85.. .db $0c, $00, $00, $83, $00, $84, $00, $85, $04, $00, $00, $80, $00, $81, $00, $82
0BC39 0C 00 00 83 00 84 00 85.. .db $0c, $00, $00, $83, $00, $84, $00, $85, $04, $00, $00, $88, $0b, $00, $00, $62
0BC49 01 D6 01 88 0A 00 00 62.. .db $01, $d6, $01, $88, $0a, $00, $00, $62, $01, $d6, $00, $61, $00, $88, $00, $00
0BC59 01 52 00 E7 02 00 00 88.. .db $01, $52, $00, $e7, $02, $00, $00, $88, $02, $00, $00, $62, $01, $e8, $01, $61
0BC69 02 52 00 4E 00 00 00 E7.. .db $02, $52, $00, $4e, $00, $00, $00, $e7, $00, $00, $01, $88, $00, $00, $00, $61
0BC79 00 62 00 E8 00 88 00 61.. .db $00, $62, $00, $e8, $00, $88, $00, $61, $00, $28, $00, $52, $01, $61, $00, $4e
0BC89 00 00 00 4E 00 00 00 E8.. .db $00, $00, $00, $4e, $00, $00, $00, $e8, $00, $88, $02, $61, $00, $e8, $01, $88
0BC99 00 28 02 61 00 4E 00 00.. .db $00, $28, $02, $61, $00, $4e, $00, $00, $00, $4e, $00, $00, $02, $e8, $03, $62
0BCA9 00 88 01 28 01 61 1F D6   .db $00, $88, $01, $28, $01, $61, $1f, $d60BCB1 FD                              .db $fd
0BCB2                           	 0BCB2 00 00 00 00 00 00 00 00.. pad $c000	
0C000                           
0C000                           base $a000
0A000                           include code\leveldata\levelData6.asm
0A000 00 00 00 00 00 00 00 00.. pad $c000	
0C000                           
0C000                           ;fucking size inflation because fuck the nes and its fucking powers of fucking two
0C000                           
0C000                           ;0a
0C000                           base $a000
0A000                           include code\leveldata\levelData6.asm
0A000 00 00 00 00 00 00 00 00.. pad $c000	
0C000                           
0C000                           base $a000
0A000                           include code\leveldata\levelData6.asm
0A000 00 00 00 00 00 00 00 00.. pad $c000	
0C000                           ;0b
0C000                           base $a000
0A000                           include code\leveldata\levelData6.asm
0A000 00 00 00 00 00 00 00 00.. pad $c000	
0C000                           
0C000                           base $a000
0A000                           include code\leveldata\levelData6.asm
0A000 00 00 00 00 00 00 00 00.. pad $c000	
0C000                           ;0c
0C000                           base $a000
0A000                           include code\leveldata\levelData6.asm
0A000 00 00 00 00 00 00 00 00.. pad $c000	
0C000                           
0C000                           base $a000
0A000                           include code\leveldata\levelData6.asm
0A000 00 00 00 00 00 00 00 00.. pad $c000	
0C000                           ;0d
0C000                           base $a000
0A000                           include code\leveldata\levelData6.asm
0A000 00 00 00 00 00 00 00 00.. pad $c000	
0C000                           
0C000                           base $a000
0A000                           include code\leveldata\levelData6.asm
0A000 00 00 00 00 00 00 00 00.. pad $c000	
0C000                           ;0e
0C000                           base $a000
0A000                           include code\leveldata\levelData6.asm
0A000 00 00 00 00 00 00 00 00.. pad $c000	
0C000                           
0C000                           base $a000
0A000                           include code\leveldata\levelData6.asm
0A000 00 00 00 00 00 00 00 00.. pad $c000	
0C000                           ;0f
0C000                           base $a000
0A000                           include code\leveldata\levelData6.asm
0A000 00 00 00 00 00 00 00 00.. pad $c000	
0C000                           
0C000                           base $a000
0A000                           include code\leveldata\levelData6.asm
0A000 00 00 00 00 00 00 00 00.. pad $c000	
0C000                           ;10
0C000                           base $a000
0A000                           include code\leveldata\levelData6.asm
0A000 00 00 00 00 00 00 00 00.. pad $c000	
0C000                           
0C000                           base $a000
0A000                           include code\leveldata\levelData6.asm
0A000 00 00 00 00 00 00 00 00.. pad $c000	
0C000                           	
0C000                           	
0C000                           
0C000                           
0C000                           
0C000                           base $c000
0C000                           ; fixed bank -- second half of original SMB code
0C000                           org $c000
0C000                           
0C000                           
0C000                           ; Relocated $c000-$ffff rom
0C000                           	include code\reset.asm
0C000                           ;Start:
0C000 78                                     sei                          ;pretty standard 6502 type init here
0C001 D8                                     cld
0C002                                       if DPCM
0C002                                         ldx #$00
0C002                                         stx $4010
0C002                                       endif
0C002                           Start:		 
0C002 A9 08                                  lda #%00001000               ;init PPU control register 1 
0C004 8D 00 20                               sta PPU_CTRL_REG1
0C007 A2 FF                                  ldx #$ff                     ;reset stack pointer
0C009 9A                                     txs
0C00A AD 02 20                  VBlank1:     lda PPU_STATUS               ;wait two frames
0C00D 10 FB                                  bpl VBlank1
0C00F AD 02 20                  VBlank2:     lda PPU_STATUS
0C012 10 FB                                  bpl VBlank2
0C014 A0 FE                                  ldy #ColdBootOffset          ;load default cold boot pointer
0C016 A2 05                                  ldx #$05                     ;this is where we check for a warm boot
0C018 BD D7 07                  WBootCheck:  lda TopScoreDisplay,x        ;check each score digit in the top score
0C01B C9 0A                                  cmp #10                      ;to see if we have a valid digit
0C01D B0 0C                                  bcs ColdBoot                 ;if not, give up and proceed with cold boot
0C01F CA                                     dex                      
0C020 10 F6                                  bpl WBootCheck
0C022 AD FF 07                               lda WarmBootValidation       ;second checkpoint, check to see if 
0C025 C9 A5                                  cmp #$a5                     ;another location has a specific value
0C027 D0 02                                  bne ColdBoot   
0C029 A0 D6                                  ldy #WarmBootOffset          ;if passed both, load warm boot pointer
0C02B 20 AC F8                  ColdBoot:    jsr InitializeMemory         ;clear memory using pointer in Y
0C02E 8D 11 40                               sta SND_DELTA_REG+1          ;reset delta counter load register
0C031 8D 70 07                               sta OperMode                 ;reset primary mode of operation
0C034 A9 A5                                  lda #$a5                     ;set warm boot flag
0C036 8D FF 07                               sta WarmBootValidation     
0C039 8D A7 07                               sta PseudoRandomBitReg       ;set seed for pseudorandom register
0C03C A9 0F                                  lda #%00001111
0C03E 8D 15 40                               sta SND_MASTERCTRL_REG       ;enable all sound channels except dmc
0C041 A9 06                                  lda #%00000110
0C043 8D 01 20                               sta PPU_CTRL_REG2            ;turn off clipping for OAM and background
0C046 20 DB F7                               jsr MoveSpritesOffscreen
0C049 20 B8 F8                               jsr InitializeNameTables     ;initialize both name tables
0C04C EE 74 07                               inc DisableScreenFlag        ;set flag to disable screen output
0C04F A9 40                     			 lda #$40                     ;disable frame counter to make irq work
0C051 8D 17 40                               sta $4017 
0C054 58                                     cli      
0C055 AD 78 07                               lda Mirror_PPU_CTRL_REG1
0C058 09 80                                  ora #%10000000               ;enable NMIs
0C05A 20 6B FB                               jsr WritePPUReg1
0C05D                           			 ;jmp EndlessLoop
0C05D                           			 ;jsr _FamitoneInit
0C05D                           EndlessLoop: 
0C05D                           			;lda $00						 ;idk if this does something but literally is in smb2j
0C05D 4C 5D C0                  			jmp EndlessLoop              ;endless loop, need I say more? -yes
0C060                           	include code\nmi.asm
0C060                           --:			   
0C060 A5 DD                     			   lda temp1
0C062 48                        			   pha
0C063 A5 DE                     			   lda temp2
0C065 48                        			   pha
0C066 A5 DF                     			   lda temp3
0C068 48                        			   pha
0C069 A5 E0                     			   lda temp4
0C06B 48                        			   pha
0C06C AD 05 60                  			   lda temp5
0C06F 48                        			   pha
0C070 AD 2A 60                  			   lda temp6
0C073 48                        			   pha
0C074 AD 2B 60                  			   lda temp7
0C077 48                        			   pha
0C078 A5 00                     			   lda $00
0C07A 48                        			   pha
0C07B A5 01                     			   lda $01
0C07D 48                        			   pha
0C07E A5 02                     			   lda $02
0C080 48                        			   pha
0C081 A5 07                     			   lda $07
0C083 48                        			   pha
0C084 AD 51 60                  			   lda tempA
0C087 48                        			   pha
0C088                           			  
0C088                           			   
0C088                           			   ;lda #$01
0C088                           			   ;sta FramesMissed		;enable this to compensate the missed frame in the next frame logic (don't)
0C088                           			   
0C088 A9 00                     			   lda #$00 
0C08A 8D 16 40                  			   sta JOYPAD_PORT			 ;read joypads so emulators doesn't mark this as lag frame hehe
0C08D                           			   
0C08D AD 16 40                  			   lda JOYPAD_PORT
0C090                           			   
0C090 A9 02                     			   lda #$02                  ;perform spr-ram DMA access on $0200-$02ff
0C092 8D 14 40                                 sta SPR_DMA
0C095                           			   
0C095                           			   
0C095 AD 78 07                  			   lda Mirror_PPU_CTRL_REG1  ;never disable NMI
0C098 29 FE                                    and #%11111110            ;save all other bits
0C09A AC EC 63                  			   ldy DecodingLevel
0C09D F0 02                     			   beq +
0C09F 29 FC                     			   and #%11111100
0C0A1 8D 78 07                  +:             sta Mirror_PPU_CTRL_REG1
0C0A4 8D 00 20                                 sta PPU_CTRL_REG1         ;(essentially $2000) but save other bits
0C0A7                           			   
0C0A7 A9 00                     			   lda #$00
0C0A9 8D 05 20                  			   sta PPU_SCROLL_REG
0C0AC 8D 05 20                  			   sta PPU_SCROLL_REG
0C0AF                           			   
0C0AF A9 01                     			   lda #$01					 ;set irq registers
0C0B1 8D 00 E0                  			   sta $e000
0C0B4 A9 1F                     			   lda #$1f
0C0B6 8D 00 C0                  			   sta $c000
0C0B9 8D 01 C0                  			   sta $c001
0C0BC A9 01                     			   lda #$01
0C0BE 8D 00 E0                  			   sta $e000
0C0C1 8D 01 E0                  			   sta $e001
0C0C4 EE 7C 07                  			   inc IRQAckFlag
0C0C7                           			   
0C0C7 AD C5 05                  			   lda Old8000
0C0CA 48                        			   pha
0C0CB                           			   
0C0CB 20 C2 F8                  			   jsr handleSound
0C0CE 20 08 F6                  			   jsr MakeParallax
0C0D1                           			   
0C0D1 68                        			   pla
0C0D2 8D 00 80                  			   sta $8000
0C0D5                           			   
0C0D5 68                        			   pla
0C0D6 8D 51 60                  			   sta tempA
0C0D9 68                        			   pla
0C0DA 85 07                     			   sta $07
0C0DC 68                        			   pla
0C0DD 85 02                     			   sta $02
0C0DF 68                        			   pla 
0C0E0 85 01                     			   sta $01
0C0E2 68                        			   pla
0C0E3 85 00                     			   sta $00
0C0E5 68                        			   pla 
0C0E6 8D 2B 60                  			   sta temp7
0C0E9 68                        			   pla
0C0EA 8D 2A 60                  			   sta temp6
0C0ED 68                        			   pla
0C0EE 8D 05 60                  			   sta temp5
0C0F1 68                        			   pla
0C0F2 85 E0                     			   sta temp4
0C0F4 68                        			   pla
0C0F5 85 DF                     			   sta temp3
0C0F7 68                        			   pla
0C0F8 85 DE                     			   sta temp2
0C0FA 68                        			   pla 
0C0FB 85 DD                     			   sta temp1
0C0FD                           			   
0C0FD                           			   
0C0FD 68                        			   pla
0C0FE A8                        			   tay
0C0FF 68                        			   pla
0C100 AA                        			   tax
0C101 68                        			   pla
0C102 40                        			   rti
0C103 4C 60 C0                  -: jmp --
0C106                           
0C106                           NonMaskableInterrupt:
0C106 48                        			   pha
0C107 8A                        			   txa
0C108 48                        			   pha
0C109 98                        			   tya
0C10A 48                        			   pha
0C10B                           			   
0C10B                           			   
0C10B AD 3F 07                  			   lda HorizontalScroll
0C10E 8D AD 63                  			   sta OldHorizontalScroll
0C111 AD 40 07                  			   lda VerticalScroll
0C114 8D E5 63                  			   sta OldVerticalScroll
0C117 AD 7B 07                  			   lda NameTableSelect
0C11A 8D AE 63                  			   sta OldNameTableSelect
0C11D                           			   
0C11D AD 88 60                  			   lda dontchecklag
0C120 D0 05                     			   bne +
0C122 AD EB 63                  			   lda lagframedetect
0C125 D0 DC                     			   bne -
0C127                           				
0C127                           +:		        
0C127 68                        			   pla
0C128 68                        			   pla
0C129 68                        			   pla
0C12A                           			   
0C12A AD C1 05                  			   lda TextboxID
0C12D F0 03                     			   beq +
0C12F 20 08 F6                  			        jsr MakeParallax			;do sub to check if parallax level type and set if so if the textbox is not displaying
0C132                           +:             
0C132 A9 01                     			   lda #$01
0C134 8D EB 63                  			   sta lagframedetect
0C137 AD 78 07                                 lda Mirror_PPU_CTRL_REG1
0C13A 29 FE                     			   and #%11111110
0C13C 8D 00 20                  			   sta PPU_CTRL_REG1         ;(essentially $2000) but save other bits
0C13F AD 79 07                  			   lda Mirror_PPU_CTRL_REG2  ;disable OAM and background display by default
0C142 29 E6                                    and #%11100110
0C144 AC 74 07                  			   ldy DisableScreenFlag     ;get screen disable flag
0C147 D0 05                                    bne ScreenOff             ;if set, used bits as-is
0C149 AD 79 07                                 lda Mirror_PPU_CTRL_REG2  ;otherwise reenable bits and save them
0C14C 09 1E                                    ora #%00011110
0C14E 8D 79 07                  ScreenOff:     sta Mirror_PPU_CTRL_REG2  ;save bits for later but not in register at the moment
0C151 29 E7                                    and #%11100111            ;disable screen for now
0C153 8D 01 20                                 sta PPU_CTRL_REG2
0C156 AE 02 20                                 ldx PPU_STATUS            ;reset flip-flop and reset scroll registers to zero
0C159 A9 00                                    lda #$00
0C15B 8D 05 20                                 sta PPU_SCROLL_REG        ;store contents of A into scroll registers
0C15E 8D 05 20                                 sta PPU_SCROLL_REG        ;and end whatever subroutine led us here
0C161 8D 03 20                                 sta PPU_SPR_ADDR          ;reset spr-ram address register
0C164 A9 02                                    lda #$02                  ;perform spr-ram DMA access on $0200-$02ff
0C166 8D 14 40                                 sta SPR_DMA
0C169 AE 73 07                  			   ldx VRAM_Buffer_AddrCtrl  ;load control for pointer to buffer contents
0C16C BD 31 C2                                 lda VRAM_AddrTable_Low,x  ;set indirect at $00 to pointer
0C16F 85 00                                    sta $00
0C171 BD 45 C2                                 lda VRAM_AddrTable_High,x
0C174 85 01                                    sta $01
0C176 20 46 FB                                 jsr UpdateScreen          ;update screen with buffer contents
0C179 A0 00                                    ldy #$00
0C17B AE 73 07                                 ldx VRAM_Buffer_AddrCtrl  ;check for usage of $0341
0C17E E0 06                                    cpx #$06
0C180 D0 01                                    bne InitBuffer
0C182 C8                                       iny                       ;get offset based on usage
0C183 BE 59 C2                  InitBuffer:    ldx VRAM_Buffer_Offset,y
0C186 A9 00                                    lda #$00                  ;clear buffer header at last location
0C188 9D 00 64                                 sta VRAM_Buffer1_Offset,x        
0C18B 9D 01 64                                 sta VRAM_Buffer1,x
0C18E 8D 73 07                                 sta VRAM_Buffer_AddrCtrl  ;reinit address control to $0301
0C191 AD 79 07                                 lda Mirror_PPU_CTRL_REG2  ;copy mirror of $2001 to register
0C194 8D 01 20                                 sta PPU_CTRL_REG2
0C197 AD 22 07                  			   lda IRQDisable
0C19A F0 0E                     			   beq +
0C19C A9 1F                     				   lda #$1f
0C19E 8D 00 C0                  				   sta $c000
0C1A1 8D 01 C0                  				   sta $c001
0C1A4 8D 01 E0                  				   sta $e001
0C1A7 EE 7C 07                  				   inc IRQAckFlag			 
0C1AA 58                        +:			   cli
0C1AB                           			   if SOUND
0C1AB 20 C2 F8                  					jsr handleSound
0C1AE                                          endif
0C1AE 20 AF F8                  			   jsr ReadJoypads           ;read joypads
0C1B1 20 31 B2                                 jsr PauseRoutine          ;handle pause
0C1B4                                          
0C1B4 A2 05                     			   ldx #$05                 ;start with mario's score
0C1B6                           
0C1B6                           TopScoreCheck:
0C1B6 A0 05                                    ldy #$05                 ;start with the lowest digit
0C1B8 38                                       sec           
0C1B9 BD DD 07                  GetScoreDiff:  lda PlayerScoreDisplay,x ;subtract each player digit from each high score digit
0C1BC F9 D7 07                                 sbc TopScoreDisplay,y    ;from lowest to highest, if any top score digit exceeds
0C1BF CA                                       dex                      ;any player digit, borrow will be set until a subsequent
0C1C0 88                                       dey                      ;subtraction clears it (player digit is higher than top)
0C1C1 10 F6                                    bpl GetScoreDiff      
0C1C3 90 0E                                    bcc NoTopSc              ;check to see if borrow is still set, if so, no new high score
0C1C5 E8                                       inx                      ;increment X and Y once to the start of the score
0C1C6 C8                                       iny
0C1C7 BD DD 07                  CopyScore:     lda PlayerScoreDisplay,x ;store player's score digits into high score memory area
0C1CA 99 D7 07                                 sta TopScoreDisplay,y
0C1CD E8                                       inx
0C1CE C8                                       iny
0C1CF C0 06                                    cpy #$06                 ;do this until we have stored them all
0C1D1 90 F4                                    bcc CopyScore
0C1D3                           NoTopSc:      
0C1D3 AD B7 63                  			   lda SetupPause
0C1D6 F0 03                     			   beq +
0C1D8 20 C5 F7                  				   jsr RunPauseMenu
0C1DB AD 76 07                  +:             lda GamePauseStatus       ;check for pause status
0C1DE 4A                                       lsr
0C1DF B0 23                                    bcs NoDecTimers
0C1E1 AD 47 07                                 lda TimerControl          ;if master timer control not set, decrement
0C1E4 F0 05                                    beq DecTimers             ;all frame and interval timers
0C1E6 CE 47 07                                 dec TimerControl
0C1E9 D0 19                                    bne NoDecTimers
0C1EB A2 14                     DecTimers:     ldx #$14                  ;load end offset for end of frame timers
0C1ED CE 7F 07                                 dec IntervalTimerControl  ;decrement interval timer control,
0C1F0 10 07                                    bpl DecTimersLoop         ;if not expired, only frame timers will decrement
0C1F2 A9 14                                    lda #$14
0C1F4 8D 7F 07                                 sta IntervalTimerControl  ;if control for interval timers expired,
0C1F7 A2 23                                    ldx #$23                  ;interval timers will decrement along with frame timers
0C1F9 BD 80 07                  DecTimersLoop: lda Timers,x              ;check current timer
0C1FC F0 03                                    beq SkipExpTimer          ;if current timer expired, branch to skip,
0C1FE DE 80 07                                 dec Timers,x              ;otherwise decrement the current timer
0C201                           SkipExpTimer:  ;ldy FramesMissed
0C201                           			   ;beq +
0C201                           			   ;lda Timers,x
0C201                           			   ;beq +
0C201                           			   ;dec Timers,x
0C201 CA                        +:			   dex                       ;move onto next timer
0C202 10 F5                                    bpl DecTimersLoop         ;do this until all timers are dealt with
0C204 E6 09                     NoDecTimers:   inc FrameCounter          ;increment frame counter
0C206 20 D0 F8                  PauseSkip:     jsr RNG
0C209 20 D0 F7                  			   jsr RunStuff				 ;run the bankswitch thingy and the code of the bank 01
0C20C AD C1 05                  			   lda TextboxID
0C20F D0 03                     			   bne +
0C211 20 08 F6                  					jsr MakeParallax			 ;do sub to check if parallax level type and set if so 
0C214 AD 76 07                  +:             lda GamePauseStatus       ;if in pause mode, do not bother with sprites at all
0C217 4A                                       lsr
0C218 B0 0E                                    bcs SkipMainOper
0C21A AD 22 07                  			   lda IRQDisable  		 	 ;check for flag here
0C21D F0 06                                    beq SkipThisThing
0C21F 20 DB F7                                 jsr MoveSpritesOffscreen
0C222 20 B1 B3                  			   jsr SpriteShuffler
0C225                           SkipThisThing: 
0C225                           			   ;lda FinishedDemo
0C225                           			   ;cmp #$07
0C225                           			   ;bcs SkipMainOper
0C225 20 39 80                  			   jsr OperModeExecutionTree ;otherwise do one of many, many possible subroutines
0C228                           			  
0C228                           +	  
0C228 A9 00                     SkipMainOper:  lda #$00
0C22A 8D EB 63                  			   sta lagframedetect
0C22D AD 02 20                  			   lda PPU_STATUS
0C230                           			   ;lda Mirror_PPU_CTRL_REG1
0C230                                          ;ora #%10000000            ;reactivate NMIs
0C230                           			   ;sta Mirror_PPU_CTRL_REG1
0C230                                          ;sta PPU_CTRL_REG1
0C230 40                        			   rti                       ;we are done until the next frame!
0C231                           
0C231                           ;-------------------------------------------------------------------------------------
0C231                           
0C231                           	0C231                           	
0C231                           VRAM_AddrTable_Low:
0C231 01 97 BB                        .db <VRAM_Buffer1, <WaterPaletteData, <GroundPaletteData
0C234 DF 03 00                        .db <UndergroundPaletteData, <CastlePaletteData, <VRAM_Buffer1_Offset
0C237 E1 E1 5B                        .db <VRAM_Buffer2, <VRAM_Buffer2, <BowserPaletteData
0C23A 27 2F 37                        .db <DaySnowPaletteData, <NightSnowPaletteData, <MushroomPaletteData
0C23D 63 77 8B                        .db <MarioThanksMessage, <LuigiThanksMessage, <MushroomRetainerSaved
0C240 E5 FB 11                        .db <PrincessSaved1, <PrincessSaved2, <WorldSelectMessage1
0C243 25 B7                           .db <WorldSelectMessage2, <MushRoomRetainerGlitchWorld
0C245                           
0C245                           VRAM_AddrTable_High:
0C245 64 8B 8B                        .db >VRAM_Buffer1, >WaterPaletteData, >GroundPaletteData
0C248 8B 8C 64                        .db >UndergroundPaletteData, >CastlePaletteData, >VRAM_Buffer1_Offset
0C24B 64 64 8C                        .db >VRAM_Buffer2, >VRAM_Buffer2, >BowserPaletteData
0C24E 8C 8C 8C                        .db >DaySnowPaletteData, >NightSnowPaletteData, >MushroomPaletteData
0C251 8C 8C 8C                        .db >MarioThanksMessage, >LuigiThanksMessage, >MushroomRetainerSaved
0C254 8C 8C 8D                        .db >PrincessSaved1, >PrincessSaved2, >WorldSelectMessage1
0C257 8D 8C                           .db >WorldSelectMessage2, >MushRoomRetainerGlitchWorld
0C259                           
0C259                           VRAM_Buffer_Offset:
0C259 00 E0                           .db <VRAM_Buffer1_Offset, <VRAM_Buffer2_Offset
0C25B                           	  
0C25B                           EnemiesAndLoopsCore:
0C25B B5 0F                     			lda Enemy_Flag,x         ;check data here for MSB set
0C25D 30 11                                 bmi ChkBowserF           ;if MSB set in enemy flag, branch ahead of jumps
0C25F F0 03                                 beq ChkAreaTsk           ;if data zero, branch
0C261 4C 8F C2                              jmp RunEnemyObjectsCore  ;otherwise, jump to run enemy subroutines
0C264 AD 1F 07                  ChkAreaTsk: lda AreaParserTaskNum    ;check number of tasks to perform
0C267 29 07                                 and #$07
0C269 C9 07                                 cmp #$07                 ;if at a specific task, jump and leave
0C26B F0 0D                                 beq ExitELCore
0C26D 4C 1D F8                              jmp ProcLoopCommand1      ;otherwise, jump to process loop command/load enemies
0C270 29 0F                     ChkBowserF: and #%00001111           ;mask out high nybble
0C272 A8                                    tay
0C273 B9 0F 00                              lda Enemy_Flag,y         ;use as pointer and load same place with different offset
0C276 D0 02                                 bne ExitELCore
0C278 95 0F                                 sta Enemy_Flag,x         ;if second enemy flag not set, also clear first one
0C27A 60                        ExitELCore: rts
0C27B                           
0C27B                           
0C27B                           ChangeSizeOffsetAdder:
0C27B 00 01 00 01 00 01 02 00..         .db $00, $01, $00, $01, $00, $01, $02, $00, $01, $02
0C285 02 00 02 00 02 00 02 00..         .db $02, $00, $02, $00, $02, $00, $02, $00, $02, $00
0C28F                           
0C28F                           ;ColorRotatePalette:
0C28F                           ;       .db $16, $30
0C28F                           
0C28F                           ;BlankPalette:
0C28F                            ;      .db $3f, $08, $04, $ff, $ff, $ff, $ff, $00
0C28F                           
0C28F                           ;used based on area type
0C28F                           ;Palette3Data:
0C28F                             ;     .db $0f, $30, $22, $0f 
0C28F                              ;    .db $0f, $30, $21, $0f 
0C28F                               ;   .db $0f, $30, $21, $0c
0C28F                               ;   .db $0f, $30, $16, $2d
0C28F                           ;--------------------------------
0C28F                           
0C28F                           ;ColorRotation:
0C28F                                         ;rts
0C28F                           ;			  ;lda HurryUp
0C28F                           			  ;beq ExitColorRot
0C28F                           			  ;ldx VRAM_Buffer1_Offset  ;check vram buffer offset
0C28F                                         ;cpx #$31
0C28F                                         ;bcs ExitColorRot         ;if offset over 48 bytes, branch to leave
0C28F                           			  ;ldy #$00
0C28F                           ;GetBlankPal:  ;lda BlankPalette,y       ;get blank palette for palette 3
0C28F                                         ;sta VRAM_Buffer1,x       ;store it in the vram buffer
0C28F                                         ;inx                      ;increment offsets
0C28F                                         ;iny
0C28F                                         ;cpy #$08
0C28F                                         ;bcc GetBlankPal          ;do this until all bytes are copied
0C28F                                         ;ldx VRAM_Buffer1_Offset  ;get current vram buffer offset
0C28F                                         ;lda #$03
0C28F                                         ;sta $00                  ;set counter here
0C28F                                         ;lda AreaType             ;get area type
0C28F                                         ;asl                      ;multiply by 4 to get proper offset
0C28F                                         ;asl
0C28F                                         ;tay                      ;save as offset here
0C28F                           G;etAreaPal:   ;lda Palette3Data,y       ;fetch palette to be written based on area type
0C28F                                         ;sta VRAM_Buffer1+3,x     ;store it to overwrite blank palette in vram buffer
0C28F                                         ;iny
0C28F                                        ; inx
0C28F                                        ; dec $00                  ;decrement counter
0C28F                                        ; bpl GetAreaPal           ;do this until the palette is all copied
0C28F                                        ; ldx VRAM_Buffer1_Offset  ;get current vram buffer offset
0C28F                                        ; ldy timerupthing   	   ;get color cycling offset
0C28F                                        ; lda ColorRotatePalette,y
0C28F                                        ; sta VRAM_Buffer1+4,x     ;get and store current color in second slot of palette
0C28F                                        ; lda VRAM_Buffer1_Offset
0C28F                                        ; clc                      ;add seven bytes to vram buffer offset
0C28F                                        ; adc #$07
0C28F                                        ; sta VRAM_Buffer1_Offset
0C28F                           ;ExitColorRot:; rts                      ;leave
0C28F                           ;loop command data
0C28F                           ;-------------------------------------------------------------------------------------
0C28F                           
0C28F                           RunEnemyObjectsCore:
0C28F                           ;	   lda GameEngineSubroutine
0C28F                           ;	   cmp #$05
0C28F                           ;	   bne +
0C28F                           ;	   ldx ObjectOffset
0C28F                           ;	   lda Enemy_ID,x
0C28F                           ;	   cmp #Fireworks
0C28F                           ;	   beq +
0C28F                           ;	   jmp RunStarFlagObj
0C28F A6 08                     +:	   ldx ObjectOffset  ;get offset for enemy object buffer
0C291 A9 00                            lda #$00          ;load value 0 for jump engine by default
0C293 B4 15                            ldy Enemy_ID,x
0C295 C0 15                            cpy #$15          ;if enemy object < $15, use default value
0C297 90 03                            bcc JmpEO
0C299 98                               tya               ;otherwise subtract $14 from the value and use
0C29A E9 14                            sbc #$14          ;as value for jump engine
0C29C C9 30                     JmpEO: cmp #LastEnemyID+1-$14
0C29E B0 63                     	   bcs NoRunCode
0C2A0 20 A0 F7                  	   jsr JumpEngine
0C2A3                                 
0C2A3 19 C3                           .dw RunNormalEnemies  ;for objects $00-$14
0C2A5                           
0C2A5 1A C4                           .dw RunBowserFlame    ;15 for objects $15-$1f
0C2A7 15 CF                           .dw RunFireworks		;16
0C2A9 03 C3                           .dw NoRunCode         ;17
0C2AB 03 C3                           .dw NoRunCode         ;18
0C2AD 19 C3                           .dw RunNormalEnemies  ;19
0C2AF 03 C3                           .dw NoRunCode         ;1a
0C2B1 2C C4                           .dw RunFirebarObj     ;1b
0C2B3 2C C4                           .dw RunFirebarObj     ;1c
0C2B5 2C C4                           .dw RunFirebarObj     ;1d
0C2B7 2C C4                           .dw RunFirebarObj     ;1e
0C2B9 2C C4                           .dw RunFirebarObj     ;1f
0C2BB                           
0C2BB 19 C3                           .dw RunNormalEnemies  ;20 for objects $20-$2f
0C2BD 19 C3                           .dw RunNormalEnemies  ;21
0C2BF 19 C3                           .dw RunNormalEnemies  ;22
0C2C1 03 C3                           .dw NoRunCode         ;23
0C2C3 E5 C4                           .dw RunLargePlatform  ;24
0C2C5 E5 C4                           .dw RunLargePlatform  ;25
0C2C7 E5 C4                           .dw RunLargePlatform  ;26
0C2C9 E5 C4                           .dw RunLargePlatform  ;27
0C2CB E5 C4                           .dw RunLargePlatform  ;28
0C2CD E5 C4                           .dw RunLargePlatform  ;29
0C2CF E5 C4                           .dw RunLargePlatform  ;2a
0C2D1 32 C4                           .dw RunSmallPlatform  ;2b
0C2D3 32 C4                           .dw RunSmallPlatform  ;2c
0C2D5 98 CC                           .dw RunBowser         ;2d
0C2D7 D4 A6                           .dw PowerUpObjHandler ;2e
0C2D9 E9 A1                           .dw VineObjectHandler ;2f
0C2DB                           
0C2DB 03 C3                           .dw NoRunCode        ;30 for objects $30-$35
0C2DD 5A CF                           .dw RunStarFlagObj   ;31
0C2DF 9A AC                           .dw JumpspringHandler;32
0C2E1 03 C3                           .dw NoRunCode        ;33
0C2E3 1E A1                           .dw WarpZoneObject   ;34
0C2E5 10 C3                           .dw RunRetainerObj   ;35
0C2E7 03 C3                     	  .dw NoRunCode 	   ;36
0C2E9 03 C3                     	  .dw NoRunCode 	   ;37
0C2EB 03 C3                     	  .dw NoRunCode 	   ;38
0C2ED 03 C3                     	  .dw NoRunCode		   ;39
0C2EF 03 C3                     	  .dw NoRunCode		   ;3a
0C2F1 03 C3                     	  .dw NoRunCode		   ;3b
0C2F3 03 C3                     	  .dw NoRunCode		   ;3c
0C2F5 03 C3                     	  .dw NoRunCode		   ;3d
0C2F7 03 C3                     	  .dw NoRunCode		   ;3e
0C2F9 03 C3                     	  .dw NoRunCode		   ;3f
0C2FB 04 C3                     	  .dw SignDo		   ;40
0C2FD 03 C3                     	  .dw NoRunCode		   ;41
0C2FF 03 C3                     	  .dw NoRunCode		   ;42
0C301 03 C3                     	  .dw NoRunCode		   ;43
0C303                           ;--------------------------------
0C303 60                        NoRunCode: rts
0C304                           SignDo:
0C304 20 10 C3                  	  jsr RunRetainerObj
0C307 20 CC B6                  	  jsr GetEnemyBoundBox
0C30A 20 1E D3                  	  jsr OffscreenBoundsCheck
0C30D 4C 83 D6                        jmp PlayerEnemyCollision
0C310                           ;--------------------------------
0C310                           
0C310                           RunRetainerObj:
0C310 20 63 B0                        jsr GetEnemyOffscreenBits
0C313 20 00 AF                        jsr RelativeEnemyPosition
0C316 4C 42 F8                        jmp EnemyGfxHandler
0C319                           
0C319                           ;--------------------------------
0C319                           
0C319                           RunNormalEnemies:
0C319 A9 00                               lda #$00                  ;init sprite attributes
0C31B 9D C5 03                            sta Enemy_SprAttrib,x
0C31E A9 01                               lda #$01                 ;set A to add 1 byte in order to get enemy offset
0C320 A8                                  tay                 ;set Y to put offscreen bits in Enemy_OffscreenBits
0C321 86 00                               stx $00
0C323 18                                  clc           ;add contents of X to A to get
0C324 65 00                               adc $00       ;appropriate offset, then give back to X
0C326 AA                                  tax
0C327 98                                  tya                         ;save offscreen bits offset to stack for now
0C328 48                                  pha
0C329 20 67 AE                            jsr GetXOffscreenBits  ;do subroutine here
0C32C A8                                  tay
0C32D B9 24 BD                  		  lda MSBtoLSB,y
0C330 85 00                               sta $00                ;store here
0C332 20 BB AE                            jsr GetYOffscreenBits
0C335 A8                                  tay
0C336 B9 24 BE                  		  lda LSBtoMSB,y
0C339 05 00                               ora $00                     ;mask together with previously saved low nybble
0C33B 85 00                               sta $00                     ;store both here
0C33D 68                                  pla                         ;get offscreen bits offset from stack
0C33E A8                                  tay
0C33F A5 00                               lda $00                     ;get value here and store elsewhere
0C341 99 D0 03                            sta SprObject_OffscrBits,y
0C344 A6 08                               ldx ObjectOffset
0C346 A9 01                               lda #$01                     ;get coordinates of enemy object 
0C348 A8                                  tay                     ;relative to the screen
0C349 86 00                               stx $00                     ;store value to add to A here
0C34B 18                                  clc
0C34C 65 00                               adc $00                     ;add A to value stored
0C34E AA                                  tax                         ;use as enemy offset
0C34F B5 C0                               lda SprObject_Y_Position,x  ;load vertical coordinate low
0C351 99 B8 03                            sta SprObject_Rel_YPos,y    ;store here
0C354 B5 78                               lda SprObject_X_Position,x  ;load horizontal coordinate
0C356 38                                  sec                         ;subtract left edge coordinate
0C357 ED 1C 07                            sbc ScreenLeft_X_Pos
0C35A 99 AD 03                            sta SprObject_Rel_XPos,y    ;store result here
0C35D A6 08                               ldx ObjectOffset 
0C35F 20 42 F8                            jsr EnemyGfxHandler
0C362 A0 48                               ldy #$48                 ;store bitmask here for now
0C364 84 00                     		  sty $00
0C366 A0 44                     		  ldy #$44                 ;store another bitmask here for now and jump
0C368 B5 79                               lda Enemy_X_Position,x      ;get enemy object position relative
0C36A 38                                  sec                         ;to the left side of the screen
0C36B ED 1C 07                            sbc ScreenLeft_X_Pos
0C36E 85 01                               sta $01                     ;store here
0C370 B5 60                     		  lda Enemy_PageLoc,x         ;subtract borrow from current page location
0C372 ED 1A 07                  		  sbc ScreenLeft_PageLoc      ;of left side
0C375 30 06                     		  bmi CMBit1                  ;if enemy object is beyond left edge, branch
0C377 05 01                     		  ora $01
0C379 F0 02                     		  beq CMBit1                  ;if precisely at the left edge, branch
0C37B A4 00                     		  ldy $00                     ;if to the right of left edge, use value in $00 for A
0C37D 98                        CMBit1:   tya                         ;otherwise use contents of Y
0C37E 2D D1 03                  		  and Enemy_OffscreenBits     ;preserve bitwise whatever's in here
0C381 9D D8 03                  		  sta EnemyOffscrBitsMasked,x ;save masked offscreen bits here
0C384 D0 06                     		  bne MoveBoundBoxOffscreen1   ;if anything set here, branch
0C386 20 05 B7                  		  jsr SetupEOffsetFBBox       ;otherwise, do something else
0C389 4C 9E C3                  		  jmp +
0C38C                           MoveBoundBoxOffscreen1:
0C38C 8A                        		  txa                            ;multiply offset by 4
0C38D 0A                        		  asl
0C38E 0A                        		  asl
0C38F A8                        		  tay                            ;use as offset here
0C390 A9 FF                     		  lda #$ff
0C392 99 B0 04                  		  sta EnemyBoundingBoxCoord,y    ;load value into four locations here and leave
0C395 99 B1 04                  		  sta EnemyBoundingBoxCoord+1,y
0C398 99 B2 04                  		  sta EnemyBoundingBoxCoord+2,y
0C39B 99 B3 04                            sta EnemyBoundingBoxCoord+3,y
0C39E B5 1C                     +:        lda Enemy_State,x
0C3A0 29 20                     		  and #%00100000
0C3A2 D0 11                     		  bne +
0C3A4 20 EA E7                  		  jsr EnemyToBGCollisionDet
0C3A7 A5 09                               lda FrameCounter            ;check counter for d0 set
0C3A9 4A                                  lsr
0C3AA 90 06                               bcc ++
0C3AC 20 27 DB                            jsr EnemiesCollision
0C3AF 4C B5 C3                  		  jmp +
0C3B2                           		  
0C3B2 20 83 D6                  ++:       jsr PlayerEnemyCollision
0C3B5 AC 47 07                  +:        ldy TimerControl          ;if master timer control set, skip to last routine
0C3B8 D0 05                               bne SkipMove
0C3BA 20 C8 C3                            jsr EnemyMovementSubs
0C3BD A6 08                     		  ldx ObjectOffset
0C3BF 4C 1E D3                  SkipMove: jmp OffscreenBoundsCheck
0C3C2                           MovePiranhaPlant1:
0C3C2 4C 39 D0                  	  jmp MovePiranhaPlant
0C3C5                           MoveUpsideDownPiranhaP1:
0C3C5 4C CB AD                  	  jmp MoveUpsideDownPiranhaP
0C3C8                           EnemyMovementSubs:
0C3C8 A6 08                           ldx ObjectOffset
0C3CA B5 15                     	  lda Enemy_ID,x
0C3CC C9 30                     	  cmp #LastEnemyID+1-$14
0C3CE B0 49                     	  bcs NoMoveCode
0C3D0 20 A0 F7                  	  jsr JumpEngine
0C3D3                           
0C3D3 FD C5                           .dw MoveNormalEnemy      			;00 only objects $00-$14 use this table
0C3D5 FD C5                           .dw MoveNormalEnemy				;01
0C3D7 FD C5                           .dw MoveNormalEnemy               ;02
0C3D9 FD C5                           .dw MoveNormalEnemy               ;03
0C3DB FD C5                           .dw MoveNormalEnemy               ;04
0C3DD 5E C5                           .dw ProcHammerBro                 ;05
0C3DF FD C5                           .dw MoveNormalEnemy               ;06
0C3E1 76 C7                           .dw MoveBloober                   ;07
0C3E3 E9 A2                           .dw MoveBulletBill                ;08
0C3E5 FD C5                           .dw MoveNormalEnemy               ;09
0C3E7 25 C8                           .dw MoveSwimmingCheepCheep        ;0a
0C3E9 25 C8                           .dw MoveSwimmingCheepCheep        ;0b
0C3EB 3A C5                           .dw MovePodoboo                   ;0c
0C3ED 39 D0                           .dw MovePiranhaPlant              ;0d
0C3EF F9 A2                           .dw MoveJumpingEnemy              ;0e
0C3F1 E9 C6                           .dw ProcMoveRedPTroopa            ;0f
0C3F3 0F C7                           .dw MoveFlyGreenPTroopa           ;10
0C3F5 E2 CA                           .dw MoveLakitu                    ;11
0C3F7 FD C5                           .dw MoveNormalEnemy               ;12
0C3F9 F9 A2                           .dw MoveJumpingEnemy   ;dummy     ;13
0C3FB CC BB                           .dw MoveFlyingCheepCheep          ;14
0C3FD 19 C4                     	  .dw NoMoveCode                    ;15
0C3FF 19 C4                     	  .dw NoMoveCode                    ;16
0C401 19 C4                     	  .dw NoMoveCode                    ;17
0C403 19 C4                     	  .dw NoMoveCode                    ;18
0C405 FD C5                     	  .dw MoveNormalEnemy               ;19
0C407 CB AD                     	  .dw MoveUpsideDownPiranhaP        ;1a
0C409 CB AD                     	  .dw MoveUpsideDownPiranhaP        ;1b
0C40B 19 C4                     	  .dw NoMoveCode					;1c
0C40D 19 C4                     	  .dw NoMoveCode					;1d
0C40F 19 C4                     	  .dw NoMoveCode					;1e
0C411 19 C4                     	  .dw NoMoveCode					;1f
0C413 C2 C3                     	  .dw MovePiranhaPlant1				;20
0C415 C5 C3                     	  .dw MoveUpsideDownPiranhaP1		;21
0C417 C5 C3                     	  .dw MoveUpsideDownPiranhaP1		;22
0C419                           	  
0C419                           	  
0C419                           
0C419                           ;--------------------------------
0C419                           NoMoveCode:
0C419 60                              rts
0C41A                           
0C41A                           ;--------------------------------
0C41A                           
0C41A                           RunBowserFlame:
0C41A 20 6B CE                        jsr ProcBowserFlame
0C41D 20 63 B0                        jsr GetEnemyOffscreenBits
0C420 20 00 AF                        jsr RelativeEnemyPosition
0C423 20 CC B6                        jsr GetEnemyBoundBox
0C426 20 83 D6                        jsr PlayerEnemyCollision
0C429 4C 1E D3                        jmp OffscreenBoundsCheck
0C42C                           
0C42C                           ;--------------------------------
0C42C                           
0C42C                           RunFirebarObj:
0C42C 20 C1 C8                        jsr ProcFirebar
0C42F 4C 1E D3                        jmp OffscreenBoundsCheck
0C432                           
0C432                           ;--------------------------------
0C432                           
0C432                           RunSmallPlatform:
0C432 20 63 B0                        jsr GetEnemyOffscreenBits
0C435 20 00 AF                        jsr RelativeEnemyPosition
0C438 20 D5 B6                        jsr SmallPlatformBoundBox
0C43B 20 27 F7                        jsr SmallPlatformCollision
0C43E 20 00 AF                        jsr RelativeEnemyPosition
0C441 BC E5 06                        ldy Enemy_SprDataOffset,x   ;get OAM data offset
0C444 A9 EB                            lda #$eb                    ;load tile number for small platforms
0C446 C8                               iny                         ;increment offset for tile numbers
0C447 99 14 02                         sta Sprite_Data+20,y      ;dump A contents
0C44A 99 10 02                         sta Sprite_Data+16,y      ;into third row sprites
0C44D 99 0C 02                         sta Sprite_Data+12,y      ;into second row sprites
0C450 99 08 02                         sta Sprite_Data+8,y
0C453 99 04 02                         sta Sprite_Data+4,y       ;and into first row sprites
0C456 99 00 02                         sta Sprite_Data,y               ;dump tile number into all six sprites
0C459 C8                               iny                         ;increment offset for attributes
0C45A A9 02                            lda #$02                    ;load palette controls
0C45C 99 14 02                         sta Sprite_Data+20,y      ;dump A contents
0C45F 99 10 02                         sta Sprite_Data+16,y      ;into third row sprites
0C462 99 0C 02                         sta Sprite_Data+12,y      ;into second row sprites
0C465 99 08 02                         sta Sprite_Data+8,y
0C468 99 04 02                         sta Sprite_Data+4,y       ;and into first row sprites
0C46B 99 00 02                         sta Sprite_Data,y                ;dump attributes into all six sprites
0C46E 88                               dey                         ;decrement for original offset
0C46F 88                               dey
0C470 AD AE 03                         lda Enemy_Rel_XPos          ;get relative horizontal coordinate
0C473 99 03 02                         sta Sprite_X_Position,y
0C476 99 0F 02                         sta Sprite_X_Position+12,y  ;dump as X coordinate into first and fourth sprites
0C479 18                               clc
0C47A 69 08                            adc #$08                    ;add eight pixels
0C47C 99 07 02                         sta Sprite_X_Position+4,y   ;dump into second and fifth sprites
0C47F 99 13 02                         sta Sprite_X_Position+16,y
0C482 18                               clc
0C483 69 08                            adc #$08                    ;add eight more pixels
0C485 99 0B 02                         sta Sprite_X_Position+8,y   ;dump into third and sixth sprites
0C488 99 17 02                         sta Sprite_X_Position+20,y
0C48B B5 C1                            lda Enemy_Y_Position,x      ;get vertical coordinate
0C48D AA                               tax
0C48E 48                               pha                         ;save to stack
0C48F E0 20                            cpx #$20                    ;if vertical coordinate below status bar,
0C491 B0 02                            bcs TopSP                   ;do not mess with it
0C493 A9 F8                            lda #$f8                    ;otherwise move first three sprites offscreen
0C495 99 08 02                  TopSP: sta Sprite_Data+8,y
0C498 99 04 02                         sta Sprite_Data+4,y       ;and into first row sprites
0C49B 99 00 02                         sta Sprite_Data,y              ;dump vertical coordinate into Y coordinates
0C49E 68                               pla                         ;pull from stack
0C49F 18                               clc
0C4A0 69 80                            adc #$80                    ;add 128 pixels
0C4A2 AA                               tax
0C4A3 E0 20                            cpx #$20                    ;if below status bar (taking wrap into account)
0C4A5 B0 02                            bcs BotSP                   ;then do not change altered coordinate
0C4A7 A9 F8                            lda #$f8                    ;otherwise move last three sprites offscreen
0C4A9 99 0C 02                  BotSP: sta Sprite_Y_Position+12,y  ;dump vertical coordinate + 128 pixels
0C4AC 99 10 02                         sta Sprite_Y_Position+16,y  ;into Y coordinates
0C4AF 99 14 02                         sta Sprite_Y_Position+20,y
0C4B2 AD D1 03                         lda Enemy_OffscreenBits     ;get offscreen bits
0C4B5 48                               pha                         ;save to stack
0C4B6 29 08                            and #%00001000              ;check d3
0C4B8 F0 08                            beq SOfs
0C4BA A9 F8                            lda #$f8                    ;if d3 was set, move first and
0C4BC 99 00 02                         sta Sprite_Y_Position,y     ;fourth sprites offscreen
0C4BF 99 0C 02                         sta Sprite_Y_Position+12,y
0C4C2 68                        SOfs:  pla                         ;move out and back into stack
0C4C3 48                               pha
0C4C4 29 04                            and #%00000100              ;check d2
0C4C6 F0 08                            beq SOfs2
0C4C8 A9 F8                            lda #$f8                    ;if d2 was set, move second and
0C4CA 99 04 02                         sta Sprite_Y_Position+4,y   ;fifth sprites offscreen
0C4CD 99 10 02                         sta Sprite_Y_Position+16,y
0C4D0 68                        SOfs2: pla                         ;get from stack
0C4D1 29 02                            and #%00000010              ;check d1
0C4D3 F0 08                            beq ExSPl
0C4D5 A9 F8                            lda #$f8                    ;if d1 was set, move third and
0C4D7 99 08 02                         sta Sprite_Y_Position+8,y   ;sixth sprites offscreen
0C4DA 99 14 02                         sta Sprite_Y_Position+20,y
0C4DD A6 08                     ExSPl: ldx ObjectOffset            ;get enemy object offset and leave
0C4DF 20 F7 D2                        jsr MoveSmallPlatform
0C4E2 4C 1E D3                        jmp OffscreenBoundsCheck
0C4E5                           
0C4E5                           ;--------------------------------
0C4E5                           
0C4E5                           RunLargePlatform:
0C4E5 20 63 B0                          jsr GetEnemyOffscreenBits
0C4E8 20 00 AF                          jsr RelativeEnemyPosition
0C4EB 20 FC B6                          jsr LargePlatformBoundBox
0C4EE 20 EF DD                          jsr LargePlatformCollision
0C4F1 AD 47 07                          lda TimerControl             ;if master timer control set,
0C4F4 D0 03                             bne SkipPT                   ;skip subroutine tree
0C4F6 20 02 C5                          jsr LargePlatformSubroutines
0C4F9 20 00 AF                  SkipPT: jsr RelativeEnemyPosition
0C4FC 20 2B F4                          jsr DrawLargePlatform
0C4FF 4C 1E D3                          jmp OffscreenBoundsCheck
0C502                           
0C502                           ;--------------------------------
0C502                           
0C502                           LargePlatformSubroutines:
0C502 A6 08                           ldx ObjectOffset
0C504 B5 15                     	  lda Enemy_ID,x  ;subtract $24 to get proper offset for jump table
0C506 38                              sec
0C507 E9 24                           sbc #$24
0C509 20 A0 F7                        jsr JumpEngine
0C50C                           
0C50C B6 D0                           .dw BalancePlatform   ;table used by objects $24-$2a
0C50E 5E D2                           .dw YMovingPlatform
0C510 F1 D2                           .dw MoveLargeLiftPlat
0C512 F1 D2                           .dw MoveLargeLiftPlat
0C514 92 D2                           .dw XMovingPlatform
0C516 D4 D2                           .dw DropPlatform
0C518 DF D2                           .dw RightPlatform
0C51A                           
0C51A                           ;-------------------------------------------------------------------------------------
0C51A                           
0C51A                           EraseEnemyObject:
0C51A A9 00                           lda #$00                 ;clear all enemy object variables
0C51C 95 0F                           sta Enemy_Flag,x
0C51E 95 15                           sta Enemy_ID,x
0C520 95 1C                           sta Enemy_State,x
0C522                                 ;sta FloateyNum_Control,x
0C522 9D 96 07                        sta EnemyIntervalTimer,x
0C525 9D 25 01                        sta ShellChainCounter,x
0C528 9D C5 03                        sta Enemy_SprAttrib,x
0C52B 9D 8A 07                        sta EnemyFrameTimer,x
0C52E EC 08 60                  	  cpx GrabID
0C531 D0 06                     	  bne +
0C533 8D 1D 60                        sta GrabDown
0C536 8D 78 60                  	  sta GrabUp
0C539 60                        +:    rts
0C53A                           
0C53A                           ;-------------------------------------------------------------------------------------
0C53A                           
0C53A                           MovePodoboo:
0C53A B5 1C                           lda Enemy_State,x
0C53C C9 22                     	  cmp #$22
0C53E F0 1B                     	  beq PdbM
0C540 BD 96 07                  	  lda EnemyIntervalTimer,x   ;check enemy timer
0C543 D0 16                           bne PdbM                   ;branch to move enemy if not expired
0C545 20 FC F7                        jsr InitPodoboo2            ;otherwise set up podoboo again
0C548 BD A8 07                        lda PseudoRandomBitReg+1,x ;get part of LSFR
0C54B 09 80                           ora #%10000000             ;set d7
0C54D 9D 34 04                        sta Enemy_Y_MoveForce,x    ;store as movement force
0C550 29 0F                           and #%00001111             ;mask out high nybble
0C552 09 06                           ora #$06                   ;set for at least six intervals
0C554 9D 96 07                        sta EnemyIntervalTimer,x   ;store as new enemy timer
0C557 A9 F9                           lda #$f9
0C559 95 92                           sta Enemy_Y_Speed,x        ;set vertical speed to move podoboo upwards
0C55B 4C E2 AB                  PdbM: jmp MoveJ_EnemyVertically  ;branch to impose gravity on podoboo
0C55E                           
0C55E                           ;--------------------------------
0C55E                           ;$00 - used in HammerBroJumpCode as bitmask
0C55E                           	  
0C55E                           ProcHammerBro:
0C55E B5 1C                            lda Enemy_State,x          ;check hammer bro's enemy state for d5 set
0C560 29 20                            and #%00100000
0C562 F0 03                            beq ChkJH                  ;if not set, go ahead with code
0C564 4C 9C C6                         jmp MoveDefeatedEnemy      ;otherwise jump to something else
0C567 B5 3C                     ChkJH: lda HammerBroJumpTimer,x   ;check jump timer
0C569 F0 2D                            beq HammerBroJumpCode      ;if expired, branch to jump
0C56B D6 3C                            dec HammerBroJumpTimer,x   ;otherwise decrement jump timer
0C56D AD D1 03                         lda Enemy_OffscreenBits
0C570 29 0C                            and #%00001100             ;check offscreen bits
0C572 D0 6A                            bne MoveHammerBroXDir      ;if hammer bro a little offscreen, skip to movement code
0C574 BD A2 03                         lda HammerThrowingTimer,x  ;check hammer throwing timer
0C577 D0 17                            bne DecHT                  ;if not expired, skip ahead, do not throw hammer
0C579 AC 52 60                  	   ldy HardModeFlag           ;otherwise get secondary hard mode flag
0C57C B9 09 B8                         lda HammerThrowTmrData,y   ;get timer data using flag as offset
0C57F 9D A2 03                         sta HammerThrowingTimer,x  ;set as new timer
0C582 20 64 A3                         jsr SpawnHammerObj         ;do a sub here to spawn hammer object
0C585 90 09                            bcc DecHT                  ;if carry clear, hammer not spawned, skip to decrement timer
0C587 B5 1C                            lda Enemy_State,x
0C589 09 08                            ora #%00001000             ;set d3 in enemy state for hammer throw
0C58B 95 1C                            sta Enemy_State,x
0C58D 4C DE C5                         jmp MoveHammerBroXDir      ;jump to move hammer bro
0C590 DE A2 03                  DecHT: dec HammerThrowingTimer,x  ;decrement timer
0C593 4C DE C5                         jmp MoveHammerBroXDir      ;jump to move hammer bro
0C596                           
0C596                           HammerBroJumpLData:
0C596 20 37                           .db $20, $37
0C598                           
0C598                           HammerBroJumpCode:
0C598 B5 1C                            lda Enemy_State,x           ;get hammer bro's enemy state
0C59A 29 07                            and #%00000111              ;mask out all but 3 LSB
0C59C C9 01                            cmp #$01                    ;check for d0 set (for jumping)
0C59E F0 3E                            beq MoveHammerBroXDir       ;if set, branch ahead to moving code
0C5A0 A9 00                            lda #$00                    ;load default value here
0C5A2 85 00                            sta $00                     ;save into temp variable for now
0C5A4 A0 FA                            ldy #$fa                    ;set default vertical speed
0C5A6 B5 C1                            lda Enemy_Y_Position,x      ;check hammer bro's vertical coordinate
0C5A8 30 13                            bmi SetHJ                   ;if on the bottom half of the screen, use current speed
0C5AA A0 FD                            ldy #$fd                    ;otherwise set alternate vertical speed
0C5AC C9 70                            cmp #$70                    ;check to see if hammer bro is above the middle of screen
0C5AE E6 00                            inc $00                     ;increment preset value to $01
0C5B0 90 0B                            bcc SetHJ                   ;if above the middle of the screen, use current speed and $01
0C5B2 C6 00                            dec $00                     ;otherwise return value to $00
0C5B4 BD A8 07                         lda PseudoRandomBitReg+1,x  ;get part of LSFR, mask out all but LSB
0C5B7 29 01                            and #$01
0C5B9 D0 02                            bne SetHJ                   ;if d0 of LSFR set, branch and use current speed and $00
0C5BB A0 FA                            ldy #$fa                    ;otherwise reset to default vertical speed
0C5BD 94 92                     SetHJ: sty Enemy_Y_Speed,x         ;set vertical speed for jumping
0C5BF B5 1C                            lda Enemy_State,x           ;set d0 in enemy state for jumping
0C5C1 09 01                            ora #$01
0C5C3 95 1C                            sta Enemy_State,x
0C5C5 A5 00                            lda $00                     ;load preset value here to use as bitmask
0C5C7 3D A9 07                         and PseudoRandomBitReg+2,x  ;and do bit-wise comparison with part of LSFR
0C5CA A8                               tay                         ;then use as offset
0C5CB AD CC 06                         lda SecondaryHardMode       ;check secondary hard mode flag
0C5CE D0 01                            bne HJump
0C5D0 A8                               tay                         ;if secondary hard mode flag clear, set offset to 0
0C5D1 B9 96 C5                  HJump: lda HammerBroJumpLData,y    ;get jump length timer data using offset from before
0C5D4 9D 8A 07                         sta EnemyFrameTimer,x       ;save in enemy timer
0C5D7 BD A8 07                         lda PseudoRandomBitReg+1,x
0C5DA 09 C0                            ora #%11000000              ;get contents of part of LSFR, set d7 and d6, then
0C5DC 95 3C                            sta HammerBroJumpTimer,x    ;store in jump timer
0C5DE                           
0C5DE                           MoveHammerBroXDir:
0C5DE A0 FC                              ldy #$fc                  ;move hammer bro a little to the left
0C5E0 A5 09                              lda FrameCounter
0C5E2 29 40                              and #%01000000            ;change hammer bro's direction every 64 frames
0C5E4 D0 02                              bne Shimmy
0C5E6 A0 04                              ldy #$04                  ;if d6 set in counter, move him a little to the right
0C5E8 94 4A                     Shimmy:  sty Enemy_X_Speed,x       ;store horizontal speed
0C5EA A0 01                              ldy #$01                  ;set to face right by default
0C5EC 20 69 C6                           jsr PlayerEnemyDiff       ;get horizontal difference between player and hammer bro
0C5EF 30 0A                              bmi SetShim               ;if enemy to the left of player, skip this part
0C5F1 C8                                 iny                       ;set to face left
0C5F2 BD 96 07                           lda EnemyIntervalTimer,x  ;check walking timer
0C5F5 D0 04                              bne SetShim               ;if not yet expired, skip to set moving direction
0C5F7 A9 F8                              lda #$f8
0C5F9 95 4A                              sta Enemy_X_Speed,x       ;otherwise, make the hammer bro walk left towards player
0C5FB 94 43                     SetShim: sty Enemy_MovingDir,x     ;set moving direction
0C5FD                           
0C5FD                           MoveNormalEnemy:
0C5FD A0 00                            ldy #$00                   ;init Y to leave horizontal movement as-is 
0C5FF B5 1C                     	   lda Enemy_State,x
0C601 29 40                            and #%01000000             ;check enemy state for d6 set, if set skip
0C603 D0 1B                            bne FallE                  ;to move enemy vertically, then horizontally if necessary
0C605 B5 1C                            lda Enemy_State,x
0C607 30 49                     	   bmi SteadM                 ;if set, branch to move enemy horizontally
0C609 B5 1C                            lda Enemy_State,x
0C60B 29 20                            and #%00100000             ;check enemy state for d5 set
0C60D F0 03                            beq +
0C60F 4C 9C C6                  	   jmp MoveDefeatedEnemy      ;if set, branch to move defeated enemy object
0C612 B5 1C                     +:     lda Enemy_State,x
0C614 29 07                            and #%00000111             ;check d2-d0 of enemy state for any set bits
0C616 F0 3A                            beq SteadM                 ;if enemy in normal state, branch to move enemy horizontally
0C618 C9 05                            cmp #$05
0C61A F0 04                            beq FallE                  ;if enemy in state used by spiny's egg, go ahead here
0C61C C9 03                            cmp #$03
0C61E B0 55                            bcs ReviveStunned          ;if enemy in states $03 or $04, skip ahead to yet another part
0C620 A0 3D                     FallE: ldy #$3d           ;set quick movement amount downwards
0C622 B5 1C                            lda Enemy_State,x  ;then check enemy state
0C624 C9 05                            cmp #$05           ;if not set to unique state for spiny's egg, go ahead
0C626 D0 02                            bne +      ;and use, otherwise set different movement amount, continue on
0C628 A0 20                            ldy #$20       ;set movement amount
0C62A A9 03                     +:     lda #$03                ;set maximum speed in A
0C62C 84 00                     	   sty $00                 ;set movement amount here
0C62E E8                               inx                     ;increment X for enemy offset
0C62F 85 02                            sta $02            ;set maximum speed here
0C631 A9 00                            lda #$00           ;set value to move downwards
0C633 20 9A AC                         jsr ImposeGravity  ;jump to the code that actually moves it
0C636 A6 08                            ldx ObjectOffset        ;get enemy object buffer offset and leave
0C638 A0 00                     	   ldy #$00
0C63A B5 1C                            lda Enemy_State,x          ;check for enemy state $02
0C63C C9 02                     	   cmp #$02
0C63E F0 0C                            beq MEHor                  ;if found, branch to move enemy horizontally
0C640 29 40                            and #%01000000             ;check for d6 set
0C642 F0 0E                            beq SteadM                 ;if not set, branch to something else
0C644 B5 15                            lda Enemy_ID,x
0C646 C9 2E                            cmp #PowerUpObject         ;check for power-up object
0C648 F0 08                            beq SteadM
0C64A D0 04                            bne SlowM                  ;if any other object where d6 set, jump to set Y
0C64C E8                        MEHor: inx                         ;increment offset for enemy offset
0C64D 4C 5C AC                         jmp MoveObjectHorizontally  ;position object horizontally according to
0C650                                  ;ldx ObjectOffset            ;counters, return with saved value in A,
0C650                           	   ;rts
0C650                           
0C650 A0 01                     SlowM:  ldy #$01
0C652 B5 4A                     SteadM: lda Enemy_X_Speed,x       ;get current horizontal speed
0C654 48                                pha                       ;save to stack
0C655 10 02                             bpl AddHS                 ;if not moving or moving right, skip, leave Y alone    
0C657 C8                        		iny
0C658 C8                        		iny
0C659 18                        AddHS:  clc
0C65A 79 0B B8                          adc XSpeedAdderData,y		  ;add value here to slow enemy down if necessary
0C65D 95 4A                             sta Enemy_X_Speed,x       ;save as horizontal speed temporarily
0C65F E8                                inx                         ;increment offset for enemy offset
0C660 20 5C AC                          jsr MoveObjectHorizontally  ;position object horizontally according to
0C663 A6 08                             ldx ObjectOffset            ;counters, return with saved value in A, ;then do a sub to move horizontally
0C665 68                                pla
0C666 95 4A                             sta Enemy_X_Speed,x       ;get old horizontal speed from stack and return to
0C668 60                                rts                       ;original memory location, then leave
0C669                           
0C669                           PlayerEnemyDiff:
0C669 B5 79                           lda Enemy_X_Position,x  ;get distance between enemy object's
0C66B 38                              sec                     ;horizontal coordinate and the player's
0C66C E5 78                           sbc Player_X_Position   ;horizontal coordinate
0C66E 85 00                           sta $00                 ;and store here
0C670 B5 60                           lda Enemy_PageLoc,x
0C672 E5 5F                           sbc Player_PageLoc      ;subtract borrow, then leave
0C674 60                              rts
0C675                           ReviveStunned:
0C675 B5 15                              lda Enemy_ID,x
0C677 C9 04                     		 cmp #KoopaShell
0C679 F0 40                     		 beq ChkKillGoomba
0C67B C9 19                     		 cmp #RedKoopaShell
0C67D F0 3C                     		 beq ChkKillGoomba
0C67F BD 96 07                  		 lda EnemyIntervalTimer,x  ;if enemy timer not expired yet,
0C682 D0 37                              bne ChkKillGoomba         ;skip ahead to something else
0C684 95 1C                              sta Enemy_State,x         ;otherwise initialize enemy state to normal
0C686 A5 09                              lda FrameCounter
0C688 29 01                              and #$01                  ;get d0 of frame counter
0C68A A8                                 tay                       ;use as Y and increment for movement direction
0C68B C8                                 iny
0C68C 94 43                              sty Enemy_MovingDir,x     ;store as pseudorandom movement direction
0C68E 88                                 dey                       ;decrement for use as pointer
0C68F AD 52 60                           lda HardModeFlag          ;check primary hard mode flag
0C692 F0 02                              beq SetRSpd               ;if not set, use pointer as-is
0C694 C8                                 iny
0C695 C8                                 iny                       ;otherwise increment 2 bytes to next data
0C696 B9 0F B8                  SetRSpd: lda RevivedXSpeed,y       ;load and store new horizontal speed
0C699 95 4A                              sta Enemy_X_Speed,x       ;and leave
0C69B 60                                 rts
0C69C                           
0C69C                           MoveDefeatedEnemy:
0C69C A0 3D                           ldy #$3d           ;set quick movement amount downwards
0C69E B5 1C                           lda Enemy_State,x  ;then check enemy state
0C6A0 C9 05                           cmp #$05           ;if not set to unique state for spiny's egg, go ahead
0C6A2 D0 02                           bne +              ;and use, otherwise set different movement amount, continue on
0C6A4 A0 20                           ldy #$20            ;set movement amount
0C6A6 A9 03                     +:    lda #$03                ;set maximum speed in A
0C6A8 84 00                     	  sty $00                 ;set movement amount here
0C6AA E8                              inx                     ;increment X for enemy offset
0C6AB 85 02                           sta $02            ;set maximum speed here
0C6AD A9 00                           lda #$00           ;set value to move downwards
0C6AF 20 9A AC                        jsr ImposeGravity  ;jump to the code that actually moves it
0C6B2 A6 08                           ldx ObjectOffset        ;get enemy object buffer offset and leave
0C6B4 E8                              inx                         ;increment offset for enemy offset
0C6B5 20 5C AC                        jsr MoveObjectHorizontally  ;position object horizontally according to
0C6B8 A6 08                           ldx ObjectOffset            ;counters, return with saved value in A,rai
0C6BA 60                        	  rts
0C6BB                           
0C6BB                           ChkKillGoomba:
0C6BB C9 0E                             cmp #$0e              ;check to see if enemy timer has reached
0C6BD D0 29                             bne NKGmba            ;a certain point, and branch to leave if not
0C6BF B5 15                             lda Enemy_ID,x
0C6C1 C9 06                             cmp #Goomba           ;check for goomba object
0C6C3 F0 02                     		beq +
0C6C5 C9 09                     		cmp #FastGoomba
0C6C7 D0 1F                     +:      bne NKGmba            ;branch if not found
0C6C9 A9 00                             lda #$00                 ;clear all enemy object variables
0C6CB 95 0F                             sta Enemy_Flag,x
0C6CD 95 15                             sta Enemy_ID,x
0C6CF 95 1C                     		sta Enemy_State,x
0C6D1 9D 10 01                  		sta FloateyNum_Control,x
0C6D4 9D 96 07                  		sta EnemyIntervalTimer,x
0C6D7 9D 25 01                  		sta ShellChainCounter,x
0C6DA 9D C5 03                  		sta Enemy_SprAttrib,x
0C6DD 9D 8A 07                  		sta EnemyFrameTimer,x
0C6E0 BC C4 63                  		ldy SavedOffset,x
0C6E3 A9 02                     		lda #$02
0C6E5 99 AC 62                  		sta Saved_isDefeated,y
0C6E8 60                        NKGmba: rts                   ;leave!
0C6E9                           
0C6E9                           ;--------------------------------
0C6E9                           
0C6E9                           ;--------------------------------
0C6E9                           
0C6E9                           ProcMoveRedPTroopa:
0C6E9 B5 92                               lda Enemy_Y_Speed,x
0C6EB 1D 34 04                            ora Enemy_Y_MoveForce,x     ;check for any vertical force or speed
0C6EE D0 13                               bne MoveRedPTUpOrDown       ;branch if any found
0C6F0 9D 17 04                            sta Enemy_YMF_Dummy,x       ;initialize something here
0C6F3 B5 C1                               lda Enemy_Y_Position,x      ;check current vs. original vertical coordinate
0C6F5 DD 01 04                            cmp RedPTroopaOrigXPos,x
0C6F8 B0 09                               bcs MoveRedPTUpOrDown       ;if current => original, skip ahead to more code
0C6FA A5 09                               lda FrameCounter            ;get frame counter
0C6FC 29 07                               and #%00000111              ;mask out all but 3 LSB
0C6FE D0 02                               bne NoIncPT                 ;if any bits set, branch to leave
0C700 F6 C1                               inc Enemy_Y_Position,x      ;otherwise increment red paratroopa's vertical position
0C702 60                        NoIncPT:  rts                         ;leave
0C703                           
0C703                           MoveRedPTUpOrDown:
0C703 B5 C1                               lda Enemy_Y_Position,x      ;check current vs. central vertical coordinate
0C705 D5 4A                               cmp RedPTroopaCenterYPos,x
0C707 90 03                               bcc MovPTDwn                ;if current < central, jump to move downwards
0C709 4C F7 AB                            jmp MoveRedPTroopaUp        ;otherwise jump to move upwards
0C70C 4C F3 AB                  MovPTDwn: jmp MoveRedPTroopaDown      ;move downwards
0C70F                           
0C70F                           ;--------------------------------
0C70F                           ;$00 - used to store adder for movement, also used as adder for platform
0C70F                           ;$01 - used to store maximum value for secondary counter
0C70F                           
0C70F                           MoveFlyGreenPTroopa:
0C70F 20 2F C7                          jsr XMoveCntr_GreenPTroopa ;do sub to increment primary and secondary counters
0C712 20 50 C7                          jsr MoveWithXMCntrs        ;do sub to move green paratroopa accordingly, and horizontally
0C715 A0 01                             ldy #$01                   ;set Y to move green paratroopa down
0C717 A5 09                             lda FrameCounter
0C719 29 03                             and #%00000011             ;check frame counter 2 LSB for any bits set
0C71B D0 11                             bne NoMGPT                 ;branch to leave if set to move up/down every fourth frame
0C71D A5 09                             lda FrameCounter
0C71F 29 40                             and #%01000000             ;check frame counter for d6 set
0C721 D0 02                             bne YSway                  ;branch to move green paratroopa down if set
0C723 A0 FF                             ldy #$ff                   ;otherwise set Y to move green paratroopa up
0C725 84 00                     YSway:  sty $00                    ;store adder here
0C727 B5 C1                             lda Enemy_Y_Position,x
0C729 18                                clc                        ;add or subtract from vertical position
0C72A 65 00                             adc $00                    ;to give green paratroopa a wavy flight
0C72C 95 C1                             sta Enemy_Y_Position,x
0C72E 60                        NoMGPT: rts                        ;leave!
0C72F                           
0C72F                           XMoveCntr_GreenPTroopa:
0C72F A9 13                              lda #$13                    ;load preset maximum value for secondary counter
0C731                           
0C731                           XMoveCntr_Platform:
0C731 85 01                              sta $01                     ;store value here
0C733 A5 09                              lda FrameCounter
0C735 29 03                              and #%00000011              ;branch to leave if not on
0C737 D0 0D                              bne NoIncXM                 ;every fourth frame
0C739 B4 4A                              ldy XMoveSecondaryCounter,x ;get secondary counter
0C73B B5 92                              lda XMovePrimaryCounter,x   ;get primary counter
0C73D 4A                                 lsr
0C73E B0 0A                              bcs DecSeXM                 ;if d0 of primary counter set, branch elsewhere
0C740 C4 01                              cpy $01                     ;compare secondary counter to preset maximum value
0C742 F0 03                              beq IncPXM                  ;if equal, branch ahead of this part
0C744 F6 4A                              inc XMoveSecondaryCounter,x ;increment secondary counter and leave
0C746 60                        NoIncXM: rts
0C747 F6 92                     IncPXM:  inc XMovePrimaryCounter,x   ;increment primary counter and leave
0C749 60                                 rts
0C74A 98                        DecSeXM: tya                         ;put secondary counter in A
0C74B F0 FA                              beq IncPXM                  ;if secondary counter at zero, branch back
0C74D D6 4A                              dec XMoveSecondaryCounter,x ;otherwise decrement secondary counter and leave
0C74F 60                                 rts
0C750                           
0C750                           MoveWithXMCntrs:
0C750 B5 4A                              lda XMoveSecondaryCounter,x  ;save secondary counter to stack
0C752 48                                 pha
0C753 A0 01                              ldy #$01                     ;set value here by default
0C755 B5 92                              lda XMovePrimaryCounter,x
0C757 29 02                              and #%00000010               ;if d1 of primary counter is
0C759 D0 0B                              bne XMRight                  ;set, branch ahead of this part here
0C75B B5 4A                              lda XMoveSecondaryCounter,x
0C75D 49 FF                              eor #$ff                     ;otherwise change secondary
0C75F 18                                 clc                          ;counter to two's compliment
0C760 69 01                              adc #$01
0C762 95 4A                              sta XMoveSecondaryCounter,x
0C764 A0 02                              ldy #$02                     ;load alternate value here
0C766 94 43                     XMRight: sty Enemy_MovingDir,x        ;store as moving direction
0C768 E8                                 inx                         ;increment offset for enemy offset
0C769 20 5C AC                           jsr MoveObjectHorizontally  ;position object horizontally according to
0C76C A6 08                              ldx ObjectOffset            ;counters, return with saved value in A,
0C76E 85 00                              sta $00                      ;save value obtained from sub here
0C770 68                                 pla                          ;get secondary counter from stack
0C771 95 4A                              sta XMoveSecondaryCounter,x  ;and return to original place
0C773 60                                 rts
0C774                           
0C774                           ;--------------------------------
0C774                           
0C774                           BlooberBitmasks:
0C774 3F 03                           .db %00111111, %00000011
0C776                           
0C776                           MoveBloober:
0C776 B5 1C                             lda Enemy_State,x
0C778 29 20                             and #%00100000             ;check enemy state for d5 set
0C77A D0 4D                             bne MoveDefeatedBloober    ;branch if set to move defeated bloober
0C77C AC CC 06                          ldy SecondaryHardMode      ;use secondary hard mode flag as offset
0C77F BD A8 07                          lda PseudoRandomBitReg+1,x ;get LSFR
0C782 39 74 C7                          and BlooberBitmasks,y      ;mask out bits in LSFR using bitmask loaded with offset
0C785 D0 12                             bne BlooberSwim            ;if any bits set, skip ahead to make swim
0C787 8A                                txa
0C788 4A                                lsr                        ;check to see if on second or fourth slot (1 or 3)
0C789 90 04                             bcc FBLeft                 ;if not, branch to figure out moving direction
0C78B A4 42                             ldy Player_MovingDir       ;otherwise, load player's moving direction and
0C78D B0 08                             bcs SBMDir                 ;do an unconditional branch to set
0C78F A0 02                     FBLeft: ldy #$02                   ;set left moving direction by default
0C791 20 69 C6                          jsr PlayerEnemyDiff        ;get horizontal difference between player and bloober
0C794 10 01                             bpl SBMDir                 ;if enemy to the right of player, keep left
0C796 88                                dey                        ;otherwise decrement to set right moving direction
0C797 94 43                     SBMDir: sty Enemy_MovingDir,x      ;set moving direction of bloober, then continue on here
0C799                           
0C799                           BlooberSwim:
0C799 20 CC C7                         jsr ProcSwimmingB        ;execute sub to make bloober swim characteristically
0C79C B5 C1                            lda Enemy_Y_Position,x   ;get vertical coordinate
0C79E 38                               sec
0C79F FD 34 04                         sbc Enemy_Y_MoveForce,x  ;subtract movement force
0C7A2 C9 20                            cmp #$20                 ;check to see if position is above edge of status bar
0C7A4 90 02                            bcc SwimX                ;if so, don't do it
0C7A6 95 C1                            sta Enemy_Y_Position,x   ;otherwise, set new vertical position, make bloober swim
0C7A8 B4 43                     SwimX: ldy Enemy_MovingDir,x    ;check moving direction
0C7AA 88                               dey
0C7AB D0 0E                            bne LeftSwim             ;if moving to the left, branch to second part
0C7AD B5 79                            lda Enemy_X_Position,x
0C7AF 18                               clc                      ;add movement speed to horizontal coordinate
0C7B0 75 4A                            adc BlooperMoveSpeed,x
0C7B2 95 79                            sta Enemy_X_Position,x   ;store result as new horizontal coordinate
0C7B4 B5 60                            lda Enemy_PageLoc,x
0C7B6 69 00                            adc #$00                 ;add carry to page location
0C7B8 95 60                            sta Enemy_PageLoc,x      ;store as new page location and leave
0C7BA 60                               rts
0C7BB                           
0C7BB                           LeftSwim:
0C7BB B5 79                           lda Enemy_X_Position,x
0C7BD 38                              sec                      ;subtract movement speed from horizontal coordinate
0C7BE F5 4A                           sbc BlooperMoveSpeed,x
0C7C0 95 79                           sta Enemy_X_Position,x   ;store result as new horizontal coordinate
0C7C2 B5 60                           lda Enemy_PageLoc,x
0C7C4 E9 00                           sbc #$00                 ;subtract borrow from page location
0C7C6 95 60                           sta Enemy_PageLoc,x      ;store as new page location and leave
0C7C8 60                              rts
0C7C9                           
0C7C9                           MoveDefeatedBloober:
0C7C9 4C DC AB                        jmp MoveEnemySlowVert    ;jump to move defeated bloober downwards
0C7CC                           
0C7CC                           ProcSwimmingB:
0C7CC B5 92                             lda BlooperMoveCounter,x  ;get enemy's movement counter
0C7CE 29 02                             and #%00000010            ;check for d1 set
0C7D0 D0 37                             bne ChkForFloatdown       ;branch if set
0C7D2 A5 09                             lda FrameCounter
0C7D4 29 07                             and #%00000111            ;get 3 LSB of frame counter
0C7D6 48                                pha                       ;and save it to the stack
0C7D7 B5 92                             lda BlooperMoveCounter,x  ;get enemy's movement counter
0C7D9 4A                                lsr                       ;check for d0 set
0C7DA B0 15                             bcs SlowSwim              ;branch if set
0C7DC 68                                pla                       ;pull 3 LSB of frame counter from the stack
0C7DD D0 11                             bne BSwimE                ;branch to leave, execute code only every eighth frame
0C7DF BD 34 04                          lda Enemy_Y_MoveForce,x
0C7E2 18                                clc                       ;add to movement force to speed up swim
0C7E3 69 01                             adc #$01
0C7E5 9D 34 04                          sta Enemy_Y_MoveForce,x   ;set movement force
0C7E8 95 4A                             sta BlooperMoveSpeed,x    ;set as movement speed
0C7EA C9 02                             cmp #$02
0C7EC D0 02                             bne BSwimE                ;if certain horizontal speed, branch to leave
0C7EE F6 92                             inc BlooperMoveCounter,x  ;otherwise increment movement counter
0C7F0 60                        BSwimE: rts
0C7F1                           
0C7F1                           SlowSwim:
0C7F1 68                               pla                      ;pull 3 LSB of frame counter from the stack
0C7F2 D0 14                            bne NoSSw                ;branch to leave, execute code only every eighth frame
0C7F4 BD 34 04                         lda Enemy_Y_MoveForce,x
0C7F7 38                               sec                      ;subtract from movement force to slow swim
0C7F8 E9 01                            sbc #$01
0C7FA 9D 34 04                         sta Enemy_Y_MoveForce,x  ;set movement force
0C7FD 95 4A                            sta BlooperMoveSpeed,x   ;set as movement speed
0C7FF D0 07                            bne NoSSw                ;if any speed, branch to leave
0C801 F6 92                            inc BlooperMoveCounter,x ;otherwise increment movement counter
0C803 A9 02                            lda #$02
0C805 9D 96 07                         sta EnemyIntervalTimer,x ;set enemy's timer
0C808 60                        NoSSw: rts                      ;leave
0C809                           
0C809                           ChkForFloatdown:
0C809 BD 96 07                        lda EnemyIntervalTimer,x ;get enemy timer
0C80C F0 08                           beq ChkNearPlayer        ;branch if expired
0C80E                           
0C80E                           Floatdown:
0C80E A5 09                           lda FrameCounter        ;get frame counter
0C810 4A                              lsr                     ;check for d0 set
0C811 B0 02                           bcs NoFD                ;branch to leave on every other frame
0C813 F6 C1                           inc Enemy_Y_Position,x  ;otherwise increment vertical coordinate
0C815 60                        NoFD: rts                     ;leave
0C816                           
0C816                           ChkNearPlayer:
0C816 B5 C1                           lda Enemy_Y_Position,x    ;get vertical coordinate
0C818 69 10                           adc #BLOOPER_DISTANCE     ;add sixteen pixels (NTSC) or twelve pixels (PAL).
0C81A C5 C0                           cmp Player_Y_Position     ;compare result with player's vertical coordinate
0C81C 90 F0                           bcc Floatdown             ;if modified vertical less than player's, branch
0C81E A9 00                           lda #$00
0C820 95 92                           sta BlooperMoveCounter,x  ;otherwise nullify movement counter
0C822 60                              rts
0C823                           
0C823                           ;--------------------------------
0C823                           ;--------------------------------
0C823                           ;$02 - used to hold preset values
0C823                           ;$03 - used to hold enemy state
0C823                           
0C823                           SwimCCXMoveData:
0C823 40 80                           .db $40, $80
0C825                                 ;.db $04, $04 ;residual data, not used
0C825                           
0C825                           MoveSwimmingCheepCheep:
0C825 B5 1C                             lda Enemy_State,x         ;check cheep-cheep's enemy object state
0C827 29 20                             and #%00100000            ;for d5 set
0C829 F0 03                             beq CCSwim                ;if not set, continue with movement code
0C82B 4C DC AB                          jmp MoveEnemySlowVert     ;otherwise jump to move defeated cheep-cheep downwards
0C82E 85 03                     CCSwim: sta $03                   ;save enemy state in $03
0C830 B5 15                             lda Enemy_ID,x            ;get enemy identifier
0C832 38                                sec
0C833 E9 0A                             sbc #$0a                  ;subtract ten for cheep-cheep identifiers
0C835 A8                                tay                       ;use as offset
0C836 B9 23 C8                  		lda SwimCCXMoveData,y     ;load value here
0C839 85 02                             sta $02
0C83B B5 43                             lda Enemy_MovingDir,x
0C83D C9 01                     		cmp #$01
0C83F F0 18                     		beq +
0C841 BD 01 04                          lda Enemy_X_MoveForce,x   ;load horizontal force
0C844 38                                sec
0C845 E5 02                             sbc $02                   ;subtract preset value from horizontal force
0C847 9D 01 04                          sta Enemy_X_MoveForce,x   ;store as new horizontal force
0C84A B5 79                             lda Enemy_X_Position,x    ;get horizontal coordinate
0C84C E9 00                             sbc #$00                  ;subtract borrow (thus moving it slowly)
0C84E 95 79                             sta Enemy_X_Position,x    ;and save as new horizontal coordinate
0C850 B5 60                             lda Enemy_PageLoc,x
0C852 E9 00                             sbc #$00                  ;subtract borrow again, this time from the
0C854 95 60                             sta Enemy_PageLoc,x       ;page location, then save
0C856 4C 6E C8                  		jmp ++
0C859 BD 01 04                  +:		lda Enemy_X_MoveForce,x   ;load horizontal force
0C85C 18                                clc
0C85D 65 02                             adc $02                   ;subtract preset value from horizontal force
0C85F 9D 01 04                          sta Enemy_X_MoveForce,x   ;store as new horizontal force
0C862 B5 79                             lda Enemy_X_Position,x    ;get horizontal coordinate
0C864 69 00                             adc #$00                  ;subtract borrow (thus moving it slowly)
0C866 95 79                             sta Enemy_X_Position,x    ;and save as new horizontal coordinate
0C868 B5 60                             lda Enemy_PageLoc,x
0C86A 69 00                             adc #$00                  ;subtract borrow again, this time from the
0C86C 95 60                             sta Enemy_PageLoc,x       ;page location, then save
0C86E A9 20                     ++:     lda #$20
0C870 85 02                             sta $02                   ;save new value here
0C872 E0 02                             cpx #$02                  ;check enemy object offset
0C874 90 49                             bcc ExSwCC                ;if in first or second slot, branch to leave
0C876 B5 4A                             lda CheepCheepMoveMFlag,x ;check movement flag
0C878 C9 10                             cmp #$10                  ;if movement speed set to $00,
0C87A 90 16                             bcc CCSwimUpwards         ;branch to move upwards
0C87C BD 17 04                          lda Enemy_YMF_Dummy,x
0C87F 18                                clc
0C880 65 02                             adc $02                   ;add preset value to dummy variable to get carry
0C882 9D 17 04                          sta Enemy_YMF_Dummy,x     ;and save dummy
0C885 B5 C1                             lda Enemy_Y_Position,x    ;get vertical coordinate
0C887 65 03                             adc $03                   ;add carry to it plus enemy state to slowly move it downwards
0C889 95 C1                             sta Enemy_Y_Position,x    ;save as new vertical coordinate
0C88B B5 A8                             lda Enemy_Y_HighPos,x
0C88D 69 00                             adc #$00                  ;add carry to page location and
0C88F 4C A5 C8                          jmp ChkSwimYPos           ;jump to end of movement code
0C892                           
0C892                           CCSwimUpwards:
0C892 BD 17 04                          lda Enemy_YMF_Dummy,x
0C895 38                                sec
0C896 E5 02                             sbc $02                   ;subtract preset value to dummy variable to get borrow
0C898 9D 17 04                          sta Enemy_YMF_Dummy,x     ;and save dummy
0C89B B5 C1                             lda Enemy_Y_Position,x    ;get vertical coordinate
0C89D E5 03                             sbc $03                   ;subtract borrow to it plus enemy state to slowly move it upwards
0C89F 95 C1                             sta Enemy_Y_Position,x    ;save as new vertical coordinate
0C8A1 B5 A8                             lda Enemy_Y_HighPos,x
0C8A3 E9 00                             sbc #$00                  ;subtract borrow from page location
0C8A5                           
0C8A5                           ChkSwimYPos:
0C8A5 95 A8                             sta Enemy_Y_HighPos,x     ;save new page location here
0C8A7 A0 00                             ldy #$00                  ;load movement speed to upwards by default
0C8A9 B5 C1                             lda Enemy_Y_Position,x    ;get vertical coordinate
0C8AB 38                                sec
0C8AC FD 34 04                          sbc CheepCheepOrigYPos,x  ;subtract original coordinate from current
0C8AF 10 07                             bpl YPDiff                ;if result positive, skip to next part
0C8B1 A0 10                             ldy #$10                  ;otherwise load movement speed to downwards
0C8B3 49 FF                             eor #$ff
0C8B5 18                                clc                       ;get two's compliment of result
0C8B6 69 01                             adc #$01                  ;to obtain total difference of original vs. current
0C8B8 C9 0F                     YPDiff: cmp #$0f                  ;if difference between original vs. current vertical
0C8BA 90 03                             bcc ExSwCC                ;coordinates < 15 pixels, leave movement speed alone
0C8BC 98                                tya
0C8BD 95 4A                             sta CheepCheepMoveMFlag,x ;otherwise change movement speed
0C8BF 60                        ExSwCC: rts                       ;leave
0C8C0                           
0C8C0                           ;--------------------------------
0C8C0                           ;$00 - used as counter for firebar parts
0C8C0                           ;$01 - used for oscillated high byte of spin state or to hold horizontal adder
0C8C0                           ;$02 - used for oscillated high byte of spin state or to hold vertical adder
0C8C0                           ;$03 - used for mirror data
0C8C0                           ;$04 - used to store player's sprite 1 X coordinate
0C8C0                           ;$05 - used to evaluate mirror data
0C8C0                           ;$06 - used to store either screen X coordinate or sprite data offset
0C8C0                           ;$07 - used to store screen Y coordinate
0C8C0                           ;$ed - used to hold maximum length of firebar
0C8C0                           ;$ef - used to hold high byte of spinstate
0C8C0                           
0C8C0                           ;horizontal adder is at first byte + high byte of spinstate,
0C8C0                           ;vertical adder is same + 8 bytes, two's compliment
0C8C0                           ;if greater than $08 for proper oscillation
0C8C0 60                        SkipFBar1: rts
0C8C1                           ProcFirebar:
0C8C1 A9 01                               lda #$01                	  ;set A to add 1 byte in order to get enemy offset
0C8C3 A8                                  tay                 	      ;set Y to put offscreen bits in Enemy_OffscreenBits
0C8C4 86 00                               stx $00
0C8C6 18                                  clc          			   	  ;add contents of X to A to get
0C8C7 65 00                               adc $00       			  ;appropriate offset, then give back to X
0C8C9 AA                                  tax
0C8CA 98                                  tya                         ;save offscreen bits offset to stack for now
0C8CB 48                                  pha
0C8CC 20 67 AE                            jsr GetXOffscreenBits       ;do subroutine here
0C8CF A8                                  tay
0C8D0 B9 24 BD                  		  lda MSBtoLSB,y
0C8D3 85 00                               sta $00              		  ;store here
0C8D5 20 BB AE                            jsr GetYOffscreenBits
0C8D8 A8                                  tay
0C8D9 B9 24 BE                  		  lda LSBtoMSB,y
0C8DC 05 00                               ora $00                     ;mask together with previously saved low nybble
0C8DE 85 00                               sta $00                     ;store both here
0C8E0 68                                  pla                         ;get offscreen bits offset from stack
0C8E1 A8                                  tay
0C8E2 A5 00                               lda $00                     ;get value here and store elsewhere
0C8E4 99 D0 03                            sta SprObject_OffscrBits,y
0C8E7 A6 08                               ldx ObjectOffset
0C8E9 AD D1 03                            lda Enemy_OffscreenBits     ;check for d3 set
0C8EC 29 08                               and #%00001000              ;if so, branch to leave
0C8EE D0 D0                               bne SkipFBar1
0C8F0 AD 47 07                            lda TimerControl            ;if master timer control set, branch
0C8F3 D0 26                               bne SusFbar                 ;ahead of this part
0C8F5 BD 88 03                            lda FirebarSpinSpeed,x      ;load spinning speed of firebar
0C8F8 85 07                               sta $07                     ;save spinning speed here
0C8FA B5 32                     		  lda FirebarSpinDirection,x  ;check spinning direction
0C8FC D0 0E                     		  bne +					      ;if moving counter-clockwise, branch to other part
0C8FE B5 4A                     		  lda FirebarSpinState_Low,x
0C900 18                        		  clc                         ;add spinning speed to what would normally be
0C901 65 07                     		  adc $07                     ;the horizontal speed
0C903 95 4A                     		  sta FirebarSpinState_Low,x
0C905 B5 92                     		  lda FirebarSpinState_High,x ;add carry to what would normally be the vertical speed
0C907 69 00                     		  adc #$00
0C909 4C 17 C9                  		  jmp ++
0C90C B5 4A                     +:		  lda FirebarSpinState_Low,x
0C90E 38                        		  sec                         ;subtract spinning speed to what would normally be
0C90F E5 07                     		  sbc $07                     ;the horizontal speed
0C911 95 4A                     		  sta FirebarSpinState_Low,x
0C913 B5 92                     		  lda FirebarSpinState_High,x ;add carry to what would normally be the vertical speed
0C915 E9 00                     		  sbc #$00
0C917 29 1F                     ++:		  and #%00011111              ;mask out all but 5 LSB
0C919 95 92                               sta FirebarSpinState_High,x ;and store as new high byte of spinstate
0C91B B5 92                     SusFbar:  lda FirebarSpinState_High,x ;get high byte of spinstate
0C91D B4 15                               ldy Enemy_ID,x              ;check enemy identifier
0C91F C0 1F                               cpy #$1f
0C921 90 0D                               bcc SetupGFB                ;if < $1f (long firebar), branch
0C923 C9 08                               cmp #$08                    ;check high byte of spinstate
0C925 F0 04                               beq SkpFSte                 ;if eight, branch to change
0C927 C9 18                               cmp #$18
0C929 D0 05                               bne SetupGFB                ;if not at twenty-four branch to not change
0C92B 38                        SkpFSte:  sec
0C92C E9 01                               sbc #$01                    ;add one to spinning thing to avoid horizontal state
0C92E 95 92                               sta FirebarSpinState_High,x
0C930 85 E0                     SetupGFB: sta temp4                   ;save high byte of spinning thing, modified or otherwise
0C932 A9 01                               lda #$01                    ;get coordinates of enemy object 
0C934 A8                                  tay	                      ;relative to the screen
0C935 86 00                     		  stx $00                     ;store value to add to A here
0C937 18                                  clc
0C938 65 00                               adc $00                     ;add A to value stored
0C93A AA                                  tax                         ;use as enemy offset
0C93B B5 C0                               lda SprObject_Y_Position,x  ;load vertical coordinate low
0C93D 99 B8 03                            sta SprObject_Rel_YPos,y    ;store here
0C940 B5 78                               lda SprObject_X_Position,x  ;load horizontal coordinate
0C942 38                                  sec                         ;subtract left edge coordinate
0C943 ED 1C 07                            sbc ScreenLeft_X_Pos
0C946 99 AD 03                            sta SprObject_Rel_XPos,y    ;store result here
0C949 A6 08                               ldx ObjectOffset            ;reload old object offset and leave
0C94B                                     ;jsr GetFirebarPosition     ;do a sub here (residual, too early to be used now)
0C94B BC E5 06                            ldy Enemy_SprDataOffset,x   ;get OAM data offset
0C94E AD B9 03                            lda Enemy_Rel_YPos          ;get relative vertical coordinate
0C951 99 00 02                            sta Sprite_Y_Position,y     ;store as Y in OAM data
0C954 85 07                               sta $07                     ;also save here
0C956 AD AE 03                            lda Enemy_Rel_XPos          ;get relative horizontal coordinate
0C959 99 03 02                            sta Sprite_X_Position,y     ;store as X in OAM data
0C95C 85 06                               sta $06                     ;also save here
0C95E                                     ;lda #$01
0C95E                                     ;sta $00                     ;set $01 value here (not necessary)
0C95E 20 23 CA                            jsr FirebarCollision        ;draw fireball part and do collision detection
0C961 A0 05                               ldy #$05                    ;load value for short firebars by default
0C963 B5 15                               lda Enemy_ID,x
0C965 C9 1F                               cmp #$1f                    ;are we doing a long firebar?
0C967 90 02                               bcc SetMFbar                ;no, branch then
0C969 A0 0B                               ldy #$0b                    ;otherwise load value for long firebars
0C96B 84 DF                     SetMFbar: sty temp3                   ;store maximum value for length of firebars
0C96D A9 00                               lda #$00
0C96F 85 00                               sta $00                     ;initialize counter here
0C971 A5 E0                     DrawFbar: lda temp4                   ;load high byte of spinstate
0C973 48                                  pha                         ;save high byte of spinstate to the stack
0C974 29 0F                               and #%00001111              ;mask out low nybble
0C976 C9 09                               cmp #$09
0C978 90 05                               bcc +                       ;if lower than $09, branch ahead
0C97A 49 0F                               eor #%00001111              ;otherwise get two's compliment to oscillate
0C97C 18                                  clc
0C97D 69 01                               adc #$01
0C97F 85 01                     +:        sta $01                     ;store result, modified or not, here
0C981 A4 00                               ldy $00                     ;load number of firebar ball where we're at
0C983 B9 A4 BA                            lda FirebarTblOffsets,y     ;load offset to firebar position data
0C986 18                                  clc
0C987 65 01                               adc $01                     ;add oscillated high byte of spinstate
0C989 A8                                  tay                         ;to offset here and use as new offset
0C98A B9 3D BA                            lda FirebarPosLookupTbl,y   ;get data here and store as horizontal adder
0C98D 85 01                               sta $01
0C98F 68                                  pla                         ;pull whatever was in A from the stack
0C990 48                                  pha                         ;save it again because we still need it
0C991 18                                  clc
0C992 69 08                               adc #$08                    ;add eight this time, to get vertical adder
0C994 29 0F                               and #%00001111              ;mask out high nybble
0C996 C9 09                               cmp #$09                    ;if lower than $09, branch ahead
0C998 90 05                               bcc ++
0C99A 49 0F                               eor #%00001111              ;otherwise get two's compliment
0C99C 18                                  clc
0C99D 69 01                               adc #$01
0C99F 85 02                     ++:       sta $02                     ;store result here
0C9A1 A4 00                               ldy $00
0C9A3 B9 A4 BA                            lda FirebarTblOffsets,y     ;load offset to firebar position data again
0C9A6 18                                  clc
0C9A7 65 02                               adc $02                     ;this time add value in $02 to offset here and use as offset
0C9A9 A8                                  tay
0C9AA B9 3D BA                            lda FirebarPosLookupTbl,y   ;get data here and store as vertica adder
0C9AD 85 02                               sta $02
0C9AF 68                                  pla                         ;pull out whatever was in A one last time
0C9B0 4A                                  lsr                         ;divide by eight or shift three to the right
0C9B1 4A                                  lsr
0C9B2 4A                                  lsr
0C9B3 A8                                  tay                         ;use as offset
0C9B4 B9 A0 BA                            lda FirebarMirrorData,y     ;load mirroring data here
0C9B7 85 03                               sta $03      
0C9B9 20 D3 C9                            jsr DrawFirebar_Collision   ;position it properly, draw it and do collision detection
0C9BC A5 00                               lda $00                     ;check which firebar part
0C9BE C9 04                               cmp #$04
0C9C0 D0 08                               bne NextFbar
0C9C2 AC CF 06                            ldy DuplicateObj_Offset     ;if we arrive at fifth firebar part,
0C9C5 B9 E5 06                            lda Enemy_SprDataOffset,y   ;get offset from long firebar and load OAM data offset
0C9C8 85 06                               sta $06                     ;using long firebar offset, then store as new one here
0C9CA E6 00                     NextFbar: inc $00                     ;move onto the next firebar part
0C9CC A5 00                               lda $00
0C9CE C5 DF                               cmp temp3                   ;if we end up at the maximum part, go on and leave
0C9D0 90 9F                               bcc DrawFbar                ;otherwise go back and do another
0C9D2 60                        SkipFBar: rts
0C9D3                           
0C9D3                           DrawFirebar_Collision:
0C9D3 A5 03                              lda $03                  ;store mirror data elsewhere
0C9D5 85 05                              sta $05          
0C9D7 A4 06                              ldy $06                  ;load OAM data offset for firebar
0C9D9 A5 01                              lda $01                  ;load horizontal adder we got from position loader
0C9DB 46 05                              lsr $05                  ;shift LSB of mirror data
0C9DD B0 04                              bcs AddHA                ;if carry was set, skip this part
0C9DF 49 FF                              eor #$ff
0C9E1 69 01                              adc #$01                 ;otherwise get two's compliment of horizontal adder
0C9E3 18                        AddHA:   clc                      ;add horizontal coordinate relative to screen to
0C9E4 6D AE 03                           adc Enemy_Rel_XPos       ;horizontal adder, modified or otherwise
0C9E7 99 03 02                           sta Sprite_X_Position,y  ;store as X coordinate here
0C9EA 85 06                              sta $06                  ;store here for now, note offset is saved in Y still
0C9EC CD AE 03                           cmp Enemy_Rel_XPos       ;compare X coordinate of sprite to original X of firebar
0C9EF B0 0C                              bcs SubtR1               ;if sprite coordinate => original coordinate, branch
0C9F1 AD AE 03                           lda Enemy_Rel_XPos
0C9F4 38                                 sec                      ;otherwise subtract sprite X from the
0C9F5 E5 06                              sbc $06                  ;original one and skip this part
0C9F7 4C 01 CA                           jmp ChkFOfs
0C9FA 4C CC CA                  NoColFB1: jmp NoColFB
0C9FD 38                        SubtR1:  sec                      ;subtract original X from the
0C9FE ED AE 03                           sbc Enemy_Rel_XPos       ;current sprite X
0CA01 C9 59                     ChkFOfs: cmp #$59                 ;if difference of coordinates within a certain range,
0CA03 90 04                              bcc VAHandl              ;continue by handling vertical adder
0CA05 A9 F8                              lda #$f8                 ;otherwise, load offscreen Y coordinate
0CA07 D0 15                              bne SetVFbr              ;and unconditionally branch to move sprite offscreen
0CA09 AD B9 03                  VAHandl: lda Enemy_Rel_YPos       ;if vertical relative coordinate offscreen,
0CA0C C9 F8                              cmp #$f8                 ;skip ahead of this part and write into sprite Y coordinate
0CA0E F0 0E                              beq SetVFbr
0CA10 A5 02                              lda $02                  ;load vertical adder we got from position loader
0CA12 46 05                              lsr $05                  ;shift LSB of mirror data one more time
0CA14 B0 04                              bcs AddVA                ;if carry was set, skip this part
0CA16 49 FF                              eor #$ff
0CA18 69 01                              adc #$01                 ;otherwise get two's compliment of second part
0CA1A 18                        AddVA:   clc                      ;add vertical coordinate relative to screen to 
0CA1B 6D B9 03                           adc Enemy_Rel_YPos       ;the second data, modified or otherwise
0CA1E 99 00 02                  SetVFbr: sta Sprite_Y_Position,y  ;store as Y coordinate here
0CA21 85 07                              sta $07                  ;also store here for now
0CA23                           
0CA23                           FirebarCollision:
0CA23 A5 09                     		 lda FrameCounter         ;get frame counter
0CA25 4A                                 lsr                      ;divide by four
0CA26 4A                                 lsr
0CA27 48                                 pha                      ;save result to stack
0CA28 29 01                              and #$01                 ;mask out all but last bit
0CA2A 49 64                              eor #$64                 ;set either tile $64 or $65 as fireball tile
0CA2C 99 01 02                           sta Sprite_Tilenumber,y  ;thus tile changes every four frames
0CA2F 68                                 pla                      ;get from stack
0CA30 4A                                 lsr                      ;divide by four again
0CA31 4A                                 lsr
0CA32 A9 02                              lda #$02                 ;load value $02 to set palette in attrib byte
0CA34 90 02                              bcc +                    ;if last bit shifted out was not set, skip this
0CA36 09 C0                              ora #%11000000           ;otherwise flip both ways every eight frames
0CA38 99 02 02                  +:	     sta Sprite_Attributes,y  ;store attribute byte and leave
0CA3B 98                                 tya                      ;return OAM data offset and save
0CA3C 48                                 pha                      ;to the stack for now
0CA3D A5 0E                     		 lda GameEngineSubroutine
0CA3F C9 08                     		 cmp #$08
0CA41 D0 B7                     		 bne NoColFB1
0CA43 AD 04 60                  		 lda GrabFlag
0CA46 F0 05                     		 beq +
0CA48 EC 08 60                  		 cpx GrabID
0CA4B F0 7F                     		 beq NoColFB
0CA4D                           +:       
0CA4D AD 04 07                  		 lda SwimmingFlag
0CA50 D0 05                     		 bne +
0CA52 AD 9F 07                  		 lda StarInvincibleTimer  ;if star mario invincibility timer
0CA55 D0 75                     		 bne NoColFB
0CA57 AD 47 07                  +:       lda TimerControl         ;or master timer controls set
0CA5A D0 70                              bne NoColFB              ;then skip all of this
0CA5C 85 05                              sta $05                  ;otherwise initialize counter
0CA5E A4 A7                              ldy Player_Y_HighPos
0CA60 88                                 dey                      ;if player's vertical high byte offscreen,
0CA61 D0 69                              bne NoColFB              ;skip all of this
0CA63 A4 C0                              ldy Player_Y_Position    ;get player's vertical position
0CA65 AD 54 07                           lda PlayerSize           ;get player's size
0CA68 D0 05                              bne AdjSm                ;if player small, branch to alter variables
0CA6A AD 14 07                           lda CrouchingFlag
0CA6D F0 09                              beq BigJp                ;if player big and not crouching, jump ahead
0CA6F E6 05                     AdjSm:   inc $05                  ;if small or big but crouching, execute this part
0CA71 E6 05                              inc $05                  ;first increment our counter twice (setting $02 as flag)
0CA73 98                                 tya
0CA74 18                                 clc                      ;then add 24 pixels to the player's
0CA75 69 18                              adc #$18                 ;vertical coordinate
0CA77 A8                                 tay
0CA78 98                        BigJp:   tya                      ;get vertical coordinate, altered or otherwise, from Y
0CA79 38                        FBCLoop: sec                      ;subtract vertical position of firebar
0CA7A E5 07                              sbc $07                  ;from the vertical coordinate of the player
0CA7C 10 05                              bpl ChkVFBD              ;if player lower on the screen than firebar, 
0CA7E 49 FF                              eor #$ff                 ;skip two's compliment part
0CA80 18                                 clc                      ;otherwise get two's compliment
0CA81 69 01                              adc #$01
0CA83 C9 08                     ChkVFBD: cmp #$08                 ;if difference => 8 pixels, skip ahead of this part
0CA85 B0 1C                              bcs Chk2Ofs
0CA87 A5 06                              lda $06                  ;if firebar on far right on the screen, skip this,
0CA89 C9 F0                              cmp #$f0                 ;because, really, what's the point?
0CA8B B0 16                              bcs Chk2Ofs
0CA8D AD 07 02                           lda Sprite_X_Position+4  ;get OAM X coordinate for sprite #1
0CA90 38                                 sec
0CA91 E9 03                              sbc #$03                 ;add four pixels
0CA93 85 04                              sta $04                  ;store here
0CA95 38                                 sec                      ;subtract horizontal coordinate of firebar
0CA96 E5 06                              sbc $06                  ;from the X coordinate of player's sprite 1
0CA98 10 05                              bpl ChkFBCl              ;if modded X coordinate to the right of firebar
0CA9A 49 FF                              eor #$ff                 ;skip two's compliment part
0CA9C 18                                 clc                      ;otherwise get two's compliment
0CA9D 69 01                              adc #$01
0CA9F C9 08                     ChkFBCl: cmp #$08                 ;if difference < 8 pixels, collision, thus branch
0CAA1 90 13                              bcc ChgSDir              ;to process
0CAA3 A5 05                     Chk2Ofs: lda $05                  ;if value of $02 was set earlier for whatever reason,
0CAA5 C9 02                              cmp #$02                 ;branch to increment OAM offset and leave, no collision
0CAA7 F0 23                              beq NoColFB
0CAA9 A4 05                              ldy $05                  ;otherwise get temp here and use as offset
0CAAB A5 C0                              lda Player_Y_Position
0CAAD 18                                 clc
0CAAE 79 B0 BA                           adc FirebarYPos,y        ;add value loaded with offset to player's vertical coordinate
0CAB1 E6 05                              inc $05                  ;then increment temp and jump back
0CAB3 4C 79 CA                           jmp FBCLoop
0CAB6 A2 01                     ChgSDir: ldx #$01                 ;set movement direction by default
0CAB8 A5 04                              lda $04                  ;if OAM X coordinate of player's sprite 1
0CABA C5 06                              cmp $06                  ;is greater than horizontal coordinate of firebar
0CABC B0 01                              bcs SetSDir              ;then do not alter movement direction
0CABE E8                                 inx                      ;otherwise increment it
0CABF 86 43                     SetSDir: stx Enemy_MovingDir      ;store movement direction here
0CAC1 A2 00                              ldx #$00
0CAC3 A5 00                              lda $00                  ;save value written to $00 to stack
0CAC5 48                                 pha
0CAC6 20 E2 D8                           jsr InjurePlayer         ;perform sub to hurt or kill player
0CAC9 68                                 pla
0CACA 85 00                              sta $00                  ;get value of $00 from stack
0CACC 68                        NoColFB: pla                      ;get OAM data offset
0CACD 18                                 clc                      ;add four to it and save
0CACE 69 04                              adc #$04
0CAD0 85 06                              sta $06
0CAD2 A6 08                              ldx ObjectOffset         ;get enemy object buffer offset and leave
0CAD4 60                                 rts
0CAD5                           ;--------------------------------
0CAD5                           
0CAD5                           PRandomSubtracter:
0CAD5 F8 A0 70 BD 00                  .db $f8, $a0, $70, $bd, $00
0CADA                           
0CADA                           FlyCCBPriority:
0CADA 20 20 20 00 00                  .db $20, $20, $20, $00, $00
0CADF                           
0CADF                           ;--------------------------------
0CADF                           ;$00 - used to hold horizontal difference
0CADF                           ;$01-$03 - used to hold difference adjusters
0CADF 4C 8A CB                  SetLSpd2: jmp SetLSpd
0CAE2                           MoveLakitu:
0CAE2 B5 1C                              lda Enemy_State,x          ;check lakitu's enemy state
0CAE4 29 20                              and #%00100000             ;for d5 set
0CAE6 F0 03                              beq ChkLS                  ;if not set, continue with code
0CAE8 4C 09 AC                           jmp MoveD_EnemyVertically  ;otherwise jump to move defeated lakitu downwards
0CAEB B5 1C                     ChkLS:   lda Enemy_State,x          ;if lakitu's enemy state not set at all,
0CAED F0 0B                              beq Fr12S                  ;go ahead and continue with code
0CAEF A9 00                              lda #$00
0CAF1 95 92                              sta LakituMoveDirection,x  ;otherwise initialize moving direction to move to left
0CAF3 8D CB 06                           sta EnemyFrenzyBuffer      ;initialize frenzy buffer
0CAF6 A9 10                              lda #$10
0CAF8 D0 E5                              bne SetLSpd2                ;load horizontal speed and do unconditional branch
0CAFA A9 12                     Fr12S:   lda #Spiny
0CAFC 8D CB 06                           sta EnemyFrenzyBuffer      ;set spiny identifier in frenzy buffer
0CAFF A0 02                              ldy #$02
0CB01 B9 06 B8                  LdLDa:   lda LakituDiffAdj,y        ;load values
0CB04 99 01 00                           sta $0001,y                ;store in zero page
0CB07 88                                 dey
0CB08 10 F7                              bpl LdLDa                  ;do this until all values are stired
0CB0A 20 A3 CB                           jsr PlayerLakituDiff       ;execute sub to set speed and create spinys
0CB0D A4 49                     		 ldy Player_X_Speed
0CB0F F0 79                     		 beq SetLSpd
0CB11 AC 75 07                  		 ldy ScrollAmount
0CB14 F0 74                     		 beq SetLSpd
0CB16 30 1A                     		 bmi ++
0CB18 AC 91 60                  		 ldy pspeed
0CB1B C0 07                     		 cpy #$07
0CB1D D0 67                     		 bne +
0CB1F B5 79                     		 lda Enemy_X_Position,x
0CB21 38                        		 sec
0CB22 ED 1C 07                  		 sbc ScreenLeft_X_Pos
0CB25 C9 D0                     		 cmp #$d0
0CB27 90 34                     		 bcc +++
0CB29 C9 E0                     		 cmp #$e0
0CB2B B0 38                     		 bcs ++++++
0CB2D A9 30                     		 lda #$30
0CB2F 4C 86 CB                  		 jmp +
0CB32 A9 01                     ++:		 lda #$01
0CB34 95 92                     		 sta LakituMoveDirection,x
0CB36 AC 91 60                  		 ldy pspeed
0CB39 C0 07                     		 cpy #$07
0CB3B D0 10                     		 bne +++++
0CB3D B5 79                     		 lda Enemy_X_Position,x
0CB3F 38                        		 sec
0CB40 ED 1C 07                  		 sbc ScreenLeft_X_Pos
0CB43 C9 20                     		 cmp #$20
0CB45 B0 1A                     		 bcs ++
0CB47 AD 75 07                      	 lda ScrollAmount
0CB4A 4C 8A CB                  		 jmp SetLSpd
0CB4D B5 79                     +++++:   lda Enemy_X_Position,x
0CB4F 38                        		 sec
0CB50 ED 1C 07                  		 sbc ScreenLeft_X_Pos
0CB53 C9 20                     		 cmp #$20
0CB55 B0 12                     		 bcs ++++
0CB57 AD 75 07                  		 lda ScrollAmount
0CB5A 4C 8A CB                  		 jmp SetLSpd
0CB5D A9 3F                     +++:	 lda #$3f
0CB5F D0 29                     		 bne SetLSpd
0CB61 A9 C1                     ++:      lda #$c1
0CB63 D0 25                     		 bne SetLSpd
0CB65 A9 20                     ++++++:  lda #$20
0CB67 D0 21                     		 bne SetLSpd
0CB69 A5 49                     ++++:	 lda Player_X_Speed
0CB6B C9 E8                     		 cmp #$e8
0CB6D 90 04                     		 bcc ++
0CB6F A9 E0                     		 lda #$e0
0CB71 D0 17                     		 bne SetLSpd
0CB73 B5 79                     ++:		 lda Enemy_X_Position,x
0CB75 38                        		 sec
0CB76 ED 1C 07                  		 sbc ScreenLeft_X_Pos
0CB79 E9 20                     		 sbc #$20
0CB7B C9 40                     		 cmp #$40
0CB7D 90 02                     		 bcc ++
0CB7F A9 3F                     		 lda #$3f
0CB81 49 FF                     ++:		 eor #$ff
0CB83 4C 8A CB                  		 jmp SetLSpd
0CB86 A0 01                     +:       ldy #$01
0CB88 94 92                     		 sty LakituMoveDirection,x
0CB8A 95 4A                     SetLSpd: sta LakituMoveSpeed,x      ;set movement speed returned from sub
0CB8C A0 01                              ldy #$01                   ;set moving direction to right by default
0CB8E B5 92                              lda LakituMoveDirection,x
0CB90 29 01                              and #$01                   ;get LSB of moving direction
0CB92 D0 0A                              bne SetLMov                ;if set, branch to the end to use moving direction
0CB94 B5 4A                              lda LakituMoveSpeed,x
0CB96 49 FF                              eor #$ff                   ;get two's compliment of moving speed
0CB98 18                                 clc
0CB99 69 01                              adc #$01
0CB9B 95 4A                              sta LakituMoveSpeed,x      ;store as new moving speed
0CB9D C8                                 iny                        ;increment moving direction to left
0CB9E 94 43                     SetLMov: sty Enemy_MovingDir,x      ;store moving direction
0CBA0 4C C9 F4                  		 jmp MoveEnemyHorizontally  ;move lakitu horizontally
0CBA3                           
0CBA3                           PlayerLakituDiff:
0CBA3 A0 00                                ldy #$00                   ;set Y for default value
0CBA5 20 69 C6                             jsr PlayerEnemyDiff        ;get horizontal difference between enemy and player
0CBA8 10 0B                                bpl ChkLakDif              ;branch if enemy is to the right of the player
0CBAA A0 01                     		   ldy #$01                   ;increment Y for left of player
0CBAC A5 00                                lda $00
0CBAE 49 FF                                eor #$ff                   ;get two's compliment of low byte of horizontal difference
0CBB0 18                                   clc
0CBB1 69 01                                adc #$01                   ;store two's compliment as horizontal difference
0CBB3 85 00                                sta $00
0CBB5 A5 00                     ChkLakDif: lda $00                    ;get low byte of horizontal difference
0CBB7 C9 3C                                cmp #$3c                   ;if within a certain distance of player, branch
0CBB9 90 22                     		   bcc ChkPSpeed
0CBBB A9 3C                     		   lda #$3c                   ;otherwise set maximum distance
0CBBD 85 00                                sta $00
0CBBF B5 15                                lda Enemy_ID,x             ;check if lakitu is in our current enemy slot
0CBC1 C9 11                                cmp #Lakitu
0CBC3 D0 18                                bne ChkPSpeed              ;if not, branch elsewhere
0CBC5 98                                   tya                        ;compare contents of Y, now in A
0CBC6 D5 92                                cmp LakituMoveDirection,x  ;to what is being used as horizontal movement direction
0CBC8 F0 13                                beq ChkPSpeed              ;if moving toward the player, branch, do not alter
0CBCA B5 92                                lda LakituMoveDirection,x  ;if moving to the left beyond maximum distance,
0CBCC F0 0C                                beq SetLMovD               ;branch and alter without delay
0CBCE D6 4A                     		   dec LakituMoveSpeed,x
0CBD0 A5 49                                lda Player_X_Speed
0CBD2 D0 02                     		   bne +
0CBD4 95 4A                     		   sta LakituMoveSpeed,x
0CBD6 B5 4A                     +:         lda LakituMoveSpeed,x      ;if horizontal speed not yet at zero, branch to leave
0CBD8 D0 40                                bne ExMoveLak
0CBDA 98                        SetLMovD:  tya                        ;set horizontal direction depending on horizontal
0CBDB 95 92                                sta LakituMoveDirection,x  ;difference between enemy and player if necessary
0CBDD A5 00                     ChkPSpeed: lda $00
0CBDF 29 3C                                and #%00111100             ;mask out all but four bits in the middle
0CBE1 4A                                   lsr                        ;divide masked difference by four
0CBE2 4A                                   lsr
0CBE3 85 00                                sta $00                    ;store as new value
0CBE5 A0 00                                ldy #$00                   ;init offset
0CBE7 A5 49                                lda Player_X_Speed
0CBE9 F0 24                                beq SubDifAdj              ;if player not moving horizontally, branch
0CBEB AD 75 07                             lda ScrollAmount
0CBEE F0 1F                                beq SubDifAdj              ;if scroll speed not set, branch to same place
0CBF0 C8                                   iny                        ;otherwise increment offset
0CBF1 A5 49                     		   lda Player_X_Speed
0CBF3 C9 19                                cmp #$19                   ;if player not running, branch
0CBF5 90 08                     		   bcc ChkSpinyO
0CBF7 AD 75 07                             lda ScrollAmount
0CBFA C9 02                                cmp #$02                   ;if scroll speed below a certain amount, branch
0CBFC 90 01                     		   bcc ChkSpinyO              ;to same place
0CBFE C8                                   iny                        ;otherwise increment once more
0CBFF B5 15                     ChkSpinyO: lda Enemy_ID,x             ;check for spiny object
0CC01 C9 12                                cmp #Spiny
0CC03 D0 04                                bne ChkEmySpd              ;branch if not found
0CC05 A5 49                                lda Player_X_Speed         ;if player not moving, skip this part
0CC07 D0 06                                bne SubDifAdj
0CC09 B5 92                     ChkEmySpd: lda Enemy_Y_Speed,x        ;check vertical speed
0CC0B D0 02                                bne SubDifAdj              ;branch if nonzero
0CC0D A0 00                                ldy #$00                   ;otherwise reinit offset
0CC0F B9 01 00                  SubDifAdj: lda $0001,y                ;get one of three saved values from earlier
0CC12 A4 00                                ldy $00                    ;get saved horizontal difference
0CC14 38                        SPixelLak: sec                        ;subtract one for each pixel of horizontal difference
0CC15 E9 01                                sbc #$01                   ;from one of three saved values
0CC17 88                                   dey
0CC18 10 FA                                bpl SPixelLak              ;branch until all pixels are subtracted, to adjust difference
0CC1A 60                        ExMoveLak: rts                        ;leave!!!
0CC1B                           
0CC1B                           ;-------------------------------------------------------------------------------------
0CC1B                           ;$04-$05 - used to store name table address in little endian order
0CC1B                           
0CC1B                           
0CC1B                           
0CC1B                           BridgeCollapse:
0CC1B AE 68 05                         ldx BowserFront_Offset    ;get enemy offset for bowser
0CC1E B5 15                            lda Enemy_ID,x            ;check enemy object identifier for bowser
0CC20 C9 2D                            cmp #Bowser               ;if not found, branch ahead,
0CC22 D0 10                            bne SetM2                 ;metatile removal not necessary
0CC24 86 08                            stx ObjectOffset          ;store as enemy offset here
0CC26 B5 1C                            lda Enemy_State,x         ;if bowser in normal state, skip all of this
0CC28 F0 1A                            beq RemoveBridge
0CC2A 29 40                            and #%01000000            ;if bowser's state has d6 clear, skip to silence music
0CC2C F0 06                            beq SetM2
0CC2E B5 C1                            lda Enemy_Y_Position,x    ;check bowser's vertical coordinate
0CC30 C9 E0                            cmp #$e0                  ;if bowser not yet low enough, skip this part ahead
0CC32 90 0A                            bcc MoveD_Bowser
0CC34 A9 80                     SetM2: lda #Silence              ;silence music
0CC36 85 ED                            sta EventMusicQueue
0CC38 EE 72 07                         inc OperMode_Task         ;move onto next secondary mode in autoctrl mode
0CC3B 4C A4 CC                         jmp KillAllEnemies        ;jump to empty all enemy slots and then leave  
0CC3E                           
0CC3E                           MoveD_Bowser:
0CC3E 20 DC AB                         jsr MoveEnemySlowVert     ;do a sub to move bowser downwards
0CC41 4C F7 CD                         jmp BowserGfxHandler      ;jump to draw bowser's front and rear, then leave
0CC44                           
0CC44                           RemoveBridge:
0CC44 CE 64 05                           dec BowserFeetCounter     ;decrement timer to control bowser's feet
0CC47 D0 48                              bne NoBFall               ;if not expired, skip all of this
0CC49 A9 04                              lda #$04
0CC4B 8D 64 05                           sta BowserFeetCounter     ;otherwise, set timer now
0CC4E AD 63 05                           lda BowserBodyControls
0CC51 49 01                              eor #$01                  ;invert bit to control bowser's feet
0CC53 8D 63 05                           sta BowserBodyControls
0CC56 A9 22                              lda #$22                  ;put high byte of name table address here for now
0CC58 85 05                              sta $05
0CC5A AC 69 05                           ldy BridgeCollapseOffset  ;get bridge collapse offset here
0CC5D B9 24 BF                           lda BridgeCollapseData,y  ;load low byte of name table address and store here
0CC60 85 04                              sta $04
0CC62 AC 00 64                           ldy VRAM_Buffer1_Offset   ;increment vram buffer offset
0CC65 C8                                 iny
0CC66 A2 0C                              ldx #$0c                  ;set offset for tile data for sub to draw blank metatile
0CC68 20 5C 8B                           jsr RemBridge             ;do sub here to remove bowser's bridge metatiles
0CC6B A6 08                              ldx ObjectOffset          ;get enemy offset
0CC6D 20 1A 8B                           jsr MoveVOffset           ;set new vram buffer offset
0CC70 A9 08                              lda #Sfx_Blast            ;load the fireworks/gunfire sound into the square 2 sfx
0CC72 85 EF                              sta Square2SoundQueue     ;queue while at the same time loading the brick
0CC74 A9 01                              lda #Sfx_BrickShatter     ;shatter sound into the noise sfx queue thus
0CC76 85 EE                              sta NoiseSoundQueue       ;producing the unique sound of the bridge collapsing 
0CC78 EE 69 05                           inc BridgeCollapseOffset  ;increment bridge collapse offset
0CC7B AD 69 05                           lda BridgeCollapseOffset
0CC7E C9 0E                              cmp #$0e                  ;if bridge collapse offset has not yet reached
0CC80 D0 0F                              bne NoBFall               ;the end, go ahead and skip this part
0CC82 A9 00                              lda #$00                    ;initialize vertical speed
0CC84 95 92                              sta Enemy_Y_Speed,x         ;and movement force
0CC86 9D 34 04                           sta Enemy_Y_MoveForce,x              ;initialize whatever vertical speed bowser has
0CC89 A9 40                              lda #%01000000
0CC8B 95 1C                              sta Enemy_State,x         ;set bowser's state to one of defeated states (d6 set)
0CC8D A9 80                              lda #Sfx_BowserFall
0CC8F 85 EF                              sta Square2SoundQueue     ;play bowser defeat sound
0CC91 4C F7 CD                  NoBFall: jmp BowserGfxHandler      ;jump to code that draws bowser
0CC94                           
0CC94                           ;--------------------------------
0CC94                           
0CC94                           PRandomRange:
0CC94 21 41 11 31                     .db $21, $41, $11, $31
0CC98                           
0CC98                           RunBowser:
0CC98 B5 1C                           lda Enemy_State,x       ;if d5 in enemy state is not set
0CC9A 29 20                           and #%00100000          ;then branch elsewhere to run bowser
0CC9C F0 32                           beq BowserControl
0CC9E B5 C1                           lda Enemy_Y_Position,x  ;otherwise check vertical position
0CCA0 C9 E0                           cmp #$e0                ;if above a certain point, branch to move defeated bowser
0CCA2 90 9A                           bcc MoveD_Bowser        ;otherwise proceed to KillAllEnemies
0CCA4                           
0CCA4                           KillAllEnemies:
0CCA4 A2 05                               ldx #$05              ;start with last enemy slot
0CCA6 AD 04 60                  KillLoop: lda GrabFlag
0CCA9 F0 05                     		  beq +
0CCAB EC 08 60                  		  cpx GrabID
0CCAE F0 03                     		  beq ++
0CCB0 20 1A C5                  +:		  jsr EraseEnemyObject  ;branch to kill enemy objects
0CCB3 CA                        ++:       dex                   ;move onto next enemy slot
0CCB4 10 F0                               bpl KillLoop          ;do this until all slots are emptied
0CCB6 8D CB 06                            sta EnemyFrenzyBuffer ;empty frenzy buffer
0CCB9 A6 08                               ldx ObjectOffset      ;get enemy object offset and leave
0CCBB 60                                  rts
0CCBC                           KillAllEnemiesNoFlag:
0CCBC A2 05                     		  ldx #$05              ;start with last enemy slot
0CCBE B5 15                     -: 		  lda Enemy_ID,x
0CCC0 C9 30                     		  cmp #FlagpoleFlagObject
0CCC2 F0 03                     		  beq +
0CCC4 20 1A C5                  	      jsr EraseEnemyObject  ;branch to kill enemy objects
0CCC7 CA                        +:        dex                   ;move onto next enemy slot
0CCC8 10 F4                               bpl -         		;do this until all slots are emptied
0CCCA 8D CB 06                            sta EnemyFrenzyBuffer ;empty frenzy buffer
0CCCD A6 08                               ldx ObjectOffset      ;get enemy object offset and leave
0CCCF 60                                  rts
0CCD0                           BowserControl:
0CCD0 A9 00                                lda #$00
0CCD2 8D CB 06                             sta EnemyFrenzyBuffer      ;empty frenzy buffer
0CCD5 AD 47 07                             lda TimerControl           ;if master timer control not set,
0CCD8 F0 03                                beq ChkMouth               ;skip jump and execute code here
0CCDA 4C B1 CD                             jmp SkipToFB               ;otherwise, jump over a bunch of code
0CCDD AD 63 05                  ChkMouth:  lda BowserBodyControls     ;check bowser's mouth
0CCE0 10 03                                bpl FeetTmr                ;if bit clear, go ahead with code here
0CCE2 4C 6D CD                             jmp HammerChk              ;otherwise skip a whole section starting here
0CCE5 CE 64 05                  FeetTmr:   dec BowserFeetCounter      ;decrement timer to control bowser's feet
0CCE8 D0 0D                                bne ResetMDr               ;if not expired, skip this part
0CCEA A9 20                                lda #$20                   ;otherwise, reset timer
0CCEC 8D 64 05                             sta BowserFeetCounter        
0CCEF AD 63 05                             lda BowserBodyControls     ;and invert bit used
0CCF2 49 01                                eor #%00000001             ;to control bowser's feet
0CCF4 8D 63 05                             sta BowserBodyControls
0CCF7 A5 09                     ResetMDr:  lda FrameCounter           ;check frame counter
0CCF9 29 0F                                and #%00001111             ;if not on every sixteenth frame, skip
0CCFB D0 04                                bne B_FaceP                ;ahead to continue code
0CCFD A9 02                                lda #$02                   ;otherwise reset moving/facing direction every
0CCFF 95 43                                sta Enemy_MovingDir,x      ;sixteen frames
0CD01 BD 8A 07                  B_FaceP:   lda EnemyFrameTimer,x      ;if timer set here expired,
0CD04 F0 24                                beq GetPRCmp               ;branch to next section
0CD06 B5 79                                lda Enemy_X_Position,x     ;get distance between enemy object's
0CD08 38                        		   sec                        ;horizontal coordinate and the player's
0CD09 E5 78                     		   sbc Player_X_Position      ;horizontal coordinate
0CD0B 85 00                     		   sta $00                    ;and store here
0CD0D B5 60                     		   lda Enemy_PageLoc,x
0CD0F E5 5F                     		   sbc Player_PageLoc         ;subtract borrow, then leave
0CD11 10 17                                bpl GetPRCmp               ;and branch if bowser to the right of the player
0CD13 A9 01                                lda #$01
0CD15 95 43                                sta Enemy_MovingDir,x      ;set bowser to move and face to the right
0CD17 A9 02                                lda #$02
0CD19 8D 65 05                             sta BowserMovementSpeed    ;set movement speed
0CD1C A9 20                                lda #$20
0CD1E 9D 8A 07                             sta EnemyFrameTimer,x      ;set timer here
0CD21 8D 90 07                             sta BowserFireBreathTimer  ;set timer used for bowser's flame
0CD24 B5 79                                lda Enemy_X_Position,x        
0CD26 C9 C8                                cmp #$c8                   ;if bowser to the right past a certain point,
0CD28 B0 43                                bcs HammerChk              ;skip ahead to some other section
0CD2A A5 09                     GetPRCmp:  lda FrameCounter           ;get frame counter
0CD2C 29 03                                and #%00000011
0CD2E D0 3D                                bne HammerChk              ;execute this code every fourth frame, otherwise branch
0CD30 B5 79                                lda Enemy_X_Position,x
0CD32 CD 66 05                             cmp BowserOrigXPos         ;if bowser not at original horizontal position,
0CD35 D0 0C                                bne GetDToO                ;branch to skip this part
0CD37 BD A7 07                             lda PseudoRandomBitReg,x
0CD3A 29 03                                and #%00000011             ;get pseudorandom offset
0CD3C A8                                   tay
0CD3D B9 94 CC                             lda PRandomRange,y         ;load value using pseudorandom offset
0CD40 8D DC 06                             sta MaxRangeFromOrigin     ;and store here
0CD43 A0 16                     GetDToO:   ldy #$16
0CD45 20 6D F2                  		   jsr BlockBufferChk_Enemy
0CD48 B5 79                     		   lda Enemy_X_Position,x
0CD4A 18                                   clc                        ;add movement speed to bowser's horizontal
0CD4B 6D 65 05                             adc BowserMovementSpeed    ;coordinate and save as new horizontal position
0CD4E 95 79                                sta Enemy_X_Position,x
0CD50 B4 43                     		   ldy Enemy_MovingDir,x
0CD52 C0 01                                cpy #$01                   ;if bowser moving and facing to the right, skip ahead
0CD54 F0 17                                beq HammerChk
0CD56 A0 FF                                ldy #$ff                   ;set default movement speed here (move left)
0CD58 38                                   sec                        ;get difference of current vs. original
0CD59 ED 66 05                             sbc BowserOrigXPos         ;horizontal position
0CD5C 10 07                                bpl CompDToO               ;if current position to the right of original, skip ahead
0CD5E 49 FF                                eor #$ff
0CD60 18                                   clc                        ;get two's compliment
0CD61 69 01                                adc #$01
0CD63 A0 01                                ldy #$01                   ;set alternate movement speed here (move right)
0CD65 CD DC 06                  CompDToO:  cmp MaxRangeFromOrigin     ;compare difference with pseudorandom value
0CD68 90 03                                bcc HammerChk              ;if difference < pseudorandom value, leave speed alone
0CD6A 8C 65 05                             sty BowserMovementSpeed    ;otherwise change bowser's movement speed
0CD6D BD 8A 07                  HammerChk: lda EnemyFrameTimer,x      ;if timer set here not expired yet, skip ahead to
0CD70 D0 42                                bne MakeBJump              ;some other section of code
0CD72 20 DC AB                             jsr MoveEnemySlowVert      ;otherwise start by moving bowser downwards
0CD75 AD 5F 07                             lda WorldNumber            ;check world number
0CD78 C9 05                                cmp #World6
0CD7A 90 09                                bcc SetHmrTmr              ;if world 1-5, skip this part (not time to throw hammers yet)
0CD7C A5 09                                lda FrameCounter
0CD7E 29 0F                                and #%00001111             ;check to see if it's time to execute sub
0CD80 D0 03                                bne SetHmrTmr              ;if not, skip sub, otherwise
0CD82 20 64 A3                             jsr SpawnHammerObj         ;execute sub on every fourth frame to spawn misc object (hammer)
0CD85 A0 22                     SetHmrTmr: ldy #$22
0CD87 20 6D F2                  		   jsr BlockBufferChk_Enemy
0CD8A F0 39                                beq ChkFireB               ;then skip to world number check for flames
0CD8C C9 5F                     		   cmp #$5f
0CD8E F0 35                     		   beq ChkFireB
0CD90 C9 91                     		   cmp #$91
0CD92 F0 31                     		   beq ChkFireB
0CD94 C9 C2                     		   cmp #$c2
0CD96 F0 2D                     		   beq ChkFireB
0CD98 C9 60                     		   cmp #$60
0CD9A F0 29                     		   beq ChkFireB
0CD9C B5 C1                     		   lda Enemy_Y_Position,x
0CD9E 18                        		   clc
0CD9F 69 08                     		   adc #$08
0CDA1 29 F0                     		   and #%11110000
0CDA3                           		   ;ora #%00000001
0CDA3 95 C1                     		   sta Enemy_Y_Position,x
0CDA5 BD A7 07                             lda PseudoRandomBitReg,x
0CDA8 29 03                                and #%00000011             ;get pseudorandom offset
0CDAA A8                                   tay
0CDAB B9 94 CC                             lda PRandomRange,y         ;get value using pseudorandom offset
0CDAE 9D 8A 07                             sta EnemyFrameTimer,x      ;set for timer here
0CDB1 4C C5 CD                  SkipToFB:  jmp ChkFireB               ;jump to execute flames code
0CDB4 C9 01                     MakeBJump: cmp #$01                   ;if timer not yet about to expire,
0CDB6 D0 0D                                bne ChkFireB               ;skip ahead to next part
0CDB8 D6 C1                                dec Enemy_Y_Position,x     ;otherwise decrement vertical coordinate
0CDBA A9 00                                lda #$00                   ;initialize vertical speed
0CDBC 95 92                                sta Enemy_Y_Speed,x        ;and movement force
0CDBE 9D 34 04                             sta Enemy_Y_MoveForce,x    ;initialize movement amount
0CDC1 A9 FE                                lda #$fe
0CDC3 95 92                                sta Enemy_Y_Speed,x        ;set vertical speed to move bowser upwards
0CDC5 AD 5F 07                  ChkFireB:  lda WorldNumber            ;check world number here
0CDC8 C9 07                                cmp #FinalWorld            ;world 8?
0CDCA F0 04                                beq SpawnFBr               ;if so, execute this part here
0CDCC C9 05                                cmp #World6                ;world 6-7?
0CDCE B0 27                                bcs BowserGfxHandler       ;if so, skip this part here
0CDD0 AD 90 07                  SpawnFBr:  lda BowserFireBreathTimer  ;check timer here
0CDD3 D0 22                                bne BowserGfxHandler       ;if not expired yet, skip all of this
0CDD5 A9 20                                lda #$20
0CDD7 8D 90 07                             sta BowserFireBreathTimer  ;set timer here
0CDDA AD 63 05                             lda BowserBodyControls
0CDDD 49 80                                eor #%10000000             ;invert bowser's mouth bit to open
0CDDF 8D 63 05                             sta BowserBodyControls     ;and close bowser's mouth
0CDE2 30 E1                                bmi ChkFireB               ;if bowser's mouth open, loop back
0CDE4 20 55 CE                             jsr SetFlameTimer          ;get timing for bowser's flame
0CDE7 AC CC 06                             ldy SecondaryHardMode
0CDEA F0 03                                beq SetFBTmr               ;if secondary hard mode flag not set, skip this
0CDEC 38                                   sec
0CDED E9 10                                sbc #$10                   ;otherwise subtract from value in A
0CDEF 8D 90 07                  SetFBTmr:  sta BowserFireBreathTimer  ;set value as timer here
0CDF2 A9 15                                lda #BowserFlame           ;put bowser's flame identifier
0CDF4 8D CB 06                             sta EnemyFrenzyBuffer      ;in enemy frenzy buffer
0CDF7                           
0CDF7                           ;--------------------------------
0CDF7                           
0CDF7                           BowserGfxHandler:
0CDF7 20 38 CE                            jsr ProcessBowserHalf    ;do a sub here to process bowser's front
0CDFA A0 10                               ldy #$10                 ;load default value here to position bowser's rear
0CDFC B5 43                               lda Enemy_MovingDir,x    ;check moving direction
0CDFE 4A                                  lsr
0CDFF 90 02                               bcc CopyFToR             ;if moving left, use default
0CE01 A0 F0                               ldy #$f0                 ;otherwise load alternate positioning value here
0CE03 98                        CopyFToR: tya                      ;move bowser's rear object position value to A
0CE04 18                                  clc
0CE05 75 79                               adc Enemy_X_Position,x   ;add to bowser's front object horizontal coordinate
0CE07 AC CF 06                  		  ldy DuplicateObj_Offset
0CE0A 99 79 00                            sta Enemy_X_Position,y   ;store A as bowser's rear horizontal coordinate
0CE0D B5 C1                               lda Enemy_Y_Position,x
0CE0F 18                                  clc                      ;add eight pixels to bowser's front object
0CE10 69 08                               adc #$08                 ;vertical coordinate and store as vertical coordinate
0CE12 99 C1 00                            sta Enemy_Y_Position,y   ;for bowser's rear
0CE15 B5 1C                               lda Enemy_State,x
0CE17 99 1C 00                            sta Enemy_State,y        ;copy enemy state directly from front to rear
0CE1A B5 43                               lda Enemy_MovingDir,x
0CE1C 99 43 00                            sta Enemy_MovingDir,y    ;copy moving direction also
0CE1F A5 08                               lda ObjectOffset         ;save enemy object offset of front to stack
0CE21 48                                  pha
0CE22 AE CF 06                            ldx DuplicateObj_Offset  ;put enemy object offset of rear as current
0CE25 86 08                               stx ObjectOffset
0CE27 A9 2D                               lda #Bowser              ;set bowser's enemy identifier
0CE29 95 15                               sta Enemy_ID,x           ;store in bowser's rear object
0CE2B 20 38 CE                            jsr ProcessBowserHalf    ;do a sub here to process bowser's rear
0CE2E 68                                  pla
0CE2F 85 08                               sta ObjectOffset         ;get original enemy object offset
0CE31 AA                                  tax
0CE32 A9 00                               lda #$00                 ;nullify bowser's front/rear graphics flag
0CE34 8D 6A 05                            sta BowserGfxFlag
0CE37 60                        ExBGfxH:  rts                      ;leave!
0CE38                           
0CE38                           ProcessBowserHalf:
0CE38 EE 6A 05                        inc BowserGfxFlag         ;increment bowser's graphics flag, then run subroutines
0CE3B 20 10 C3                        jsr RunRetainerObj        ;to get offscreen bits, relative position and draw bowser (finally!)
0CE3E B5 1C                           lda Enemy_State,x
0CE40 D0 F5                           bne ExBGfxH               ;if either enemy object not in normal state, branch to leave
0CE42 A9 0A                           lda #$0a
0CE44 9D 9A 04                        sta Enemy_BoundBoxCtrl,x  ;set bounding box size control
0CE47 20 CC B6                        jsr GetEnemyBoundBox      ;get bounding box coordinates
0CE4A 4C 83 D6                        jmp PlayerEnemyCollision  ;do player-to-enemy collision detection
0CE4D                           
0CE4D                           ;-------------------------------------------------------------------------------------
0CE4D                           ;$00 - used to hold movement force and tile number
0CE4D                           ;$01 - used to hold sprite attribute data
0CE4D                           
0CE4D                           FlameTimerData:
0CE4D BF 40 BF BF BF 40 40 BF         .db $bf, $40, $bf, $bf, $bf, $40, $40, $bf
0CE55                           
0CE55                           SetFlameTimer:
0CE55 AC 67 05                        ldy BowserFlameTimerCtrl  ;load counter as offset
0CE58 EE 67 05                        inc BowserFlameTimerCtrl  ;increment
0CE5B AD 67 05                        lda BowserFlameTimerCtrl  ;mask out all but 3 LSB
0CE5E 29 07                           and #%00000111            ;to keep in range of 0-7
0CE60 8D 67 05                        sta BowserFlameTimerCtrl
0CE63 B9 4D CE                        lda FlameTimerData,y      ;load value to be used then leave
0CE66 60                        ExFl: rts
0CE67                           FlameYPosData1:
0CE67 90 80 70 90                     .db $90, $80, $70, $90
0CE6B                           ProcBowserFlame:
0CE6B AD 47 07                           lda TimerControl            ;if master timer control flag set,
0CE6E D0 30                              bne SetGfxF                 ;skip all of this
0CE70 A9 40                              lda #$40                    ;load default movement force
0CE72 AC CC 06                           ldy SecondaryHardMode
0CE75 F0 02                              beq SFlmX                   ;if secondary hard mode flag not set, use default
0CE77 A9 60                              lda #$60                    ;otherwise load alternate movement force to go faster
0CE79 85 00                     SFlmX:   sta $00                     ;store value here
0CE7B BD 01 04                           lda Enemy_X_MoveForce,x
0CE7E 38                                 sec                         ;subtract value from movement force
0CE7F E5 00                              sbc $00
0CE81 9D 01 04                           sta Enemy_X_MoveForce,x     ;save new value
0CE84 B5 79                              lda Enemy_X_Position,x
0CE86 E9 01                              sbc #$01                    ;subtract one from horizontal position to move
0CE88 95 79                              sta Enemy_X_Position,x      ;to the left
0CE8A B5 60                              lda Enemy_PageLoc,x
0CE8C E9 00                              sbc #$00                    ;subtract borrow from page location
0CE8E 95 60                              sta Enemy_PageLoc,x
0CE90 BC 17 04                           ldy BowserFlamePRandomOfs,x ;get some value here and use as offset
0CE93 B5 C1                              lda Enemy_Y_Position,x      ;load vertical coordinate
0CE95 D9 67 CE                           cmp FlameYPosData1,y         ;compare against coordinate data using $0417,x as offset
0CE98 F0 06                              beq SetGfxF                 ;if equal, branch and do not modify coordinate
0CE9A 18                                 clc
0CE9B 7D 34 04                           adc Enemy_Y_MoveForce,x     ;otherwise add value here to coordinate and store
0CE9E 95 C1                              sta Enemy_Y_Position,x      ;as new vertical coordinate
0CEA0 20 00 AF                  SetGfxF: jsr RelativeEnemyPosition   ;get new relative coordinates
0CEA3 B5 1C                              lda Enemy_State,x           ;if bowser's flame not in normal state,
0CEA5 D0 BF                              bne ExFl                    ;branch to leave
0CEA7 A9 51                              lda #$51                    ;otherwise, continue
0CEA9 85 00                              sta $00                     ;write first tile number
0CEAB A0 02                              ldy #$02                    ;load attributes without vertical flip by default
0CEAD A5 09                              lda FrameCounter
0CEAF 29 02                              and #%00000010              ;invert vertical flip bit every 2 frames
0CEB1 F0 02                              beq FlmeAt                  ;if d1 not set, write default value
0CEB3 A0 82                              ldy #$82                    ;otherwise write value with vertical flip bit set
0CEB5 84 01                     FlmeAt:  sty $01                     ;set bowser's flame sprite attributes here
0CEB7 BC E5 06                           ldy Enemy_SprDataOffset,x   ;get OAM data offset
0CEBA A2 00                              ldx #$00
0CEBC                           
0CEBC                           DrawFlameLoop:
0CEBC AD B9 03                           lda Enemy_Rel_YPos         ;get Y relative coordinate of current enemy object
0CEBF 99 00 02                           sta Sprite_Y_Position,y    ;write into Y coordinate of OAM data
0CEC2 A5 00                              lda $00
0CEC4 99 01 02                           sta Sprite_Tilenumber,y    ;write current tile number into OAM data
0CEC7 E6 00                              inc $00                    ;increment tile number to draw more bowser's flame
0CEC9 A5 01                              lda $01
0CECB 99 02 02                           sta Sprite_Attributes,y    ;write saved attributes into OAM data
0CECE AD AE 03                           lda Enemy_Rel_XPos
0CED1 99 03 02                           sta Sprite_X_Position,y    ;write X relative coordinate of current enemy object
0CED4 18                                 clc
0CED5 69 08                              adc #$08
0CED7 8D AE 03                           sta Enemy_Rel_XPos         ;then add eight to it and store
0CEDA C8                                 iny
0CEDB C8                                 iny
0CEDC C8                                 iny
0CEDD C8                                 iny                        ;increment Y four times to move onto the next OAM
0CEDE E8                                 inx                        ;move onto the next OAM, and branch if three
0CEDF E0 03                              cpx #$03                   ;have not yet been done
0CEE1 90 D9                              bcc DrawFlameLoop
0CEE3 A6 08                              ldx ObjectOffset           ;reload original enemy offset
0CEE5 20 63 B0                           jsr GetEnemyOffscreenBits  ;get offscreen information
0CEE8 BC E5 06                           ldy Enemy_SprDataOffset,x  ;get OAM data offset
0CEEB AD D1 03                           lda Enemy_OffscreenBits    ;get enemy object offscreen bits
0CEEE 4A                                 lsr                        ;move d0 to carry and result to stack
0CEEF 48                                 pha
0CEF0 90 05                              bcc M3FOfs                 ;branch if carry not set
0CEF2 A9 F8                              lda #$f8                   ;otherwise move sprite offscreen, this part likely
0CEF4 99 0C 02                           sta Sprite_Y_Position+12,y ;residual since flame is only made of three sprites
0CEF7 68                        M3FOfs:  pla                        ;get bits from stack
0CEF8 4A                                 lsr                        ;move d1 to carry and move bits back to stack
0CEF9 48                                 pha
0CEFA 90 05                              bcc M2FOfs                 ;branch if carry not set again
0CEFC A9 F8                              lda #$f8                   ;otherwise move third sprite offscreen
0CEFE 99 08 02                           sta Sprite_Y_Position+8,y
0CF01 68                        M2FOfs:  pla                        ;get bits from stack again
0CF02 4A                                 lsr                        ;move d2 to carry and move bits back to stack again
0CF03 48                                 pha
0CF04 90 05                              bcc M1FOfs                 ;branch if carry not set yet again
0CF06 A9 F8                              lda #$f8                   ;otherwise move second sprite offscreen
0CF08 99 04 02                           sta Sprite_Y_Position+4,y
0CF0B 68                        M1FOfs:  pla                        ;get bits from stack one last time
0CF0C 4A                                 lsr                        ;move d3 to carry
0CF0D 90 05                              bcc ExFlmeD                ;branch if carry not set one last time
0CF0F A9 F8                              lda #$f8
0CF11 99 00 02                           sta Sprite_Y_Position,y    ;otherwise move first sprite offscreen
0CF14 60                        ExFlmeD: rts                        ;leave
0CF15                           
0CF15                           ;--------------------------------
0CF15                           
0CF15                           RunFireworks:
0CF15 DE 31 60                             dec ExplosionTimerCounter,x ;decrement explosion timing counter here
0CF18 D0 0D                                bne SetupExpl               ;if not expired, skip this part
0CF1A A9 08                                lda #$08
0CF1C 9D 31 60                             sta ExplosionTimerCounter,x ;reset counter
0CF1F F6 4A                                inc ExplosionGfxCounter,x   ;increment explosion graphics counter
0CF21 B5 4A                                lda ExplosionGfxCounter,x
0CF23 C9 03                                cmp #$03                    ;check explosion graphics counter
0CF25 B0 17                                bcs FireworksSoundScore     ;if at a certain point, branch to kill this object
0CF27 20 00 AF                  SetupExpl: jsr RelativeEnemyPosition   ;get relative coordinates of explosion
0CF2A AD B9 03                             lda Enemy_Rel_YPos          ;copy relative coordinates
0CF2D 8D BA 03                             sta Fireball_Rel_YPos       ;from the enemy object to the fireball object
0CF30 AD AE 03                             lda Enemy_Rel_XPos          ;first vertical, then horizontal
0CF33 8D AF 03                             sta Fireball_Rel_XPos
0CF36 BC E5 06                             ldy Enemy_SprDataOffset,x   ;get OAM data offset
0CF39 B5 4A                                lda ExplosionGfxCounter,x   ;get explosion graphics counter
0CF3B 4C 22 9F                             jmp DrawExplosion_Fireworks ;do a sub to draw the explosion then leave
0CF3E                           		   
0CF3E                           FireworksSoundScore:
0CF3E A9 00                           lda #$00               ;disable enemy buffer flag
0CF40 95 0F                           sta Enemy_Flag,x
0CF42 A9 08                           lda #Sfx_Blast         ;play fireworks/gunfire sound
0CF44 85 EF                           sta Square2SoundQueue
0CF46 A9 05                           lda #$05               ;set part of score modifier for 500 points
0CF48 8D 38 01                        sta DigitModifier+4
0CF4B 4C FC CF                        jmp EndAreaPoints     ;jump to award points accordingly then leave
0CF4E                           
0CF4E                           ;--------------------------------
0CF4E                           
0CF4E                           StarFlagYPosAdder:
0CF4E 00 00 08 08                     .db $00, $00, $08, $08
0CF52                           
0CF52                           StarFlagXPosAdder:
0CF52 00 08 00 08                     .db $00, $08, $00, $08
0CF56                           
0CF56                           StarFlagTileData:
0CF56 54 55 56 57                     .db $54, $55, $56, $57
0CF5A                           
0CF5A                           RunStarFlagObj:
0CF5A A9 00                           lda #$00                 ;initialize enemy frenzy buffer
0CF5C 8D CB 06                        sta EnemyFrenzyBuffer
0CF5F AD 46 07                        lda StarFlagTaskControl  ;check star flag object task number here
0CF62 C9 05                           cmp #$05                 ;if greater than 5, branch to exit
0CF64 B0 36                           bcs StarFlagExit
0CF66 20 A0 F7                        jsr JumpEngine           ;otherwise jump to appropriate sub
0CF69                                 
0CF69 9C CF                           .dw StarFlagExit
0CF6B 73 CF                           .dw GameTimerFireworks
0CF6D                                 if CHEATS && CHEAT_REMOVE_TIMER
0CF6D                                   .dw DelayToAreaEnd     ; This works pretty well to remove timer points count down
0CF6D                                 else
0CF6D BE CF                             .dw AwardGameTimerPoints
0CF6F                                 endif
0CF6F 06 D0                           .dw RaiseFlagSetoffFWorks
0CF71 1E D0                           .dw DelayToAreaEnd
0CF73                           
0CF73                           GameTimerFireworks:
0CF73 A0 05                             ldy #$05               ;set default state for star flag object
0CF75 AD FA 07                          lda GameTimerDisplay+2 ;get game timer's last digit
0CF78 C9 01                             cmp #$01 
0CF7A F0 0E                             beq SetFWC             ;if last digit of game timer set to 1, skip ahead
0CF7C A0 03                             ldy #$03               ;otherwise load new value for state
0CF7E C9 03                             cmp #$03
0CF80 F0 08                             beq SetFWC             ;if last digit of game timer set to 3, skip ahead
0CF82 A0 00                             ldy #$00               ;otherwise load one more potential value for state
0CF84 C9 06                             cmp #$06
0CF86 F0 02                             beq SetFWC             ;if last digit of game timer set to 6, skip ahead
0CF88 A9 FF                             lda #$ff               ;otherwise set value for no fireworks
0CF8A 8D D7 06                  SetFWC: sta FireworksCounter   ;set fireworks counter here
0CF8D 94 1C                             sty Enemy_State,x      ;set whatever state we have in star flag object
0CF8F                           
0CF8F                           IncrementSFTask1:
0CF8F EE 46 07                        inc StarFlagTaskControl  ;increment star flag object task number
0CF92 A9 78                     	  lda #$78
0CF94 8D CB 05                  	  sta EndTimer
0CF97 A9 00                     	  lda #$00
0CF99 8D E3 63                  	  sta OldSquare1SoundBuffer
0CF9C                                 ;jmp KillAllEnemiesNoFlag
0CF9C                           StarFlagExit:
0CF9C 60                              rts                      ;leave
0CF9D A9 30                     Toyota2: lda #$30
0CF9F 8D 80 07                  	    sta SelectTimer        ;set select timer (used for world 8 ending only)
0CFA2 A9 06                     	    lda #$06
0CFA4 8D A1 07                  	    sta WorldEndTimer      ;another short delay, then on to the next task
0CFA7 EE 72 07                  		inc OperMode_Task
0CFAA 60                        		rts
0CFAB                           AwardGameTimerPoints2:
0CFAB A2 00                     		 ldx #$00
0CFAD AD F8 07                  		 lda GameTimerDisplay   ;check all game timer digits for any intervals left
0CFB0 0D F9 07                           ora GameTimerDisplay+1
0CFB3 D0 19                     		 bne AwardTimerCastle
0CFB5 E8                        		 inx
0CFB6 AD FA 07                           lda GameTimerDisplay+2
0CFB9 F0 E2                              beq Toyota2  		    ;if no time left on game timer at all, branch to next task
0CFBB 4C CE CF                  		 jmp AwardTimerCastle
0CFBE                           AwardGameTimerPoints:
0CFBE A2 00                     		 ldx #$00
0CFC0 AD F8 07                  		 lda GameTimerDisplay   ;check all game timer digits for any intervals left
0CFC3 0D F9 07                           ora GameTimerDisplay+1
0CFC6 D0 06                     		 bne AwardTimerCastle
0CFC8 E8                        		 inx
0CFC9 AD FA 07                           lda GameTimerDisplay+2
0CFCC F0 C1                              beq IncrementSFTask1   ;if no time left on game timer at all, branch to next task
0CFCE                           AwardTimerCastle:
0CFCE A5 09                              lda FrameCounter
0CFD0 29 04                              and #%00000100         ;check frame counter for d2 set (skip ahead
0CFD2 F0 09                              beq NoTTick            ;for four frames every four frames) branch if not set
0CFD4 A9 00                              lda #$00
0CFD6 8D 94 60                  		 sta tickid
0CFD9 A9 10                     		 lda #Sfx_TimerTick
0CFDB 85 EF                              sta Square2SoundQueue  ;load timer tick sound
0CFDD A0 23                     NoTTick: ldy #$23               ;set offset here to subtract from game timer's last digit
0CFDF A9 FF                              lda #$ff               ;set adder here to $ff, or -1, to subtract one
0CFE1 9D 38 01                           sta DigitModifier+4,x  ;from the last digit of the game timer
0CFE4 8A                        		 txa
0CFE5 48                        		 pha
0CFE6 20 9C 8D                           jsr DigitsMathRoutine  ;subtract digit
0CFE9 68                        		 pla
0CFEA AA                        		 tax
0CFEB A9 01                              lda #$01               ;set now to add 50 points
0CFED E0 01                     		 cpx #$01
0CFEF D0 06                     		 bne +
0CFF1 8D 39 01                           sta DigitModifier+5   ;per game timer interval subtracted
0CFF4 4C FA CF                  		 jmp ++
0CFF7 8D 38 01                  +:		 sta DigitModifier+4
0CFFA A6 08                     ++:		 ldx ObjectOffset
0CFFC                           
0CFFC                           EndAreaPoints:
0CFFC A0 0B                              ldy #$0b               ;load offset for mario's score by default
0CFFE 20 9C 8D                  ELPGive: jsr DigitsMathRoutine  ;award 50 points per game timer interval
0D001 A9 04                              lda #%00000100         ;add four to set nybble for game timer
0D003 4C 76 A6                           jmp RealUpdateNumber       ;jump to print the new score and game timer
0D006                           
0D006                           RaiseFlagSetoffFWorks:
0D006                                    ;lda Enemy_Y_Position,x  ;check star flag's vertical position
0D006                                    ;cmp #$72                ;against preset value
0D006                                    ;bcc SetoffF             ;if star flag higher vertically, branch to other code
0D006                                    ;dec Enemy_Y_Position,x  ;otherwise, raise star flag by one pixel
0D006                                    ;jmp DrawStarFlag        ;and skip this part here
0D006 AD D7 06                  SetoffF: lda FireworksCounter    ;check fireworks counter
0D009 F0 08                              beq DrawFlagSetTimer    ;if no fireworks left to go off, skip this part
0D00B 30 06                              bmi DrawFlagSetTimer    ;if no fireworks set to go off, skip this part
0D00D A9 16                              lda #Fireworks
0D00F 8D CB 06                           sta EnemyFrenzyBuffer   ;otherwise set fireworks object in frenzy queue
0D012                           
0D012                           DrawStarFlag:
0D012 60                        		 rts
0D013                                    ;jsr RelativeEnemyPosition  ;get relative coordinates of star flag
0D013                                    ;ldy Enemy_SprDataOffset,x  ;get OAM data offset
0D013                                    ;ldx #$03                   ;do four sprites
0D013                           DSFLoop: ;lda Enemy_Rel_YPos         ;get relative vertical coordinate
0D013                                    ;clc
0D013                                    ;adc StarFlagYPosAdder,x    ;add Y coordinate adder data
0D013                                    ;sta Sprite_Y_Position,y    ;store as Y coordinate
0D013                                    ;lda StarFlagTileData,x     ;get tile number
0D013                                    ;sta Sprite_Tilenumber,y    ;store as tile number
0D013                                    ;lda #$22                   ;set palette and background priority bits
0D013                                    ;sta Sprite_Attributes,y    ;store as attributes
0D013                                    ;lda Enemy_Rel_XPos         ;get relative horizontal coordinate
0D013                                    ;clc
0D013                                    ;adc StarFlagXPosAdder,x    ;add X coordinate adder data
0D013                                    ;sta Sprite_X_Position,y    ;store as X coordinate
0D013                                    ;iny
0D013                                    ;iny                        ;increment OAM data offset four bytes
0D013                                    ;iny                        ;for next sprite
0D013                                    ;iny
0D013                                    ;dex                        ;move onto next sprite
0D013                                    ;bpl DSFLoop                ;do this until all sprites are done
0D013                                    ;ldx ObjectOffset           ;get enemy object offset and leave
0D013                                    ;rts
0D013                           
0D013                           DrawFlagSetTimer:
0D013                                 ;jsr DrawStarFlag          ;do sub to draw star flag
0D013 A6 08                           ldx ObjectOffset
0D015 A9 04                     	  lda #$04
0D017 9D 96 07                        sta EnemyIntervalTimer,x  ;set interval timer here
0D01A                           
0D01A                           IncrementSFTask2:
0D01A EE 46 07                        inc StarFlagTaskControl   ;move onto next task
0D01D 60                              rts
0D01E                           
0D01E                           DelayToAreaEnd:
0D01E                                 ;jsr DrawStarFlag          ;do sub to draw star flag
0D01E BD 96 07                        lda EnemyIntervalTimer,x  ;if interval timer set in previous task
0D021 D0 13                           bne StarFlagExit2         ;not yet expired, branch to leave
0D023 AD 06 7F                  	  lda SettingsBits
0D026 F0 06                     	  beq +
0D028 AD CB 05                  	  lda EndTimer
0D02B F0 ED                     	  beq IncrementSFTask2
0D02D 60                        	  rts
0D02E AD CB 05                  +:    lda EndTimer              ;if event music buffer empty,
0D031 0D B1 07                  	  ora EventMusicBuffer
0D034 F0 E4                           beq IncrementSFTask2
0D036                           	  ;jmp IncrementSFTask2      ;branch to increment task
0D036                           
0D036                           StarFlagExit2:
0D036 60                              rts                       ;otherwise leave
0D037                           
0D037                           ;--------------------------------
0D037                           ;$00 - used to store horizontal difference between player and piranha plant
0D037                           Player_Difference:
0D037 21 10                     	  .db $21, $10
0D039                           MovePiranhaPlant:
0D039 B5 1C                     	  lda Enemy_State,x           ;check enemy state
0D03B D0 78                           bne PutinPipe               ;if set at all, branch to leave
0D03D BD 8A 07                        lda EnemyFrameTimer,x       ;check enemy's timer here
0D040 D0 73                           bne PutinPipe               ;branch to end if not yet expired
0D042 B5 92                           lda PiranhaPlant_MoveFlag,x ;check movement flag
0D044 D0 3A                           bne SetupToMovePPlant       ;if moving, skip to part ahead
0D046 B5 4A                           lda PiranhaPlant_Y_Speed,x  ;if currently rising, branch 
0D048 30 2B                           bmi ReversePlantSpeed       ;to move enemy upwards out of pipe
0D04A B5 79                           lda Enemy_X_Position,x      ;get distance between enemy object's
0D04C 38                              sec                         ;horizontal coordinate and the player's
0D04D E5 78                           sbc Player_X_Position       ;horizontal coordinate
0D04F 85 00                           sta $00                     ;and store here
0D051 B5 60                           lda Enemy_PageLoc,x
0D053 E5 5F                           sbc Player_PageLoc          ;subtract borrow, then leave
0D055 10 09                           bpl ChkPlayerNearPipe       ;piranha plant, and branch if enemy to right of player
0D057 A5 00                           lda $00                     ;otherwise get saved horizontal difference
0D059 49 FF                           eor #$ff
0D05B 18                              clc                         ;and change to two's compliment
0D05C 69 01                           adc #$01
0D05E 85 00                           sta $00                     ;save as new horizontal difference
0D060                           
0D060                           ChkPlayerNearPipe:
0D060 B5 15                     	  lda Enemy_ID,x
0D062 C9 20                     	  cmp #RedPiranhaPlant
0D064 D0 05                     	  bne +
0D066 A0 01                     	  ldy #$01
0D068 4C 6E D0                  	  jmp ++
0D06B AC 52 60                  +:    ldy HardModeFlag
0D06E A5 00                     ++:	  lda $00                     ;get saved horizontal difference
0D070 D9 37 D0                        cmp Player_Difference,y
0D073 90 40                           bcc PutinPipe               ;if player within a certain distance, branch to leave
0D075                           
0D075                           ReversePlantSpeed:
0D075 B5 4A                           lda PiranhaPlant_Y_Speed,x  ;get vertical speed
0D077 49 FF                           eor #$ff
0D079 18                              clc                         ;change to two's compliment
0D07A 69 01                           adc #$01
0D07C 95 4A                           sta PiranhaPlant_Y_Speed,x  ;save as new vertical speed
0D07E F6 92                           inc PiranhaPlant_MoveFlag,x ;increment to set movement flag
0D080                           
0D080                           SetupToMovePPlant:
0D080 BD 34 04                        lda PiranhaPlantDownYPos,x  ;get original vertical coordinate (lowest point)
0D083 B4 4A                           ldy PiranhaPlant_Y_Speed,x  ;get vertical speed
0D085 10 03                           bpl RiseFallPiranhaPlant    ;branch if moving downwards
0D087 BD 17 04                        lda PiranhaPlantUpYPos,x    ;otherwise get other vertical coordinate (highest point)
0D08A                           
0D08A                           RiseFallPiranhaPlant:
0D08A 85 00                           sta $00                     ;save vertical coordinate here
0D08C AD 52 60                  	  lda HardModeFlag
0D08F D0 0B                     	  bne +
0D091 B5 15                     	  lda Enemy_ID,x
0D093 C9 20                     	  cmp #RedPiranhaPlant
0D095 F0 05                     	  beq +
0D097 A5 09                           lda FrameCounter            ;get frame counter
0D099 4A                              lsr
0D09A 90 19                           bcc PutinPipe               ;branch to leave if d0 set (execute code every other frame)
0D09C AD 47 07                  +:    lda TimerControl            ;get master timer control
0D09F D0 14                           bne PutinPipe               ;branch to leave if set (likely not necessary)
0D0A1 B5 C1                           lda Enemy_Y_Position,x      ;get current vertical coordinate
0D0A3 18                              clc
0D0A4 75 4A                           adc PiranhaPlant_Y_Speed,x  ;add vertical speed to move up or down
0D0A6 95 C1                           sta Enemy_Y_Position,x      ;save as new vertical coordinate
0D0A8 C5 00                           cmp $00                     ;compare against low or high coordinate
0D0AA D0 09                           bne PutinPipe               ;branch to leave if not yet reached
0D0AC A9 00                           lda #$00
0D0AE 95 92                           sta PiranhaPlant_MoveFlag,x ;otherwise clear movement flag
0D0B0 A9 40                           lda #$40
0D0B2 9D 8A 07                        sta EnemyFrameTimer,x       ;set timer to delay piranha plant movement
0D0B5                           
0D0B5                           PutinPipe:
0D0B5 60                        	  rts                         ;then leave
0D0B6                           
0D0B6                           ;-------------------------------------------------------------------------------------
0D0B6                           ;$07 - spinning speed
0D0B6                           ;-------------------------------------------------------------------------------------
0D0B6                           ;$00 - used to hold collision flag, Y movement force + 5 or low byte of name table for rope
0D0B6                           ;$01 - used to hold high byte of name table for rope
0D0B6                           ;$02 - used to hold page location of rope
0D0B6                           
0D0B6                           BalancePlatform:
0D0B6 B5 A8                            lda Enemy_Y_HighPos,x       ;check high byte of vertical position
0D0B8 C9 03                            cmp #$03
0D0BA D0 03                            bne DoBPl
0D0BC 4C 1A C5                         jmp EraseEnemyObject        ;if far below screen, kill the object
0D0BF B5 1C                     DoBPl: lda Enemy_State,x           ;get object's state (set to $ff or other platform offset)
0D0C1 10 01                            bpl CheckBalPlatform        ;if doing other balance platform, branch to leave
0D0C3 60                               rts
0D0C4                           
0D0C4                           CheckBalPlatform:
0D0C4 A8                               tay                         ;save offset from state as Y
0D0C5 BD A2 03                         lda PlatformCollisionFlag,x ;get collision flag of platform
0D0C8 85 00                            sta $00                     ;store here
0D0CA B5 43                            lda Enemy_MovingDir,x       ;get moving direction
0D0CC F0 03                            beq ChkForFall
0D0CE 4C 46 D2                         jmp PlatformFall            ;if set, jump here
0D0D1                           
0D0D1                           ChkForFall:
0D0D1 A9 2D                            lda #$2d                    ;check if platform is above a certain point
0D0D3 D5 C1                            cmp Enemy_Y_Position,x
0D0D5 90 0F                            bcc ChkOtherForFall         ;if not, branch elsewhere
0D0D7 C4 00                            cpy $00                     ;if collision flag is set to same value as
0D0D9 F0 08                            beq MakePlatformFall        ;enemy state, branch to make platforms fall
0D0DB 18                               clc
0D0DC 69 02                            adc #$02                    ;otherwise add 2 pixels to vertical position
0D0DE 95 C1                            sta Enemy_Y_Position,x      ;of current platform and branch elsewhere
0D0E0 4C 38 D2                         jmp StopPlatforms           ;to make platforms stop
0D0E3                           
0D0E3                           MakePlatformFall:
0D0E3 4C 1F D2                         jmp InitPlatformFall        ;make platforms fall
0D0E6                           
0D0E6                           ChkOtherForFall:
0D0E6 D9 C1 00                         cmp Enemy_Y_Position,y      ;check if other platform is above a certain point
0D0E9 90 0D                            bcc ChkToMoveBalPlat        ;if not, branch elsewhere
0D0EB E4 00                            cpx $00                     ;if collision flag is set to same value as
0D0ED F0 F4                            beq MakePlatformFall        ;enemy state, branch to make platforms fall
0D0EF 18                               clc
0D0F0 69 02                            adc #$02                    ;otherwise add 2 pixels to vertical position
0D0F2 99 C1 00                         sta Enemy_Y_Position,y      ;of other platform and branch elsewhere
0D0F5 4C 38 D2                         jmp StopPlatforms           ;jump to stop movement and do not return
0D0F8                           
0D0F8                           ChkToMoveBalPlat:
0D0F8 8C 2A 60                          sty temp6
0D0FB B5 C1                     		lda Enemy_Y_Position,x      ;save vertical position to stack
0D0FD 48                                pha
0D0FE BD A2 03                          lda PlatformCollisionFlag,x ;get collision flag
0D101 10 18                             bpl ColFlg                  ;branch if collision
0D103 BD 34 04                          lda Enemy_Y_MoveForce,x
0D106 18                                clc                         ;add $05 to contents of moveforce, whatever they be
0D107 69 05                             adc #$05
0D109 85 00                             sta $00                     ;store here
0D10B B5 92                             lda Enemy_Y_Speed,x
0D10D 69 00                             adc #$00                    ;add carry to vertical speed
0D10F 30 1A                             bmi PlatDn                  ;branch if moving downwards
0D111 D0 0C                             bne PlatUp                  ;branch elsewhere if moving upwards
0D113 A5 00                             lda $00
0D115 C9 0B                             cmp #$0b                    ;check if there's still a little force left
0D117 90 0C                             bcc PlatSt                  ;if not enough, branch to stop movement
0D119 B0 04                             bcs PlatUp                  ;otherwise keep branch to move upwards
0D11B C5 08                     ColFlg: cmp ObjectOffset            ;if collision flag matches
0D11D F0 0C                             beq PlatDn                  ;current enemy object offset, branch
0D11F 20 BC AB                  PlatUp: jsr MovePlatformUp          ;do a sub to move upwards
0D122 4C 2E D1                          jmp DoOtherPlatform         ;jump ahead to remaining code
0D125 20 38 D2                  PlatSt: jsr StopPlatforms           ;do a sub to stop movement
0D128 4C 2E D1                          jmp DoOtherPlatform         ;jump ahead to remaining code
0D12B 20 B9 AB                  PlatDn: jsr MovePlatformDown        ;do a sub to move downwards
0D12E                           
0D12E                           DoOtherPlatform:
0D12E B4 1C                     	   ldy Enemy_State,x           ;get offset of other platform
0D130 68                               pla                         ;get old vertical coordinate from stack
0D131 38                               sec
0D132 F5 C1                            sbc Enemy_Y_Position,x      ;get difference of old vs. new coordinate
0D134 18                               clc
0D135 79 C1 00                         adc Enemy_Y_Position,y      ;add difference to vertical coordinate of other
0D138 99 C1 00                         sta Enemy_Y_Position,y      ;platform to move it in the opposite direction
0D13B BD A2 03                         lda PlatformCollisionFlag,x ;if no collision, skip this part here
0D13E 30 04                            bmi DrawEraseRope
0D140 AA                               tax                         ;put offset which collision occurred here
0D141 20 6A DE                         jsr PositionPlayerOnVPlat   ;and use it to position player accordingly
0D144                           
0D144                           DrawEraseRope:
0D144 A4 08                              ldy ObjectOffset            ;get enemy object offset
0D146 B9 92 00                           lda Enemy_Y_Speed,y         ;check to see if current platform is
0D149 19 34 04                           ora Enemy_Y_MoveForce,y     ;moving at all
0D14C F0 77                              beq ExitRp                  ;if not, skip all of this and branch to leave
0D14E AE 00 64                           ldx VRAM_Buffer1_Offset     ;get vram buffer offset
0D151 E0 20                              cpx #$20                    ;if offset beyond a certain point, go ahead
0D153 B0 70                              bcs ExitRp                  ;and skip this, branch to leave
0D155 B9 92 00                           lda Enemy_Y_Speed,y
0D158 48                                 pha                         ;save two copies of vertical speed to stack
0D159 48                                 pha
0D15A 20 C8 D1                           jsr SetupPlatformRope       ;do a sub to figure out where to put new bg tiles
0D15D A5 01                              lda $01                     ;write name table address to vram buffer
0D15F 9D 01 64                           sta VRAM_Buffer1,x          ;first the high byte, then the low
0D162 A5 00                              lda $00
0D164 9D 02 64                           sta VRAM_Buffer1+1,x
0D167 A9 02                              lda #$02                    ;set length for 2 bytes
0D169 9D 03 64                           sta VRAM_Buffer1+2,x
0D16C B9 92 00                           lda Enemy_Y_Speed,y         ;if platform moving upwards, branch 
0D16F 30 0D                              bmi EraseR1                 ;to do something else
0D171 A9 A2                              lda #$a2
0D173 9D 04 64                           sta VRAM_Buffer1+3,x        ;otherwise put tile numbers for left
0D176 A9 A3                              lda #$a3                    ;and right sides of rope in vram buffer
0D178 9D 05 64                           sta VRAM_Buffer1+4,x
0D17B 4C 86 D1                           jmp OtherRope               ;jump to skip this part
0D17E A9 24                     EraseR1: lda #$24                    ;put blank tiles in vram buffer
0D180 9D 04 64                           sta VRAM_Buffer1+3,x        ;to erase rope
0D183 9D 05 64                           sta VRAM_Buffer1+4,x
0D186                           
0D186                           OtherRope:
0D186 B9 1C 00                           lda Enemy_State,y           ;get offset of other platform from state
0D189 A8                                 tay                         ;use as Y here
0D18A 68                                 pla                         ;pull second copy of vertical speed from stack
0D18B 49 FF                              eor #$ff                    ;invert bits to reverse speed
0D18D 20 C8 D1                           jsr SetupPlatformRope       ;do sub again to figure out where to put bg tiles  
0D190 A5 01                              lda $01                     ;write name table address to vram buffer
0D192 9D 06 64                           sta VRAM_Buffer1+5,x        ;this time we're doing putting tiles for
0D195 A5 00                              lda $00                     ;the other platform
0D197 9D 07 64                           sta VRAM_Buffer1+6,x
0D19A A9 02                              lda #$02
0D19C 9D 08 64                           sta VRAM_Buffer1+7,x        ;set length again for 2 bytes
0D19F 68                                 pla                         ;pull first copy of vertical speed from stack
0D1A0 10 0D                              bpl EraseR2                 ;if moving upwards (note inversion earlier), skip this
0D1A2 A9 A2                              lda #$a2
0D1A4 9D 09 64                           sta VRAM_Buffer1+8,x        ;otherwise put tile numbers for left
0D1A7 A9 A3                              lda #$a3                    ;and right sides of rope in vram
0D1A9 9D 0A 64                           sta VRAM_Buffer1+9,x        ;transfer buffer
0D1AC 4C B7 D1                           jmp EndRp                   ;jump to skip this part
0D1AF A9 24                     EraseR2: lda #$24                    ;put blank tiles in vram buffer
0D1B1 9D 09 64                           sta VRAM_Buffer1+8,x        ;to erase rope
0D1B4 9D 0A 64                           sta VRAM_Buffer1+9,x
0D1B7 A9 00                     EndRp:   lda #$00                    ;put null terminator at the end
0D1B9 9D 0B 64                           sta VRAM_Buffer1+10,x
0D1BC AD 00 64                           lda VRAM_Buffer1_Offset     ;add ten bytes to the vram buffer offset
0D1BF 18                                 clc                         ;and store
0D1C0 69 0A                              adc #10
0D1C2 8D 00 64                           sta VRAM_Buffer1_Offset
0D1C5 A6 08                     ExitRp:  ldx ObjectOffset            ;get enemy object buffer offset and leave
0D1C7 60                                 rts
0D1C8                           
0D1C8                           SetupPlatformRope:
0D1C8 48                                pha                     ;save second/third copy to stack
0D1C9 B9 79 00                          lda Enemy_X_Position,y  ;get horizontal coordinate
0D1CC 18                                clc
0D1CD 69 08                             adc #$08                ;add eight pixels
0D1CF AE CC 06                          ldx SecondaryHardMode   ;if secondary hard mode flag set,
0D1D2 D0 03                             bne GetLRp              ;use coordinate as-is
0D1D4 18                                clc
0D1D5 69 10                             adc #$10                ;otherwise add sixteen more pixels
0D1D7 48                        GetLRp: pha                     ;save modified horizontal coordinate to stack
0D1D8 B9 60 00                          lda Enemy_PageLoc,y
0D1DB 69 00                             adc #$00                ;add carry to page location
0D1DD 85 02                             sta $02                 ;and save here
0D1DF 68                                pla                     ;pull modified horizontal coordinate
0D1E0 29 F0                             and #%11110000          ;from the stack, mask out low nybble
0D1E2 4A                                lsr                     ;and shift three bits to the right
0D1E3 4A                                lsr
0D1E4 4A                                lsr
0D1E5 85 00                             sta $00                 ;store result here as part of name table low byte
0D1E7 B6 C1                             ldx Enemy_Y_Position,y  ;get vertical coordinate
0D1E9 68                                pla                     ;get second/third copy of vertical speed from stack
0D1EA 10 05                             bpl GetHRp              ;skip this part if moving downwards or not at all
0D1EC 8A                                txa
0D1ED 18                                clc
0D1EE 69 08                             adc #$08                ;add eight to vertical coordinate and
0D1F0 AA                                tax                     ;save as X
0D1F1 8A                        GetHRp: txa                     ;move vertical coordinate to A
0D1F2 AE 00 64                          ldx VRAM_Buffer1_Offset ;get vram buffer offset
0D1F5 0A                                asl
0D1F6 2A                                rol                     ;rotate d7 to d0 and d6 into carry
0D1F7 48                                pha                     ;save modified vertical coordinate to stack
0D1F8 2A                                rol                     ;rotate carry to d0, thus d7 and d6 are at 2 LSB
0D1F9 29 03                             and #%00000011          ;mask out all bits but d7 and d6, then set
0D1FB 09 20                             ora #%00100000          ;d5 to get appropriate high byte of name table
0D1FD 85 01                             sta $01                 ;address, then store
0D1FF A5 02                             lda $02                 ;get saved page location from earlier
0D201 29 01                             and #$01                ;mask out all but LSB
0D203 0A                                asl
0D204 0A                                asl                     ;shift twice to the left and save with the
0D205 05 01                             ora $01                 ;rest of the bits of the high byte, to get
0D207 85 01                             sta $01                 ;the proper name table and the right place on it
0D209 68                                pla                     ;get modified vertical coordinate from stack
0D20A 29 E0                             and #%11100000          ;mask out low nybble and LSB of high nybble
0D20C 18                                clc
0D20D 65 00                             adc $00                 ;add to horizontal part saved here
0D20F 85 00                             sta $00                 ;save as name table low byte
0D211 B9 C1 00                          lda Enemy_Y_Position,y
0D214 C9 E8                             cmp #$e8                ;if vertical position not below the
0D216 90 06                             bcc ExPRp               ;bottom of the screen, we're done, branch to leave
0D218 A5 00                             lda $00
0D21A 29 BF                             and #%10111111          ;mask out d6 of low byte of name table address
0D21C 85 00                             sta $00
0D21E 60                        ExPRp:  rts                     ;leave!
0D21F                           
0D21F                           InitPlatformFall:
0D21F 98                              tya                        ;move offset of other platform from Y to X
0D220 AA                              tax
0D221 20 63 B0                        jsr GetEnemyOffscreenBits  ;get offscreen bits
0D224 A9 05                           lda #$05
0D226 20 02 DB                        jsr SetupFloateyNumber     ;award 1000 points to player
0D229 AD AD 03                        lda Player_Rel_XPos
0D22C 9D 17 01                        sta FloateyNum_X_Pos,x     ;put floatey number coordinates where player is
0D22F A5 C0                           lda Player_Y_Position
0D231 9D 1E 01                        sta FloateyNum_Y_Pos,x
0D234 A9 01                           lda #$01                   ;set moving direction as flag for
0D236 95 43                           sta Enemy_MovingDir,x      ;falling platforms
0D238                           
0D238                           StopPlatforms:
0D238 A9 00                           lda #$00                    ;initialize vertical speed
0D23A 95 92                           sta Enemy_Y_Speed,x         ;and movement force
0D23C 9D 34 04                        sta Enemy_Y_MoveForce,x     ;initialize vertical speed and low byte
0D23F 99 92 00                        sta Enemy_Y_Speed,y      	  ;for both platforms and leave
0D242 99 34 04                        sta Enemy_Y_MoveForce,y
0D245 60                              rts
0D246                           
0D246                           PlatformFall:
0D246 98                              tya                         ;save offset for other platform to stack
0D247 48                              pha
0D248 20 11 AC                        jsr MoveFallingPlatform     ;make current platform fall
0D24B 68                              pla
0D24C AA                              tax                         ;pull offset from stack and save to X
0D24D 20 11 AC                        jsr MoveFallingPlatform     ;make other platform fall
0D250 A6 08                           ldx ObjectOffset
0D252 BD A2 03                        lda PlatformCollisionFlag,x ;if player not standing on either platform,
0D255 30 04                           bmi ExPF                    ;skip this part
0D257 AA                              tax                         ;transfer collision flag offset as offset to X
0D258 20 6A DE                        jsr PositionPlayerOnVPlat   ;and position player appropriately
0D25B A6 08                     ExPF: ldx ObjectOffset            ;get enemy object buffer offset and leave
0D25D 60                              rts
0D25E                           
0D25E                           ;--------------------------------
0D25E                           
0D25E                           YMovingPlatform:
0D25E B5 92                             lda Enemy_Y_Speed,x          ;if platform moving up or down, skip ahead to
0D260 1D 34 04                          ora Enemy_Y_MoveForce,x      ;check on other position
0D263 D0 15                             bne ChkYCenterPos
0D265 9D 17 04                          sta Enemy_YMF_Dummy,x        ;initialize dummy variable
0D268 B5 C1                             lda Enemy_Y_Position,x
0D26A DD 01 04                          cmp YPlatformTopYPos,x       ;if current vertical position => top position, branch
0D26D B0 0B                             bcs ChkYCenterPos            ;ahead of all this
0D26F A5 09                             lda FrameCounter
0D271 29 07                             and #%00000111               ;check for every eighth frame
0D273 D0 02                             bne SkipIY
0D275 F6 C1                             inc Enemy_Y_Position,x       ;increase vertical position every eighth frame
0D277 4C 89 D2                  SkipIY: jmp ChkYPCollision           ;skip ahead to last part
0D27A                           
0D27A                           ChkYCenterPos:
0D27A B5 C1                             lda Enemy_Y_Position,x       ;if current vertical position < central position, branch
0D27C D5 4A                             cmp YPlatformCenterYPos,x    ;to slow ascent/move downwards
0D27E 90 06                             bcc YMDown
0D280 20 BC AB                          jsr MovePlatformUp           ;otherwise start slowing descent/moving upwards
0D283 4C 89 D2                          jmp ChkYPCollision
0D286 20 B9 AB                  YMDown: jsr MovePlatformDown         ;start slowing ascent/moving downwards
0D289                           
0D289                           ChkYPCollision:
0D289 BD A2 03                         lda PlatformCollisionFlag,x  ;if collision flag not set here, branch
0D28C 30 03                            bmi ExYPl                    ;to leave
0D28E 4C 6A DE                         jmp PositionPlayerOnVPlat    ;otherwise position player appropriately
0D291 60                        ExYPl: rts                          ;leave
0D292                           
0D292                           ;--------------------------------
0D292                           ;$00 - used as adder to position player horizontally
0D292                           
0D292                           XMovingPlatform:
0D292 A9 0E                           lda #$0e                     ;load preset maximum value for secondary counter
0D294 20 31 C7                        jsr XMoveCntr_Platform       ;do a sub to increment counters for movement
0D297 20 50 C7                        jsr MoveWithXMCntrs          ;do a sub to move platform accordingly, and return value
0D29A BD A2 03                        lda PlatformCollisionFlag,x  ;if no collision with player,
0D29D 30 34                           bmi ExXMP                    ;branch ahead to leave
0D29F                           
0D29F                           PositionPlayerOnHPlat:
0D29F A9 00                              lda #$00
0D2A1 8D 84 04                  		 sta StompChainCounter
0D2A4 AD 90 04                  		 lda Player_CollisionBits
0D2A7 29 01                     		 and #$01
0D2A9 F0 28                     		 beq ExXMP
0D2AB A5 78                     		 lda Player_X_Position
0D2AD 18                                 clc                       ;add saved value from second subroutine to
0D2AE 65 00                              adc $00                   ;current player's position to position
0D2B0 85 78                              sta Player_X_Position     ;player accordingly in horizontal position
0D2B2 A5 5F                     		 lda Player_PageLoc        ;get player's page location
0D2B4 A4 00                              ldy $00                   ;check to see if saved value here is positive or negative
0D2B6 30 05                              bmi PPHSubt               ;if negative, branch to subtract
0D2B8 69 00                              adc #$00                  ;otherwise add carry to page location
0D2BA 4C BF D2                           jmp SetPVar               ;jump to skip subtraction
0D2BD E9 00                     PPHSubt: sbc #$00                  ;subtract borrow from page location
0D2BF 85 5F                     SetPVar: sta Player_PageLoc        ;save result to player's page location
0D2C1 8C A1 03                           sty Platform_X_Scroll     ;put saved value from second sub here to be used later
0D2C4 A5 78                     		 lda Player_X_Position
0D2C6 18                        		 clc
0D2C7 69 01                     		 adc #$01
0D2C9 CD 1C 07                  		 cmp ScreenLeft_X_Pos
0D2CC D0 02                     		 bne +
0D2CE E6 78                     		 inc Player_X_Position
0D2D0 4C 6A DE                  +:       jmp PositionPlayerOnVPlat ;position player vertically and appropriately
0D2D3 60                        ExXMP:   rts                       ;and we are done here
0D2D4                           
0D2D4                           ;--------------------------------
0D2D4                           
0D2D4                           DropPlatform:
0D2D4 BD A2 03                         lda PlatformCollisionFlag,x  ;if no collision between platform and player
0D2D7 30 FA                            bmi ExXMP                    ;occurred, just leave without moving anything
0D2D9 20 D8 AB                         jsr MoveDropPlatform         ;otherwise do a sub to move platform down very quickly
0D2DC 4C 6A DE                         jmp PositionPlayerOnVPlat    ;do a sub to position player appropriately
0D2DF                           
0D2DF                           ;--------------------------------
0D2DF                           ;$00 - residual value from sub
0D2DF                           
0D2DF                           RightPlatform:
0D2DF E8                               inx                         ;increment offset for enemy offset
0D2E0 20 5C AC                         jsr MoveObjectHorizontally  ;position object horizontally according to
0D2E3 A6 08                            ldx ObjectOffset            ;counters, return with saved value in A,
0D2E5                                  ;sta $00                       ;store saved value here (residual code)
0D2E5 BD A2 03                         lda PlatformCollisionFlag,x   ;check collision flag, if no collision between player
0D2E8 30 E9                            bmi ExXMP                     ;and platform, branch ahead, leave speed unaltered
0D2EA A9 10                            lda #$10
0D2EC 95 4A                            sta Enemy_X_Speed,x           ;otherwise set new speed (gets moving if motionless)
0D2EE 4C 9F D2                         jmp PositionPlayerOnHPlat     ;use saved value from earlier sub to position player
0D2F1                           
0D2F1                           ;--------------------------------
0D2F1                           
0D2F1                           MoveLargeLiftPlat:
0D2F1 20 FD D2                        jsr MoveLiftPlatforms  ;execute common to all large and small lift platforms
0D2F4 4C 89 D2                        jmp ChkYPCollision     ;branch to position player correctly
0D2F7                           
0D2F7                           MoveSmallPlatform:
0D2F7 20 FD D2                        jsr MoveLiftPlatforms      ;execute common to all large and small lift platforms
0D2FA 4C 13 D3                        jmp ChkSmallPlatCollision  ;branch to position player correctly
0D2FD                           
0D2FD                           MoveLiftPlatforms:
0D2FD AD 47 07                        lda TimerControl         ;if master timer control set, skip all of this
0D300 D0 19                           bne ExLiftP              ;and branch to leave
0D302 BD 17 04                        lda Enemy_YMF_Dummy,x
0D305 18                              clc                      ;add contents of movement amount to whatever's here
0D306 7D 34 04                        adc Enemy_Y_MoveForce,x
0D309 9D 17 04                        sta Enemy_YMF_Dummy,x
0D30C B5 C1                           lda Enemy_Y_Position,x   ;add whatever vertical speed is set to current
0D30E 75 92                           adc Enemy_Y_Speed,x      ;vertical position plus carry to move up or down
0D310 95 C1                           sta Enemy_Y_Position,x   ;and then leave
0D312 60                              rts
0D313                           
0D313                           ChkSmallPlatCollision:
0D313 BD A2 03                           lda PlatformCollisionFlag,x ;get bounding box counter saved in collision flag
0D316 F0 03                              beq ExLiftP                 ;if none found, leave player position alone
0D318 4C 62 DE                           jmp PositionPlayerOnS_Plat  ;use to position player correctly
0D31B 60                        ExLiftP: rts                         ;then leave
0D31C                           
0D31C                           ;-------------------------------------------------------------------------------------
0D31C                           ;$00 - page location of extended left boundary
0D31C                           ;$01 - extended left boundary position
0D31C                           ;$02 - page location of extended right boundary
0D31C                           ;$03 - extended right boundary position
0D31C 30 80                     OffscreenXoffset: .db $30, $80
0D31E                           OffscreenBoundsCheck:
0D31E B5 15                     		  lda Enemy_ID,x          ;check for cheep-cheep object
0D320 C9 14                               cmp #FlyingCheepCheep   ;branch to leave if found
0D322 F0 F7                               beq ExLiftP
0D324 A0 00                     		  ldy #$00
0D326 C9 2E                     		  cmp #PowerUpObject
0D328 D0 01                     		  bne +
0D32A C8                        		  iny
0D32B                           +:        
0D32B AD 1C 07                  		  lda ScreenLeft_X_Pos    ;get horizontal coordinate for left side of screen
0D32E 38                        		  sec
0D32F F9 1C D3                  		  sbc OffscreenXoffset,y  ;subtract 72 pixels regardless of enemy object
0D332 85 01                               sta $01                 ;store result here
0D334 AD 1A 07                            lda ScreenLeft_PageLoc
0D337 E9 00                               sbc #$00                ;subtract borrow from page location of left side
0D339 85 00                               sta $00                 ;store result here
0D33B AD 1D 07                            lda ScreenRight_X_Pos   ;add 72 pixels to the right side horizontal coordinate
0D33E 18                        		  clc
0D33F 79 1C D3                            adc OffscreenXoffset,y
0D342 85 03                               sta $03                 ;store result here
0D344 AD 1B 07                            lda ScreenRight_PageLoc     
0D347 69 00                               adc #$00                ;then add the carry to the page location
0D349 85 02                               sta $02                 ;and store result here
0D34B B5 79                               lda Enemy_X_Position,x  ;compare horizontal coordinate of the enemy object
0D34D C5 01                               cmp $01                 ;to modified horizontal left edge coordinate to get carry
0D34F B5 60                               lda Enemy_PageLoc,x
0D351 E5 00                               sbc $00                 ;then subtract it from the page coordinate of the enemy object
0D353 30 0A                               bmi TooFar              ;if enemy object is too far left, branch to erase it
0D355 B5 79                               lda Enemy_X_Position,x  ;compare horizontal coordinate of the enemy object
0D357 C5 03                               cmp $03                 ;to modified horizontal right edge coordinate to get carry
0D359 B5 60                               lda Enemy_PageLoc,x
0D35B E5 02                               sbc $02                 ;then subtract it from the page coordinate of the enemy object
0D35D 30 12                               bmi ExScrnBd            ;if enemy object is on the screen, leave, do not erase enemy
0D35F BC C4 63                  TooFar:   ldy SavedOffset,x
0D362 B9 AC 62                  		  lda Saved_isDefeated,y
0D365 C9 02                     		  cmp #$02
0D367 F0 05                     		  beq +
0D369 A9 00                     		  lda #$00
0D36B 99 AC 62                  		  sta Saved_isDefeated,y
0D36E 4C 1A C5                  +:		  jmp EraseEnemyObject    ;erase object if necessary
0D371 60                        ExScrnBd: rts                     ;leave
0D372                           ExitFBallEnemy2:
0D372 A6 08                           ldx ObjectOffset                 ;get original fireball offset and leave
0D374 60                              rts
0D375                           ;-------------------------------------------------------------------------------------
0D375                           ;-------------------------------------------------------------------------------------
0D375                           ;$01 - enemy buffer offset
0D375                           
0D375                           FireballEnemyCollision:
0D375 B5 22                           lda Fireball_State,x  ;check to see if fireball state is set at all
0D377 F0 F9                           beq ExitFBallEnemy2   ;branch to leave if not
0D379 30 F7                           bmi ExitFBallEnemy2    ;branch to leave also if d7 in state is set
0D37B A9 10                     	  lda #%00010000
0D37D 8D 51 60                        sta tempA
0D380 A5 09                           lda FrameCounter
0D382 4A                              lsr                   ;get LSB of frame counter
0D383 B0 7D                           bcs ExitFBallEnemy    ;branch to leave if set (do routine every other frame)
0D385 8A                              txa
0D386 0A                              asl                   ;multiply fireball offset by four
0D387 0A                              asl
0D388 18                              clc
0D389 69 1C                           adc #$1c              ;then add $1c or 28 bytes to it
0D38B A8                              tay                   ;to use fireball's bounding box coordinates 
0D38C A2 05                           ldx #$05
0D38E                           
0D38E                           FireballEnemyCDLoop:
0D38E 86 01                                stx $01                     ;store enemy object offset here
0D390 98                                   tya
0D391 48                                   pha                         ;push fireball offset to the stack
0D392 B5 1C                                lda Enemy_State,x
0D394 29 20                                and #%00100000              ;check to see if d5 is set in enemy state
0D396 D0 61                                bne NoFToECol               ;if so, skip to next enemy slot
0D398 B5 0F                                lda Enemy_Flag,x            ;check to see if buffer flag is set
0D39A F0 5D                                beq NoFToECol               ;if not, skip to next enemy slot
0D39C B5 15                                lda Enemy_ID,x              ;check enemy identifier
0D39E C9 40                     		   cmp #Sign
0D3A0 F0 57                     		   beq NoFToECol
0D3A2 C9 2E                     		   cmp #PowerUpObject
0D3A4 F0 53                     		   beq NoFToECol
0D3A6 C9 30                     		   cmp #$30
0D3A8 F0 4F                     		   beq NoFToECol
0D3AA C9 24                                cmp #$24
0D3AC 90 08                                bcc GoombaDie               ;if < $24, branch to check further
0D3AE C9 26                     		   cmp #$26
0D3B0 F0 04                     		   beq GoombaDie
0D3B2 C9 2B                                cmp #$2b
0D3B4 90 43                                bcc NoFToECol               ;if in range $24-$2a, skip to next enemy slot
0D3B6 C9 06                     GoombaDie: cmp #Goomba                 ;check for goomba identifier
0D3B8 F0 04                                beq +
0D3BA C9 09                     		   cmp #FastGoomba
0D3BC D0 06                     		   bne NotGoomba               ;if not found, continue with code
0D3BE B5 1C                     +:         lda Enemy_State,x           ;otherwise check for defeated state
0D3C0 C9 02                                cmp #$02                    ;if stomped or otherwise defeated,
0D3C2 B0 35                                bcs NoFToECol               ;skip to next enemy slot
0D3C4 BD D8 03                  NotGoomba: lda EnemyOffscrBitsMasked,x ;if any masked offscreen bits set,
0D3C7 D0 30                                bne NoFToECol               ;skip to next enemy slot
0D3C9 8A                                   txa
0D3CA 0A                                   asl                         ;otherwise multiply enemy offset by four
0D3CB 0A                                   asl
0D3CC 18                                   clc
0D3CD 69 04                                adc #$04                    ;add 4 bytes to it
0D3CF AA                                   tax                         ;to use enemy's bounding box coordinates
0D3D0 20 11 B6                             jsr SprObjectCollisionCore  ;do fireball-to-enemy collision detection
0D3D3 A6 08                                ldx ObjectOffset            ;return fireball's original offset
0D3D5 90 22                                bcc NoFToECol               ;if carry clear, no collision, thus do next enemy slot
0D3D7 A9 80                                lda #%10000000
0D3D9 95 22                                sta Fireball_State,x        ;set d7 in enemy state
0D3DB A6 01                                ldx $01                     ;get enemy offset
0D3DD 20 10 D4                             jsr HandleEnemyFBallCol     ;jump to handle fireball to enemy collision
0D3E0 B5 15                     		   lda Enemy_ID,x
0D3E2 C9 0D                     		   cmp #PiranhaPlant
0D3E4 F0 0C                     		   beq +
0D3E6 C9 22                     		   cmp #RUDPiranhaPlant
0D3E8 F0 08                     	       beq +
0D3EA C9 20                     	       cmp #RedPiranhaPlant
0D3EC F0 04                     	       beq +
0D3EE C9 21                     	   	   cmp #UDPiranhaPlant
0D3F0 D0 07                     		   bne NoFToECol
0D3F2 A9 FF                     +:		   lda #$ff
0D3F4 95 C1                     	       sta Enemy_Y_Position,x
0D3F6 4C F9 D3                  		   jmp NoFToECol
0D3F9 A6 01                     NoFToECol: ldx $01
0D3FB 68                        		   pla                         ;pull fireball offset from stack
0D3FC A8                                   tay                         ;put it in Y
0D3FD A6 01                                ldx $01                     ;get enemy object offset
0D3FF CA                                   dex                         ;decrement it
0D400 10 8C                                bpl FireballEnemyCDLoop     ;loop back until collision detection done on all enemies
0D402                           
0D402                           ExitFBallEnemy:
0D402 A6 08                           ldx ObjectOffset                 ;get original fireball offset and leave
0D404                           testt:
0D404 60                              rts
0D405                           
0D405                           BowserIdentities:
0D405 06 00 02 12 11 07 05 2D         .db Goomba, GreenKoopa, BuzzyBeetle, Spiny, Lakitu, Bloober, HammerBro, Bowser
0D40D                           ChkOtherEnemies1:
0D40D 4C EC D4                  	  jmp ChkOtherEnemies
0D410                           	  
0D410                           HandleEnemyFBallCol:
0D410 A9 01                           lda #$01                     ;get coordinates of enemy object 
0D412 A8                              tay
0D413 86 00                     	  stx $00                     ;store value to add to A here
0D415 18                        	  clc
0D416 65 00                           adc $00                     ;add A to value stored
0D418 AA                              tax                         ;use as enemy offset
0D419 B5 C0                           lda SprObject_Y_Position,x  ;load vertical coordinate lo
0D41B 99 B8 03                  	  sta SprObject_Rel_YPos,y    ;store here
0D41E B5 78                     	  lda SprObject_X_Position,x  ;load horizontal coordinate
0D420 38                        	  sec                         ;subtract left edge coordinate
0D421 ED 1C 07                  	  sbc ScreenLeft_X_Pos
0D424 99 AD 03                  	  sta SprObject_Rel_XPos,y    ;store result here
0D427 A6 01                           ldx $01                    ;get current enemy object offset
0D429 B5 0F                           lda Enemy_Flag,x           ;check buffer flag for d7 set
0D42B 10 0B                           bpl ChkBuzzyBeetle         ;branch if not set to continue
0D42D 29 0F                           and #%00001111             ;otherwise mask out high nybble and
0D42F AA                              tax                        ;use low nybble as enemy offset
0D430 B5 15                           lda Enemy_ID,x
0D432 C9 2D                           cmp #Bowser                ;check enemy identifier for bowser
0D434 F0 0C                           beq HurtBowser             ;branch if found
0D436 A6 01                           ldx $01                    ;otherwise retrieve current enemy offset
0D438                           
0D438                           ChkBuzzyBeetle:
0D438 B5 15                           lda Enemy_ID,x
0D43A C9 02                           cmp #BuzzyBeetle           ;check for buzzy beetle
0D43C F0 C6                           beq testt                  ;branch if found to leave (buzzy beetles fireproof)
0D43E C9 2D                           cmp #Bowser                ;check for bowser one more time (necessary if d7 of flag was clear)
0D440 D0 CB                           bne ChkOtherEnemies1       ;if not found, branch to check other enemies
0D442                           	  
0D442                           HurtBowser:
0D442 AD 35 60                  		  lda BowserKilled
0D445 D0 BD                     		  bne testt
0D447 AD 20 7E                  		  lda BowserGotHit
0D44A D0 06                     		  bne +
0D44C CE 83 04                  		  dec BowserHitPoints
0D44F EE 20 7E                  		  inc BowserGotHit
0D452 8E 2B 60                  +:		  stx temp7
0D455 AE 00 64                  		  ldx VRAM_Buffer1_Offset
0D458 A9 22                     		  lda #$22
0D45A 9D 01 64                  		  sta VRAM_Buffer1,x
0D45D A9 C0                     		  lda #$c0
0D45F 9D 02 64                  		  sta VRAM_Buffer1+1,x
0D462 A9 05                     		  lda #$05
0D464 9D 03 64                  		  sta VRAM_Buffer1+2,x
0D467 A9 11                     		  lda #$11
0D469 9D 04 64                  		  sta VRAM_Buffer1+3,x
0D46C A9 19                     		  lda #$19
0D46E 9D 05 64                  		  sta VRAM_Buffer1+4,x
0D471 A9 28                     		  lda #$28
0D473 9D 06 64                  		  sta VRAM_Buffer1+5,x
0D476 A9 00                     		  lda #$00
0D478 9D 07 64                  		  sta VRAM_Buffer1+6,x
0D47B AD 83 04                  	      lda BowserHitPoints       ;otherwise, check number of pts
0D47E A8                        		  tay
0D47F                           +
0D47F C9 0A                     	      cmp #10                   ;more than 9 pts?
0D481 90 1E                     	      bcc ++
0D483 E9 0A                     	      sbc #10                   ;if so, subtract 10 and add one to the 10s digit
0D485 A8                        		  tay
0D486 A9 01                     	      lda #$01                  ;instead of showing 100 pts, A0 will show, etc.
0D488 9D 07 64                  	      sta VRAM_Buffer1+6,x
0D48B 98                        		  tya
0D48C                           -
0D48C C9 0A                     	      cmp #10
0D48E 90 11                     	      bcc ++
0D490 E9 0A                     		  sbc #10
0D492 FE 07 64                  	      inc VRAM_Buffer1+6,x
0D495 4C 8C D4                  	      jmp -
0D498 A8                        		  tay
0D499 9D 07 64                  		  sta VRAM_Buffer1+6,x
0D49C 98                        		  tya
0D49D 4C A1 D4                  		  jmp ++
0D4A0                           testtt:   
0D4A0 60                        	      rts
0D4A1                           ++:	      
0D4A1 9D 08 64                  		  sta VRAM_Buffer1+7,x
0D4A4 A9 00                     		  lda #$00
0D4A6 9D 09 64                  		  sta VRAM_Buffer1+8,x
0D4A9 8A                        		  txa
0D4AA 18                        		  clc
0D4AB 69 08                     		  adc #$08
0D4AD 8D 00 64                  		  sta VRAM_Buffer1_Offset
0D4B0 AE 2B 60                  		  ldx temp7
0D4B3 AD 83 04                  		  lda BowserHitPoints
0D4B6 D0 E8                               bne testtt                 ;if bowser still has hit points, branch to leave
0D4B8 A9 01                     		  lda #$01
0D4BA 8D 35 60                  		  sta BowserKilled
0D4BD A9 00                               lda #$00                    ;initialize vertical speed
0D4BF 95 92                               sta Enemy_Y_Speed,x         ;and movement force
0D4C1 9D 34 04                            sta Enemy_Y_MoveForce,x
0D4C4 95 4A                               sta Enemy_X_Speed,x        ;initialize horizontal speed
0D4C6 8D CB 06                            sta EnemyFrenzyBuffer      ;init enemy frenzy buffer
0D4C9 A9 FE                               lda #$fe
0D4CB 95 92                               sta Enemy_Y_Speed,x        ;set vertical speed to make defeated bowser jump a little
0D4CD AD 5F 07                            lda WorldNumber            ;use world number as offset
0D4D0 29 07                     		  and #%00000111
0D4D2 A8                        		  tay
0D4D3 B9 05 D4                            lda BowserIdentities,y     ;get enemy identifier to replace bowser with
0D4D6 95 15                               sta Enemy_ID,x             ;set as new enemy identifier
0D4D8 A9 20                               lda #$20                   ;set A to use starting value for state
0D4DA C0 03                               cpy #$03                   ;check to see if using offset of 3 or more
0D4DC B0 02                               bcs SetDBSte               ;branch if so
0D4DE 09 03                               ora #$03                   ;otherwise add 3 to enemy state
0D4E0 95 1C                     SetDBSte: sta Enemy_State,x          ;set defeated enemy state
0D4E2 A9 80                               lda #Sfx_BowserFall
0D4E4 85 EF                               sta Square2SoundQueue      ;load bowser defeat sound
0D4E6                           
0D4E6                           
0D4E6                           
0D4E6                           ;       jsr SetupVictoryMode
0D4E6                           ;       lda #$03
0D4E6                           ;       sta OperMode_Task   ;secondary mode
0D4E6                           ;       lda #$02
0D4E6                           ;       sta OperMode        ;set primary mode to autoctrl mode
0D4E6                           
0D4E6                           ;        lda #$00
0D4E6                           ;        sta OperMode_Task   ;reset secondary mode
0D4E6                           ;        lda #$02
0D4E6                           ;        sta OperMode        ;set primary mode to autoctrl mode
0D4E6                           ;        lda #$18
0D4E6                           ;        sta Player_X_Speed  ;set horizontal speed and continue to erase axe metatile
0D4E6                           
0D4E6 A6 01                               ldx $01                    ;get enemy offset
0D4E8 A9 0A                               lda #$0a                   ;award 5000 points to player for defeating bowser
0D4EA D0 79                               bne EnemySmackScore        ;unconditional branch to award points
0D4EC                           
0D4EC                           ChkOtherEnemies:
0D4EC C9 08                           cmp #BulletBill_FrenzyVar
0D4EE F0 B0                           beq testtt                 ;branch to leave if bullet bill (frenzy variant) 
0D4F0 C9 0C                           cmp #Podoboo       
0D4F2 F0 AC                           beq testtt                 ;branch to leave if podoboo
0D4F4 C9 13                     	  cmp #BlackParatroopa
0D4F6 F0 A8                     	  beq testtt
0D4F8 C9 19                     	  cmp #RedKoopaShell
0D4FA F0 10                     	  beq ShellOrBlockDefeat
0D4FC C9 21                     	  cmp #UDPiranhaPlant
0D4FE F0 0C                     	  beq ShellOrBlockDefeat
0D500 C9 22                     	  cmp #RUDPiranhaPlant
0D502 F0 08                     	  beq ShellOrBlockDefeat
0D504 C9 20                     	  cmp #RedPiranhaPlant
0D506 F0 04                     	  beq ShellOrBlockDefeat
0D508 C9 15                           cmp #$15       
0D50A B0 7B                           bcs ExHCF                 ;branch to leave if identifier => $15
0D50C                           
0D50C                           ShellOrBlockDefeat:
0D50C AD 04 60                        lda GrabFlag
0D50F F0 06                     	  beq +
0D511 EC 08 60                  	  cpx GrabID
0D514 D0 01                     	  bne +
0D516 60                        	  rts
0D517 B5 15                     +:	  lda Enemy_ID,x            ;check for piranha plant
0D519 C9 13                     	  cmp #BlackParatroopa
0D51B F0 6A                     	  beq ExHCF
0D51D C9 21                     	  cmp #UDPiranhaPlant
0D51F F0 0C                     	  beq +
0D521 C9 22                     	  cmp #RUDPiranhaPlant
0D523 F0 08                     	  beq +
0D525 C9 20                     	  cmp #RedPiranhaPlant
0D527 F0 04                     	  beq +
0D529 C9 0D                           cmp #PiranhaPlant
0D52B D0 03                           bne StnE                  ;branch if not found
0D52D 4C DD BC                  +:    jmp KillPlant
0D530 20 F9 E9                  StnE: jsr ChkToStunEnemies      ;do yet another sub
0D533 B5 1C                           lda Enemy_State,x
0D535 29 1F                           and #%00011111            ;mask out 2 MSB of enemy object's state
0D537 09 20                           ora #%00100000            ;set d5 to defeat enemy and save as new state
0D539 95 1C                           sta Enemy_State,x
0D53B BC C4 63                  	  ldy SavedOffset,x
0D53E A9 02                     	  lda #$02
0D540 99 AC 62                  	  sta Saved_isDefeated,y
0D543 A9 02                           lda #$02                  ;award 200 points by default
0D545 B4 15                           ldy Enemy_ID,x            ;check for hammer bro
0D547 C0 05                           cpy #HammerBro
0D549 D0 02                           bne GoombaPoints          ;branch if not found
0D54B A9 05                           lda #$05                  ;award 1000 points for hammer bro
0D54D                           	  
0D54D                           GoombaPoints:
0D54D C0 11                           cpy #Lakitu
0D54F F0 0D                     	  beq LakituPoints
0D551 C0 06                     	  cpy #Goomba               ;check for goomba
0D553 F0 04                     	  beq +
0D555 C0 09                     	  cpy #FastGoomba
0D557 D0 0C                           bne EnemySmackScore       ;branch if not found
0D559 A9 01                     +:    lda #$01                  ;award 100 points for goomba
0D55B 4C 65 D5                  	  jmp EnemySmackScore
0D55E                           LakituPoints:
0D55E A9 01                     		lda #$01
0D560 8D 59 60                  		sta LakituRespawning
0D563 A9 07                     		lda #$07
0D565                           EnemySmackScore:
0D565 AC 9F 07                  	   ldy StarInvincibleTimer
0D568                           	   ;cpy #$00
0D568 F0 03                     	   beq Her
0D56A 4C 88 D5                  	   jmp StarCollisions
0D56D 9D 10 01                  Her:   sta FloateyNum_Control,x ;set number of points control for floatey numbers
0D570 A9 30                            lda #$30
0D572 9D 2C 01                         sta FloateyNum_Timer,x   ;set timer for floatey numbers
0D575 B5 C1                            lda Enemy_Y_Position,x
0D577 9D 1E 01                         sta FloateyNum_Y_Pos,x   ;set vertical coordinate
0D57A AD AE 03                         lda Enemy_Rel_XPos
0D57D 9D 17 01                         sta FloateyNum_X_Pos,x   ;set horizontal coordinate and leave
0D580 A9 08                     	   lda #Sfx_EnemySmack      ;play smack enemy sound
0D582 0D 51 60                  	   ora tempA
0D585 85 F0                            sta Square1SoundQueue
0D587 60                        ExHCF: rts                      ;and now let's leave
0D588                           
0D588                           StarCollisions:
0D588 EE 1F 60                        inc StarChainCounter     ;increment chain counter for additional enemies
0D58B AD 25 60                  	  lda EnemyDefeatPitch     ;get chain counter for shell
0D58E C9 09                     	  cmp #$09
0D590 F0 03                     	  beq +
0D592 EE 25 60                  	  inc EnemyDefeatPitch
0D595 AD 1F 60                  +:	  lda StarChainCounter
0D598 9D 10 01                        sta FloateyNum_Control,x ;set number of points control for floatey numbers
0D59B A9 30                           lda #$30
0D59D 9D 2C 01                        sta FloateyNum_Timer,x   ;set timer for floatey numbers
0D5A0 B5 C1                           lda Enemy_Y_Position,x
0D5A2 9D 1E 01                        sta FloateyNum_Y_Pos,x   ;set vertical coordinate
0D5A5 AD AE 03                        lda Enemy_Rel_XPos
0D5A8 9D 17 01                        sta FloateyNum_X_Pos,x   ;set horizontal coordinate and leave
0D5AB A9 08                     	  lda #Sfx_EnemySmack      ;play smack enemy sound
0D5AD 85 F0                           sta Square1SoundQueue
0D5AF B5 15                     	  lda Enemy_ID,x
0D5B1 C9 0D                     	  cmp #PiranhaPlant
0D5B3 F0 0C                     	  beq ++
0D5B5 C9 22                     	  cmp #RUDPiranhaPlant
0D5B7 F0 08                     	  beq ++
0D5B9 C9 20                     	  cmp #RedPiranhaPlant
0D5BB F0 04                     	  beq ++
0D5BD C9 21                     	  cmp #UDPiranhaPlant
0D5BF D0 04                     	  bne +
0D5C1 A9 FF                     ++:	  lda #$ff
0D5C3 95 C1                     	  sta Enemy_Y_Position,x
0D5C5 4C 87 D5                  +:	  jmp ExHCF
0D5C8                           ;-------------------------------------------------------------------------------------
0D5C8                           
0D5C8                           PlayerHammerCollision:
0D5C8 A5 09                             lda FrameCounter          ;get frame counter
0D5CA 4A                                lsr                       ;shift d0 into carry
0D5CB 90 3C                             bcc ExPHC                 ;branch to leave if d0 not set to execute every other frame
0D5CD AD 47 07                          lda TimerControl          ;if either master timer control
0D5D0 0D D6 03                          ora Misc_OffscreenBits    ;or any offscreen bits for hammer are set,
0D5D3 D0 34                             bne ExPHC                 ;branch to leave
0D5D5 A5 0E                     		lda GameEngineSubroutine
0D5D7 C9 08                             cmp #$08                    ;if not set to run player control routine
0D5D9 D0 2E                             bne ExPHC                 ;on next frame, branch to leave
0D5DB 8A                                txa
0D5DC 0A                                asl                       ;multiply misc object offset by four
0D5DD 0A                                asl
0D5DE 18                                clc
0D5DF 69 24                             adc #$24                  ;add 36 or $24 bytes to get proper offset
0D5E1 A8                                tay                       ;for misc object bounding box coordinates
0D5E2 20 0F B6                          jsr PlayerCollisionCore   ;do player-to-hammer collision detection
0D5E5 A6 08                             ldx ObjectOffset          ;get misc object offset
0D5E7 90 1B                             bcc ClHCol                ;if no collision, then branch
0D5E9 BD BE 06                          lda Misc_Collision_Flag,x ;otherwise read collision flag
0D5EC D0 1B                             bne ExPHC                 ;if collision flag already set, branch to leave
0D5EE A9 01                             lda #$01
0D5F0 9D BE 06                          sta Misc_Collision_Flag,x ;otherwise set collision flag now
0D5F3 B5 56                             lda Misc_X_Speed,x
0D5F5 49 FF                             eor #$ff                  ;get two's compliment of
0D5F7 18                                clc                       ;hammer's horizontal speed
0D5F8 69 01                             adc #$01
0D5FA 95 56                             sta Misc_X_Speed,x        ;set to send hammer flying the opposite direction
0D5FC AD 9F 07                          lda StarInvincibleTimer   ;if star mario invincibility timer set,
0D5FF D0 08                             bne ExPHC                 ;branch to leave
0D601 4C E2 D8                          jmp InjurePlayer          ;otherwise jump to hurt player, do not return
0D604 A9 00                     ClHCol: lda #$00                  ;clear collision flag
0D606 9D BE 06                          sta Misc_Collision_Flag,x
0D609 60                        ExPHC:  rts
0D60A                           
0D60A                           ;-------------------------------------------------------------------------------------
0D60A                           
0D60A                           HandlePowerUpCollision:
0D60A BD CE 7F                        lda $7fce,x
0D60D 85 39                     	  sta PowerUpType
0D60F 20 1A C5                  	  jsr EraseEnemyObject    ;erase the power-up object
0D612 A9 05                           lda #$05
0D614 20 02 DB                        jsr SetupFloateyNumber  ;award 1000 points to player by default
0D617 A5 39                     	  lda PowerUpType
0D619 C9 03                     	  cmp #$03				  ;if 1-up mushroom, do not play the power-up sound
0D61B F0 04                     	  beq ++
0D61D A0 20                           ldy #Sfx_PowerUpGrab
0D61F 84 EF                           sty Square2SoundQueue   ;play the power-up sound
0D621 C9 00                     ++:   cmp #$00
0D623 F0 25                     	  beq Shroom_PUp
0D625 C9 01                           cmp #$01
0D627 F0 24                           beq Flower_PUp          ;if mushroom or fire flower, branch
0D629 C9 03                           cmp #$03
0D62B F0 39                           beq SetFor1Up           ;if 1-up mushroom, branch               
0D62D AD 9F 07                  	  lda StarInvincibleTimer
0D630 D0 08                     	  bne +
0D632 A9 00                     	  lda #$00
0D634 8D 1F 60                  	  sta StarChainCounter
0D637 8D 25 60                  	  sta EnemyDefeatPitch
0D63A A9 40                     +:    lda #StarPowerMusic     ;into the area music queue, then leave
0D63C 85 EC                           sta AreaMusicQueue
0D63E AC 52 60                  	  ldy HardModeFlag
0D641 B9 48 D6                  	  lda yee,y                ;otherwise set star mario invincibility
0D644 8D 9F 07                        sta StarInvincibleTimer ;timer, and load the star mario music
0D647 60                        	  rts
0D648 23 16                     yee: .db $23, $16
0D64A                           Shroom_PUp:
0D64A 4C 6C D6                  	  jmp UpToSuper
0D64D                           Flower_PUp:
0D64D AD 56 07                        lda PlayerStatus
0D650 C9 02                     	  cmp #$02
0D652 F0 17                     	  beq NoPUp
0D654 A9 02                     	  lda #$02            ;set player status to fiery
0D656 8D 56 07                        sta PlayerStatus
0D659 A9 00                     	  lda #$00
0D65B 8D 54 07                  	  sta PlayerSize
0D65E 20 CD 86                        jsr GetPlayerColors ;run sub to change colors of player
0D661                                 ;ldx ObjectOffset    ;get enemy offset again, and again not necessary
0D661 A9 0C                           lda #$0c            ;set value to be used by subroutine tree (fiery)
0D663 4C 78 D6                        jmp UpToFiery       ;jump to set values accordingly
0D666                           SetFor1Up:
0D666 A9 09                     	  lda #$09                 ;change 1000 points into 1-up instead
0D668 9D 10 01                        sta FloateyNum_Control,x ;and then leave
0D66B                           NoPUp: 
0D66B 60                              rts
0D66C                           UpToSuper:
0D66C AD 56 07                         lda PlayerStatus
0D66F D0 FA                     	   bne NoPUp
0D671 A9 01                     	   lda #$01             ;set player status to super
0D673 8D 56 07                         sta PlayerStatus
0D676 A9 09                            lda #$09             ;set value to be used by subroutine tree (super)
0D678                           UpToFiery:
0D678 A0 00                            ldy #$00         ;set value to be used as new player state
0D67A 4C 1B D9                         jmp SetPRout     ;set values to stop certain things in motionrts
0D67D                           ;--------------------------------
0D67D                           
0D67D                           ResidualXSpdData:
0D67D                           ;      .db $18, $e8
0D67D                           
0D67D                           KickedShellXSpdData:
0D67D 38 C8                           .db $38, $c8
0D67F                           
0D67F                           DemotedKoopaXSpdData:
0D67F 08 F8 0E F1                     .db $08, $f8, $0e, $f1
0D683                           
0D683                           PlayerEnemyCollision:
0D683 AD D0 03                           lda Player_OffscreenBits    ;if player object is completely offscreen
0D686 C9 F0                     		 cmp #$f0                    ;vertically, leave this routine
0D688 B0 09                     		 bcs +
0D68A A4 A7                     		 ldy Player_Y_HighPos        ;if player high vertical byte is not
0D68C 88                        		 dey
0D68D D0 04                     		 bne +
0D68F A5 C0                     		 lda Player_Y_Position   	 ;if on the screen, check to see how far down
0D691 C9 D0                     		 cmp #$d0                    ;the player is vertically
0D693 B0 2F                     +:       bcs NoPECol                 ;if down past 224th pixel row, branch to leave
0D695                           		 ;ldx ObjectOffset
0D695 BD D8 03                  	     lda EnemyOffscrBitsMasked,x ;if current enemy is offscreen by any amount,
0D698 D0 2A                              bne NoPECol                 ;go ahead and branch to leave
0D69A A5 0E                              lda GameEngineSubroutine
0D69C C9 08                              cmp #$08                    ;if not set to run player control routine
0D69E D0 24                              bne NoPECol                 ;on next frame, branch to leave
0D6A0 B5 1C                              lda Enemy_State,x
0D6A2 29 20                              and #%00100000              ;if enemy state has d5 set, branch to leave
0D6A4 D0 1E                              bne NoPECol
0D6A6 A5 08                              lda ObjectOffset         ;get enemy object buffer offset
0D6A8 0A                        		 asl                      ;multiply A by four, then add four
0D6A9 0A                        		 asl                      ;to skip player's bounding box
0D6AA 18                        		 clc
0D6AB 69 04                     		 adc #$04
0D6AD A8                        		 tay                      ;send to Y
0D6AE AD D1 03                  		 lda Enemy_OffscreenBits  ;get offscreen bits for enemy object
0D6B1 29 0F                              and #%00001111           ;save low nybble
0D6B3 C9 0F                              cmp #%00001111           ;check for all bits set
0D6B5 20 0F B6                  		 jsr PlayerCollisionCore     ;do collision detection on player vs. enemy
0D6B8                           		 ;ldy $06                      ;otherwise return with carry clear and Y = $0006
0D6B8 A6 08                              ldx ObjectOffset            ;get enemy object buffer offset
0D6BA B0 09                              bcs CheckForPUpCollision    ;if collision, branch past this part here
0D6BC BD 91 04                           lda Enemy_CollisionBits,x
0D6BF 29 FE                              and #%11111110              ;otherwise, clear d0 of current enemy object's
0D6C1 9D 91 04                           sta Enemy_CollisionBits,x   ;collision bit
0D6C4 60                        NoPECol: rts
0D6C5                           
0D6C5                           CheckForPUpCollision:
0D6C5 B4 15                            ldy Enemy_ID,x
0D6C7 C0 2E                            cpy #PowerUpObject            ;check for power-up object
0D6C9 D0 03                            bne EColl                     ;if not found, branch to next part
0D6CB 4C 0A D6                         jmp HandlePowerUpCollision    ;otherwise, unconditional jump backwards
0D6CE AD 9F 07                  EColl: lda StarInvincibleTimer       ;if star mario invincibility timer expired,
0D6D1 F0 4C                            beq HandlePECollisions        ;perform task here, otherwise kill enemy like
0D6D3 AD 04 60                  	   lda GrabFlag
0D6D6 F0 10                     	   beq +
0D6D8 EC 08 60                  	   cpx GrabID
0D6DB D0 0B                     	   bne +
0D6DD A9 00                     	   lda #$00
0D6DF 8D 04 60                  	   sta GrabFlag
0D6E2 8D 78 60                  	   sta GrabUp
0D6E5 8D 1D 60                  	   sta GrabDown
0D6E8 20 0C D5                  +:	   jsr ShellOrBlockDefeat        ;hit with a shell, or from beneath
0D6EB B5 15                     	   lda Enemy_ID,x
0D6ED C9 0D                     	   cmp #PiranhaPlant
0D6EF F0 0C                     	   beq +
0D6F1 C9 22                     	   cmp #RUDPiranhaPlant
0D6F3 F0 08                     	   beq +
0D6F5 C9 20                     	   cmp #RedPiranhaPlant
0D6F7 F0 04                     	   beq +
0D6F9 C9 21                     	   cmp #UDPiranhaPlant
0D6FB D0 C7                     	   bne NoPECol
0D6FD A9 FF                     +:	   lda #$ff
0D6FF 95 C1                     	   sta Enemy_Y_Position,x
0D701 60                        	   rts
0D702                           KickedShellPtsData:
0D702 08 05 04                        .db $08, $05, $04
0D705                           
0D705                           ShellUp:
0D705 A9 01                     		lda #$01
0D707 8D 78 60                  		sta GrabUp
0D70A                           		;sta GrabDown
0D70A A9 F9                     		lda #$f9
0D70C 95 92                     		sta Enemy_Y_Speed,x
0D70E 9D 34 04                  		sta Enemy_Y_MoveForce,x
0D711 A5 49                     		lda Player_X_Speed
0D713 95 4A                     		sta Enemy_X_Speed,x
0D715 A9 15                     		lda #$15
0D717 8D 2E 60                  	    sta FballCooldown			;set fireball cooldown to avoid killing it just after releasing it 
0D71A A9 18                     		lda #Sfx_EnemySmackOr        ;play smack enemy sound
0D71C 85 F0                             sta Square1SoundQueue
0D71E 60                        		rts
0D71F                           HandlePECollisions:	    			;branch to leave if either is true
0D71F B5 15                     	   lda Enemy_ID,x
0D721 C9 19                     	   cmp #RedKoopaShell
0D723 F0 11                     	   beq +
0D725 C9 05                     	   cmp #$05
0D727 90 0D                     	   bcc +
0D729 AD 04 60                  	   lda GrabFlag
0D72C F0 08                     	   beq +
0D72E EC 08 60                  	   cpx GrabID
0D731 D0 03                     	   bne +
0D733 4C C1 D7                  	   jmp H
0D736                           +:	   
0D736 A9 00                     	   lda #$00
0D738 8D 1F 60                  	   sta StarChainCounter
0D73B C0 40                     	   cpy #Sign
0D73D F0 0F                     	   beq +
0D73F BD 91 04                  	   lda Enemy_CollisionBits,x    ;check enemy collision bits for d0 set
0D742 29 01                            and #%00000001               ;or for being offscreen at all
0D744 D0 7B                            bne H                        ;branch to leave if either is true
0D746 A9 01                     	   lda #$01
0D748 1D 91 04                  	   ora Enemy_CollisionBits,x    ;otherwise set d0 now
0D74B 9D 91 04                  	   sta Enemy_CollisionBits,x
0D74E C0 12                     +:	   cpy #Spiny                   ;branch if spiny
0D750 F0 76                            beq ChkForPlayerInjury2
0D752 C0 13                     	   cpy #BlackParatroopa			;branch if invincible paratroopa
0D754 F0 72                     	   beq ChkForPlayerInjury2
0D756 C0 0D                            cpy #PiranhaPlant            ;branch if piranha plant
0D758 F0 6B                            beq InjurePlayer2
0D75A C0 40                     	   cpy #Sign
0D75C F0 64                     	   beq HandleSignInteraction
0D75E C0 21                     	   cpy #UDPiranhaPlant
0D760 F0 63                     	   beq InjurePlayer2
0D762 C9 22                     	   cmp #RUDPiranhaPlant
0D764 F0 5F                     	   beq InjurePlayer2
0D766 C9 20                     	   cmp #RedPiranhaPlant
0D768 F0 5B                     	   beq InjurePlayer2
0D76A C0 0C                            cpy #Podoboo                 ;branch if podoboo
0D76C F0 57                            beq InjurePlayer2
0D76E AD 04 07                  	   lda SwimmingFlag				;check if swimming or underwater level
0D771 F0 0C                     	   beq +					
0D773 C0 07                     	   cpy #Bloober					;branch if bloober
0D775 F0 4E                     	   beq InjurePlayer2
0D777 C0 0A                     	   cpy #GreyCheepCheep			;branch if grey cheep cheep
0D779 F0 4A                     	   beq InjurePlayer2
0D77B C0 0B                     	   cpy #RedCheepCheep			;branch if red cheep cheep
0D77D F0 46                     	   beq InjurePlayer2
0D77F                           +:
0D77F C0 33                            cpy #BulletBill_CannonVar    ;branch if bullet bill
0D781 F0 45                            beq ChkForPlayerInjury2
0D783 C0 19                     	   cpy #RedKoopaShell
0D785 F0 04                     	   beq +
0D787 C0 15                     	   cpy #$15                     ;branch if object => $15
0D789 B0 3A                            bcs InjurePlayer2
0D78B B5 1C                     +:	   lda Enemy_State,x            ;branch if d7 of enemy state was set
0D78D 30 39                            bmi ChkForPlayerInjury2
0D78F B5 1C                            lda Enemy_State,x            ;mask out all but 3 LSB of enemy state
0D791 29 07                            and #%00000111
0D793 C9 02                            cmp #$02                     ;branch if enemy is in normal or falling state
0D795 90 31                            bcc ChkForPlayerInjury2
0D797 B5 15                     	   lda Enemy_ID,x               ;branch to leave if goomba or fast goomba in defeated state
0D799 C9 06                            cmp #Goomba
0D79B F0 24                            beq H
0D79D C9 09                     	   cmp #FastGoomba				
0D79F F0 20                     	   beq H
0D7A1 C9 0A                     	   cmp #GreyCheepCheep
0D7A3 F0 1C                     	   beq H
0D7A5 C9 0B                     	   cmp #RedCheepCheep
0D7A7 F0 18                     	   beq H
0D7A9 A5 0A                     Grab:  lda A_B_Buttons				;check if B is pressed
0D7AB 29 40                     	   and #B_Button
0D7AD F0 1C                     	   beq ++						;branch if not
0D7AF AD 04 60                  	   lda GrabFlag
0D7B2 F0 05                     	   beq +++						;branch if grabflag is zero
0D7B4 EC 08 60                  	   cpx GrabID					 
0D7B7 D0 43                     	   bne +						;compare current enemy offset with the grabbed enemy offset and branch if not equal
0D7B9 8E 08 60                  +++:   stx GrabID					;if grabflag zero and B pressed, set current enemy offset to grabbed offset
0D7BC A9 01                     	   lda #$01
0D7BE 8D 04 60                  	   sta GrabFlag
0D7C1 60                        H:	   rts
0D7C2 4C CD F4                  HandleSignInteraction: jmp SignDoStuff
0D7C5                           InjurePlayer2:
0D7C5 4C E2 D8                  			jmp InjurePlayer
0D7C8                           ChkForPlayerInjury2:
0D7C8 4C 2B D9                  			jmp ChkForPlayerInjury
0D7CB 8D 57 60                  ++:    sta tempC
0D7CE AD 04 60                  	   lda GrabFlag
0D7D1 F0 29                     	   beq +						;branch if grabflag is zero to kick it in the old way
0D7D3                           	   ;lda Enemy_Y_Position,x
0D7D3                           	   ;cmp #$11
0D7D3                           	   ;bcc H
0D7D3 CE 04 60                  	   dec GrabFlag					;decrement to set grabflag to zero
0D7D6 8D 57 60                  	   sta tempC
0D7D9 A5 0B                     	   lda Up_Down_Buttons
0D7DB 29 08                     	   and #Up_Dir
0D7DD F0 03                     	   beq +++
0D7DF 4C 05 D7                  	   jmp ShellUp
0D7E2 A5 0B                     +++:   lda Up_Down_Buttons			;check if DOWN is pressed
0D7E4 29 04                     	   and #Down_Dir
0D7E6 F0 03                     	   beq +++						;if so, put down shell gently
0D7E8 4C AB D8                  	   jmp ShellDown
0D7EB A4 31                     +++:   ldy PlayerFacingDir  	    ;get player's facing direction
0D7ED 88                        	   dey
0D7EE 98                        	   tya
0D7EF A0 01                     	   ldy #$01
0D7F1 C9 00                     	   cmp #$00
0D7F3 F0 01                     	   beq KickD   
0D7F5 C8                        	   iny                    
0D7F6 94 43                     KickD: sty Enemy_MovingDir,x  		;kick shell where player is facing
0D7F8 88                        	   dey
0D7F9 4C FF D7                  	   jmp ++++
0D7FC 20 EE DA                  +:	   jsr EnemyFacePlayer
0D7FF A9 00                     ++++:  lda #$00
0D801 95 92                     	   sta Enemy_Y_Speed,x			;nullify enemy Y speed
0D803 A9 15                     	   lda #$15
0D805 8D 2E 60                  	   sta FballCooldown			;set fireball cooldown to avoid killing the sell just after kicking it
0D808 B9 7D D6                  	   lda KickedShellXSpdData,y    ;load and set horizontal speed data with offset
0D80B 95 4A                            sta Enemy_X_Speed,x
0D80D B5 1C                     	   lda Enemy_State,x            ;set d7 in enemy state, thus become moving shell
0D80F 29 D0                     	   and #%11010000
0D811 09 84                            ora #%10000100
0D813 95 1C                            sta Enemy_State,x
0D815 A9 00                     	   lda #$00
0D817 8D 25 60                  	   sta EnemyDefeatPitch			;reset smack pitch
0D81A 8D 78 60                  	   sta GrabUp
0D81D 9D 25 01                  	   sta ShellChainCounter,x
0D820 A9 18                     	   lda #Sfx_EnemySmackOr        ;play smack enemy sound
0D822 85 F0                            sta Square1SoundQueue
0D824 B9 7D D6                  	   lda KickedShellXSpdData,y    ;load and set horizontal speed data with offset
0D827 95 4A                            sta Enemy_X_Speed,x
0D829 AD 57 60                  	   lda tempC
0D82C D0 13                     	   bne ExPEC
0D82E A9 03                            lda #$03                     ;add three to whatever the stomp counter contains
0D830 18                               clc                          ;to give points for kicking the shell
0D831 6D 84 04                         adc StompChainCounter
0D834 BC 96 07                         ldy EnemyIntervalTimer,x     ;check shell enemy's timer
0D837 C0 03                            cpy #$03                     ;if above a certain point, branch using the points
0D839 B0 03                            bcs KSPts                    ;data obtained from the stomp counter + 3
0D83B B9 02 D7                         lda KickedShellPtsData,y     ;otherwise, set points based on proximity to timer expiration
0D83E 4C 02 DB                  KSPts: jmp SetupFloateyNumber       ;set values for floatey number now
0D841 60                        ExPEC: rts
0D842                           
0D842                           GSLoop:		
0D842 AE 08 60                  			ldx GrabID					;load grab id
0D845 A9 10                     			lda #$10					;set enemy interval timer to avoid glitches
0D847 9D 96 07                  			sta EnemyIntervalTimer,x
0D84A A5 78                     			lda Player_X_Position		;load player horizontal position
0D84C A4 31                     			ldy PlayerFacingDir			;load player facing dir
0D84E 88                        			dey
0D84F D0 0E                     			bne +						;branch if not zero
0D851                           			add #$0b
0D851 18                        	clc
0D852 69 0B                     	adc #$0b ;apparently this sometimes refuses to work correctly lmao
0D854 95 79                     			sta Enemy_X_Position,x		;add $0b pixels if right
0D856 A5 5F                     			lda Player_PageLoc			;load player page loc
0D858 69 00                     			adc #$00					;add 1 if horizontal position overflowed
0D85A 95 60                     			sta Enemy_PageLoc,x			;store in enemy page loc
0D85C 4C 6A D8                  			jmp ++
0D85F                           +:			sub #$0b					;subtract $0b pixels if left
0D85F 38                        	sec
0D860 E9 0B                     	sbc #$0b
0D862 95 79                     			sta Enemy_X_Position,x
0D864 A5 5F                     			lda Player_PageLoc			;load player page loc
0D866 E9 00                     			sbc #$00					;subtract 1 if horizontal position underflowed
0D868 95 60                     			sta Enemy_PageLoc,x			;store in enemy page loc
0D86A A5 42                     ++:		    lda Player_MovingDir
0D86C 95 43                     			sta Enemy_MovingDir,x		;store player moving dir here
0D86E A9 00                     			lda #$00
0D870 9D 91 04                  			sta Enemy_CollisionBits,x	;nullify this so enemy can't hurt just after kicking it
0D873 A5 C0                     			lda Player_Y_Position		;load player vertical position
0D875 AC 14 07                  			ldy CrouchingFlag			;load crouching flag
0D878 D0 13                     			bne ++						;branch if crouching
0D87A AC 54 07                  			ldy PlayerSize				;load player size
0D87D D0 0E                     			bne ++						;branch if small
0D87F 38                        			sec
0D880 E9 01                     			sbc #$01					;subtract 7
0D882 95 C1                     			sta Enemy_Y_Position,x
0D884 A5 A7                     			lda Player_Y_HighPos
0D886 E9 00                     			sbc #$00
0D888 95 A8                     			sta Enemy_Y_HighPos,X
0D88A 4C 96 D8                  			jmp +
0D88D 18                        ++:			clc
0D88E 69 06                     			adc #$06					;add 6
0D890 95 C1                     			sta Enemy_Y_Position,x		;set enemy vertical position
0D892 A5 A7                     			lda Player_Y_HighPos
0D894 95 A8                     			sta Enemy_Y_HighPos,X
0D896 C9 01                     +:			cmp #$01
0D898 D0 0B                     			bne RShell
0D89A B5 C1                     			lda Enemy_Y_Position,x
0D89C C9 E0                     			cmp #$e0
0D89E 90 05                     			bcc RShell
0D8A0 A9 00                     			lda #$00
0D8A2 8D 04 60                  			sta GrabFlag
0D8A5                           RShell:		
0D8A5 A9 00                     			lda #$00					
0D8A7 9D 25 01                  	        sta ShellChainCounter,x		;reset chain counter
0D8AA 60                        			rts
0D8AB                           ShellDown:
0D8AB A9 01                     		lda #$01
0D8AD 8D 1D 60                  		sta GrabDown			;set this
0D8B0 A5 49                     		lda Player_X_Speed		;load player horizontal speed
0D8B2 95 4A                     		sta Enemy_X_Speed,x		;store here
0D8B4 A9 00                     		lda #$00				
0D8B6 95 92                     		sta Enemy_Y_Speed,x		;nullify enemy vertical speed
0D8B8 A9 15                     		lda #$15
0D8BA 8D 2E 60                  	    sta FballCooldown		;set fireball cooldown to avoid killing it just after releasing it 
0D8BD 60                        		rts
0D8BE                           		
0D8BE                           KillPlayer:
0D8BE A9 00                           lda #$00			   ;nullify grab flag, enemy pitch, was grabbed and old status
0D8C0 8D 04 60                  	  sta GrabFlag
0D8C3 8D 1D 60                  	  sta GrabDown
0D8C6 8D 78 60                  	  sta GrabUp
0D8C9 8D 65 60                  	  sta DebugSwim
0D8CC 8D 59 60                  	  sta LakituRespawning
0D8CF 8D 25 60                  	  sta EnemyDefeatPitch
0D8D2 8D 30 60                  	  sta OldStatus
0D8D5 85 49                     	  sta Player_X_Speed   ;halt player's horizontal movement by initializing speed
0D8D7 E8                              inx
0D8D8 86 ED                           stx EventMusicQueue  ;set event music queue to death music
0D8DA A9 FC                           lda #$fc
0D8DC 85 91                           sta Player_Y_Speed   ;set new vertical speed
0D8DE A9 0B                           lda #$0b             ;set subroutine to run on next frame
0D8E0 D0 37                           bne SetKRout         ;branch to set player's state and other things
0D8E2                           InjurePlayer:
0D8E2 AD 70 07                  	  lda OperMode
0D8E5 C9 02                     	  cmp #$02
0D8E7 F0 3F                     	  beq ExInjColRoutines
0D8E9 AD 9E 07                        lda InjuryTimer          ;check again to see if injured invincibility timer is
0D8EC D0 3A                           bne ExInjColRoutines     ;at zero, and branch to leave if so
0D8EE                           ForceInjury:
0D8EE AE 56 07                  		  ldx PlayerStatus          ;check player's status
0D8F1 F0 CB                               beq KillPlayer            ;branch if small
0D8F3 AD 52 60                  		  lda HardModeFlag
0D8F6 F0 0B                     		  beq +
0D8F8 A9 00                     		  lda #$00
0D8FA 8D 56 07                  		  sta PlayerStatus
0D8FD 8D 30 60                  		  sta OldStatus
0D900 4C 0C D9                  		  jmp ++
0D903 AD 56 07                  +:		  lda PlayerStatus			
0D906 8D 30 60                  		  sta OldStatus				;load player's status and store here
0D909 CE 56 07                  		  dec PlayerStatus			;decrement player's status
0D90C A9 08                     ++:		  lda #$08	
0D90E 8D 9E 07                            sta InjuryTimer           ;set injured invincibility timer
0D911 0A                                  asl                       ;PAL version has lda #$10 here instead (either will work)
0D912 85 F0                               sta Square1SoundQueue     ;play pipedown/injury sound
0D914 20 CD 86                            jsr GetPlayerColors       ;change player's palette if necessary
0D917 A9 0A                               lda #$0a                  ;set subroutine to run on next frame
0D919 A0 01                     SetKRout: ldy #$01                  ;set new player state
0D91B 85 0E                     SetPRout: sta GameEngineSubroutine  ;load new value to run subroutine on next frame
0D91D 84 1B                               sty Player_State          ;store new player state
0D91F A0 FF                               ldy #$ff
0D921 8C 47 07                            sty TimerControl          ;set master timer control flag to halt timers
0D924 C8                                  iny
0D925 8C 75 07                            sty ScrollAmount          ;initialize scroll speed
0D928                           
0D928                           ExInjColRoutines:
0D928 A6 08                           ldx ObjectOffset              ;get enemy offset and leave
0D92A 60                              rts
0D92B                           ChkForPlayerInjury:
0D92B A5 91                     		  lda Player_Y_Speed     ;check player's vertical speed
0D92D 30 15                               bmi ChkInj             ;perform procedure below if player moving upwards
0D92F D0 53                     		  bne EnemyStomped       ;or not at all, and branch elsewhere if moving downward
0D931 B5 C1                     		  lda Enemy_Y_Position,x
0D933                           		  sub #$08
0D933 38                        	sec
0D934 E9 08                     	sbc #$08
0D936 C5 C0                     		  cmp Player_Y_Position
0D938 F0 0A                     		  beq +
0D93A 90 08                     		  bcc +
0D93C B5 92                     		  lda Enemy_Y_Speed,x
0D93E F0 44                     		  beq EnemyStomped
0D940 10 02                     		  bpl ChkInj
0D942 B0 40                     		  bcs EnemyStomped
0D944                           +:		  ;lda Player_State
0D944                           		  ;bne EnemyStomped
0D944                           ChkInj:   
0D944                           if PLAYER_COLLISION_FIX == 1
0D944                                     lda #$14               ;PAL bugfix: Vertical difference deciding whether Mario stomped or got hit depends on the enemy
0D944                                     ldy Enemy_ID,x         ;branch if enemy object < $07
0D944                                     cpy #FlyingCheepCheep
0D944                                     bne ChkInj2
0D944                                     lda #$07
0D944                           ChkInj2:  adc Player_Y_Position
0D944                           
0D944                           else
0D944 B5 15                               lda Enemy_ID,x         ;branch if enemy object < $07
0D946 C9 0A                               cmp #GreyCheepCheep
0D948 90 15                               bcc ChkETmrs
0D94A C9 19                     		  cmp #RedKoopaShell
0D94C F0 11                     		  beq ChkETmrs
0D94E C9 21                     		  cmp #UDPiranhaPlant
0D950 F0 0D                     		  beq ChkETmrs
0D952 C9 22                     		  cmp #RUDPiranhaPlant
0D954 F0 09                     		  beq ChkETmrs
0D956 A5 C0                               lda Player_Y_Position  ;add 12 pixels to player's vertical position
0D958 18                                  clc
0D959 69 0C                               adc #$0c
0D95B                           endif
0D95B D5 C1                               cmp Enemy_Y_Position,x ;compare modified player's position to enemy's position
0D95D 90 25                               bcc EnemyStomped       ;branch if this player's position above (less than) enemy's
0D95F AD 91 07                  ChkETmrs: lda StompTimer         ;check stomp timer
0D962 D0 20                               bne EnemyStomped       ;branch if set
0D964 AD 9E 07                            lda InjuryTimer        ;check to see if injured invincibility timer still
0D967 D0 BF                               bne ExInjColRoutines   ;counting down, and branch elsewhere to leave if so
0D969 AD AD 03                            lda Player_Rel_XPos
0D96C CD AE 03                            cmp Enemy_Rel_XPos     ;if player's relative position to the left of enemy's
0D96F 90 03                               bcc TInjE              ;relative position, branch here
0D971 4C DF DA                            jmp ChkEnemyFaceRight  ;otherwise do a jump here
0D974 B5 43                     TInjE:    lda Enemy_MovingDir,x  ;if enemy moving towards the left,
0D976 C9 01                               cmp #$01               ;branch, otherwise do a jump here
0D978 D0 03                               bne InjurePlayer3       ;to turn the enemy around
0D97A 4C E8 DA                            jmp LInj
0D97D                           InjurePlayer3:
0D97D 4C E2 D8                  	  jmp InjurePlayer
0D980                           StompedEnemyPtsData:
0D980 02 05 07 05                     .db $02, $05, $07, $05
0D984                           EnemyStomped:
0D984 B5 15                           lda Enemy_ID,x             ;check for spiny, branch to hurt player
0D986 C9 12                           cmp #Spiny                 ;if found
0D988 F0 F3                           beq InjurePlayer3
0D98A C9 13                     	  cmp #BlackParatroopa
0D98C F0 EF                     	  beq InjurePlayer3
0D98E C9 11                     	  cmp #Lakitu
0D990 D0 05                     	  bne +
0D992 A9 01                     	  lda #$01
0D994 8D 59 60                  	  sta LakituRespawning
0D997 A9 04                     +:    lda #Sfx_EnemyStomp        ;otherwise play stomp/swim sound
0D999 85 F0                           sta Square1SoundQueue
0D99B B5 15                           lda Enemy_ID,x
0D99D A0 00                           ldy #$00                   ;initialize points data offset for stomped enemies
0D99F C9 14                           cmp #FlyingCheepCheep      ;branch for cheep-cheep
0D9A1 F0 3C                           beq NormalPTS
0D9A3 C9 0B                     	  cmp #RedCheepCheep
0D9A5 F0 38                     	  beq NormalPTS
0D9A7 C9 0A                     	  cmp #GreyCheepCheep
0D9A9 F0 34                     	  beq NormalPTS
0D9AB C9 08                           cmp #BulletBill_FrenzyVar  ;branch for either bullet bill object
0D9AD F0 30                           beq NormalPTS
0D9AF C9 33                           cmp #BulletBill_CannonVar
0D9B1 F0 2C                           beq NormalPTS
0D9B3 C9 0C                           cmp #Podoboo               ;branch for podoboo (this branch is logically impossible
0D9B5 F0 0F                           beq EnemyStompedPts        ;for cpu to take due to earlier checking of podoboo)
0D9B7 C8                              iny                        ;increment points data offset
0D9B8 C9 05                           cmp #HammerBro             ;branch for hammer bro
0D9BA F0 0A                           beq EnemyStompedPts
0D9BC C8                              iny                        ;increment points data offset
0D9BD C9 11                           cmp #Lakitu                ;branch for lakitu
0D9BF F0 05                           beq EnemyStompedPts
0D9C1 C8                              iny                        ;increment points data offset
0D9C2 C9 07                           cmp #Bloober               ;branch if NOT bloober
0D9C4 D0 63                           bne ChkForDemoteKoopa
0D9C6                           
0D9C6                           EnemyStompedPts:
0D9C6 B9 80 D9                  	  lda StompedEnemyPtsData,y  ;load points data using offset in Y
0D9C9 9D 10 01                        sta FloateyNum_Control,x   ;set number of points control for floatey numbers
0D9CC A9 30                           lda #$30
0D9CE 9D 2C 01                        sta FloateyNum_Timer,x     ;set timer for floatey numbers
0D9D1 B5 C1                           lda Enemy_Y_Position,x 
0D9D3 9D 1E 01                        sta FloateyNum_Y_Pos,x     ;set vertical coordinate
0D9D6 AD AE 03                        lda Enemy_Rel_XPos  
0D9D9 9D 17 01                        sta FloateyNum_X_Pos,x     ;set horizontal coordinate and leave
0D9DC 4C FF D9                  	  jmp ++
0D9DF                           	  
0D9DF                           NormalPTS:
0D9DF EE 84 04                  	  inc StompChainCounter      ;increment the stomp counter
0D9E2 AD 84 04                        lda StompChainCounter      ;add whatever is in the stomp counter
0D9E5                                 add StompTimer
0D9E5 18                        	clc
0D9E6 6D 91 07                  	adc StompTimer ;apparently this sometimes refuses to work correctly lmao
0D9E9 9D 10 01                        sta FloateyNum_Control,x   ;set number of points control for floatey numbers
0D9EC A9 30                           lda #$30
0D9EE 9D 2C 01                        sta FloateyNum_Timer,x     ;set timer for floatey numbers
0D9F1 B5 C1                           lda Enemy_Y_Position,x
0D9F3 9D 1E 01                        sta FloateyNum_Y_Pos,x     ;set vertical coordinate
0D9F6 AD AE 03                        lda Enemy_Rel_XPos
0D9F9 9D 17 01                        sta FloateyNum_X_Pos,x     ;set horizontal coordinate and leave
0D9FC EE 91 07                        inc StompTimer             ;increment stomp timer of some sort
0D9FF B5 43                     ++:   lda Enemy_MovingDir,x
0DA01 48                              pha                        ;save enemy movement direction to stack
0DA02 20 2C EA                        jsr SetStun                ;run sub to kill enemy
0DA05 68                              pla
0DA06 95 43                           sta Enemy_MovingDir,x      ;return enemy movement direction from stack
0DA08 A9 20                           lda #%00100000
0DA0A 95 1C                           sta Enemy_State,x          ;set d5 in enemy state
0DA0C BC C4 63                  	  ldy SavedOffset,x
0DA0F A9 02                     	  lda #$02
0DA11 99 AC 62                  	  sta Saved_isDefeated,y
0DA14 A9 00                           lda #$00                   ;initialize vertical speed
0DA16 95 92                           sta Enemy_Y_Speed,x        ;and movement force
0DA18 9D 34 04                        sta Enemy_Y_MoveForce,x    ;nullify vertical speed, physics-related thing,
0DA1B 95 4A                           sta Enemy_X_Speed,x        ;and horizontal speed
0DA1D AD 04 07                  	  lda SwimmingFlag
0DA20 F0 04                     	  beq +
0DA22 A9 FD                     	  lda #$fd
0DA24 85 91                     	  sta Player_Y_Speed
0DA26 4C C3 DA                  +:	  jmp SetBounce
0DA29                           
0DA29                           ChkForDemoteKoopa:
0DA29 C9 0C                           cmp #$0c                   ;branch elsewhere if enemy object < $0a
0DA2B 90 58                           bcc HandleStompedShellE
0DA2D C9 19                     	  cmp #RedKoopaShell
0DA2F F0 54                     	  beq HandleStompedShellE
0DA31 C9 22                     	  cmp #RUDPiranhaPlant
0DA33 F0 50                     	  beq HandleStompedShellE
0DA35 C9 20                     	  cmp #RedPiranhaPlant
0DA37 F0 4C                     	  beq HandleStompedShellE
0DA39 C9 21                     	  cmp #UDPiranhaPlant
0DA3B F0 48                     	  beq HandleStompedShellE
0DA3D 29 01                           and #%00000001             ;demote koopa paratroopas to ordinary troopas
0DA3F 95 15                           sta Enemy_ID,x
0DA41 A0 00                           ldy #$00                   ;return enemy to normal state
0DA43 B5 15                     	  lda Enemy_ID,x
0DA45 F0 01                     	  beq ++
0DA47 C8                        	  iny
0DA48 94 1C                     ++:   sty Enemy_State,x
0DA4A EE 84 04                        inc StompChainCounter      ;increment the stomp counter
0DA4D AD 84 04                        lda StompChainCounter      ;add whatever is in the stomp counter
0DA50                                 add StompTimer
0DA50 18                        	clc
0DA51 6D 91 07                  	adc StompTimer ;apparently this sometimes refuses to work correctly lmao
0DA54 9D 10 01                        sta FloateyNum_Control,x   ;set number of points control for floatey numbers
0DA57 A9 30                           lda #$30
0DA59 9D 2C 01                        sta FloateyNum_Timer,x     ;set timer for floatey numbers
0DA5C B5 C1                           lda Enemy_Y_Position,x
0DA5E 9D 1E 01                        sta FloateyNum_Y_Pos,x     ;set vertical coordinate
0DA61 AD AE 03                        lda Enemy_Rel_XPos
0DA64 9D 17 01                        sta FloateyNum_X_Pos,x     ;set horizontal coordinate and leave
0DA67 EE 91 07                        inc StompTimer             ;increment stomp timer of some sort
0DA6A A9 00                           lda #$00                   ;initialize vertical speed
0DA6C 95 92                           sta Enemy_Y_Speed,x        ;and movement force
0DA6E 9D 34 04                        sta Enemy_Y_MoveForce,x
0DA71 20 EE DA                        jsr EnemyFacePlayer        ;turn enemy around if necessary
0DA74 AD 52 60                  	  lda HardModeFlag
0DA77 F0 02                     	  beq +
0DA79 C8                        	  iny
0DA7A C8                        	  iny
0DA7B                           +:        
0DA7B B9 7F D6                        lda DemotedKoopaXSpdData,y
0DA7E 95 4A                           sta Enemy_X_Speed,x        ;set appropriate moving speed based on direction
0DA80 4C C3 DA                        jmp SetBounce              ;then move onto something else
0DA83                           
0DA83                           RevivalRateData:
0DA83 10 0B                           .db $10, $0b
0DA85                           
0DA85                           HandleStompedShellE:
0DA85 A9 04                            lda #$04                   ;set defeated state for enemy
0DA87 95 1C                            sta Enemy_State,x
0DA89 EE 84 04                         inc StompChainCounter      ;increment the stomp counter
0DA8C AD 84 04                         lda StompChainCounter      ;add whatever is in the stomp counter
0DA8F                                  add StompTimer
0DA8F 18                        	clc
0DA90 6D 91 07                  	adc StompTimer ;apparently this sometimes refuses to work correctly lmao
0DA93 9D 10 01                         sta FloateyNum_Control,x ;set number of points control for floatey numbers
0DA96 A9 30                            lda #$30
0DA98 9D 2C 01                         sta FloateyNum_Timer,x   ;set timer for floatey numbers
0DA9B B5 C1                            lda Enemy_Y_Position,x
0DA9D 9D 1E 01                         sta FloateyNum_Y_Pos,x   ;set vertical coordinate
0DAA0 AD AE 03                         lda Enemy_Rel_XPos
0DAA3 9D 17 01                         sta FloateyNum_X_Pos,x   ;set horizontal coordinate and leave
0DAA6 EE 91 07                         inc StompTimer             ;increment stomp timer of some sort
0DAA9 AC 6A 07                         ldy PrimaryHardMode        ;check primary hard mode flag
0DAAC B5 4A                     	   lda Enemy_X_Speed,x
0DAAE C9 80                     	   cmp #$80
0DAB0 6A                        	   ror
0DAB1 95 4A                     	   sta Enemy_X_Speed,x
0DAB3 B5 15                     	   lda Enemy_ID,x
0DAB5 C9 04                     	   cmp #KoopaShell
0DAB7 F0 0A                     	   beq SetBounce
0DAB9 C9 19                     	   cmp #RedKoopaShell
0DABB F0 06                     	   beq SetBounce
0DABD B9 83 DA                         lda RevivalRateData,y      ;load timer setting according to flag
0DAC0 9D 96 07                         sta EnemyIntervalTimer,x   ;set as enemy timer to revive stomped enemy
0DAC3                           SetBounce: 
0DAC3 A9 01                     		   lda #$01
0DAC5 85 1B                     		   sta Player_State
0DAC7 A5 0A                     		   lda A_B_Buttons
0DAC9 29 80                     		   and #A_Button
0DACB F0 06                     		   beq SmallBonc
0DACD EE 02 60                  		   inc SuppressJumpNoise
0DAD0 4C C6 9B                  		   jmp InitJS
0DAD3                           SmallBonc:
0DAD3 A9 FC                     		   lda #$fc                   ;set player's vertical speed for bounce
0DAD5 AC 04 07                  		   ldy SwimmingFlag
0DAD8 F0 02                     		   beq BnceM
0DADA A9 FE                          	   lda #$fe
0DADC 85 91                     BnceM:     sta Player_Y_Speed         ;and then leave!!!
0DADE 60                                   rts
0DADF                           
0DADF                           
0DADF                           
0DADF                           ChkEnemyFaceRight:
0DADF B5 43                            lda Enemy_MovingDir,x ;check to see if enemy is moving to the right
0DAE1 C9 01                            cmp #$01
0DAE3 D0 03                            bne LInj              ;if not, branch
0DAE5 4C E2 D8                         jmp InjurePlayer      ;otherwise go back to hurt player
0DAE8 20 92 DD                  LInj:  jsr EnemyTurnAround   ;turn the enemy around, if necessary
0DAEB 4C E2 D8                         jmp InjurePlayer      ;go back to hurt player
0DAEE                           
0DAEE                           
0DAEE                           EnemyFacePlayer:
0DAEE A0 01                            ldy #$01               ;set to move right by default
0DAF0 B5 79                            lda Enemy_X_Position,x  ;get distance between enemy object's
0DAF2 38                               sec                     ;horizontal coordinate and the player's
0DAF3 E5 78                            sbc Player_X_Position   ;horizontal coordinate
0DAF5 85 00                            sta $00                 ;and store here
0DAF7 B5 60                            lda Enemy_PageLoc,x
0DAF9 E5 5F                            sbc Player_PageLoc      ;subtract borrow, then leave
0DAFB 10 01                            bpl SFcRt              ;if enemy is to the right of player, do not increment
0DAFD C8                               iny                    ;otherwise, increment to set to move to the left
0DAFE 94 43                     SFcRt: sty Enemy_MovingDir,x  ;set moving direction here
0DB00 88                               dey                    ;then decrement to use as a proper offset
0DB01 60                               rts
0DB02                           
0DB02                           SetupFloateyNumber:
0DB02 9D 10 01                         sta FloateyNum_Control,x ;set number of points control for floatey numbers
0DB05 A9 30                            lda #$30
0DB07 9D 2C 01                         sta FloateyNum_Timer,x   ;set timer for floatey numbers
0DB0A B5 C1                            lda Enemy_Y_Position,x
0DB0C 9D 1E 01                         sta FloateyNum_Y_Pos,x   ;set vertical coordinate
0DB0F AD AE 03                         lda Enemy_Rel_XPos
0DB12 9D 17 01                         sta FloateyNum_X_Pos,x   ;set horizontal coordinate and leave
0DB15 60                        ExSFN: rts
0DB16                           
0DB16                           ;-------------------------------------------------------------------------------------
0DB16                           ;$01 - used to hold enemy offset for second enemy
0DB16                           
0DB16                           SetBitsMask:
0DB16 80 40 20 10 08 04 02            .db %10000000, %01000000, %00100000, %00010000, %00001000, %00000100, %00000010
0DB1D                           
0DB1D                           ClearBitsMask:
0DB1D 7F BF DF EF F7 FB FD            .db %01111111, %10111111, %11011111, %11101111, %11110111, %11111011, %11111101
0DB24                           ExSFN2:
0DB24 A6 08                     	    ldx ObjectOffset ;get enemy object buffer offset
0DB26 60                                rts              ;leave
0DB27                           EnemiesCollision:
0DB27 AD 04 60                  		lda GrabFlag
0DB2A F0 05                     		beq +
0DB2C EC 08 60                  		cpx GrabID
0DB2F F0 F3                     		beq ExSFN2
0DB31 B5 15                     +:		lda Enemy_ID,x
0DB33 C9 19                     		cmp #RedKoopaShell
0DB35 F0 14                     		beq +
0DB37 C9 33                     		cmp #BulletBill_CannonVar
0DB39 F0 10                     		beq +
0DB3B C9 21                     		cmp #UDPiranhaPlant
0DB3D F0 0C                     		beq +
0DB3F C9 22                     		cmp #RUDPiranhaPlant
0DB41 F0 08                     		beq +
0DB43 C9 20                     		cmp #RedPiranhaPlant
0DB45 F0 04                     		beq +
0DB47 C9 15                             cmp #$15                    ;if enemy object => $15, branch to leave
0DB49 B0 D9                             bcs ExSFN2
0DB4B C9 11                     +:      cmp #Lakitu                 ;if lakitu, branch to leave
0DB4D F0 D5                             beq ExSFN2
0DB4F C9 07                     		cmp #Bloober
0DB51 F0 D1                     		beq ExSFN2
0DB53 C9 13                     		cmp #BlackParatroopa
0DB55 F0 CD                     		beq ExSFN2
0DB57 C9 12                     		cmp #Spiny
0DB59 D0 07                     		bne +
0DB5B B5 1C                     		lda Enemy_State,x  ;then check enemy state
0DB5D C9 05                             cmp #$05           ;if not set to unique state for spiny's egg, go ahead
0DB5F D0 01                     		bne +
0DB61 60                        		rts
0DB62 B5 15                     +:      lda Enemy_ID,x
0DB64 C9 06                     		cmp #Goomba
0DB66 F0 04                     		beq +
0DB68 C9 09                     		cmp #FastGoomba
0DB6A D0 06                     		bne ++
0DB6C B5 1C                     +:	    lda Enemy_State,x
0DB6E 29 26                     		and #%00100110           ;check saved enemy state for d5 set
0DB70 D0 B2                     		bne ExSFN2
0DB72 BD D8 03                  ++:	  	lda EnemyOffscrBitsMasked,x ;if masked offscreen bits nonzero, branch to leave
0DB75 D0 AD                             bne ExSFN2
0DB77 A5 08                     		lda ObjectOffset         ;get enemy object buffer offset
0DB79 0A                        		asl                      ;multiply A by four, then add four
0DB7A 0A                        		asl                      ;to skip player's bounding box
0DB7B 18                        		clc
0DB7C 69 04                     		adc #$04
0DB7E A8                        		tay                      ;send to Y
0DB7F AD D1 03                  		lda Enemy_OffscreenBits  ;get offscreen bits for enemy object
0DB82 29 0F                     		and #%00001111           ;save low nybble
0DB84 C9 0F                     		cmp #%00001111           ;check for all bits set
0DB86 CA                                dex                         ;first enemy we're going to compare, then decrement for second
0DB87 30 9B                             bmi ExSFN2           ;branch to leave if there are no other enemies
0DB89 86 01                     ECLoop: stx $01                     ;save enemy object buffer offset for second enemy here
0DB8B 98                                tya                         ;save first enemy's bounding box offset to stack
0DB8C 48                                pha
0DB8D B5 0F                             lda Enemy_Flag,x            ;check enemy object enable flag
0DB8F F0 19                             beq ReadyNextEnemy1          ;branch if flag not set
0DB91 B5 15                             lda Enemy_ID,x
0DB93 C9 19                     		cmp #RedKoopaShell
0DB95 F0 16                     		beq +
0DB97 C9 21                     		cmp #UDPiranhaPlant
0DB99 F0 12                     		beq +
0DB9B C9 22                     		cmp #RUDPiranhaPlant
0DB9D F0 0E                     		beq +
0DB9F C9 20                     		cmp #RedPiranhaPlant
0DBA1 F0 0A                     		beq +
0DBA3                           		;cmp #BulletBill_CannonVar
0DBA3                           		;beq +
0DBA3 C9 15                             cmp #$15                    ;check for enemy object => $15
0DBA5 B0 03                             bcs ReadyNextEnemy1          ;branch if true
0DBA7 4C AF DB                  		jmp ++
0DBAA 4C 62 DC                  ReadyNextEnemy1: jmp ReadyNextEnemy
0DBAD B5 15                     +:      lda Enemy_ID,x
0DBAF C9 11                     ++:		cmp #Lakitu
0DBB1 F0 F7                             beq ReadyNextEnemy1          ;branch if enemy object is lakitu
0DBB3 BD D8 03                          lda EnemyOffscrBitsMasked,x
0DBB6 D0 F2                             bne ReadyNextEnemy1          ;branch if masked offscreen bits set
0DBB8 8A                                txa                         ;get second enemy object's bounding box offset
0DBB9 0A                                asl                         ;multiply by four, then add four
0DBBA 0A                                asl
0DBBB 18                                clc
0DBBC 69 04                             adc #$04
0DBBE AA                                tax                         ;use as new contents of X
0DBBF 84 06                            sty $06      ;save contents of Y here
0DBC1 A9 01                           lda #$01
0DBC3 85 07                           sta $07      ;save value 1 here as counter, compare horizontal coordinates first
0DBC5                           CollisionCoreLoop1:
0DBC5 B9 AC 04                        lda BoundingBox_UL_Corner,y  ;compare left/top coordinates
0DBC8 DD AC 04                        cmp BoundingBox_UL_Corner,x  ;of first and second objects' bounding boxes
0DBCB B0 34                           bcs FirstBoxGreater1          ;if first left/top => second, branch
0DBCD DD AE 04                        cmp BoundingBox_LR_Corner,x  ;otherwise compare to right/bottom of second
0DBD0 90 12                           bcc SecondBoxVerticalChk1     ;if first left/top < second right/bottom, branch elsewhere
0DBD2 F0 23                           beq CollisionFound1           ;if somehow equal, collision, thus branch
0DBD4 B9 AE 04                        lda BoundingBox_LR_Corner,y  ;if somehow greater, check to see if bottom of
0DBD7 D9 AC 04                        cmp BoundingBox_UL_Corner,y  ;first object's bounding box is greater than its top
0DBDA 90 1B                           bcc CollisionFound1           ;if somehow less, vertical wrap collision, thus branch
0DBDC DD AC 04                        cmp BoundingBox_UL_Corner,x  ;otherwise compare bottom of first bounding box to the top
0DBDF B0 16                           bcs CollisionFound1           ;of second box, and if equal or greater, collision, thus branch
0DBE1                                 ;ldy $06                      ;otherwise return with carry clear and Y = $0006
0DBE1 4C 1D DC                        jmp +                         ;note horizontal wrapping never occurs
0DBE4                           
0DBE4                           SecondBoxVerticalChk1:
0DBE4 BD AE 04                        lda BoundingBox_LR_Corner,x  ;check to see if the vertical bottom of the box
0DBE7 DD AC 04                        cmp BoundingBox_UL_Corner,x  ;is greater than the vertical top
0DBEA 90 0B                           bcc CollisionFound1           ;if somehow less, vertical wrap collision, thus branch
0DBEC B9 AE 04                        lda BoundingBox_LR_Corner,y  ;otherwise compare horizontal right or vertical bottom
0DBEF DD AC 04                        cmp BoundingBox_UL_Corner,x  ;of first box with horizontal left or vertical top of second box
0DBF2 B0 03                           bcs CollisionFound1           ;if equal or greater, collision, thus branch
0DBF4                                 ;ldy $06                      ;otherwise return with carry clear and Y = $0006
0DBF4 4C 1D DC                        jmp +
0DBF7                           CollisionFound1:
0DBF7 E8                              inx                    ;increment offsets on both objects to check
0DBF8 C8                              iny                    ;the vertical coordinates
0DBF9 C6 07                           dec $07                ;decrement counter to reflect this
0DBFB 10 C8                           bpl CollisionCoreLoop1  ;if counter not expired, branch to loop
0DBFD 38                              sec                    ;otherwise we already did both sets, therefore collision, so set carry
0DBFE 4C 1D DC                        jmp +
0DC01                           FirstBoxGreater1:
0DC01 DD AC 04                        cmp BoundingBox_UL_Corner,x  ;compare first and second box horizontal left/vertical top again
0DC04 F0 F1                           beq CollisionFound1           ;if first coordinate = second, collision, thus branch
0DC06 DD AE 04                        cmp BoundingBox_LR_Corner,x  ;if not, compare with second object right or bottom edge
0DC09 90 EC                           bcc CollisionFound1           ;if left/top of first less than or equal to right/bottom of second
0DC0B F0 EA                           beq CollisionFound1           ;then collision, thus branch
0DC0D D9 AE 04                        cmp BoundingBox_LR_Corner,y  ;otherwise check to see if top of first box is greater than bottom
0DC10 90 0A                           bcc NoCollisionFound1         ;if less than or equal, no collision, branch to end
0DC12 F0 08                           beq NoCollisionFound1
0DC14 B9 AE 04                        lda BoundingBox_LR_Corner,y  ;otherwise compare bottom of first to top of second
0DC17 DD AC 04                        cmp BoundingBox_UL_Corner,x  ;if bottom of first is greater than top of second, vertical wrap
0DC1A B0 DB                           bcs CollisionFound1          ;collision, and branch, otherwise, proceed onwards here
0DC1C                           
0DC1C                           NoCollisionFound1:
0DC1C 18                              clc          ;clear carry, then load value set earlier, then leave
0DC1D A4 06                     +:      ldy $06      ;like previous ones, if horizontal coordinates do not collide, we do
0DC1F                                 ;rts          ;not bother checking vertical ones, because what's the point?
0DC1F                           
0DC1F A6 08                             ldx ObjectOffset            ;use first enemy offset for X
0DC21 A4 01                             ldy $01                     ;use second enemy offset for Y
0DC23 90 34                             bcc NoEnemyCollision        ;if carry clear, no collision, branch ahead of this
0DC25 EC 08 60                  		cpx GrabID
0DC28 D0 05                     		bne +
0DC2A AD 78 60                  		lda GrabUp
0DC2D D0 24                     		bne YesEC
0DC2F CC 08 60                  +:      cpy GrabID
0DC32 D0 05                     		bne +
0DC34 AD 78 60                  		lda GrabUp
0DC37 D0 1A                     		bne YesEC
0DC39 B5 1C                     +:		lda Enemy_State,x
0DC3B 19 1C 00                          ora Enemy_State,y           ;check both enemy states for d7 set
0DC3E 29 80                             and #%10000000
0DC40 D0 11                             bne YesEC                   ;branch if at least one of them is set
0DC42 B9 91 04                          lda Enemy_CollisionBits,y   ;load first enemy's collision-related bits
0DC45 3D 16 DB                          and SetBitsMask,x           ;check to see if bit connected to second enemy is
0DC48 D0 18                             bne ReadyNextEnemy          ;already set, and move onto next enemy slot if set
0DC4A B9 91 04                          lda Enemy_CollisionBits,y
0DC4D 1D 16 DB                          ora SetBitsMask,x           ;if the bit is not set, set it now
0DC50 99 91 04                          sta Enemy_CollisionBits,y
0DC53 20 72 DC                  YesEC:  jsr ProcEnemyCollisions     ;react according to the nature of collision
0DC56 4C 62 DC                          jmp ReadyNextEnemy          ;move onto next enemy slot
0DC59                           
0DC59                           NoEnemyCollision:
0DC59 B9 91 04                        lda Enemy_CollisionBits,y     ;load first enemy's collision-related bits
0DC5C 3D 1D DB                        and ClearBitsMask,x           ;clear bit connected to second enemy
0DC5F 99 91 04                        sta Enemy_CollisionBits,y     ;then move onto next enemy slot
0DC62                           
0DC62                           ReadyNextEnemy:
0DC62 68                              pla              ;get first enemy's bounding box offset from the stack
0DC63 A8                              tay              ;use as Y again
0DC64 A6 01                           ldx $01          ;get and decrement second enemy's object buffer offset
0DC66 CA                              dex
0DC67 10 03                           bpl ECLoop1       ;loop until all enemy slots have been checked
0DC69                           
0DC69                           ExitECRoutine:
0DC69 A6 08                           ldx ObjectOffset ;get enemy object buffer offset
0DC6B 60                              rts              ;leave
0DC6C 4C 89 DB                  ECLoop1: jmp ECLoop
0DC6F                           ProcSecondEnemyColl2:
0DC6F 4C 10 DD                  	  jmp ProcSecondEnemyColl
0DC72                           ProcEnemyCollisions:
0DC72                                 
0DC72 B9 1C 00                  	  lda Enemy_State,y        ;check both enemy states for d5 set
0DC75 15 1C                           ora Enemy_State,x
0DC77 29 20                           and #%00100000           ;if d5 is set in either state, or both, branch
0DC79 D0 EE                           bne ExitECRoutine        ;to leave and do nothing else at this point
0DC7B EC 08 60                  	  cpx GrabID
0DC7E D0 05                     	  bne +
0DC80 AD 78 60                  	  lda GrabUp
0DC83 D0 06                     	  bne ++
0DC85                           	  
0DC85                           +:    ;lda Enemy_ID,x
0DC85                           	  ;cmp #BulletBill_CannonVar
0DC85                           	  ;beq ++
0DC85 B5 1C                     	  lda Enemy_State,x
0DC87 C9 06                           cmp #$06                 ;if second enemy state < $06, branch elsewhere
0DC89 90 E4                           bcc ProcSecondEnemyColl2
0DC8B B5 15                     ++:   lda Enemy_ID,x           ;check second enemy identifier for hammer bro
0DC8D C9 05                           cmp #HammerBro           ;if hammer bro found in alt state, branch to leave
0DC8F F0 DE                           beq ProcSecondEnemyColl2
0DC91 C9 13                     	  cmp #BlackParatroopa
0DC93 F0 D4                     	  beq ExitECRoutine
0DC95 CC 08 60                  	  cpy GrabID
0DC98 D0 05                     	  bne +
0DC9A AD 78 60                  	  lda GrabUp
0DC9D D0 05                     	  bne ++
0DC9F                           +:	  
0DC9F B9 1C 00                  	  lda Enemy_State,y        ;check first enemy state for d7 set
0DCA2 10 1C                           bpl ShellCollisions      ;branch if d7 is clear
0DCA4 A9 05                     ++:   lda #$05
0DCA6 9D 10 01                        sta FloateyNum_Control,x ;set number of points control for floatey numbers
0DCA9 A9 30                           lda #$30
0DCAB 9D 2C 01                        sta FloateyNum_Timer,x   ;set timer for floatey numbers
0DCAE B5 C1                           lda Enemy_Y_Position,x
0DCB0 9D 1E 01                        sta FloateyNum_Y_Pos,x   ;set vertical coordinate
0DCB3 AD AE 03                        lda Enemy_Rel_XPos
0DCB6 9D 17 01                        sta FloateyNum_X_Pos,x   ;set horizontal coordinate and leave
0DCB9 20 0C D5                        jsr ShellOrBlockDefeat   ;then kill enemy, then load
0DCBC A6 08                     	  ldx ObjectOffset
0DCBE A4 01                     	  ldy $01                  ;original offset of second enemy
0DCC0                           
0DCC0                           ShellCollisions:
0DCC0 98                              tya                      ;move Y to X
0DCC1 AA                              tax
0DCC2 B5 15                     	  lda Enemy_ID,x
0DCC4 C9 13                     	  cmp #BlackParatroopa
0DCC6 F0 45                     	  beq ExitProcessEColl
0DCC8 20 0C D5                  	  jsr ShellOrBlockDefeat
0DCCB A6 08                           ldx ObjectOffset
0DCCD BD 25 01                  	  lda ShellChainCounter,x  ;get chain counter for shell
0DCD0 18                              clc
0DCD1 69 02                           adc #$02                 ;add four to get appropriate point offset
0DCD3 A6 01                           ldx $01
0DCD5 EC 08 60                  	  cpx GrabID
0DCD8 F0 33                     	  beq ExitProcessEColl
0DCDA 9D 10 01                        sta FloateyNum_Control,x ;set number of points control for floatey numbers
0DCDD A9 30                           lda #$30
0DCDF 9D 2C 01                        sta FloateyNum_Timer,x   ;set timer for floatey numbers
0DCE2 B5 C1                           lda Enemy_Y_Position,x
0DCE4 9D 1E 01                        sta FloateyNum_Y_Pos,x   ;set vertical coordinate
0DCE7 AD AE 03                        lda Enemy_Rel_XPos
0DCEA 9D 17 01                        sta FloateyNum_X_Pos,x   ;set horizontal coordinate and leave
0DCED A6 08                           ldx ObjectOffset         ;load original offset of first enemy
0DCEF FE 25 01                        inc ShellChainCounter,x  ;increment chain counter for additional enemies
0DCF2 EE 25 60                  	  inc EnemyDefeatPitch
0DCF5 A6 01                     	  ldx $01
0DCF7 B5 15                     	  lda Enemy_ID,x
0DCF9 C9 0D                     	  cmp #PiranhaPlant
0DCFB F0 0C                     	  beq +
0DCFD C9 22                     	  cmp #RUDPiranhaPlant
0DCFF F0 08                     	  beq +
0DD01 C9 20                     	  cmp #RedPiranhaPlant
0DD03 F0 04                     	  beq +
0DD05 C9 21                     	  cmp #UDPiranhaPlant
0DD07 D0 04                     	  bne ExitProcessEColl
0DD09 A9 FF                     +:	  lda #$ff
0DD0B 95 C1                     	  sta Enemy_Y_Position,x
0DD0D                           ExitProcessEColl:
0DD0D A6 08                     	  ldx ObjectOffset
0DD0F 60                              rts                      ;leave!!!
0DD10                           
0DD10                           ProcSecondEnemyColl:
0DD10 AD 04 60                        lda GrabFlag
0DD13 F0 06                     	  beq +
0DD15 CC 08 60                  	  cpy GrabID
0DD18 D0 01                     	  bne +
0DD1A 60                        	  rts
0DD1B CC 08 60                  +:	  cpy GrabID
0DD1E D0 05                     	  bne +
0DD20 AD 78 60                  	  lda GrabUp
0DD23 D0 0B                     	  bne ++
0DD25                           +:	  ;lda Enemy_ID,y
0DD25                           	  ;cmp #BulletBill_CannonVar
0DD25                           	  ;beq ++
0DD25 B9 1C 00                  	  lda Enemy_State,y        ;if first enemy state < $06, branch elsewhere
0DD28 C9 06                           cmp #$06
0DD2A 90 5F                           bcc MoveEOfs
0DD2C C9 19                     	  cmp #RedKoopaShell
0DD2E F0 5B                     	  beq MoveEOfs
0DD30 B9 15 00                  ++:   lda Enemy_ID,y           ;check first enemy identifier for hammer bro
0DD33 C9 05                           cmp #HammerBro           ;if hammer bro found in alt state, branch to leave
0DD35 F0 D6                           beq ExitProcessEColl
0DD37 C9 13                     	  cmp #BlackParatroopa
0DD39 F0 D2                     	  beq ExitProcessEColl
0DD3B 20 0C D5                        jsr ShellOrBlockDefeat   ;otherwise, kill first enemy
0DD3E A4 01                           ldy $01
0DD40 B9 25 01                        lda ShellChainCounter,y  ;get chain counter for shell
0DD43 18                              clc
0DD44 69 02                           adc #$02                 ;add four to get appropriate point offset
0DD46 A6 08                           ldx ObjectOffset
0DD48 9D 10 01                        sta FloateyNum_Control,x ;set number of points control for floatey numbers
0DD4B A9 30                           lda #$30
0DD4D 9D 2C 01                        sta FloateyNum_Timer,x   ;set timer for floatey numbers
0DD50 B5 C1                           lda Enemy_Y_Position,x
0DD52 9D 1E 01                        sta FloateyNum_Y_Pos,x   ;set vertical coordinate
0DD55 AD AE 03                        lda Enemy_Rel_XPos
0DD58 9D 17 01                        sta FloateyNum_X_Pos,x   ;set horizontal coordinate and leave
0DD5B B5 15                     	  lda Enemy_ID,x
0DD5D C9 0D                     	  cmp #PiranhaPlant
0DD5F F0 0C                     	  beq ++
0DD61 C9 22                     	  cmp #RUDPiranhaPlant
0DD63 F0 08                     	  beq ++
0DD65 C9 20                     	  cmp #RedPiranhaPlant
0DD67 F0 04                     	  beq ++
0DD69 C9 21                     	  cmp #UDPiranhaPlant
0DD6B D0 04                     	  bne +
0DD6D A9 FF                     ++:	  lda #$ff
0DD6F 95 C1                     	  sta Enemy_Y_Position,x
0DD71                           +:   
0DD71 A6 01                           ldx $01                  ;load original offset of second enemy
0DD73 FE 25 01                        inc ShellChainCounter,x  ;increment chain counter for additional enemies
0DD76 EC 08 60                  	  cpx GrabID
0DD79 D0 05                     	  bne +
0DD7B AD 78 60                  	  lda GrabUp
0DD7E D0 0A                     	  bne ++
0DD80 AD 25 60                  +:	  lda EnemyDefeatPitch
0DD83 C9 0B                     	  cmp #$0b
0DD85 F0 03                     	  beq ++
0DD87 EE 25 60                  	  inc EnemyDefeatPitch
0DD8A 60                        ++:   rts                      ;leave!!!
0DD8B                           
0DD8B                           MoveEOfs:
0DD8B 98                              tya                      ;move Y ($01) to X
0DD8C AA                              tax
0DD8D 20 92 DD                        jsr EnemyTurnAround      ;do the sub here using value from $01
0DD90 A6 08                           ldx ObjectOffset         ;then do it again using value from $08
0DD92                           
0DD92                           EnemyTurnAround:
0DD92 B5 15                            lda Enemy_ID,x           ;check for specific enemies
0DD94 C9 0D                            cmp #PiranhaPlant
0DD96 F0 48                            beq ExTA                 ;if piranha plant, leave
0DD98 C9 21                     	   cmp #UDPiranhaPlant
0DD9A F0 44                     	   beq ExTA
0DD9C C9 11                            cmp #Lakitu
0DD9E F0 40                            beq ExTA                 ;if lakitu, leave
0DDA0 C9 05                            cmp #HammerBro
0DDA2 F0 3C                            beq ExTA                 ;if hammer bro, leave
0DDA4 C9 12                            cmp #Spiny
0DDA6 F0 14                            beq RXSpd                ;if spiny, turn it around
0DDA8 C9 0E                            cmp #GreenParatroopaJump
0DDAA F0 10                            beq RXSpd                ;if green paratroopa, turn it around
0DDAC C9 13                     	   cmp #BlackParatroopa
0DDAE F0 0C                     	   beq RXSpd
0DDB0 C9 09                     	   cmp #FastGoomba
0DDB2 F0 08                     	   beq RXSpd
0DDB4 C9 19                     	   cmp #RedKoopaShell
0DDB6 F0 04                     	   beq RXSpd
0DDB8 C9 07                            cmp #$07
0DDBA B0 24                            bcs ExTA                 ;if any OTHER enemy object => $07, leave
0DDBC B5 4A                     RXSpd: lda Enemy_X_Speed,x      ;load horizontal speed
0DDBE 49 FF                            eor #$ff                 ;get two's compliment for horizontal speed
0DDC0 A8                               tay
0DDC1 C8                               iny
0DDC2 94 4A                            sty Enemy_X_Speed,x      ;store as new horizontal speed
0DDC4 B5 43                            lda Enemy_MovingDir,x
0DDC6 49 03                            eor #%00000011           ;invert moving direction and store, then leave
0DDC8 95 43                            sta Enemy_MovingDir,x    ;thus effectively turning the enemy around
0DDCA B5 15                     	   lda Enemy_ID,x
0DDCC C9 03                     	   cmp #RedKoopa
0DDCE F0 11                     	   beq +
0DDD0 C9 04                     	   cmp #KoopaShell
0DDD2 F0 0D                     	   beq +
0DDD4 C9 00                     	   cmp #GreenKoopa
0DDD6 F0 09                     	   beq +
0DDD8 C9 19                     	   cmp #RedKoopaShell
0DDDA F0 05                     	   beq +
0DDDC C9 02                     	   cmp #BuzzyBeetle
0DDDE F0 01                     	   beq +
0DDE0 60                        ExTA:  rts                      ;leave!!!
0DDE1 B5 1C                     +:	   lda Enemy_State,x
0DDE3 F0 FB                     	   beq ExTA
0DDE5 30 F9                     	   bmi ExTA
0DDE7 B5 4A                     	   lda Enemy_X_Speed,x
0DDE9 C9 80                     	   cmp #$80
0DDEB 6A                        	   ror
0DDEC 95 4A                     	   sta Enemy_X_Speed,x
0DDEE 60                        	   rts
0DDEF                           ;-------------------------------------------------------------------------------------
0DDEF                           ;$00 - vertical position of platform
0DDEF                           
0DDEF                           LargePlatformCollision:
0DDEF A9 FF                            lda #$ff                     ;save value here
0DDF1 9D A2 03                         sta PlatformCollisionFlag,x
0DDF4 AD 47 07                         lda TimerControl             ;check master timer control
0DDF7 D0 33                            bne ExLPC                    ;if set, branch to leave
0DDF9 B5 1C                            lda Enemy_State,x            ;if d7 set in object state,
0DDFB 30 2F                            bmi ExLPC                    ;branch to leave
0DDFD B5 15                            lda Enemy_ID,x
0DDFF C9 24                            cmp #$24                     ;check enemy object identifier for
0DE01 D0 06                            bne ChkForPlayerC_LargeP     ;balance platform, branch if not found
0DE03 B5 1C                            lda Enemy_State,x
0DE05 AA                               tax                          ;set state as enemy offset here
0DE06 20 09 DE                         jsr ChkForPlayerC_LargeP     ;perform code with state offset, then original offset, in X
0DE09                           
0DE09                           ChkForPlayerC_LargeP:
0DE09 20 C1 DE                         jsr CheckPlayerVertical      ;figure out if player is below a certain point
0DE0C B0 1E                            bcs ExLPC                    ;or offscreen, branch to leave if true
0DE0E 8A                               txa
0DE0F 0A                               asl                          ;multiply A by four, then add four
0DE10 0A                               asl                          ;to skip player's bounding box
0DE11 18                               clc
0DE12 69 04                            adc #$04
0DE14 A8                               tay                          ;send to Y
0DE15 AD D1 03                         lda Enemy_OffscreenBits      ;get offscreen bits for enemy object
0DE18 29 0F                            and #%00001111               ;save low nybble
0DE1A C9 0F                            cmp #%00001111               ;check for all bits set
0DE1C B5 C1                            lda Enemy_Y_Position,x       ;store vertical coordinate in
0DE1E 85 00                            sta $00                      ;temp variable for now
0DE20 8A                               txa                          ;send offset we're on to the stack
0DE21 48                               pha
0DE22 20 0F B6                         jsr PlayerCollisionCore      ;do player-to-platform collision detection
0DE25 68                               pla                          ;retrieve offset from the stack
0DE26 AA                               tax
0DE27 90 03                            bcc ExLPC                    ;if no collision, branch to leave
0DE29 20 2F DE                         jsr ProcLPlatCollisions      ;otherwise collision, perform sub
0DE2C A6 08                     ExLPC: ldx ObjectOffset             ;get enemy object buffer offset and leave
0DE2E 60                               rts
0DE2F                           
0DE2F                           ;--------------------------------
0DE2F                           ;$00 - counter for bounding boxes
0DE2F                           
0DE2F                           ;--------------------------------
0DE2F                           
0DE2F                           ProcLPlatCollisions:
0DE2F B9 AF 04                        lda BoundingBox_DR_YPos,y    ;get difference by subtracting the top
0DE32 38                              sec                          ;of the player's bounding box from the bottom
0DE33 ED AD 04                        sbc BoundingBox_UL_YPos      ;of the platform's bounding box
0DE36 C9 04                           cmp #$04                     ;if difference too large or negative,
0DE38 B0 00                           bcs ChkForTopCollision       ;branch, do not alter vertical speed of player
0DE3A                                 ;lda Player_Y_Speed           ;check to see if player's vertical speed is moving down
0DE3A                                 ;bpl ChkForTopCollision       ;if so, don't mess with it
0DE3A                                 ;lda #$01                     ;otherwise, set vertical
0DE3A                                 ;sta Player_Y_Speed           ;speed of player to kill jump
0DE3A                           
0DE3A                           ChkForTopCollision:
0DE3A AD AF 04                        lda BoundingBox_DR_YPos      ;get difference by subtracting the top
0DE3D 38                              sec                          ;of the platform's bounding box from the bottom
0DE3E F9 AD 04                        sbc BoundingBox_UL_YPos,y    ;of the player's bounding box
0DE41 C9 06                           cmp #$06
0DE43 B0 1A                           bcs PlatformSideCollisions   ;if difference not close enough, skip all of this
0DE45 A5 91                           lda Player_Y_Speed
0DE47 30 16                           bmi PlatformSideCollisions   ;if player's vertical speed moving upwards, skip this
0DE49 A5 00                           lda $00                      ;get saved bounding box counter from earlier
0DE4B B4 15                           ldy Enemy_ID,x
0DE4D C0 2B                           cpy #$2b                     ;if either of the two small platform objects are found,
0DE4F F0 05                           beq SetCollisionFlag         ;regardless of which one, branch to use bounding box counter
0DE51 C0 2C                           cpy #$2c                     ;as contents of collision flag
0DE53 F0 01                           beq SetCollisionFlag
0DE55 8A                              txa                          ;otherwise use enemy object buffer offset
0DE56                           
0DE56                           SetCollisionFlag:
0DE56 A6 08                           ldx ObjectOffset             ;get enemy object buffer offset
0DE58 9D A2 03                        sta PlatformCollisionFlag,x  ;save either bounding box counter or enemy offset here
0DE5B A9 00                           lda #$00
0DE5D 85 1B                           sta Player_State             ;set player state to normal then leave
0DE5F                           PlatformSideCollisions
0DE5F 60                              rts
0DE60                           ;-------------------------------------------------------------------------------------
0DE60                           
0DE60                           PlayerPosSPlatData:
0DE60 80 00                           .db $80, $00
0DE62                           
0DE62                           PositionPlayerOnS_Plat:
0DE62 A8                              tay                        ;use bounding box counter saved in collision flag
0DE63 B5 C1                           lda Enemy_Y_Position,x     ;for offset
0DE65 18                              clc                        ;add positioning data using offset to the vertical
0DE66 79 5F DE                        adc PlayerPosSPlatData-1,y ;coordinate
0DE69 2C                              .db $2c                    ;BIT instruction opcode
0DE6A                           
0DE6A                           PositionPlayerOnVPlat:
0DE6A B5 C1                              lda Enemy_Y_Position,x    ;get vertical coordinate
0DE6C A4 0E                              ldy GameEngineSubroutine
0DE6E C0 0B                              cpy #$0b                  ;if certain routine being executed on this frame,
0DE70 F0 32                              beq ExPlPos               ;skip all of this
0DE72 AC B1 63                  		 ldy PlatformTimer
0DE75 D0 3D                     		 bne ExPlPos3
0DE77 A0 01                     		 ldy #$01
0DE79 8C BF 63                  		 sty OnPlatform
0DE7C B4 92                     		 ldy Enemy_Y_Speed,x
0DE7E 30 05                     		 bmi +
0DE80 AC AF 63                  		 ldy TouchingFloor
0DE83 D0 1F                     		 bne ExPlPos
0DE85 AC B0 63                  +:       ldy TouchingCeiling
0DE88 D0 1B                     		 bne ExPlPos2
0DE8A B4 A8                     		 ldy Enemy_Y_HighPos,x
0DE8C C0 01                              cpy #$01                  ;if vertical high byte offscreen, skip this
0DE8E D0 14                              bne ExPlPos
0DE90 38                                 sec                       ;subtract 32 pixels from vertical coordinate
0DE91 E9 20                              sbc #$20                  ;for the player object's height
0DE93 85 C0                              sta Player_Y_Position     ;save as player's new vertical coordinate
0DE95 98                                 tya
0DE96 E9 00                              sbc #$00                  ;subtract borrow and store as player's
0DE98 85 A7                              sta Player_Y_HighPos      ;new vertical high byte
0DE9A A9 00                     		 lda #$00
0DE9C 85 91                              sta Player_Y_Speed        ;initialize vertical speed and low byte of force
0DE9E 8D 33 04                           sta Player_Y_MoveForce    ;and then leave
0DEA1 8D 84 04                  		 sta StompChainCounter
0DEA4 60                        ExPlPos: rts
0DEA5 A9 07                     ExPlPos2: 	lda #$07
0DEA7 8D B1 63                  			sta PlatformTimer
0DEAA A9 01                     			lda #$01
0DEAC 85 1B                     			sta Player_State
0DEAE A9 00                     			lda #$00
0DEB0 8D BF 63                  			sta OnPlatform
0DEB3 60                        			rts
0DEB4 CE B1 63                  ExPlPos3:   dec PlatformTimer
0DEB7 A9 01                     			lda #$01
0DEB9 85 1B                     			sta Player_State
0DEBB A9 00                     			lda #$00
0DEBD 8D BF 63                  			sta OnPlatform
0DEC0 60                        			rts
0DEC1                           ;-------------------------------------------------------------------------------------
0DEC1                           
0DEC1                           CheckPlayerVertical:
0DEC1 AD D0 03                         lda Player_OffscreenBits  ;if player object is completely offscreen
0DEC4 C9 F0                            cmp #$f0                  ;vertically, leave this routine
0DEC6 B0 09                            bcs ExCPV
0DEC8 A4 A7                            ldy Player_Y_HighPos      ;if player high vertical byte is not
0DECA 88                               dey                       ;within the screen, leave this routine
0DECB D0 04                            bne ExCPV
0DECD A5 C0                            lda Player_Y_Position     ;if on the screen, check to see how far down
0DECF C9 D0                            cmp #$d0                  ;the player is vertically
0DED1 60                        ExCPV: rts
0DED2                           
0DED2                           ;-------------------------------------------------------------------------------------
0DED2                           ;-------------------------------------------------------------------------------------
0DED2                           ;$00-$01 - used to hold many values, essentially temp variables
0DED2                           ;$04 - holds lower nybble of vertical coordinate from block buffer routine
0DED2                           ;temp1 - used to hold block buffer adder
0DED2                           
0DED2                           PlayerBGUpperExtent:
0DED2 20 0E                           .db $20, $0e
0DED4                           
0DED4                           PlayerBGCollision:
0DED4 AD 16 07                            lda DisableCollisionDet   ;if collision detection disabled flag set,
0DED7 D0 46                               bne ExPBGCol              ;branch to leave
0DED9 8D E8 63                  		  sta SideCollisionAdder
0DEDC 8D 8B 60                  		  sta ClimbingSlope
0DEDF 8D 04 07                  		  sta SwimmingFlag
0DEE2 A5 0E                     		  lda GameEngineSubroutine
0DEE4 C9 0B                               cmp #$0b                  ;if running routine #11 or $0b
0DEE6 F0 37                               beq ExPBGCol              ;branch to leave
0DEE8 C9 04                               cmp #$04
0DEEA 90 33                               bcc ExPBGCol              ;if running routines $00-$03 branch to leave
0DEEC C9 0D                     		  cmp #$0d
0DEEE F0 2F                     		  beq ExPBGCol
0DEF0 A9 01                               lda #$01                  ;load default player state for swimming
0DEF2 AC 04 07                            ldy SwimmingFlag          ;if swimming flag set,
0DEF5 D0 0F                               bne SetPSte               ;branch ahead to set default state
0DEF7 AC 5E 60                  		  ldy OldSwim
0DEFA D0 0A                     		  bne SetPSte
0DEFC A5 1B                               lda Player_State          ;if player in normal state,
0DEFE F0 04                               beq SetFallS              ;branch to set default state for falling
0DF00 C9 03                               cmp #$03
0DF02 D0 04                               bne ChkOnScr              ;if in any other state besides climbing, skip to next part
0DF04 A9 02                     SetFallS: lda #$02                  ;load default player state for falling
0DF06 85 1B                     SetPSte:  sta Player_State          ;set whatever player state is appropriate
0DF08 A5 A7                     ChkOnScr: lda Player_Y_HighPos
0DF0A C9 01                               cmp #$01                  ;check player's vertical high byte for still on the screen
0DF0C D0 11                               bne ExPBGCol              ;branch to leave if not
0DF0E AD 90 04                  		  lda Player_CollisionBits
0DF11 8D 65 07                  		  sta Player_OldCollisionBits
0DF14 A9 FF                               lda #$ff
0DF16 8D 90 04                            sta Player_CollisionBits  ;initialize player's collision flag
0DF19 A5 C0                               lda Player_Y_Position
0DF1B C9 FF                               cmp #$ff                  ;check player's vertical coordinate
0DF1D 90 04                               bcc ChkCollSize           ;if not too close to the bottom of screen, continue
0DF1F 60                        ExPBGCol: rts                       ;otherwise leave
0DF20                           
0DF20                           DoFootCheck1:
0DF20 4C FD E0                  		 jmp DoFootCheck
0DF23                           ChkCollSize:
0DF23 A0 02                              ldy #$02                    ;load default offset
0DF25 AD 14 07                           lda CrouchingFlag
0DF28 D0 0C                              bne GBBAdr                  ;if player crouching, skip ahead
0DF2A AD 54 07                           lda PlayerSize
0DF2D D0 07                              bne GBBAdr                  ;if player small, skip ahead
0DF2F 88                                 dey                         ;otherwise decrement offset for big player not crouching
0DF30 AD 04 07                           lda SwimmingFlag
0DF33 D0 01                              bne GBBAdr                  ;if swimming flag set, skip ahead
0DF35 88                                 dey                         ;otherwise decrement offset
0DF36 B9 B2 BA                  GBBAdr:  lda BlockBufferAdderData,y  ;get value using offset
0DF39 85 DD                              sta temp1                   ;store value here
0DF3B A8                                 tay                         ;put value into Y, as offset for block buffer routine
0DF3C AE 54 07                           ldx PlayerSize              ;get player's size as offset
0DF3F AD 14 07                           lda CrouchingFlag
0DF42 F0 01                              beq HeadChk                 ;if player not crouching, branch ahead
0DF44 E8                                 inx                         ;otherwise increment size as offset
0DF45 A9 00                     HeadChk: lda #$00
0DF47 8D 5F 60                  		 sta bocata
0DF4A 8D 61 60                  		 sta bocata3
0DF4D A5 C0                     		 lda Player_Y_Position       ;get player's vertical coordinate
0DF4F DD D2 DE                           cmp PlayerBGUpperExtent,x   ;compare with upper extent value based on offset
0DF52 90 CC                              bcc DoFootCheck1             ;if player is too high, skip this par
0DF54 AD 04 07                  		 lda SwimmingFlag
0DF57 0D 5E 60                  		 ora OldSwim
0DF5A 0D BF 63                  		 ora OnPlatform
0DF5D D0 07                     		 bne +
0DF5F A5 91                     		 lda Player_Y_Speed
0DF61                           		 ;beq ++
0DF61 10 BD                     		 bpl DoFootCheck1
0DF63 4C 6C DF                  		 jmp +++
0DF66                           +:	  	 ;lda Player_Y_Speed
0DF66                                    ;beq ++
0DF66                           		 ;bpl DoFootCheck1
0DF66 A5 1B                     ++:		 lda Player_State
0DF68 C9 03                     	     cmp #$03
0DF6A F0 B4                     		 beq DoFootCheck1
0DF6C AD 79 60                  +++:	 lda CrouchingFlag2
0DF6F F0 0C                     		 beq +
0DF71 A0 25                     		 ldy #$25
0DF73 20 8F BC                  		 jsr BlockBufferColli_Head
0DF76 A4 DD                     		 ldy temp1
0DF78 C9 00                     		 cmp #$00
0DF7A 4C 80 DF                  		 jmp ++
0DF7D 20 8F BC                  +:		 jsr BlockBufferColli_Head
0DF80                           		 ;cmp #$00
0DF80 F0 9E                     ++:		 beq DoFootCheck1             ;player, and branch if nothing above player's head
0DF82 C9 71                     		 cmp #$71
0DF84 F0 9A                     		 beq DoFootCheck1
0DF86 C9 70                     		 cmp #$70
0DF88 F0 96                     		 beq DoFootCheck1
0DF8A C9 26                     		 cmp #$26
0DF8C F0 92                     		 beq DoFootCheck1
0DF8E 8C 2B 60                  		 sty temp7
0DF91 A8                        		 tay
0DF92 AD 28 60                  		 lda PTimer
0DF95 D0 09                     		 bne NoPuta
0DF97 98                        		 tya
0DF98 AC 2B 60                  		 ldy temp7
0DF9B C9 72                     		 cmp #$72
0DF9D F0 34                     		 beq DoFoCHK
0DF9F A8                        		 tay
0DFA0 98                        NoPuta:  tya
0DFA1 AC 2B 60                  		 ldy temp7
0DFA4 C9 88                     		 cmp #$88
0DFA6 F0 2B                     		 beq DoFoCHK1
0DFA8 C9 63                     		 cmp #$63
0DFAA F0 27                     		 beq DoFoCHK
0DFAC C9 92                     		 cmp #$92
0DFAE F0 23                     		 beq DoFoCHK
0DFB0 C9 2E                     		 cmp #$2e
0DFB2 F0 22                     		 beq CheckForUpPipe
0DFB4 C9 2F                     		 cmp #$2f
0DFB6 F0 1E                     		 beq CheckForUpPipe
0DFB8 C9 91                     		 cmp #$91
0DFBA D0 3D                     		 bne +
0DFBC                           ++:		 ;jmp DoFootCheck
0DFBC AC 4E 07                  		 ldy AreaType
0DFBF C0 03                     		 cpy #$03
0DFC1 D0 08                     		 bne ++
0DFC3 AC 9F 07                  		 ldy StarInvincibleTimer
0DFC6 D0 03                     		 bne ++
0DFC8 4C BE D8                  		 jmp KillPlayer
0DFCB A0 01                     ++:		 ldy #$01
0DFCD 8C 04 07                  		 sty SwimmingFlag
0DFD0 4C FD E0                  		 jmp DoFootCheck
0DFD3                           DoFoCHK1: 
0DFD3 4C FD E0                  DoFoCHK: jmp DoFootCheck
0DFD6                           CheckForUpPipe:
0DFD6 48                        		 pha
0DFD7 8C 2B 60                  		 sty temp7
0DFDA A0 1C                     		 ldy #$1c
0DFDC AD 14 07                  		 lda CrouchingFlag
0DFDF D0 07                     		 bne ++
0DFE1 AD 54 07                  		 lda PlayerSize
0DFE4 D0 02                     		 bne ++
0DFE6 C8                        		 iny
0DFE7 C8                        		 iny
0DFE8 20 8F BC                  ++:      jsr BlockBufferColli_Head   ;do player-to-bg collision detection on top of
0DFEB C8                        		 iny
0DFEC 8D 57 60                  		 sta tempC
0DFEF 20 8F BC                  		 jsr BlockBufferColli_Head   ;do player-to-bg collision detection on top of
0DFF2 8D 58 60                  		 sta tempD
0DFF5 AC 2B 60                  		 ldy temp7
0DFF8 68                        		 pla
0DFF9 20 08 F7                  +:		 jsr CheckForCoinMTiles      ;check to see if player touched coin with their head
0DFFC 90 06                              bcc +
0DFFE 20 CA E6                  		 jsr HandleCoinMetatile      ;if so, branch to some other part of code
0E001 4C 38 E1                  		 jmp DoFootCh
0E004 C9 8A                     +:		 cmp #$8a
0E006 D0 1A                     		 bne +
0E008 48                        		 pha
0E009 A5 C0                     		 lda Player_Y_Position
0E00B 29 0F                     		 and #$0f
0E00D C9 02                     		 cmp #$02
0E00F 90 0C                     		 bcc +++
0E011 AD 9F 07                  		 lda StarInvincibleTimer
0E014 0D 9E 07                  		 ora InjuryTimer
0E017 D0 08                     		 bne ++
0E019 68                        		 pla
0E01A 4C E2 D8                  		 jmp InjurePlayer
0E01D 68                        +++:	 pla
0E01E 4C D3 DF                  		 jmp DoFoCHK
0E021 68                        ++:		 pla
0E022 A4 91                     +:		 ldy Player_Y_Speed          ;check player's vertical speed
0E024 F0 05                     		 beq +
0E026 10 AB                              bpl DoFoCHK             ;if player not moving upwards, branch elsewhere
0E028 4C 31 E0                  		 jmp ++
0E02B A4 1B                     +:		 ldy Player_State
0E02D C0 03                     		 cpy #$03
0E02F F0 A2                     		 beq DoFoCHK
0E031 C9 8D                     ++:		 cmp #$8d
0E033 D0 0F                     		 bne +
0E035 AA                        		 tax
0E036 AD 53 60                  		 lda OnOffBits
0E039 49 01                     		 eor #%00000001
0E03B 8D 53 60                  		 sta OnOffBits
0E03E 29 01                     		 and #%00000001
0E040 8D 54 60                  		 sta OnOffFlag
0E043 8A                        		 txa
0E044 AC 54 60                  +:		 ldy OnOffFlag
0E047 F0 07                     	     beq +
0E049 C9 8F                     		 cmp #$8f
0E04B F0 60                     		 beq DoFoCHK8
0E04D 4C 54 E0                  		 jmp ++
0E050 C9 8E                     +:		 cmp #$8e
0E052 F0 59                     		 beq DoFoCHK8
0E054                           ++:		 
0E054 A4 04                     +:       ldy $04                     ;check lower nybble of vertical coordinate returned
0E056 C0 04                              cpy #$04                    ;from collision detection routine
0E058 90 53                              bcc DoFoCHK8             ;if low nybble < 4, branch
0E05A                           		 ;jsr CheckForSolidMTiles
0E05A C9 54                     		 cmp #$54
0E05C F0 5C                     		 beq SolidOrClimb
0E05E AC 28 60                  		 ldy PTimer
0E061 D0 04                     		 bne NoPuta2
0E063 C9 72                     		 cmp #$72
0E065 F0 53                     		 beq SolidOrClimb
0E067                           NoPuta2:  
0E067 C9 6F                     		 cmp #$6f
0E069 F0 2D                     		 beq ++
0E06B C9 74                     		 cmp #$74
0E06D F0 29                     		 beq ++
0E06F C9 27                     		 cmp #$27
0E071 F0 25                     		 beq ++
0E073 C9 28                     		 cmp #$28
0E075 F0 21                     		 beq ++
0E077 C9 30                     		 cmp #$30
0E079 90 10                     		 bcc +
0E07B C9 36                     		 cmp #$36
0E07D 90 19                     		 bcc ++
0E07F C9 73                     		 cmp #$73
0E081 F0 15                     		 beq ++
0E083 C9 C6                     		 cmp #$c6
0E085 F0 11                     		 beq ++
0E087 C9 C7                     		 cmp #$c7
0E089 F0 0D                     		 beq ++
0E08B A8                        +:		 tay            ;save metatile value into Y
0E08C 29 C0                              and #%11000000 ;mask out all but 2 MSB
0E08E 0A                                 asl
0E08F 2A                                 rol            ;shift and rotate d7-d6 to d1-d0
0E090 2A                                 rol
0E091 AA                                 tax            ;use as offset for metatile data
0E092 98                                 tya            ;get original metatile value back
0E093 DD 0F B5                           cmp SolidMTileUpperExt,x  ;compare current metatile with solid metatiles
0E096 B0 22                              bcs SolidOrClimb            ;if player collided with solid metatile, branch
0E098                           ++:      
0E098 AC 84 07                  TryBump: ldy BlockBounceTimer        ;if block bounce timer not expired,
0E09B D0 4F                              bne NYSpd                   ;branch ahead, do not process collision
0E09D 20 4D A7                  		 jsr PlayerHeadCollision     ;otherwise do a sub to process collision
0E0A0 AD 04 07                  		 lda SwimmingFlag
0E0A3 0D 5E 60                  		 ora OldSwim
0E0A6 F0 02                     		 beq +
0E0A8                           		 ;lda #$01
0E0A8 85 91                     		 sta Player_Y_Speed
0E0AA 4C 38 E1                  +:       jmp DoFootCh             ;jump ahead to skip these other parts here
0E0AD 4C FD E0                  DoFoCHK8: jmp DoFootCheck
0E0B0                           DoPlayerSideCheck3:
0E0B0 4C 86 E4                  	  jmp DoPlayerSideCheck
0E0B3                           Burh1:
0E0B3 4C 89 E2                  	  jmp Burh
0E0B6                           Che:
0E0B6 A9 03                     	   lda #$03
0E0B8 85 91                     	   sta Player_Y_Speed
0E0BA                           SolidOrClimb:
0E0BA C9 26                     	   cmp #$26
0E0BC F0 2E                            beq NYSpd              ;branch ahead and do not play sound
0E0BE C9 8B                     	   cmp #$8b
0E0C0 F0 F4                     	   beq Che
0E0C2 C9 25                     	   cmp #$25
0E0C4 F0 74                     	   beq DFC
0E0C6 C9 24                     	   cmp #$24
0E0C8 F0 70                     	   beq DFC
0E0CA AD CE 05                  	   lda PlayerOnVine
0E0CD D0 09                     	   bne ++
0E0CF A9 02                            lda #Sfx_Bump
0E0D1 85 F0                            sta Square1SoundQueue  ;otherwise load bump sound
0E0D3 8D B0 63                  	   sta TouchingCeiling
0E0D6 F0 09                     	   beq +
0E0D8 A5 C0                     ++:	   lda Player_Y_Position
0E0DA 29 F0                     	   and #$f0
0E0DC 18                        	   clc
0E0DD 69 0C                     	   adc #$0c
0E0DF 85 C0                     	   sta Player_Y_Position
0E0E1 A9 04                     +:	   lda #$04
0E0E3 20 6A F8                  		jsr BankSwap
0E0E6 20 6D 90                  		jsr HandleUpPipeEntry
0E0E9 20 58 F8                  		jsr RestoreBank
0E0EC                           NYSpd: 
0E0EC                           if WATER_SPEED_FIX == 1
0E0EC                                   ldy #$01               ;set player's vertical speed to nullify
0E0EC                                   lda AreaType           ;PAL diff: Set vertical speed to 0 in water stages
0E0EC                                   bne NYSpd2 ; not water
0E0EC                           		lda SwimmingFlag
0E0EC                           		beq NYSpd2
0E0EC                                   dey
0E0EC                           NYSpd2: sty Player_Y_Speed     ;jump or swim
0E0EC                           else
0E0EC A9 01                             lda #$01               ;set player's vertical speed to nullify
0E0EE 85 91                             sta Player_Y_Speed     ;jump or swim
0E0F0                           endif
0E0F0 4C 3A E1                  		jmp DFC
0E0F3                           PutOnSlope4:
0E0F3 20 F9 B3                  	  jsr PutOnSlope
0E0F6 68                        	  pla
0E0F7 4C 86 E4                  	  jmp DoPlayerSideCheck
0E0FA                           JmpTo4Mas:
0E0FA 4C CE E3                  	  jmp CargarPTimer
0E0FD                           DoFootCheck:
0E0FD AD 5E 60                  	  lda OldSwim
0E100 F0 36                     	  beq DoFootCh
0E102 AD 04 07                  	  lda SwimmingFlag
0E105 D0 31                     	  bne DoFootCh
0E107 20 FE E1                  	  jsr x1
0E10A AD C0 63                  	  lda OnWater
0E10D D0 29                     	  bne DoFootCh
0E10F A5 91                     	  lda Player_Y_Speed
0E111 30 25                     	  bmi DoFootCh
0E113 A4 42                     	  ldy Player_MovingDir
0E115 88                        	  dey
0E116 A8                        	  tay
0E117 B9 13 B8                  	  lda SwimSpeed,y
0E11A 85 49                     	  sta Player_X_Speed 
0E11C A9 01                     	  lda #$01
0E11E 85 1B                     	  sta Player_State
0E120 85 91                     	  sta Player_Y_Speed
0E122 A9 00                     	  lda #$00
0E124 8D 14 07                  	  sta CrouchingFlag
0E127 8D 79 60                  	  sta CrouchingFlag2
0E12A A9 0A                     	  lda #$0a
0E12C 8D 0A 07                  	  sta VerticalForceDown
0E12F EE C0 63                  	  inc OnWater
0E132 4C 38 E1                  	  jmp DoFootCh
0E135 4C 86 E4                  DoPlayerSideCheck5: jmp DoPlayerSideCheck
0E138                           DoFootCh:	
0E138 A9 00                     	  lda #$00
0E13A 8D B0 63                  DFC:  sta TouchingCeiling	 
0E13D                           	  ;lda #$00
0E13D                           	  ;sta DetectedFoot
0E13D                           	  ;lda SwimmingFlag
0E13D                           	  ;ora OldSwim
0E13D                           	  ;bne +
0E13D                           	  ;lda Player_Y_Speed
0E13D                           	  ;bmi DoPlayerSideCheck5
0E13D A4 DD                     +:	  ldy temp1                  ;get block buffer adder offset
0E13F A5 C0                           lda Player_Y_Position
0E141 C9 CF                           cmp #$cf                   ;check to see how low player is
0E143 B0 F0                           bcs DoPlayerSideCheck5     ;if player is too far down on screen, skip all of this
0E145 48                        	  pha
0E146 8C 8C 60                  	  sty temp2a
0E149 A0 22                     	  ldy #$22
0E14B 20 8E BC                  	  jsr BlockBufferColli_Feet
0E14E A0 00                     	  ldy #$00
0E150 C9 71                     	  cmp #$71
0E152 F0 9F                     	  beq PutOnSlope4
0E154 A0 21                     	  ldy #$21
0E156 20 8E BC                  	  jsr BlockBufferColli_Feet
0E159 A0 01                     	  ldy #$01
0E15B C9 71                     	  cmp #$71
0E15D F0 94                     	  beq PutOnSlope4
0E15F AC 8C 60                  +:	  ldy temp2a
0E162 68                        	  pla
0E163 20 8E BC                        jsr BlockBufferColli_Feet  ;do player-to-bg collision detection on bottom left of player
0E166                           	  ;cmp #$71
0E166                           	  ;beq Burh2
0E166 C9 8C                     	  cmp #$8c
0E168 F0 90                     	  beq JmpTo4Mas
0E16A 20 08 F7                  	  jsr CheckForCoinMTiles     ;check to see if player touched coin with their left foot
0E16D 90 14                     	  bcc +
0E16F A5 C0                     	  lda Player_Y_Position
0E171 29 0F                     	  and #$0f
0E173 F0 0E                     	  beq +
0E175 20 CA E6                        jsr HandleCoinMetatile
0E178 A4 DD                     	  ldy temp1
0E17A C8                        	  iny
0E17B 20 8E BC                  	  jsr BlockBufferColli_Feet  ;do player-to-bg collision detection on bottom right of player
0E17E 85 00                           sta $00                    ;save bottom right metatile here
0E180 4C 89 E2                  	  jmp Burh
0E183                           micaracuando:
0E183 48                        +:	  pha                        ;save bottom left metatile to stack
0E184 20 8E BC                        jsr BlockBufferColli_Feet  ;do player-to-bg collision detection on bottom right of player
0E187 85 00                           sta $00                    ;save bottom right metatile here
0E189 68                              pla
0E18A 85 01                           sta $01                    ;pull bottom left metatile and save here
0E18C F0 2F                           beq Burh2           			 ;if anything here, skip this part
0E18E C9 5F                     	  cmp #$5f                   ;check for hidden coin block
0E190 F0 2B                           beq Burh2                      ;branch to leave if found
0E192 C9 30                     	  cmp #$30
0E194 F0 27                     	  beq Burh2
0E196 C9 60                           cmp #$60                   ;check for hidden 1-up block
0E198 F0 23                     	  beq Burh2
0E19A C9 74                     	  cmp #$74
0E19C F0 1F                     	  beq Burh2
0E19E C9 6F                     	  cmp #$6f                   ;do sub to check for hidden coin or 1-up blocks
0E1A0 F0 1B                     	  beq Burh2				         ;if either found, branch
0E1A2 C9 73                     	  cmp #$73
0E1A4 F0 17                     	  beq Burh2
0E1A6 C9 92                     	  cmp #$92
0E1A8 F0 13                     	  beq Burh2
0E1AA C9 70                     	  cmp #$70
0E1AC F0 0F                     	  beq Burh2 
0E1AE C9 71                     	  cmp #$71
0E1B0 F0 0B                     	  beq Burh2
0E1B2 C9 91                     	  cmp #$91
0E1B4 F0 07                     		 beq Burh2
0E1B6 C9 8A                     		 cmp #$8a
0E1B8 F0 03                     		 beq Burh2
0E1BA 4C 4E E2                  		 jmp +++
0E1BD                           Fuck:
0E1BD                           ;		 ldy OldSwim
0E1BD                           ;	  bne +
0E1BD                           ;	  ldy WaterCooldown
0E1BD                           ;	  bne +
0E1BD                           	  ;ldy SwimmingFlag
0E1BD                           	  ;bne +
0E1BD                           	  ;inc OldSwim
0E1BD                           	  ;inc SwimmingFlag
0E1BD                           ;	  pha
0E1BD                           ;	  jsr e
0E1BD                           ;	  pla
0E1BD                           ;	  ldy #$10
0E1BD                           ;	  sty WaterCooldown
0E1BD                           ;+:	  
0E1BD                           ;	  ldy #$01
0E1BD                           ;	  sty SwimmingFlag
0E1BD                           ;		 jmp Burh2
0E1BD 4C 89 E2                  Burh2:   jmp Burh
0E1C0                           PutOnSlope1:
0E1C0 4C F9 B3                  		 jmp PutOnSlope
0E1C3 60                        Ostia:   rts
0E1C4 AC 4E 07                  e:		 ldy AreaType
0E1C7 C0 03                     		 cpy #$03
0E1C9 D0 13                     		 bne +
0E1CB AC 9F 07                  		 ldy StarInvincibleTimer
0E1CE D0 0E                     		 bne +
0E1D0 A5 C0                     		 lda Player_Y_Position
0E1D2 38                        		 sec
0E1D3 E9 05                     		 sbc #$05
0E1D5 29 0F                     	     and #%00001111
0E1D7 C9 0B                     	     cmp #$0b
0E1D9 B0 22                     	     bcs x2
0E1DB 4C BE D8                  		 jmp KillPlayer
0E1DE AD 5A 60                  +:		 lda WaterCooldown
0E1E1 D0 1A                     		 bne x2
0E1E3                           		 ;lda Player_Y_Speed
0E1E3                           		 ;bmi x2
0E1E3 A5 49                     ++:		 lda Player_X_Speed
0E1E5 F0 0B                     		 beq +
0E1E7 29 80                     		 and #$80 
0E1E9 2A                        		 rol
0E1EA 69 00                     		 adc #$00
0E1EC A8                        		 tay
0E1ED B9 13 B8                  		 lda SwimSpeed,y
0E1F0 85 49                     		 sta Player_X_Speed
0E1F2 A9 01                     +:		 lda #$01
0E1F4 85 91                     		 sta Player_Y_Speed
0E1F6 85 1B                     		 sta Player_State
0E1F8 A9 0A                     		 lda #$0a
0E1FA 8D 0A 07                  		 sta VerticalForceDown
0E1FD 60                        x2:		 rts
0E1FE A5 0A                     x1:		 lda A_B_Buttons
0E200 29 80                     		 and #A_Button
0E202 F0 35                     		 beq ++++
0E204 A6 91                     		 ldx Player_Y_Speed
0E206 30 04                     		 bmi Brom
0E208 25 0D                     		 and PreviousA_B_Buttons
0E20A D0 2D                     		 bne ++++
0E20C AE 5A 60                  Brom:	 ldx WaterCooldown
0E20F D0 EC                     		 bne x2 
0E211 A5 0B                     		 lda Up_Down_Buttons
0E213 29 08                     		 and #Up_Dir
0E215 F0 22                     		 beq ++++
0E217 AD 4E 07                  		 lda AreaType
0E21A F0 1D                     		 beq ++++
0E21C A0 00                     		 ldy #$00
0E21E 8C 04 07                  		 sty SwimmingFlag
0E221 8C C0 63                  		 sty OnWater
0E224 C8                        		 iny
0E225 8C 02 60                  		 sty SuppressJumpNoise
0E228 AD 5A 60                  		 lda WaterCooldown
0E22B D0 09                     		 bne +
0E22D A9 09                     		 lda #$09
0E22F 8D 5A 60                  		 sta WaterCooldown
0E232 A9 04                     		 lda #Sfx_EnemyStomp
0E234 85 F0                     		 sta Square1SoundQueue
0E236 4C C6 9B                  +:		 jmp InitJS 
0E239 A5 91                     ++++:	 lda Player_Y_Speed
0E23B 10 0D                     		 bpl ++
0E23D AD 5A 60                  		 lda WaterCooldown
0E240 D0 08                     		 bne ++
0E242 A9 00                     		 lda #$00
0E244 85 91                     		 sta Player_Y_Speed
0E246 E6 C0                     		 inc Player_Y_Position
0E248 E6 C0                     		 inc Player_Y_Position
0E24A                           ++:		 
0E24A 98                        		 tya
0E24B 4C 82 E2                  		 jmp Gay2
0E24E                           +++:		 
0E24E AC 54 60                        ldy OnOffFlag
0E251 F0 07                     	  beq +++
0E253 C9 8F                     	  cmp #$8f
0E255 F0 32                     	  beq +
0E257 4C 5E E2                  	  jmp ++
0E25A C9 8E                     +++:  cmp #$8e
0E25C F0 2B                     	  beq +
0E25E                           ++:
0E25E AC 28 60                  	  ldy PTimer
0E261 D0 04                     	  bne ++
0E263 C9 72                     	  cmp #$72
0E265 F0 22                     	  beq +
0E267 C9 67                     ++:	  cmp #$67
0E269 F0 03                     	  beq ++
0E26B 4C 32 E3                  	  jmp ChkFootMTile2	
0E26E A4 91                     ++:	  ldy Player_Y_Speed
0E270 F0 08                     	  beq +++
0E272 A0 00                     ++:	  ldy #$00
0E274 8C 80 60                  	  sty OldDetectedFoot
0E277 4C 3C E3                  	  jmp ChkFootMTile
0E27A A9 00                     +++:  lda #$00
0E27C 8D 80 60                  	  sta OldDetectedFoot
0E27F 4C 89 E2                  	  jmp Burh
0E282 60                        Gay2: rts
0E283                           DoPlayerSideCheck4:
0E283 4C 86 E4                  	  jmp DoPlayerSideCheck
0E286                           Ostia2:
0E286 4C C3 E1                  	  jmp Ostia
0E289                           Burh:
0E289 A5 00                     +:    lda $00                    ;otherwise check for anything in bottom right metatile
0E28B F0 F6                     	  beq DoPlayerSideCheck4     ;and skip ahead if not
0E28D C9 91                     	  cmp #$91
0E28F D0 38                     	  bne Gay
0E291                           +:	  
0E291 AC 5E 60                  	  ldy OldSwim
0E294 D0 0F                     	  bne +
0E296 AC 5A 60                  	  ldy WaterCooldown
0E299 D0 0A                     	  bne +
0E29B 48                        	  pha
0E29C 20 C4 E1                  	  jsr e
0E29F 68                        	  pla
0E2A0 A0 08                     	  ldy #$08
0E2A2 8C 5A 60                  	  sty WaterCooldown
0E2A5 AC 4E 07                  +:	  ldy AreaType
0E2A8 C0 03                     		 cpy #$03
0E2AA D0 12                     		 bne +
0E2AC AC 9F 07                  		 ldy StarInvincibleTimer
0E2AF D0 0D                     		 bne +
0E2B1 48                        		pha
0E2B2 A5 C0                     		lda Player_Y_Position
0E2B4 38                        		 sec
0E2B5 E9 05                     		 sbc #$05
0E2B7 29 0F                     	     and #%00001111
0E2B9 C9 0B                     	     cmp #$0b
0E2BB 68                        		 pla
0E2BC B0 08                     	     bcs DoPlayerSideCheckte
0E2BE A0 01                     +:	  ldy #$01
0E2C0 8C 5E 60                  	  sty OldSwim
0E2C3 8C 04 07                  	  sty SwimmingFlag
0E2C6                           DoPlayerSideCheckte:
0E2C6 4C 86 E4                  	  jmp DoPlayerSideCheck
0E2C9                           Gay:  
0E2C9 A5 00                     	  lda $00
0E2CB F0 F9                     	  beq DoPlayerSideCheckte
0E2CD C9 5F                     	  cmp #$5f       ;check for hidden coin block
0E2CF F0 5E                           beq DoPlayerSideCheck1    ;branch to leave if found
0E2D1 C9 30                     	  cmp #$30
0E2D3 F0 5A                     	  beq DoPlayerSideCheck1
0E2D5 C9 70                     	  cmp #$70
0E2D7 F0 56                     	  beq DoPlayerSideCheck1
0E2D9 C9 60                     	  cmp #$60       ;check for hidden 1-up block
0E2DB F0 52                     	  beq DoPlayerSideCheck1
0E2DD C9 6F                     	  cmp #$6f    ;do sub to check for hidden coin or 1-up blocks
0E2DF F0 4E                     	  beq DoPlayerSideCheck1
0E2E1 C9 73                     	  cmp #$73
0E2E3 F0 4A                     	  beq DoPlayerSideCheck1
0E2E5 C9 74                     	  cmp #$74
0E2E7 F0 46                     	  beq DoPlayerSideCheck1
0E2E9 C9 91                     	  cmp #$91
0E2EB F0 42                     	  beq DoPlayerSideCheck1
0E2ED C9 8A                     	  cmp #$8a
0E2EF F0 34                     	  beq DoTheSpike2
0E2F1 C9 71                     	  cmp #$71
0E2F3 F0 3A                     	  beq DoPlayerSideCheck1
0E2F5 C9 67                     	  cmp #$67
0E2F7 F0 43                     	  beq ChkFootMTile
0E2F9 AC 54 60                  	  ldy OnOffFlag
0E2FC F0 07                     	  beq +++
0E2FE C9 8F                     	  cmp #$8f
0E300 F0 2D                     	  beq DoPlayerSideCheck1
0E302 4C 09 E3                  	  jmp ++
0E305 C9 8E                     +++:  cmp #$8e
0E307 F0 26                     	  beq DoPlayerSideCheck1
0E309                           ++:
0E309 AC 28 60                  	  ldy PTimer
0E30C D0 04                     	  bne +++
0E30E C9 72                     	  cmp #$72
0E310 F0 1D                     	  beq DoPlayerSideCheck1
0E312                           +++:
0E312 20 08 F7                  	  jsr CheckForCoinMTiles     ;check to see if player touched coin with their right foot
0E315 90 1B                           bcc ChkFootMTile2          ;if not, skip unconditional jump and continue code
0E317 20 CA E6                  	  jsr HandleCoinMetatile
0E31A 4C 2F E3                  	  jmp DoPlayerSideCheck1
0E31D                           PutOnSlope2:
0E31D 48                        	  pha
0E31E 20 F9 B3                  	  jsr PutOnSlope
0E321 68                        	  pla
0E322 4C 3C E3                  	  jmp ChkFootMTile
0E325 4C A2 E3                  DoTheSpike2: jmp DoTheSpike
0E328                           DoPlayerSideCheck2:
0E328 C9 24                     	  cmp #$24
0E32A D0 03                     	  bne DoPlayerSideCheck1
0E32C 4C 20 E7                  	  jmp FlagpoleCollision
0E32F                           DoPlayerSideCheck1:
0E32F 4C 86 E4                  	  jmp DoPlayerSideCheck
0E332                           ChkFootMTile2:
0E332 A0 01                     		  ldy #$01
0E334 8C 7F 60                  		  sty DetectedFoot
0E337 8C 80 60                  		  sty OldDetectedFoot
0E33A D0 05                     		  bne +
0E33C                           ChkFootMTile:
0E33C A0 00                     		  ldy #$00
0E33E 8C 7F 60                  		  sty DetectedFoot
0E341 A8                        +:        tay            ;save metatile value into Y
0E342 29 C0                     		  and #%11000000 ;mask out all but 2 MSB
0E344 0A                        		  asl
0E345 2A                        		  rol            ;shift and rotate d7-d6 to d1-d0
0E346 2A                        		  rol
0E347 AA                        		  tax            ;use as offset for metatile data
0E348 98                        		  tya            ;get original metatile value back
0E349 C9 27                     		  cmp #$27
0E34B F0 1D                     		  beq +++++
0E34D C9 28                     		  cmp #$28
0E34F F0 19                     		  beq +++++
0E351 C9 27                     		  cmp #$27
0E353 F0 15                     	   beq +++++
0E355 C9 28                     	   cmp #$28
0E357 F0 11                     	   beq +++++
0E359 C9 2C                     	   cmp #$2c
0E35B 90 08                     	   bcc +
0E35D C9 30                     	   cmp #$30
0E35F F0 04                     	   beq +
0E361 C9 36                     	   cmp #$36
0E363 90 05                     	   bcc +++++
0E365                           +:	   
0E365 DD D5 E7                  		  cmp ClimbMTileUpperExt,x  ;compare current metatile with climbable metatiles
0E368 B0 BE                               bcs DoPlayerSideCheck2      ;if so, branch
0E36A                           chorizo:
0E36A A4 91                     +++++:    ldy Player_Y_Speed         ;check player's vertical speed
0E36C 30 C1                               bmi DoPlayerSideCheck1      ;if player moving upwards, branch
0E36E C9 91                     		  cmp #$91
0E370 D0 11                     		  bne +++
0E372                           ++:		  ;ldx WaterCooldown
0E372                           		  ;bne DoPlayerSideCheck1
0E372 A2 01                     		  ldx #$01
0E374 8E 04 07                  		  stx SwimmingFlag
0E377 4C 86 E4                  		  jmp DoPlayerSideCheck
0E37A 4C FA E3                  MIERDA2: jmp MIERDA3
0E37D 4C 29 E4                  -:		  jmp MIERDA
0E380 4C 0F E4                  ContChk2: jmp ContChk
0E383 C9 8B                     +++:	  cmp #$8b
0E385 F0 F3                     		  beq MIERDA2
0E387 C9 8C                     		  cmp #$8c
0E389 F0 43                     		  beq CargarPTimer
0E38B C9 71                     		  cmp #$71
0E38D F0 A0                     		  beq DoPlayerSideCheck1
0E38F AA                        		  tax
0E390 C9 23                     		  cmp #$23
0E392 D0 06                     		  bne +++
0E394 A5 91                     		  lda Player_Y_Speed
0E396 F0 02                     		  beq ++++
0E398 10 00                     		  bpl +++
0E39A                           ++++:	  ;jmp SmolJmp
0E39A 8A                        +++:      txa
0E39B C9 C5                     		  cmp #$c5
0E39D D0 70                               bne ContChk                ;if player did not touch axe, skip ahead
0E39F 4C DE E6                            jmp HandleAxeMetatile      ;otherwise jump to set modes of operation
0E3A2                           		  
0E3A2                           DoTheSpike:        
0E3A2 48                        		  pha
0E3A3 A5 C0                     		  lda Player_Y_Position
0E3A5 29 0F                     		  and #$0f
0E3A7 C9 02                     		  cmp #$02
0E3A9 90 0C                     		  bcc @g
0E3AB AD 9F 07                  		  lda StarInvincibleTimer
0E3AE 0D 9E 07                  		  ora InjuryTimer
0E3B1 D0 08                     		  bne @oda
0E3B3 68                        		  pla
0E3B4 4C E2 D8                  		  jmp InjurePlayer
0E3B7 68                        @g:		  pla
0E3B8 4C 86 E4                  		  jmp DoPlayerSideCheck
0E3BB 68                        @oda:	  pla
0E3BC A5 C0                     		  lda Player_Y_Position
0E3BE 29 F0                     		  and #$f0
0E3C0 18                        		  clc
0E3C1 69 03                     		  adc #$03
0E3C3 85 C0                     		  sta Player_Y_Position
0E3C5 4C 67 E4                  		  jmp eda
0E3C8                           DoPlayerSideCheck6:
0E3C8 4C 86 E4                  		  jmp DoPlayerSideCheck
0E3CB                           PutOnSlope3:
0E3CB 4C F9 B3                  		  jmp PutOnSlope
0E3CE                           CargarPTimer:
0E3CE A9 09                     	      lda #$08+1			; +1 because this decrements before reaching the check for jumping
0E3D0 8D 21 7E                  		  sta PCooldown	  	
0E3D3 AD 28 60                  		  lda PTimer
0E3D6 D0 0A                     		  bne +++++
0E3D8 AD 53 60                  		  lda OnOffBits
0E3DB 29 01                     		  and #%00000001
0E3DD 49 02                     		  eor #%00000010
0E3DF 8D 53 60                  		  sta OnOffBits
0E3E2 A9 5F                     +++++:	  lda #$5f
0E3E4 85 EC                               sta AreaMusicQueue     ;store in queue and leave
0E3E6 A9 60                               lda #$60
0E3E8 8D 28 60                  		  sta PTimer
0E3EB A9 00                     		  lda #$00
0E3ED 85 91                               sta Player_Y_Speed         ;initialize vertical speed and fractional
0E3EF 8D 33 04                            sta Player_Y_MoveForce     ;movement force to stop player's vertical movement
0E3F2 8D 84 04                            sta StompChainCounter      ;initialize enemy stomp counter
0E3F5 85 1B                               sta Player_State
0E3F7 4C F4 E6                  		  jmp ErACM
0E3FA                           
0E3FA A9 02                     MIERDA3:		  lda #Sfx_Bump
0E3FC 85 F0                     		  sta Square1SoundQueue
0E3FE A5 0A                     		  lda A_B_Buttons
0E400 29 80                     		  and #A_Button
0E402 F0 03                     		  beq +++
0E404 A9 F7                     		  lda #$f7
0E406 2C                        		  .db $2c
0E407                           +++:	  
0E407 A9 FB                     		  lda #$fb
0E409 2C                        		  .db $2c
0E40A A9 FC                     SmolJmp:  lda #$fc
0E40C 85 91                     		  sta Player_Y_Speed
0E40E 60                        		  rts
0E40F                           ContChk:  
0E40F                                     ;ldy JumpspringAnimCtrl     ;if jumpspring animating right now,
0E40F                                     ;beq +
0E40F                           		  ;jmp InitSteP               ;branch ahead
0E40F A4 04                     +:        ldy $04                    ;check lower nybble of vertical coordinate returned
0E411                           		  ;ldx FramesMissed
0E411                           		  ;bne +
0E411 C0 05                     		  cpy #$05
0E413                           		                    ;from collision detection routine
0E413 90 47                               bcc LandPlyr               ;if lower nybble < 5, branch
0E415 C9 63                     		  cmp #$63
0E417 F0 6D                     		  beq DoPlayerSideCheck
0E419 C9 88                     		  cmp #$88
0E41B F0 69                     		  beq DoPlayerSideCheck
0E41D C9 91                     		  cmp #$91
0E41F D0 08                     		  bne ++  
0E421                           +:		  ;ldy WaterCooldown
0E421                           		  ;bne DoPlayerSideCheck
0E421                           		  
0E421 A0 01                     		  ldy #$01
0E423 8C 04 07                  		  sty SwimmingFlag
0E426 4C 86 E4                  		  jmp DoPlayerSideCheck
0E429                           MIERDA:
0E429 C9 92                     ++:		  cmp #$92
0E42B F0 59                     		  beq DoPlayerSideCheck
0E42D AC 54 60                  		  ldy OnOffFlag
0E430 F0 07                     		  beq +++
0E432 C9 8F                     		  cmp #$8f
0E434 F0 50                     		  beq DoPlayerSideCheck
0E436 4C 3D E4                  		  jmp ++
0E439 C9 8E                     +++:	  cmp #$8e
0E43B F0 49                     		  beq DoPlayerSideCheck
0E43D                           ++:
0E43D AC 28 60                  		  ldy PTimer
0E440 D0 04                     		  bne +
0E442 C9 72                     		  cmp #$72
0E444 F0 40                     		  beq DoPlayerSideCheck
0E446                           +:
0E446 C9 71                     		  cmp #$71
0E448 F0 3C                     		  beq DoPlayerSideCheck
0E44A                           		 ; jmp PutOnSlope
0E44A C9 23                     +:		  cmp #$23
0E44C D0 06                     		  bne ++
0E44E A5 91                     		  lda Player_Y_Speed 
0E450 F0 02                     		  beq +++
0E452 10 00                     		  bpl ++
0E454                           +++:	  ;jmp SmolJmp
0E454 98                        ++:       tya
0E455 A5 42                     		  lda Player_MovingDir
0E457 85 00                               sta $00                    ;use player's moving direction as temp variable
0E459 4C 53 BB                            jmp ImpedePlayerMove       ;jump to impede player's movement in that direction
0E45C                           LandPlyr: ;jsr ChkForLandJumpSpring   ;do sub to check for jumpspring metatiles and deal with it
0E45C A9 F0                     		  lda #$f0
0E45E 25 C0                               and Player_Y_Position      ;mask out lower nybble of player's vertical position
0E460 85 C0                               sta Player_Y_Position      ;and store as new vertical position to land player properly
0E462 A9 00                     		  lda #$00
0E464 8D EA 63                  		  sta GroundedTimer
0E467                           eda:	  
0E467                           		  
0E467 A9 04                               lda #$04
0E469 20 6A F8                            jsr BankSwap
0E46C 20 05 90                            jsr HandlePipeEntry        ;do sub to process potential pipe entry
0E46F 20 58 F8                            jsr RestoreBank
0E472                           
0E472 A9 01                     		  lda #$01
0E474 8D AF 63                  		  sta TouchingFloor
0E477 A9 00                               lda #$00
0E479                                     ;sta DetectedFoot
0E479 85 91                     		  sta Player_Y_Speed         ;initialize vertical speed and fractional
0E47B 8D 33 04                            sta Player_Y_MoveForce     ;movement force to stop player's vertical movement
0E47E 8D 84 04                            sta StompChainCounter      ;initialize enemy stomp counter
0E481                            ;lda #$00
0E481 85 1B                               sta Player_State           ;set player's state to normal
0E483 4C 95 E4                  		  jmp +
0E486                           DoPlayerSideCheck:
0E486 AD EA 63                  	  lda GroundedTimer
0E489 C9 20                     	  cmp #$20
0E48B B0 03                     	  bcs ++
0E48D EE EA 63                  	  inc GroundedTimer
0E490 A9 00                     ++:	  lda #$00
0E492 8D AF 63                  	  sta TouchingFloor
0E495 A4 DD                     +:	  ldy temp1     ;get block buffer adder offset
0E497 C8                              iny
0E498 C8                              iny           ;increment offset 2 bytes to use adders for side collisions
0E499 AD 65 07                  	  lda Player_OldCollisionBits
0E49C C9 FD                     	  cmp #$fd
0E49E F0 00                     	  beq +
0E4A0 A9 02                     +:    lda #$02      ;set value here to be used as counter
0E4A2 85 00                           sta $00
0E4A4 D0 04                     	  bne SideCheckLoop
0E4A6                           BHalf1
0E4A6 4C 4D E5                  	  jmp BHalf
0E4A9 60                        SideChekEx:	  rts
0E4AA                           SideCheckLoop:
0E4AA C8                               iny                       ;move onto the next one
0E4AB 84 DD                            sty temp1 	   ;store it
0E4AD 8C BF 7F                  	   sty $7fbf
0E4B0 A5 C0                            lda Player_Y_Position
0E4B2 C9 19                            cmp #$19                  ;check player's vertical position
0E4B4 90 F0                            bcc BHalf1                 ;if player is in status bar area, branch ahead to skip this part
0E4B6 C9 F0                            cmp #$f0
0E4B8 B0 EF                            bcs SideCheckLoop-1                   ;branch to leave if player is too far down
0E4BA 20 92 BC                  	   jsr BlockBufferColli_Side ;do player-to-bg collision detection on one half of player
0E4BD F0 E7                            beq BHalf1                 ;branch ahead if nothing found
0E4BF C9 5F                     	   cmp #$5f       ;check for hidden coin block
0E4C1 F0 E3                            beq BHalf1    ;branch to leave if found
0E4C3 C9 60                            cmp #$60       ;check for hidden 1-up block
0E4C5 F0 DF                     	   beq BHalf1
0E4C7 C9 74                     	   cmp #$74
0E4C9 F0 DB                     	   beq BHalf1
0E4CB C9 73                     	   cmp #$73
0E4CD F0 D7                     	   beq BHalf1
0E4CF C9 70                     	   cmp #$70
0E4D1 D0 06                     	   bne +
0E4D3 A6 0E                     		   ldx GameEngineSubroutine
0E4D5 E0 05                     		   cpx #$05
0E4D7 D0 CD                     		   bne BHalf1
0E4D9 C9 6F                     +:	   cmp #$6f    ;do sub to check for hidden coin or 1-up blocks
0E4DB F0 C9                            beq BHalf1                  ;branch to leave if either found
0E4DD C9 30                     	   cmp #$30
0E4DF F0 C5                     	   beq BHalf1
0E4E1 C9 63                     	   cmp #$63
0E4E3 F0 C1                     	   beq BHalf1
0E4E5 C9 88                     	   cmp #$88
0E4E7 F0 BD                     	   beq BHalf1
0E4E9 C9 1C                            cmp #$1c                  ;otherwise check for pipe metatiles
0E4EB F0 B9                            beq BHalf1                ;if collided with sideways pipe (top), branch ahead
0E4ED C9 6B                            cmp #$6b
0E4EF F0 B5                            beq BHalf1                 ;if collided with water pipe (top), branch ahead
0E4F1 C9 71                     	   cmp #$71
0E4F3 F0 B1                     	   beq BHalf1
0E4F5 C9 91                     	   cmp #$91
0E4F7 D0 1A                     	   bne +++
0E4F9 AC 4E 07                  ++:	   ldy AreaType
0E4FC C0 03                     	   cpy #$03
0E4FE D0 08                     	   bne ++++
0E500 AC 9F 07                  		   ldy StarInvincibleTimer
0E503 D0 03                     		   bne ++++
0E505 4C BE D8                  		   jmp KillPlayer
0E508                           ++++:  ;ldy WaterCooldown
0E508                           	   ;bne BHalf
0E508 A0 01                     	   ldy #$01
0E50A 8C 04 07                  	   sty SwimmingFlag
0E50D 4C 4D E5                  	   jmp BHalf
0E510                           CheckSideMTiles1:
0E510 4C F7 E5                  	   jmp CheckSideMTiles
0E513 AC 54 60                  +++:   ldy OnOffFlag
0E516 F0 07                     	   beq +++
0E518 C9 8F                     		   cmp #$8f
0E51A F0 31                     		   beq BHalf
0E51C 4C 23 E5                  		   jmp ++
0E51F C9 8E                     +++:   cmp #$8e
0E521 F0 2A                     	   beq BHalf
0E523 AC 28 60                  ++:	   ldy PTimer
0E526 D0 04                     	   bne +
0E528 C9 72                     		   cmp #$72
0E52A F0 21                     		   beq BHalf
0E52C                           +:
0E52C A8                               tay            ;save metatile value into Y
0E52D 29 C0                            and #%11000000 ;mask out all but 2 MSB
0E52F 0A                               asl
0E530 2A                               rol            ;shift and rotate d7-d6 to d1-d0
0E531 2A                               rol
0E532 AA                               tax            ;use as offset for metatile data
0E533 98                               tya            ;get original metatile value back
0E534                           	   
0E534 C9 27                     	   cmp #$27
0E536 F0 D8                     	   beq CheckSideMTiles1
0E538 C9 28                     	   cmp #$28
0E53A F0 D4                     	   beq CheckSideMTiles1
0E53C C9 2C                     	   cmp #$2c
0E53E 90 08                     	   bcc +
0E540 C9 30                     	   cmp #$30
0E542 F0 04                     	   beq +
0E544 C9 36                     	   cmp #$36
0E546 90 C8                     	   bcc CheckSideMTiles1
0E548 DD D5 E7                  +:	   cmp ClimbMTileUpperExt,x  ;compare current metatile with climbable metatiles
0E54B 90 C3                     	   bcc CheckSideMTiles1
0E54D A4 DD                     BHalf: ldy temp1                 ;load block adder offset
0E54F C8                               iny                       ;increment it
0E550 A5 C0                            lda Player_Y_Position     ;get player's vertical position
0E552 C9 08                            cmp #$08
0E554 90 55                            bcc ExSCH2                 ;if too high, branch to leave
0E556 C9 F0                            cmp #$f0
0E558 B0 51                            bcs ExSCH2                 ;if too low, branch to leave
0E55A 20 92 BC                         jsr BlockBufferColli_Side ;do player-to-bg collision detection on other half of player
0E55D F0 4D                     	   beq Ultramas1
0E55F C9 5F                     	   cmp #$5f       ;check for hidden coin block
0E561 F0 49                            beq Ultramas1    ;      branch to leave if found
0E563 C9 60                            cmp #$60       ;check for hidden 1-up block
0E565 F0 45                     	   beq Ultramas1
0E567 C9 74                     	   cmp #$74
0E569 F0 41                     	   beq Ultramas1
0E56B                           	   ;ldx #$00
0E56B                           	   ;stx OnSlope
0E56B C9 30                     	   cmp #$30
0E56D F0 3D                     	   beq Ultramas1
0E56F C9 6F                     	   cmp #$6f    ;do sub to check for hidden coin or 1-up blocks
0E571 F0 39                            beq Ultramas1                     ;branch to leave if either found
0E573 C9 73                     	   cmp #$73
0E575 F0 35                     	   beq Ultramas1
0E577 C9 70                     	   cmp #$70
0E579 D0 06                     	   bne +
0E57B A6 0E                     		   ldx GameEngineSubroutine
0E57D E0 05                     		   cpx #$05
0E57F D0 2B                     		   bne Ultramas1
0E581                           +:	   
0E581 C9 71                     	   cmp #$71
0E583 F0 27                     	   beq Ultramas1
0E585 C9 91                     	   cmp #$91
0E587 D0 16                     	   bne +++
0E589 AE 4E 07                  ++:	   ldx AreaType
0E58C E0 03                     	   cpx #$03
0E58E F0 07                     	   beq ++++
0E590                           -:	  ; ldx WaterCooldown
0E590                           	   ;bne +
0E590 A2 01                     	   ldx #$01
0E592 8E 04 07                  	   stx SwimmingFlag
0E595 D0 58                     	   bne +
0E597 AE 9F 07                  ++++:  ldx StarInvincibleTimer
0E59A D0 F4                     	   bne -
0E59C 4C BE D8                  	   jmp KillPlayer
0E59F AE 54 60                  +++:   ldx OnOffFlag
0E5A2 F0 0B                     	   beq +++
0E5A4 C9 8F                     	   cmp #$8f
0E5A6 F0 47                     	   beq +
0E5A8 4C B3 E5                  	   jmp ++
0E5AB 60                        ExSCH2: rts
0E5AC                           Ultramas1:
0E5AC 4C EF E5                  	   jmp Ultramas
0E5AF C9 8E                     +++:   cmp #$8e
0E5B1 F0 3C                     	   beq +
0E5B3                           ++:	   
0E5B3 AE 28 60                  	   ldx PTimer
0E5B6 D0 04                     	   bne ++
0E5B8 C9 72                     	   cmp #$72
0E5BA F0 33                     	   beq +
0E5BC                           ++:
0E5BC C9 88                     +++:   cmp #$88
0E5BE F0 2F                     	   beq +
0E5C0 C9 63                     	   cmp #$63
0E5C2 F0 2B                     	   beq +
0E5C4 C9 92                     	   cmp #$92
0E5C6 F0 27                     	   beq +
0E5C8 A8                        	   tay            ;save metatile value into Y
0E5C9 29 C0                            and #%11000000 ;mask out all but 2 MSB
0E5CB 0A                               asl
0E5CC 2A                               rol            ;shift and rotate d7-d6 to d1-d0
0E5CD 2A                               rol
0E5CE AA                               tax            ;use as offset for metatile data
0E5CF 98                               tya            ;get original metatile value back
0E5D0 C9 27                     	   cmp #$27
0E5D2 F0 23                     	   beq CheckSideMTiles
0E5D4 C9 28                     	   cmp #$28
0E5D6 F0 1F                     	   beq CheckSideMTiles
0E5D8 C9 2C                     	   cmp #$2c
0E5DA 90 08                     	   bcc ++
0E5DC C9 30                     	   cmp #$30
0E5DE F0 04                     	   beq ++
0E5E0 C9 36                     	   cmp #$36
0E5E2 90 13                     	   bcc CheckSideMTiles
0E5E4                           ++:	   
0E5E4 C9 71                     	   cmp #$71
0E5E6 F0 0F                     	   beq CheckSideMTiles
0E5E8 DD D5 E7                         cmp ClimbMTileUpperExt,x  ;compare current metatile with climbable metatiles
0E5EB F0 02                       	   beq +
0E5ED D0 08                            bne CheckSideMTiles       ;if something found, branch
0E5EF                           Ultramas:
0E5EF C6 00                     +:     dec $00                   ;otherwise decrement counter
0E5F1 D0 01                            bne SideCheckLoop1        ;run code until both sides of player are checked
0E5F3 60                        ExSCH: rts                       ;leave
0E5F4                           SideCheckLoop1:
0E5F4 4C AA E4                  	   jmp SideCheckLoop
0E5F7                           CheckSideMTiles:
0E5F7 C9 5F                     		  cmp #$5f       ;check for hidden coin block
0E5F9 F0 F8                               beq ExSCH    ;branch to leave if found
0E5FB C9 60                               cmp #$60       ;check for hidden 1-up block
0E5FD F0 F4                     		  beq ExSCH
0E5FF C9 30                     		  cmp #$30
0E601 F0 F0                     	      beq ExSCH
0E603 C9 74                     		  cmp #$74
0E605 F0 EC                     		  beq ExSCH
0E607 C9 70                     		  cmp #$70
0E609 D0 06                     		  bne +
0E60B A6 0E                     			  ldx GameEngineSubroutine
0E60D E0 05                     			  cpx #$05
0E60F D0 E2                     			  bne ExSCH
0E611 C9 6F                     +:	      cmp #$6f
0E613 F0 DE                               beq ExSCH
0E615 C9 63                     		  cmp #$63
0E617 F0 DA                     		  beq ExSCH ;branch to leave if either found
0E619 C9 88                     		  cmp #$88
0E61B F0 D6                     	      beq ExSCH
0E61D C9 92                     	      cmp #$92
0E61F F0 D2                     		  beq ExSCH
0E621 AC 28 60                  +++++:	  ldy PTimer
0E624 D0 04                     	      bne SiPuta
0E626 C9 72                     	      cmp #$72
0E628 F0 C9                     	      beq ExSCH
0E62A                           SiPuta:
0E62A C9 71                     		  cmp #$71
0E62C F0 C5                     		  beq ExSCH
0E62E                           		  ;lda OnSlope
0E62E                           		  ;bne +
0E62E                           		  ;dec Player_Y_Position 
0E62E                           +:		  ;jmp PutOnSlope
0E62E A2 00                     +++:	  ldx #$00
0E630 8E 6B 60                  		  stx OnSlope
0E633 C9 8A                     		  cmp #$8a
0E635 D0 12                     		  bne ++
0E637 48                        		  pha
0E638                           		  ;lda Player_Y_Position
0E638                           		  ;and #$0f
0E638                           		  ;cmp #$02
0E638                           		  ;bcc +++
0E638 AD 9F 07                  		  lda StarInvincibleTimer
0E63B 0D 9E 07                  		  ora InjuryTimer
0E63E D0 08                     		  bne +
0E640 68                        		  pla
0E641 4C E2 D8                  		  jmp InjurePlayer
0E644 68                        +++:	  pla
0E645 4C 69 E6                  		  jmp ContSChk
0E648 68                        +:		  pla
0E649 A8                        ++:       tay            ;save metatile value into Y
0E64A 29 C0                     		  and #%11000000 ;mask out all but 2 MSB
0E64C 0A                        		  asl
0E64D 2A                        		  rol            ;shift and rotate d7-d6 to d1-d0
0E64E 2A                        		  rol
0E64F AA                        		  tax            ;use as offset for metatile data
0E650 98                        		  tya            ;get original metatile value back
0E651 DD D5 E7                  		  cmp ClimbMTileUpperExt,x  ;compare current metatile with climbable metatiles
0E654 90 13                               bcc ContSChk               ;if not found, skip and continue with code
0E656 C9 24                     		  cmp #$24
0E658 F0 0C                     		  beq +
0E65A C9 25                     		  cmp #$25
0E65C F0 08                     		  beq +
0E65E C9 26                     		  cmp #$26
0E660 F0 04                     		  beq +
0E662 C9 36                     		  cmp #$36
0E664 90 03                     		  bcc ContSChk
0E666                           +:        
0E666 4C 0D E7                            jmp HandleClimbing         ;otherwise jump to handle climbing
0E669 20 08 F7                  ContSChk: jsr CheckForCoinMTiles     ;check to see if player touched coin
0E66C B0 5C                               bcs HandleCoinMetatile
0E66E C9 67                     		  cmp #$67
0E670 D0 03                     		  bne ChkPBtm                ;if not found, branch ahead to continue cude
0E672                                    ; lda JumpspringAnimCtrl     ;otherwise check jumpspring animation control
0E672                                     ;bne ExCSM2                 ;branch to leave if set
0E672 4C C7 E6                            jmp StopPlayerMove         ;otherwise jump to impede player's movement
0E675 A4 1B                     ChkPBtm:  ldy Player_State           ;get player's state
0E677                                     ;cpy #$00                   ;check for player's state set to normal
0E677 D0 4E                               bne StopPlayerMove         ;if not, branch to impede player's movement
0E679 A4 31                               ldy PlayerFacingDir        ;get player's facing direction
0E67B 88                                  dey
0E67C D0 49                               bne StopPlayerMove         ;if facing left, branch to impede movement
0E67E C9 6C                               cmp #$6c                   ;otherwise check for pipe metatiles
0E680 F0 04                               beq PipeDwnS               ;if collided with sideways pipe (bottom), branch
0E682 C9 1F                               cmp #$1f                   ;if collided with water pipe (bottom), continue
0E684 D0 41                               bne StopPlayerMove         ;otherwise branch to impede player's movement
0E686 AD C4 03                  PipeDwnS: lda Player_SprAttrib       ;check player's attributes
0E689 D0 04                               bne PlyrPipe               ;if already set, branch, do not play sound again
0E68B A0 10                               ldy #Sfx_PipeDown_Injury
0E68D 84 F0                               sty Square1SoundQueue      ;otherwise load pipedown/injury sound
0E68F 09 20                     PlyrPipe: ora #%00100000
0E691 8D C4 03                            sta Player_SprAttrib       ;set background priority bit in player attributes
0E694 A9 00                               lda #$00
0E696 8D 65 60                  		  sta DebugSwim
0E699 8D 04 60                  		  sta GrabFlag
0E69C 8D 1D 60                  		  sta GrabDown
0E69F 8D 78 60                  		  sta GrabUp
0E6A2 8D 59 60                  		  sta LakituRespawning
0E6A5 8D 25 60                  		  sta EnemyDefeatPitch
0E6A8 A5 78                     		  lda Player_X_Position
0E6AA 29 0F                               and #%00001111             ;get lower nybble of player's horizontal coordinate
0E6AC F0 0A                               beq ChkGERtn               ;if at zero, branch ahead to skip this part
0E6AE A9 34                               lda #$34
0E6B0 8D DE 06                            sta ChangeAreaTimer
0E6B3 A9 01                     		  lda #$01
0E6B5 8D 7C 60                  		  sta DontDecPT
0E6B8 A5 0E                     ChkGERtn: lda GameEngineSubroutine   ;get number of game engine routine running
0E6BA C9 07                               cmp #$07
0E6BC F0 08                               beq ExCSM2                  ;if running player entrance routine or
0E6BE C9 08                               cmp #$08                   ;player control routine, go ahead and branch to leave
0E6C0 D0 04                               bne ExCSM2
0E6C2 A9 02                               lda #$02
0E6C4 85 0E                               sta GameEngineSubroutine   ;otherwise set sideways pipe entry routine to run
0E6C6 60                        ExCSM2:   rts                        ;and leavex
0E6C7                           
0E6C7                           ;--------------------------------
0E6C7                           ;$02 - high nybble of vertical coordinate from block buffer
0E6C7                           ;$04 - low nybble of horizontal coordinate from block buffer
0E6C7                           ;$06-$07 - block buffer address
0E6C7                           
0E6C7                           StopPlayerMove:                     ;leave
0E6C7 4C 53 BB                        jmp ImpedePlayerMove
0E6CA                           	  
0E6CA                           HandleCoinMetatile:
0E6CA AD 00 64                        lda VRAM_Buffer1_Offset
0E6CD C9 20                     	  cmp #$20
0E6CF B0 F5                     	  bcs ExCSM2
0E6D1 A9 01                     	  lda #Sfx_CoinGrab
0E6D3 85 EF                           sta Square2SoundQueue ;load coin grab sound and leave
0E6D5 20 F4 E6                  	  jsr ErACM             ;do sub to erase coin metatile from block buffer
0E6D8 EE 48 07                  	  inc CoinTallyFor1Ups  ;increment coin tally used for 1-up blocks
0E6DB 4C 19 A6                  	  jmp GiveOneCoin		;give coin
0E6DE                           	  
0E6DE                           HandleAxeMetatile:
0E6DE                           
0E6DE                           ;       ldx BowserFront_Offset
0E6DE                           ;       lda Enemy_ID,x
0E6DE                           ;       cmp #Bowser
0E6DE                           ;       bne +
0E6DE                           ;       jmp ContChk
0E6DE                           ;+
0E6DE                                  
0E6DE                           ;       lda #$00            ;load blank metatile
0E6DE                           ;       sta ($06),y         ;store to remove old contents from block buffer
0E6DE                           ;       jmp RemoveCoin_Axe  ;update the screen accordingly
0E6DE                           
0E6DE                           
0E6DE                           ;       jsr SetupVictoryMode
0E6DE                           ;       lda #$03
0E6DE                           ;       sta OperMode_Task   ;reset secondary mode
0E6DE                           ;       lda #$02
0E6DE                           ;       sta OperMode        ;set primary mode to autoctrl mode
0E6DE                           ;       rts
0E6DE A9 00                            lda #$00
0E6E0 8D 72 07                         sta OperMode_Task   ;reset secondary mode
0E6E3 A9 02                            lda #$02
0E6E5 8D 70 07                         sta OperMode        ;set primary mode to autoctrl mode
0E6E8 A9 18                            lda #$18
0E6EA 85 49                            sta Player_X_Speed  ;set horizontal speed and continue to erase axe metatile
0E6EC A9 01                     	   lda #$01
0E6EE 8D A2 60                  	   sta scrolldir
0E6F1 8D 99 60                  	   sta olddirscroll
0E6F4                           ErACM: 
0E6F4                           	   ;lda bocata2
0E6F4                           	   ;bne +
0E6F4                           	   ;inc bocata2
0E6F4 A4 02                     	   ldy $02             ;load vertical high nybble offset for block buffer
0E6F6 AE 4E 07                  	   ldx AreaType
0E6F9 BD 74 8A                  	   lda blank,x
0E6FC 91 F7                            sta ($f7),y         ;store to remove old contents from block buffer
0E6FE 4C 68 8A                         jmp RemoveCoin_Axe  ;update the screen accordingly
0E701 60                        +:	   rts
0E702                           ;--------------------------------
0E702                           ;$02 - high nybble of vertical coordinate from block buffer
0E702                           ;$04 - low nybble of horizontal coordinate from block buffer
0E702                           ;$06-$07 - block buffer address
0E702                           
0E702                           ClimbXPosAdder:
0E702 F9 07 07                        .db $f9, $07, $07
0E705                           
0E705                           ClimbPLocAdder:
0E705 FF 00 00                        .db $ff, $00, $00
0E708                           
0E708                           FlagpoleYPosData:
0E708 18 22 50 68 90                  .db $18, $22, $50, $68, $90
0E70D                           
0E70D                           HandleClimbing:
0E70D C9 26                     	  cmp #$26
0E70F F0 57                     	  beq VineCollision
0E711                           	  
0E711 A4 04                     	  ldy $04            ;check low nybble of horizontal coordinate returned from
0E713 C0 06                           cpy #$06           ;collision detection routine against certain values, this
0E715 90 04                           bcc ExHC           ;makes actual physical part of vine or flagpole thinner
0E717 C0 0A                           cpy #$0a           ;than 16 pixels
0E719 90 01                           bcc ChkForFlagpole
0E71B 60                        ExHC: rts                ;leave if too far left or too far right
0E71C                           
0E71C                           ChkForFlagpole:
0E71C C9 25                           cmp #$25
0E71E D0 48                           bne VineCollision      ;branch to alternate code if flagpole shaft not found
0E720                           
0E720                           FlagpoleCollision:
0E720 A5 0E                           lda GameEngineSubroutine
0E722 C9 05                           cmp #$05                  ;check for end-of-level routine running
0E724 F0 52                           beq PutPlayerOnVine       ;if running, branch to end of climbing code
0E726 A9 01                           lda #$01
0E728 85 31                           sta PlayerFacingDir       ;set player's facing direction to right
0E72A EE 23 07                        inc ScrollLock            ;set scroll lock flag
0E72D A5 0E                           lda GameEngineSubroutine
0E72F C9 04                           cmp #$04                  ;check for flagpole slide routine running
0E731 F0 2B                           beq RunFR                 ;if running, branch to end of flagpole code here
0E733 A9 33                           lda #BulletBill_CannonVar ;load identifier for bullet bills (cannon variant)
0E735 85 00                           sta $00           ;store identifier here
0E737                           ;      lda #$00
0E737                           ;      ldx #$05          ;check for identifier in enemy object buffer
0E737                           ;eie:  ldy Enemy_ID,x
0E737                           ;      ;cpy $00           ;if not found, branch
0E737                           ;      bne ++
0E737                           ;      sta Enemy_Flag,x  ;if found, deactivate enemy object flag
0E737                           ;++:   dex               ;do this until all slots are checked
0E737                           ;      bpl eie
0E737 A9 00                     	  lda #$00
0E739 8D 79 60                  	  sta CrouchingFlag2
0E73C A9 00                     	  lda #$00
0E73E 8D 91 60                  	  sta pspeed
0E741 A9 80                           lda #Silence
0E743 85 ED                           sta EventMusicQueue       ;silence music
0E745 4A                              lsr
0E746 8D 13 07                        sta FlagpoleSoundQueue    ;load flagpole sound into flagpole sound queue
0E749 8D E3 63                  	  sta OldSquare1SoundBuffer
0E74C A2 04                           ldx #$04                  ;start at end of vertical coordinate data
0E74E A5 C0                           lda Player_Y_Position
0E750 8D 0F 07                        sta FlagpoleCollisionYPos ;store player's vertical coordinate here to be used later
0E753                           
0E753                           ChkFlagpoleYPosLoop:
0E753 DD 08 E7                         cmp FlagpoleYPosData,x    ;compare with current vertical coordinate data
0E756 B0 03                            bcs MtchF                 ;if player's => current, branch to use current offset
0E758 CA                               dex                       ;otherwise decrement offset to use 
0E759 D0 F8                            bne ChkFlagpoleYPosLoop   ;do this until all data is checked (use last one if all checked)
0E75B 8E 0F 01                  MtchF: stx FlagpoleScore         ;store offset here to be used later
0E75E A9 04                     RunFR: lda #$04
0E760 85 0E                            sta GameEngineSubroutine  ;set value to run flagpole slide routine
0E762 8D CE 05                  	   sta PlayerOnVine
0E765 4C 78 E7                         jmp PutPlayerOnVine       ;jump to end of climbing code
0E768                           
0E768                           VineCollision:
0E768 C9 26                           cmp #$26                  ;check for climbing metatile used on vines
0E76A D0 0C                           bne PutPlayerOnVine
0E76C AD CE 05                        lda PlayerOnVine
0E76F D0 07                     		 bne +
0E771 AD FC 06                  		 lda SavedJoypad1Bits
0E774 29 08                     		 and #Up_Dir
0E776 F0 5C                     		 beq ExPVne
0E778                           +:       
0E778                           	  ;lda Player_Y_Position     ;check player's vertical coordinate
0E778                                 ;cmp #$20                  ;for being in status bar area
0E778                                 ;bcs PutPlayerOnVine       ;branch if not that far up
0E778                                 ;lda #$01
0E778                                 ;sta GameEngineSubroutine  ;otherwise set to run autoclimb routine next frame
0E778                           
0E778                           PutPlayerOnVine:
0E778 AD CE 05                  		 lda PlayerOnVine
0E77B D0 10                     		 bne +
0E77D AD 04 60                  		 lda GrabFlag
0E780 D0 52                     		 bne ExPVne
0E782 AD FC 06                  		 lda SavedJoypad1Bits
0E785 29 08                     		 and #Up_Dir
0E787 F0 4B                     		 beq ExPVne
0E789 A5 91                     		 lda Player_Y_Speed
0E78B 30 47                     		 bmi ExPVne
0E78D A5 31                     +:       lda PlayerFacingDir
0E78F C9 03                     		 cmp #$03
0E791 90 04                     		 bcc +
0E793 A9 02                     		 lda #$02
0E795 85 31                     		 sta PlayerFacingDir
0E797 A9 03                     +:		 lda #$03                ;set player state to climbing
0E799 85 1B                              sta Player_State
0E79B 8D CE 05                  		 sta PlayerOnVine
0E79E A9 00                              lda #$00                ;nullify player's horizontal speed
0E7A0 85 49                              sta Player_X_Speed      ;and fractional horizontal movement force
0E7A2 8D 05 07                           sta Player_X_MoveForce
0E7A5 8D 14 07                  		 sta CrouchingFlag
0E7A8 8D 79 60                  		 sta CrouchingFlag2
0E7AB A5 78                              lda Player_X_Position   ;get player's horizontal coordinate
0E7AD 38                                 sec
0E7AE ED 1C 07                           sbc ScreenLeft_X_Pos    ;subtract from left side horizontal coordinate
0E7B1 C9 10                              cmp #$10
0E7B3 B0 04                              bcs SetVXPl             ;if 16 or more pixels difference, do not alter facing direction
0E7B5 A9 02                              lda #$02
0E7B7 85 31                              sta PlayerFacingDir     ;otherwise force player to face left
0E7B9 A4 31                     SetVXPl: ldy PlayerFacingDir     ;get current facing direction, use as offset
0E7BB A5 F7                              lda $f7                 ;get low byte of block buffer address
0E7BD 0A                                 asl
0E7BE 0A                                 asl                     ;move low nybble to high
0E7BF 0A                                 asl
0E7C0 0A                                 asl
0E7C1 18                                 clc
0E7C2 79 01 E7                           adc ClimbXPosAdder-1,y  ;add pixels depending on facing direction
0E7C5 85 78                              sta Player_X_Position   ;store as player's horizontal coordinate
0E7C7 A5 F7                              lda $f7                 ;get low byte of block buffer address again
0E7C9 D0 09                              bne ExPVne              ;if not zero, branch
0E7CB AD 1B 07                           lda ScreenRight_PageLoc ;load page location of right side of screen
0E7CE 18                                 clc
0E7CF 79 04 E7                           adc ClimbPLocAdder-1,y  ;add depending on facing location
0E7D2 85 5F                              sta Player_PageLoc      ;store as player's page location
0E7D4 60                        ExPVne:  rts                     ;finally, we're done!
0E7D5                           
0E7D5                           ;--------------------------------
0E7D5                           
0E7D5                           
0E7D5                           ;--------------------------------
0E7D5                           ;$00-$01 - used to hold bottom right and bottom left metatiles (in that order)
0E7D5                           ;$00 - used as flag by ImpedePlayerMove to restrict specific movement
0E7D5                           
0E7D5                           ;ChkForLandJumpSpring:
0E7D5                                   ;cmp #$67				    ;do sub to check if player landed on jumpspring
0E7D5                                   ;bne ExCJSp                  ;if carry not set, jumpspring not found, therefore leave
0E7D5                                   ;lda DetectedFoot
0E7D5                           		;ora OldDetectedFoot
0E7D5                           		;bne ExCJSp
0E7D5                           		;lda #$70
0E7D5                                   ;sta VerticalForce           ;otherwise set vertical movement force for player
0E7D5                                   ;lda #$f9
0E7D5                                   ;sta JumpspringForce         ;set default jumpspring force
0E7D5                           -:		;lda Enemy_Flag,x
0E7D5                           		;beq ++
0E7D5                           		;lda Enemy_ID,x
0E7D5                           		;cmp #JumpspringObject
0E7D5                           		;beq +
0E7D5                           ++:		;dex
0E7D5                           		;bpl -
0E7D5                           		;jmp ExCJSp
0E7D5                           +:      ;lda #$03
0E7D5                                   ;sta JumpspringTimer         ;set jumpspring timer to be used later
0E7D5                                   ;lsr
0E7D5                                   ;sta JumpspringAnimCtrl      ;set jumpspring animation control to start animating
0E7D5                           ExCJSp: ;rts                         ;and leave
0E7D5                           if MINUS_WORLD_FIX == 1
0E7D5                               MinusWorld:
0E7D5                                       lda #$23
0E7D5                                       sta WorldNumber
0E7D5                                       lda #$01
0E7D5                                       sta AreaPointer
0E7D5                                       jmp FinishPipeEntry
0E7D5                           endif
0E7D5                           
0E7D5                           ;--------------------------------
0E7D5                           
0E7D5                           ClimbMTileUpperExt:
0E7D5                                 ;.db $24, $6d, $8a, $c6
0E7D5 24 FF FF CD                    .db $24, $ff, $ff, $cd
0E7D9                           
0E7D9                           ;CheckForClimbMTiles:
0E7D9                           ;      tay            ;save metatile value into Y
0E7D9                           ;      and #%11000000 ;mask out all but 2 MSB
0E7D9                           ;      asl
0E7D9                           ;      rol            ;shift and rotate d7-d6 to d1-d0
0E7D9                           ;      rol
0E7D9                           ;      tax            ;use as offset for metatile data
0E7D9                           ;      tya            ;get original metatile value back
0E7D9                           ;      cmp ClimbMTileUpperExt,x  ;compare current metatile with climbable metatiles
0E7D9                           ;      rts
0E7D9                            ;leave
0E7D9 60                        ExEBG: rts
0E7DA                           ;-------------------------------------------------------------------------------------
0E7DA                           ;$06-$07 - address from block buffer routine
0E7DA 4C 0E EB                  DoEnemySideCheck44: jmp DoEnemySideCheck
0E7DD 4C 1E E9                  NoEToBGCollision1: jmp NoEToBGCollision
0E7E0                           EnemyBGCStateData:
0E7E0 01 01 02 02 02 05               .db $01, $01, $02, $02, $02, $05
0E7E6                           
0E7E6                           EnemyBGCXSpdData:
0E7E6 10 F0 20 E0                     .db $10, $f0, $20, $e0
0E7EA                           
0E7EA                           EnemyToBGCollisionDet:
0E7EA B5 1C                     	  lda Enemy_State,x        ;check enemy state for d6 set
0E7EC 29 20                           and #%00100000
0E7EE D0 E9                           bne ExEBG                ;if set, branch to leave
0E7F0 B5 A8                     	  lda Enemy_Y_HighPos,x
0E7F2 F0 E9                     	  beq NoEToBGCollision1
0E7F4 B5 C1                           lda Enemy_Y_Position,x   ;add 62 pixels to enemy object's
0E7F6 C9 06                     	  cmp #$06
0E7F8 90 E3                     	  bcc NoEToBGCollision1
0E7FA C9 DF                           cmp #$df
0E7FC B0 DB                           bcs ExEBG    ;if enemy vertical coord + 62 < 68, branch to leave
0E7FE B4 15                     	  ldy Enemy_ID,x
0E800                                 ;cpy #Spiny               ;if enemy object is not spiny, branch elsewhere
0E800                                 ;bne DoIDCheckBGColl
0E800                                 ;lda Enemy_Y_Position,x
0E800                                 ;cmp #$25                 ;if enemy vertical coordinate < 36 branch to leave
0E800                                 ;bcc NoEToBGCollision1
0E800                           
0E800                           DoIDCheckBGColl:
0E800 C0 13                            cpy #BlackParatroopa
0E802 F0 04                     	   beq +
0E804 C0 0E                     	   cpy #GreenParatroopaJump ;check for some other enemy object
0E806 D0 03                            bne HBChk                ;branch if not found
0E808 4C 7B EF                  +:     jmp EnemyJump            ;otherwise jump elsewhere
0E80B C0 05                     HBChk: cpy #HammerBro           ;check for hammer bro
0E80D D0 03                            bne CInvu                ;branch if not found
0E80F 4C CF F0                         jmp HammerBroBGColl      ;otherwise jump elsewhere
0E812 C0 12                     CInvu: cpy #Spiny               ;if enemy object is spiny, branch
0E814 F0 10                            beq YesIn
0E816 C0 2E                            cpy #PowerUpObject       ;if special power-up object, branch
0E818 F0 0C                            beq YesIn
0E81A C0 09                     	   cpy #FastGoomba
0E81C F0 08                     	   beq YesIn
0E81E C0 19                     	   cpy #RedKoopaShell
0E820 F0 04                     	   beq YesIn
0E822 C0 07                            cpy #$07                 ;if enemy object =>$07, branch to leave
0E824 B0 B3                            bcs ExEBG
0E826 A0 26                     YesIn: ldy #$26
0E828 E8                        	  inx
0E829 20 7A F2                  	  jsr BBChk_E
0E82C C9 91                     	  cmp #$91
0E82E D0 06                     	  bne +
0E830 20 3E EB                  	  jsr nosesabe3Under
0E833 4C 4D E8                  	  jmp ++++
0E836 B5 1C                     +:    lda Enemy_State,x
0E838 10 06                     		bpl +++
0E83A B4 43                     		ldy Enemy_MovingDir,x
0E83C C8                        		iny
0E83D 4C 43 E8                  		jmp ++
0E840 B4 43                     +++:    ldy Enemy_MovingDir,x
0E842 88                        		dey
0E843 B9 3A EB                  ++:		lda Half,y
0E846 D5 4A                     		cmp Enemy_X_Speed,x
0E848 D0 03                     		bne ++++
0E84A 0A                        		asl
0E84B 95 4A                     		sta Enemy_X_Speed,x
0E84D                           ++++:	  
0E84D B5 92                     	   lda Enemy_Y_Speed,x
0E84F 10 03                     	   bpl +
0E851 4C 14 B4                  	   jmp DoSide2
0E854 A9 00                     +:	   lda #$00                  ;set flag in A for save vertical coordinate
0E856 9D F0 05                  	   sta EnemyOnSlope,x
0E859 A0 15                            ldy #$15                  ;set Y to check the bottom middle (8,18) of enemy object
0E85B E8                        	   inx
0E85C                           	   ;inc PlayerFoot,x
0E85C                           	   ;pha                         ;save contents of A to stack
0E85C 84 04                            sty $04                     ;save contents of Y here
0E85E B9 B5 BA                         lda BlockBuffer_X_Adder,y   ;add horizontal coordinate
0E861 18                               clc                         ;of object to value obtained using Y as offset
0E862 75 78                            adc SprObject_X_Position,x
0E864 85 05                            sta $05                     ;store here
0E866 B5 5F                     	   lda SprObject_PageLoc,x     ;of indirect here
0E868 69 66                     	   adc #$66
0E86A 85 F8                     	   sta $f8
0E86C A4 05                     	   ldy $05
0E86E B9 24 BD                  	   lda MSBtoLSB,y
0E871 85 F7                     	   sta $f7                     ;store here and leave
0E873 A4 04                            ldy $04                     ;get old contents of Y
0E875                           	   
0E875                           	   ;jsr TheLagMaker			   ;if need to lag the game to an unplayable level, uncomment this
0E875                           	   
0E875 B5 C0                            lda SprObject_Y_Position,x  ;get vertical coordinate of object
0E877 18                               clc
0E878 79 03 BB                         adc BlockBuffer_Y_Adder3,y   ;add it to value obtained using Y as offset
0E87B 29 F0                            and #%11110000              ;mask out low nybble
0E87D 85 02                            sta $02                     ;store result here
0E87F A8                               tay                         ;use as offset for block buffer
0E880 B1 F7                            lda ($f7),y                 ;check current content of block buffer
0E882 85 03                            sta $03                     ;and store here
0E884 A4 04                            ldy $04                     ;get old contents of Y again
0E886                                  ;pla                         ;pull A from stack
0E886                                  ;bne +                       ;if A = 1, branch
0E886 B5 C0                            lda SprObject_Y_Position,x  ;if A = 0, load vertical coordinate
0E888 29 0F                            and #%00001111              ;and mask out high nybble
0E88A 85 04                            sta $04                     ;store masked out result here
0E88C A6 03                            ldx $03                     ;get saved content of block buffer                       ;and leave
0E88E BD FA B8                  	   lda MetatileThingy,x
0E891 A6 08                            ldx ObjectOffset            ;get object offset
0E893 C9 00                            cmp #$00                    ;check to see if object bumped into anything
0E895                           	   ;jmp ++
0E895                           +:     ;lda SprObject_X_Position,x  ;otherwise load horizontal coordinate
0E895                                  ;and #%00001111              ;and mask out high nybble
0E895                                  ;sta $04                     ;store masked out result here
0E895                                  ;ldx $03                     ;get saved content of block buffer                       ;and leave
0E895                           	   ;lda MetatileThingy,x
0E895                           	   ;ldx ObjectOffset            ;get object offset
0E895                                  ;cmp #$00                    ;check to see if object bumped into anything
0E895 D0 03                     ++:    bne +
0E897 4C 1E E9                  	   jmp NoEToBGCollision
0E89A C9 8B                     +:	   cmp #$8b						;okputa
0E89C D0 3F                     	   bne hypermas
0E89E B5 1C                     	   lda Enemy_State,x
0E8A0 F0 36                     	   beq ++++
0E8A2 B5 15                     	   lda Enemy_ID,x
0E8A4 C9 03                     	   cmp #RedKoopa
0E8A6 F0 1D                     	   beq +++
0E8A8 C9 04                     	   cmp #KoopaShell
0E8AA F0 19                     	   beq +++
0E8AC C9 19                     	   cmp #RedKoopaShell
0E8AE F0 15                     	   beq +++
0E8B0 C9 00                     	   cmp #GreenKoopa
0E8B2 F0 11                     	   beq +++
0E8B4 C9 01                     	   cmp #DemotedRPTroopa
0E8B6 F0 0D                     	   beq +++
0E8B8 C9 02                     	   cmp #BuzzyBeetle
0E8BA F0 09                     	   beq +++
0E8BC B5 1C                     	   lda Enemy_State,x
0E8BE 29 26                     	   and #%00100110
0E8C0 F0 03                     	   beq +++ 
0E8C2 4C 6E EA                  	   jmp LandEnemyProperly
0E8C5 EC 08 60                  +++:   cpx GrabID
0E8C8 D0 05                     	   bne +
0E8CA AD 04 60                  	   lda GrabFlag
0E8CD D0 04                     	   bne ++
0E8CF A9 02                     +:	   lda #Sfx_Bump
0E8D1 85 F0                     	   sta Square1SoundQueue
0E8D3 A9 FB                     ++:	   lda #$fb
0E8D5 95 92                     	   sta Enemy_Y_Speed,x
0E8D7 60                        	   rts
0E8D8                           ++++:
0E8D8 A9 01                     	   lda #$01
0E8DA 95 1C                     	   sta Enemy_State,x
0E8DC 60                        	   rts
0E8DD                           hypermas:
0E8DD                           ++:
0E8DD 8C 2A 60                  	   sty temp6
0E8E0 AC 28 60                  	   ldy PTimer
0E8E3 F0 16                     	   beq +	
0E8E5 C9 51                     	   cmp #$51
0E8E7 F0 35                     	   beq NoEToBGCollision
0E8E9 C9 52                     	   cmp #$52
0E8EB F0 31                     	   beq NoEToBGCollision
0E8ED C9 28                     	   cmp #$28
0E8EF F0 2D                     	   beq NoEToBGCollision
0E8F1 C9 27                     	   cmp #$27
0E8F3 F0 29                     	   beq NoEToBGCollision
0E8F5 AC 2A 60                  	   ldy temp6
0E8F8 4C 38 E9                  	   jmp HandleEToBGCollision
0E8FB AC 2A 60                  +:	   ldy temp6
0E8FE C9 C2                     	   cmp #$c2
0E900 F0 03                     	   beq GetBlockCoin2
0E902 4C 38 E9                  	   jmp HandleEToBGCollision  ;if block underneath enemy, branch
0E905                           GetBlockCoin2:
0E905 B4 15                     	   ldy Enemy_ID,x
0E907 C0 2E                     	   cpy #PowerUpObject
0E909 F0 13                     	   beq NoEToBGCollision
0E90B A8                        	   tay
0E90C EC 08 60                  	   cpx GrabID
0E90F D0 05                     	   bne ++
0E911 AD 78 60                  	   lda GrabUp
0E914 D0 04                     	   bne +
0E916 B5 1C                     ++:	   lda Enemy_State,x      ;if enemy state d7 not set, branch
0E918 10 04                     	   bpl NoEToBGCollision
0E91A                           +:		
0E91A 98                        	   tya
0E91B 4C BA EC                  	   jmp GetBlockCoin
0E91E                           NoEToBGCollision:
0E91E A6 08                     	   ldx ObjectOffset
0E920 4C 14 B4                         jmp DoSide2       ;otherwise skip and do something else
0E923                           LandEnemyInitState1:
0E923 B5 15                     	   lda Enemy_ID,x
0E925 C9 2E                     	   cmp #PowerUpObject
0E927 F0 03                     	   beq PUPs2
0E929 4C 46 EC                  	   jmp InvEnemyDir
0E92C                           PUPs2:
0E92C 4C BF E9                  	   jmp PUPs
0E92F                           LandEnemyProperly1:
0E92F 4C 6E EA                  	   jmp LandEnemyProperly
0E932                           PutEnemyOnSlope2: 
0E932                           ;	lda Enemy_State,x
0E932                           ;	asl
0E932                           ;	bcc +
0E932                           ;	dec Enemy_Y_Position,x
0E932                           ;	dec Enemy_Y_Position,x
0E932                           ;+:	dec Enemy_Y_Position,x
0E932                           ;	ldy #$26
0E932                           ;	inx
0E932                           ;	jsr BBChk_E
0E932                           ;	cmp #$71
0E932                           ;	beq +
0E932                           ;	inc Enemy_Y_Position,x
0E932                           ;	lda Enemy_State,x
0E932                           ;	asl
0E932                           ;	bcc +
0E932                           ;	inc Enemy_Y_Position,x
0E932                           ;	inc Enemy_Y_Position,x
0E932                           ;+:	rts
0E932                           NoEToBGCollisionAndSlowdown:
0E932 4C 14 B4                  	jmp DoSide2
0E935                           PutEnemyOnSlope1: 
0E935                           ;	rts
0E935                           	
0E935                           	;jmp PutEnemyOnSlope
0E935                           ;--------------------------------
0E935                           ;$02 - vertical coordinate from block buffer routine
0E935                           Enemy_PSwitchJmp:
0E935 4C E7 9A                  	  jmp Enemy_PSwitch
0E938                           	  
0E938                           HandleEToBGCollision: 
0E938 F0 E4                     	  beq NoEToBGCollision      ;if blank $26, coins, or hidden blocks, jump, enemy falls through
0E93A C9 26                     	  cmp #$26                  ;blank metatile used for vines?
0E93C F0 E0                           beq NoEToBGCollision
0E93E C9 C2                           cmp #$c2                  ;regular coin?
0E940 D0 0E                           bne +
0E942 AC 28 60                  	  ldy PTimer
0E945 D0 09                     	  bne +
0E947 B4 15                     	  ldy Enemy_ID,x
0E949 C0 2E                     	  cpy #PowerUpObject
0E94B F0 D1                     	  beq NoEToBGCollision
0E94D 4C BA EC                  	  jmp GetBlockCoin
0E950                           +:	  ;beq NoEToBGCollision
0E950 C9 60                           cmp #$60       ;hidden 1-up block?
0E952 F0 68                     	  beq NoEToBGCollision2
0E954 C9 6F                     	  cmp #$6f
0E956 F0 64                     	  beq NoEToBGCollision2
0E958 C9 74                     	  cmp #$74
0E95A F0 60                     	  beq NoEToBGCollision2
0E95C C9 73                     	  cmp #$73
0E95E F0 5C                     	  beq NoEToBGCollision2
0E960 C9 30                     	  cmp #$30
0E962 F0 58                     	  beq NoEToBGCollision2
0E964 C9 C5                     	  cmp #$c5
0E966 F0 54                     	  beq NoEToBGCollision2
0E968 C9 8C                     	  cmp #$8c
0E96A F0 C9                     	  beq Enemy_PSwitchJmp
0E96C                           ++:
0E96C C9 5F                     	  cmp #$5f
0E96E F0 4C                     	  beq NoEToBGCollision2
0E970 C9 70                     	  cmp #$70
0E972 F0 48                     	  beq NoEToBGCollision2
0E974 C9 25                     	  cmp #$25
0E976 F0 44                     	  beq NoEToBGCollision2
0E978 C9 91                     	  cmp #$91
0E97A F0 B6                     	  beq NoEToBGCollisionAndSlowdown
0E97C C9 71                     	  cmp #$71
0E97E F0 B5                     	  beq PutEnemyOnSlope1
0E980                           	  ;pha
0E980                           	  ;ldy #$24
0E980                           	  ;jsr BlockBufferChk_Enemy
0E980                           	  ;cmp #$71
0E980                           	  ;beq PutEnemyOnSlope2
0E980                           	  ;pla
0E980 AC 54 60                  vale: ldy OnOffFlag
0E983 F0 07                     	  beq +++
0E985 C9 8F                     	  cmp #$8f
0E987 F0 33                     	  beq NoEToBGCollision2
0E989 4C 90 E9                  	  jmp ++
0E98C C9 8E                     +++:  cmp #$8e
0E98E F0 2C                     	  beq NoEToBGCollision2
0E990                           ++:
0E990 AC 28 60                  	  ldy PTimer
0E993 D0 04                     	  bne +++
0E995 C9 72                     	  cmp #$72
0E997 F0 23                     	  beq NoEToBGCollision2
0E999                           +++: 
0E999 AC 28 60                  	  ldy PTimer
0E99C F0 08                     	  beq ++
0E99E                           	  
0E99E C9 C2                     	  cmp #$c2
0E9A0 F0 17                     	  beq LandEnemyProperly2
0E9A2 C9 72                     	  cmp #$72
0E9A4 F0 13                     	  beq LandEnemyProperly2
0E9A6 C9 23                     ++:	  cmp #$23
0E9A8 D0 0F                           bne LandEnemyProperly2     ;check for blank metatile $23 and branch if not found
0E9AA A4 02                           ldy $02                   ;get vertical coordinate used to find block
0E9AC A9 54                           lda #$54                  ;store default blank metatile in that spot so we won't
0E9AE 91 F7                           sta ($f7),y               ;trigger this routine accidentally again
0E9B0 B5 1C                     	  lda Enemy_State,x
0E9B2 29 80                     	  and #%10000000
0E9B4 F0 09                     	  beq PUPs
0E9B6 4C 23 E9                  	  jmp LandEnemyInitState1
0E9B9 4C 6E EA                  LandEnemyProperly2: jmp LandEnemyProperly
0E9BC 4C 1E E9                  NoEToBGCollision2:	jmp NoEToBGCollision
0E9BF B5 15                     PUPs: lda Enemy_ID,x
0E9C1 C9 19                           cmp #RedKoopaShell
0E9C3 F0 1F                     	  beq GiveOEPoints
0E9C5 C9 21                     	  cmp #UDPiranhaPlant
0E9C7 F0 1B                     	  beq GiveOEPoints
0E9C9 C9 22                     	  cmp #RUDPiranhaPlant
0E9CB F0 17                     	  beq GiveOEPoints
0E9CD C9 20                     	  cmp #RedPiranhaPlant
0E9CF F0 13                     	  beq GiveOEPoints
0E9D1 C9 15                     	  cmp #$15                  ;if enemy object => $15, branch ahead
0E9D3 B0 24                           bcs ChkToStunEnemies
0E9D5 C9 06                           cmp #Goomba               ;if enemy object not goomba, branch ahead of this routine
0E9D7 F0 04                     	  beq +
0E9D9 C9 09                     	  cmp #FastGoomba
0E9DB D0 07                           bne GiveOEPoints
0E9DD 20 0C D5                  +:    jsr ShellOrBlockDefeat    ;do this sub to kill enemy
0E9E0 A9 FC                           lda #$fc                  ;alter vertical speed of enemy and leave
0E9E2 95 92                           sta Enemy_Y_Speed,x
0E9E4                           
0E9E4                           GiveOEPoints:
0E9E4 A9 01                           lda #$01                  ;award 100 points for hitting block beneath enemy
0E9E6 9D 10 01                        sta FloateyNum_Control,x ;set number of points control for floatey numbers
0E9E9 A9 30                           lda #$30
0E9EB 9D 2C 01                        sta FloateyNum_Timer,x   ;set timer for floatey numbers
0E9EE B5 C1                           lda Enemy_Y_Position,x
0E9F0 9D 1E 01                        sta FloateyNum_Y_Pos,x   ;set vertical coordinate
0E9F3 AD AE 03                        lda Enemy_Rel_XPos
0E9F6 9D 17 01                        sta FloateyNum_X_Pos,x   ;set horizontal coordinate and leave
0E9F9                           
0E9F9                           ChkToStunEnemies:
0E9F9 C9 2E                     		  cmp #PowerUpObject
0E9FB D0 0B                     		  bne +
0E9FD B5 1C                     		  lda Enemy_State,x          ;load enemy state
0E9FF 29 F0                               and #%11110000             ;save high nybble
0EA01 09 02                               ora #%00000010
0EA03 95 1C                               sta Enemy_State,x          ;set d1 of enemy state
0EA05 4C 30 EA                  		  jmp SetStun+4
0EA08                           +:
0EA08 C9 0A                     		  cmp #$0a                   ;perform many comparisons on enemy object identifier
0EA0A 90 20                               bcc SetStun
0EA0C C9 19                     		  cmp #RedKoopaShell
0EA0E F0 1C                     		  beq SetStun
0EA10 C9 21                     		  cmp #UDPiranhaPlant
0EA12 F0 18                     		  beq SetStun
0EA14 C9 22                     		  cmp #RUDPiranhaPlant
0EA16 F0 14                     		  beq SetStun
0EA18 C9 20                     	      cmp #RedPiranhaPlant
0EA1A F0 10                     	      beq SetStun
0EA1C C9 11                               cmp #$11                   ;if the enemy object identifier is equal to the values
0EA1E B0 0C                               bcs SetStun                ;$09, $0e, $0f or $10, it will be modified, and not
0EA20 C9 0A                               cmp #$0a                   ;modified if not any of those values, note that piranha plant will
0EA22 90 04                               bcc Demote                 ;always fail this test because A will still have vertical
0EA24 C9 0D                               cmp #PiranhaPlant          ;coordinate from previous addition, also these comparisons
0EA26 90 04                               bcc SetStun                ;are only necessary if branching from $d7a1
0EA28 29 01                     Demote:   and #%00000001             ;erase all but LSB, essentially turning enemy object
0EA2A 95 15                               sta Enemy_ID,x             ;into green or red koopa troopa to demote them
0EA2C B5 1C                     SetStun:  lda Enemy_State,x          ;load enemy state
0EA2E 29 70                               and #%01110000             ;save high nybble
0EA30 09 02                               ora #%00000010
0EA32 95 1C                               sta Enemy_State,x          ;set d1 of enemy state
0EA34 D6 C1                     		  dec Enemy_Y_Position,x
0EA36 D6 C1                               dec Enemy_Y_Position,x     ;subtract two pixels from enemy's vertical position
0EA38 B5 15                               lda Enemy_ID,x
0EA3A C9 07                               cmp #Bloober               ;check for bloober object
0EA3C F0 07                               beq SetWYSpd
0EA3E A9 FD                               lda #$fd                   ;set default vertical speeds
0EA40 AC 04 07                  		  ldy SwimmingFlag
0EA43 F0 02                     		  beq SetNotW
0EA45 A9 FF                     SetWYSpd: lda #$ff                   ;change the vertical speed
0EA47 95 92                     SetNotW:  sta Enemy_Y_Speed,x        ;set vertical speed now
0EA49 A0 01                               ldy #$01
0EA4B B5 79                               lda Enemy_X_Position,x     ;get distance between enemy object's
0EA4D 38                        		  sec                        ;horizontal coordinate and the player's
0EA4E E5 78                     		  sbc Player_X_Position      ;horizontal coordinate
0EA50 85 00                     		  sta $00                    ;and store here
0EA52 B5 60                     		  lda Enemy_PageLoc,x
0EA54 E5 5F                     		  sbc Player_PageLoc         ;subtract borrow, then leave
0EA56 10 01                               bpl ChkBBill               ;branch if enemy is to the right of player
0EA58 C8                                  iny                        ;increment Y if not
0EA59 B5 15                     ChkBBill: lda Enemy_ID,x      
0EA5B C9 33                               cmp #BulletBill_CannonVar  ;check for bullet bill (cannon variant)
0EA5D F0 06                               beq NoCDirF
0EA5F C9 08                               cmp #BulletBill_FrenzyVar  ;check for bullet bill (frenzy variant)
0EA61 F0 02                               beq NoCDirF                ;branch if either found, direction does not change
0EA63 94 43                               sty Enemy_MovingDir,x      ;store as moving direction
0EA65 88                        NoCDirF:  dey                        ;decrement and use as offset
0EA66 B9 E6 E7                  		  lda EnemyBGCXSpdData,y     ;get proper horizontal speed
0EA69 95 4A                               sta Enemy_X_Speed,x        ;and store, then leave
0EA6B 60                        ExEBGChk: rts
0EA6C                           ;--------------------------------
0EA6C                           ;$04 - low nybble of vertical coordinate from block buffer routine
0EA6C                           LeComparation:
0EA6C 05 0E                     	.db $05, $0e
0EA6E                           LandEnemyProperly:
0EA6E AC E9 63                  	   ldy FramesMissed
0EA71 A5 04                     	   lda $04                 ;check lower nybble of vertical coordinate saved earlier
0EA73 38                               sec
0EA74 E9 08                            sbc #$08                ;subtract eight pixels
0EA76 D9 6C EA                         cmp LeComparation,y
0EA79 B0 10                            bcs ChkForRedKoopa1      ;branch if lower nybble in range of $0d-$0f before subtract
0EA7B B5 1C                            lda Enemy_State,x      
0EA7D 29 40                            and #%01000000          ;branch if d6 in enemy state is set
0EA7F D0 43                            bne LandEnemyInitState
0EA81 B5 1C                            lda Enemy_State,x
0EA83 30 03                            bmi SChkA
0EA85 4C 69 B0                  	   jmp ChkLandedEnemyState
0EA88 4C 0E EB                  SChkA: jmp DoEnemySideCheck			    ;if lower nybble < $0d, d7 set but d6 not set, jump here
0EA8B                           ChkForRedKoopa1:
0EA8B 4C E8 EA                  	   jmp ChkForRedKoopa
0EA8E                           
0EA8E                           ProcEnemyDirection:
0EA8E B5 15                              lda Enemy_ID,x            ;check enemy identifier for goomba
0EA90 C9 06                              cmp #Goomba               ;branch if found
0EA92 F0 30                              beq LandEnemyInitState
0EA94 C9 12                              cmp #Spiny                ;check for spiny
0EA96 D0 0E                              bne InvtD                 ;branch if not found
0EA98 A9 01                              lda #$01
0EA9A 95 43                              sta Enemy_MovingDir,x     ;send enemy moving to the right by default
0EA9C A9 08                              lda #$08
0EA9E 95 4A                              sta Enemy_X_Speed,x       ;set horizontal speed accordingly
0EAA0 A5 09                     		 lda FrameCounter
0EAA2 29 07                              and #%00000111            ;if timed appropriately, spiny will skip over
0EAA4 F0 1E                              beq LandEnemyInitState    ;trying to face the player
0EAA6 A0 01                     InvtD:   ldy #$01                  ;load 1 for enemy to face the left (inverted here)
0EAA8 B5 79                              lda Enemy_X_Position,x    ;get distance between enemy object's
0EAAA 38                        		 sec                       ;horizontal coordinate and the player's
0EAAB E5 78                     		 sbc Player_X_Position     ;horizontal coordinate
0EAAD 85 00                              sta $00                   ;and store here
0EAAF B5 60                              lda Enemy_PageLoc,x
0EAB1 E5 5F                              sbc Player_PageLoc        ;subtract borrow, then leave
0EAB3 10 01                              bpl CNwCDir               ;if enemy to the right of player, branch
0EAB5 C8                                 iny                       ;if to the left, increment by one for enemy to face right (inverted)
0EAB6 98                        CNwCDir: tya
0EAB7 D5 43                              cmp Enemy_MovingDir,x     ;compare direction in A with current direction in memory
0EAB9 D0 09                              bne LandEnemyInitState
0EABB B5 15                     		 lda Enemy_ID,x
0EABD C9 12                     		 cmp #Spiny
0EABF D0 03                     		 bne LandEnemyInitState
0EAC1 20 F6 EB                           jsr ChkForBump_HammerBroJ ;if equal, not facing in correct dir, do sub to turn around
0EAC4                           
0EAC4                           LandEnemyInitState:
0EAC4 A9 00                           lda #$00                    ;initialize vertical speed
0EAC6 95 92                           sta Enemy_Y_Speed,x         ;and movement force
0EAC8 9D 34 04                        sta Enemy_Y_MoveForce,x     ;do something here to vertical speed and something else
0EACB B5 C1                           lda Enemy_Y_Position,x
0EACD 29 F0                           and #%11110000          ;save high nybble of vertical coordinate, and
0EACF 09 08                           ora #%00001000          ;set d3, then store, probably used to set enemy object
0EAD1 95 C1                           sta Enemy_Y_Position,x  ;neatly on whatever it's landing on
0EAD3 B5 1C                           lda Enemy_State,x
0EAD5 29 80                           and #%10000000         ;if d7 of enemy state is set, branch
0EAD7 D0 08                           bne NMovShellFallBit
0EAD9 A9 00                           lda #$00               ;otherwise initialize enemy state and leave
0EADB 95 1C                           sta Enemy_State,x      ;note this will also turn spiny's egg into spiny
0EADD 9D F0 05                  	  sta EnemyOnSlope,x
0EAE0 60                              rts
0EAE1                           
0EAE1                           NMovShellFallBit:
0EAE1 B5 1C                           lda Enemy_State,x   ;nullify d6 of enemy state, save other bits
0EAE3 29 BF                           and #%10111111      ;and store, then leave
0EAE5 95 1C                           sta Enemy_State,x
0EAE7 60                              rts
0EAE8                           
0EAE8                           ChkForRedKoopa:
0EAE8 B5 15                     			 lda Enemy_ID,x            ;check for red koopa troopa $03
0EAEA C9 02                                  cmp #BuzzyBeetle
0EAEC F0 08                     			 beq +
0EAEE C9 01                     			 cmp #DemotedRPTroopa
0EAF0 F0 04                     			 beq +
0EAF2 C9 03                     			 cmp #RedKoopa
0EAF4 D0 07                                  bne Chk2MSBSt             ;branch if not found
0EAF6 B5 1C                     +            lda Enemy_State,x
0EAF8 D0 03                                  bne Chk2MSBSt 
0EAFA 4C F6 EB                  			 jmp ChkForBump_HammerBroJ ;if enemy found and in normal state, branch
0EAFD B5 1C                     Chk2MSBSt:   lda Enemy_State,x         ;save enemy state into Y
0EAFF A8                                     tay
0EB00 10 07                                  bpl GetSteFromD           ;branch if not set
0EB02 B5 1C                                  lda Enemy_State,x
0EB04 09 40                                  ora #%01000000            ;set d6
0EB06 4C 0C EB                               jmp SetD6Ste              ;jump ahead of this part
0EB09 B9 E0 E7                  GetSteFromD: lda EnemyBGCStateData,y   ;load new enemy state with old as offset
0EB0C 95 1C                     SetD6Ste:    sta Enemy_State,x         ;set as new state
0EB0E                           
0EB0E                           ;--------------------------------
0EB0E                           ;$00 - used to store bitmask (not used but initialized here)
0EB0E                           ;$eb - used in DoEnemySideCheck as counter and to compare moving directions
0EB0E                           
0EB0E                           DoEnemySideCheck:
0EB0E B5 A8                     		  lda Enemy_Y_HighPos,x
0EB10 F0 27                     		  beq ExESdeC
0EB12 B5 C1                     		  lda Enemy_Y_Position,x     ;if enemy within status bar, branch to leave
0EB14 C9 10                               cmp #$10                   ;because there's nothing there that impedes movement
0EB16 90 21                               bcc ExESdeC
0EB18 A0 16                     		  ldy #$16                   ;start by finding block to the left of enemy ($00,$14)
0EB1A A9 02                               lda #$02                   ;set value here in what is also used as
0EB1C 85 DD                               sta temp1                  ;OAM data offset
0EB1E A5 DD                     SdeCLoop: lda temp1                  ;check value
0EB20 D5 43                               cmp Enemy_MovingDir,x      ;compare value against moving direction
0EB22 D0 0E                               bne NextSdeC               ;branch if different and do not seek block there
0EB24 A9 01                               lda #$01                   ;set flag in A for save horizontal coordinate 
0EB26 E8                                  inx
0EB27 20 7A F2                  	      jsr BBChk_E
0EB2A F0 06                     		  beq NextSdeC
0EB2C 8D 2A 60                  		  sta temp6
0EB2F 4C 7B EB                  	      jmp nosesabe
0EB32 C6 DD                     NextSdeC: dec temp1                  ;move to the next direction
0EB34 C8                                  iny
0EB35 C0 18                               cpy #$18                   ;increment Y, loop only if Y < $18, thus we check
0EB37 90 E5                               bcc SdeCLoop               ;enemy ($00, $14) and ($10, $14) pixel coordinates
0EB39 60                        ExESdeC:  rts
0EB3A 04 FC 18 E8               Half: .db $04, $fc, $18, $e8
0EB3E                           nosesabe3Under:
0EB3E B5 92                     		lda Enemy_Y_Speed,x
0EB40 C9 FD                     		cmp #$fd
0EB42 B0 09                     		bcs ++
0EB44 10 07                     		bpl ++
0EB46 A9 FC                     		lda #$fc
0EB48 95 92                     		sta Enemy_Y_Speed,x
0EB4A 4C 59 EB                  		jmp +
0EB4D B5 92                     ++:		lda Enemy_Y_Speed,x
0EB4F C9 01                     		cmp #$01
0EB51 90 06                     		bcc +
0EB53 30 04                     		bmi +
0EB55 A9 01                     		lda #$01
0EB57 95 92                     		sta Enemy_Y_Speed,x
0EB59 B5 15                     +:		lda Enemy_ID,x
0EB5B C9 2E                     		cmp #PowerUpObject
0EB5D F0 0A                     		beq +++
0EB5F B5 1C                     		lda Enemy_State,x
0EB61 10 06                     		bpl +++
0EB63 B4 43                     		ldy Enemy_MovingDir,x
0EB65 C8                        		iny
0EB66 4C 6C EB                  		jmp ++
0EB69 B4 43                     +++:    ldy Enemy_MovingDir,x
0EB6B 88                        		dey
0EB6C B9 3A EB                  ++:		lda Half,y
0EB6F 95 4A                     		sta Enemy_X_Speed,x
0EB71 60                        +:		rts
0EB72                           nosesabe3:
0EB72 4C 54 EC                  		jmp nosesabe2
0EB75                           GetBlockCoin1:
0EB75 4C BA EC                  		jmp GetBlockCoin
0EB78 4C 32 E9                  PutEnemyOnSlope3: jmp PutEnemyOnSlope2
0EB7B                           nosesabe:
0EB7B C9 26                     		  cmp #$26       ;blank metatile used for vines?
0EB7D F0 F3                     		  beq nosesabe3
0EB7F C9 C2                     		  cmp #$c2       ;regular coin?
0EB81 F0 EF                     		  beq nosesabe3
0EB83 C9 5F                     		  cmp #$5f       ;hidden coin block?
0EB85 F0 EB                     		  beq nosesabe3
0EB87 C9 70                     		  cmp #$70
0EB89 F0 E7                     	      beq nosesabe3
0EB8B C9 25                     		  cmp #$25
0EB8D F0 E3                     		  beq nosesabe3
0EB8F C9 30                     		  cmp #$30
0EB91 F0 DF                     		  beq nosesabe3
0EB93 C9 60                     		  cmp #$60       ;hidden 1-up block?
0EB95 F0 DB                     		  beq nosesabe3
0EB97 C9 74                     		  cmp #$74
0EB99 F0 D7                     		  beq nosesabe3
0EB9B C9 6F                     		  cmp #$6f
0EB9D F0 D3                     		  beq nosesabe3
0EB9F C9 C5                     		  cmp #$c5
0EBA1 F0 CF                     		  beq nosesabe3
0EBA3 C9 73                     		  cmp #$73
0EBA5 F0 CB                     		  beq nosesabe3
0EBA7 C9 91                     		  cmp #$91
0EBA9 F0 C7                     		  beq nosesabe3
0EBAB C9 71                     		  cmp #$71
0EBAD F0 C9                     		  beq PutEnemyOnSlope3
0EBAF                           cantasmal:
0EBAF 8C 2A 60                  +++:	  sty temp6
0EBB2 BC F0 05                  		  ldy EnemyOnSlope,x
0EBB5 D0 82                     		  bne ExESdeC
0EBB7 AC 54 60                  		  ldy OnOffFlag
0EBBA F0 07                     		  beq +++
0EBBC C9 8F                     		  cmp #$8f
0EBBE F0 B2                     		  beq nosesabe3
0EBC0 4C C7 EB                  		  jmp ++
0EBC3 C9 8E                     +++:	  cmp #$8e
0EBC5 F0 AB                     		  beq nosesabe3
0EBC7                           ++:
0EBC7 AC 28 60                  		  ldy PTimer
0EBCA D0 04                     		  bne +
0EBCC C9 72                     		  cmp #$72
0EBCE F0 A2                     		  beq nosesabe3
0EBD0                           +:		  
0EBD0 C9 88                     		  cmp #$88
0EBD2 F0 9E                     	      beq nosesabe3
0EBD4 C9 63                     		  cmp #$63
0EBD6 F0 9A                     		  beq nosesabe3
0EBD8 C9 92                     	      cmp #$92
0EBDA F0 96                     		  beq nosesabe3
0EBDC 48                        		  pha
0EBDD AC 28 60                  		  ldy PTimer
0EBE0 F0 10                     		  beq +
0EBE2 B5 15                     		  lda Enemy_ID,x
0EBE4 C9 2E                     		  cmp #PowerUpObject
0EBE6 F0 04                               beq ++               ;and if so, branch ahead and do not play sound
0EBE8 B5 1C                     		  lda Enemy_State,x
0EBEA 30 06                     		  bmi +
0EBEC 68                        ++:		  pla
0EBED C9 52                     		  cmp #$52
0EBEF F0 81                     		  beq nosesabe3
0EBF1 A9                        		  .db $a9 ;lda to skip this pla
0EBF2 68                        +:		  pla  
0EBF3 AC 2A 60                  		  ldy temp6
0EBF6                           ChkForBump_HammerBroJ: 
0EBF6 B5 15                             lda Enemy_ID,x
0EBF8 C9 2E                     		cmp #PowerUpObject
0EBFA F0 38                             beq NoBump             ;and if so, branch ahead and do not play sound
0EBFC EC 08 60                          cpx GrabID
0EBFF D0 05                     		bne ++
0EC01 AD 78 60                  		lda GrabUp
0EC04 D0 04                     		bne +
0EC06 B5 1C                     ++:		lda Enemy_State,x      ;if enemy state d7 not set, branch
0EC08 10 2A                     		bpl NoBump
0EC0A                           +:		
0EC0A E8                        		inx
0EC0B 20 7A F2                  	    jsr BBChk_E
0EC0E AC 28 60                  	 	ldy PTimer
0EC11 F0 1A                     		beq +
0EC13 C9 51                     		cmp #$51
0EC15 F0 2C                     		beq GetBlockCoin3
0EC17 C9 52                     		cmp #$52
0EC19 F0 28                     		beq GetBlockCoin3
0EC1B C9 28                     		cmp #$28
0EC1D F0 24                     		beq GetBlockCoin3
0EC1F C9 27                     		cmp #$27
0EC21 F0 20                     		beq GetBlockCoin3
0EC23 C9 C2                     		cmp #$c2
0EC25 D0 06                     		bne +
0EC27 20 1B ED                  		jsr BreakBlock
0EC2A 4C 4E EC                  		jmp PaTras
0EC2D C9 C2                     +:		cmp #$c2
0EC2F F0 12                     		beq GetBlockCoin3
0EC31 20 EE ED                  		jsr ToBreak				;if not, check for others blocks
0EC34                           		
0EC34 B5 15                     NoBump: lda Enemy_ID,x          ;check for hammer bro
0EC36 C9 05                             cmp #$05
0EC38 D0 0C                             bne InvEnemyDir         ;branch if not found
0EC3A A9 00                             lda #$00
0EC3C 85 00                             sta $00                 ;initialize value here for bitmask  
0EC3E A0 FA                             ldy #$fa                ;load default vertical speed for jumping
0EC40 4C BD C5                          jmp SetHJ               ;jump to code that makes hammer bro jump
0EC43                           GetBlockCoin3:
0EC43 4C BA EC                  	  jmp GetBlockCoin
0EC46                           InvEnemyDir:
0EC46 4C BC DD                  		jmp RXSpd
0EC49 20 1B ED                  BreakBlock2: jsr BreakBlock
0EC4C A9                        			.db $a9
0EC4D 60                        PaLante: rts					;if not, turn around
0EC4E 4C BC DD                  PaTras: jmp RXSpd				
0EC51 4C 05 EE                  Webos3: jmp Webos2
0EC54                           
0EC54                           nosesabe2:		 
0EC54 48                        		  pha
0EC55 EC 08 60                  		  cpx GrabID
0EC58 D0 10                     		  bne ++
0EC5A AD 78 60                  		  lda GrabUp
0EC5D F0 0B                     		  beq ++
0EC5F 68                        		  pla
0EC60 AC 28 60                  		  ldy PTimer
0EC63 D0 04                     		  bne +
0EC65 C9 C2                     		  cmp #$c2
0EC67 F0 51                     		  beq GetBlockCoin
0EC69                           +:
0EC69 48                        		  pha
0EC6A                           		  
0EC6A B5 1C                     ++:		  lda Enemy_State,x      ;if enemy state d7 not set, branch
0EC6C 10 3B                     		  bpl rtsp3
0EC6E B5 15                     		  lda Enemy_ID,x
0EC70 C9 2E                     		  cmp #PowerUpObject
0EC72 F0 35                     	      beq rtsp3
0EC74                           +:		
0EC74 68                        		  pla
0EC75 AC 28 60                  		  ldy PTimer
0EC78 D0 04                     		  bne +
0EC7A C9 C2                     		  cmp #$c2
0EC7C F0 3C                     		  beq GetBlockCoin
0EC7E C9 C2                     +:		  cmp #$c2
0EC80 F0 C7                     		  beq BreakBlock2
0EC82 C9 5F                     		  cmp #$5f
0EC84 F0 CB                     		  beq Webos3
0EC86 A4 F6                     		  ldy $f6
0EC88 8C 9B 60                  		  sty $609b
0EC8B A4 F7                     		  ldy $f7
0EC8D 8C 9C 60                  		  sty $609c
0EC90 A4 F8                     		  ldy $f8
0EC92 8C 9D 60                  		  sty $609d
0EC95 A4 F9                     		  ldy $f9
0EC97 8C 9E 60                  		  sty $609e
0EC9A C9 30                     		  cmp #$30
0EC9C F0 19                     		  beq StarEJmp
0EC9E C9 6F                     		  cmp #$6f
0ECA0 F0 12                     		  beq MushEJmp
0ECA2 C9 73                     		  cmp #$73
0ECA4 F0 11                     		  beq StarEJmp
0ECA6                           rtsp:
0ECA6 60                        	rts
0ECA7                           rtsp2:
0ECA7 68                        	pla
0ECA8 60                        	rts
0ECA9                           rtsp3:
0ECA9 68                        	pla
0ECAA AC 28 60                  	ldy PTimer
0ECAD F0 F7                     	beq rtsp
0ECAF C9 C2                     	cmp #$c2
0ECB1 F0 93                     	beq InvEnemyDir
0ECB3 60                        	rts
0ECB4                           MushEJmp:
0ECB4 4C A3 EE                  	jmp MushE
0ECB7                           StarEJmp:
0ECB7 4C B4 EE                  	jmp StarE
0ECBA                           GetBlockCoin:
0ECBA EC 08 60                  		cpx GrabID
0ECBD D0 05                     		bne ++
0ECBF AD 78 60                  		lda GrabUp
0ECC2 D0 04                     		bne +
0ECC4 B5 1C                     ++:		lda Enemy_State,x      ;if enemy state d7 not set, branch
0ECC6 10 DE                     		bpl rtsp
0ECC8 AD 00 64                  +:		lda VRAM_Buffer1_Offset
0ECCB C9 20                     		cmp #$20
0ECCD B0 D7                     		bcs rtsp
0ECCF 20 F4 E6                  		jsr ErACM
0ECD2 A9 01                     		lda #Sfx_CoinGrab
0ECD4 85 EF                     		sta Square2SoundQueue
0ECD6 4C 19 A6                  		jmp GiveOneCoin
0ECD9                           CoinE:
0ECD9 A9 C4                     	lda #$c4
0ECDB 8D 2A 60                  	sta temp6
0ECDE                           MultiCoin:
0ECDE EC 08 60                  	cpx GrabID
0ECE1 D0 05                     	bne ++
0ECE3 AD 78 60                  	lda GrabUp
0ECE6 D0 04                     	bne +
0ECE8 B5 1C                     ++:	lda Enemy_State,x      ;if enemy state d7 not set, branch
0ECEA 10 BA                         bpl rtsp
0ECEC E0 06                     +:	cpx #$06
0ECEE F0 B6                     	beq rtsp
0ECF0 A9 01                     	lda #Sfx_CoinGrab
0ECF2 85 EF                     	sta Square2SoundQueue
0ECF4 20 E1 EE                  	jsr GetBlockEnemy
0ECF7 98                        	tya
0ECF8 AA                        	tax
0ECF9 20 72 A4                  	jsr FindEmptyMiscSlot  ;set offset for empty or last misc object buffer slot
0ECFC B5 68                     	lda Block_PageLoc,x   ;get page location saved earlier
0ECFE 99 6C 00                  	sta Misc_PageLoc,y     ;and save as page location for misc object
0ED01 B5 81                     	lda Block_X_Position,x                ;get low byte of block buffer offset
0ED03 18                        	clc
0ED04 69 05                     	adc #$05 				;add five pixels
0ED06 99 85 00                  	sta Misc_X_Position,y  ;save as horizontal coordinate for misc object
0ED09 B5 C9                     	lda Block_Y_Position,x               ;get vertical high nybble offset from earlier
0ED0B 38                        	sec
0ED0C E9 10                     	sbc #$10               ;remove 16 pixels
0ED0E 99 CD 00                  	sta Misc_Y_Position,y  ;store as vertical coordinate
0ED11 4C 5B A4                  	jmp JCoinC
0ED14                           	
0ED14                           brickshatterex:
0ED14 A4 02                     		ldy $02
0ED16 A9 00                     		lda #$00
0ED18 91 F7                     		sta ($f7),y
0ED1A 60                        		rts
0ED1B                           	
0ED1B                           BreakBlock:
0ED1B A4 02                     		ldy $02
0ED1D A9 23                     		lda #$23
0ED1F 91 F7                     		sta ($f7),y
0ED21 20 C2 8A                  		jsr WriteBlockMetatile
0ED24 A9 01                     		lda #Sfx_BrickShatter
0ED26 85 EE                     		sta NoiseSoundQueue
0ED28 AD 1C 07                  		lda ScreenLeft_X_Pos    ;get horizontal coordinate for left side of screen
0ED2B 18                        		clc
0ED2C 69 10                     		adc #$10                ;subtract 72 pixels regardless of enemy object
0ED2E 85 01                             sta $01                 ;store result here
0ED30 AD 1A 07                          lda ScreenLeft_PageLoc
0ED33 69 00                             adc #$00                ;subtract borrow from page location of left side
0ED35 85 00                             sta $00                 ;store result here
0ED37 AD 1D 07                          lda ScreenRight_X_Pos   ;add 72 pixels to the right side horizontal coordinate
0ED3A 38                        		sec
0ED3B E9 10                             sbc #$10
0ED3D 85 03                             sta $03                 ;store result here
0ED3F AD 1B 07                          lda ScreenRight_PageLoc     
0ED42 E9 00                             sbc #$00                ;then add the carry to the page location
0ED44 85 04                             sta $04                 ;and store result here
0ED46 B5 79                             lda Enemy_X_Position,x  ;compare horizontal coordinate of the enemy object
0ED48 C5 01                             cmp $01                 ;to modified horizontal left edge coordinate to get carry
0ED4A B5 60                             lda Enemy_PageLoc,x
0ED4C E5 00                             sbc $00                 ;then subtract it from the page coordinate of the enemy object
0ED4E 30 0A                             bmi +              		;if enemy object is too far left, branch to erase it
0ED50 B5 79                             lda Enemy_X_Position,x  ;compare horizontal coordinate of the enemy object
0ED52 C5 03                             cmp $03                 ;to modified horizontal right edge coordinate to get carry
0ED54 B5 60                             lda Enemy_PageLoc,x
0ED56 E5 04                             sbc $04                 ;then subtract it from the page coordinate of the enemy object
0ED58 30 07                             bmi ++            		;if enemy object is on the screen, leave, do not erase enemy
0ED5A A4 02                     +:		ldy $02
0ED5C A9 00                     		lda #$00
0ED5E 91 F7                     		sta ($f7),y
0ED60 60                        		rts
0ED61 AC EE 03                  ++:		ldy SprDataOffset_Ctrl
0ED64 AD 84 07                  		lda BlockBounceTimer
0ED67 D0 AB                     		bne brickshatterex
0ED69 A5 02                     		lda $02
0ED6B 18                        		clc
0ED6C 69 20                     		adc #$20
0ED6E 99 C9 00                  		sta Block_Y_Position,y
0ED71 AD 78 60                  		lda GrabUp
0ED74 F0 0D                     		beq ++
0ED76 B5 79                     		lda Enemy_X_Position,x
0ED78 18                        		clc
0ED79 69 08                     		adc #$08
0ED7B 29 F0                     		and #$f0
0ED7D 99 81 00                  		sta Block_X_Position,y
0ED80 4C 9B ED                  		jmp +
0ED83                           ++:	
0ED83 B5 79                     		lda Enemy_X_Position,x
0ED85 29 F0                     		and #$f0
0ED87 B4 43                     		ldy Enemy_MovingDir,x
0ED89 88                        		dey
0ED8A D0 06                     		bne ++
0ED8C 18                        		clc
0ED8D 69 10                     		adc #$10
0ED8F 4C 95 ED                  		jmp +++
0ED92 29 F0                     ++: 	and #$f0
0ED94 18                        		clc
0ED95                           +++:
0ED95 AC EE 03                  		ldy SprDataOffset_Ctrl
0ED98 99 81 00                  		sta Block_X_Position,y  ;save as horizontal coordinate for block object
0ED9B                           +:	
0ED9B B5 60                             lda Enemy_PageLoc,x
0ED9D 69 00                             adc #$00                ;add carry to page location of player
0ED9F 99 68 00                          sta Block_PageLoc,y    ;save as page location of block object
0EDA2 B5 A8                             lda Enemy_Y_HighPos,x
0EDA4 99 B0 00                          sta Block_Y_HighPos,y   ;save vertical high byte of player into
0EDA7 A5 F7                     		lda $f7                  ;get low byte of block buffer address used in same routine
0EDA9 99 E6 03                  		sta Block_BBuf_Low,y
0EDAC A5 F8                     		lda $f8
0EDAE 99 9F 60                  		sta Block_BBuf_High,y
0EDB1 A5 02                     		lda $02
0EDB3 99 E4 03                  		sta Block_Orig_YPos,y
0EDB6 A9 12                     	    lda #$12
0EDB8 99 24 00                  	    sta Block_State,y
0EDBB A9 00                     		lda #$00
0EDBD 99 E8 03                  		sta Block_Metatile,y
0EDC0 98                        		tya
0EDC1 AA                        		tax
0EDC2 20 EB A8                          jsr BrickShatter
0EDC5 AD EE 03                  		lda SprDataOffset_Ctrl
0EDC8 49 01                     		eor #$01
0EDCA 8D EE 03                  		sta SprDataOffset_Ctrl
0EDCD A6 08                     		ldx ObjectOffset
0EDCF 60                        		rts
0EDD0                           
0EDD0                           		
0EDD0                           		
0EDD0                           ShellBumpTable:
0EDD0 C0 5F 29                  	.db $c0, $5f, $29 ;02 coin block
0EDD3 5D 58 29 34               	.db $5d, $58, $29, $34 ;06 multicoins brick
0EDD7 5A 55 29 2A 31 6F 30 C1.. 	.db $5a, $55, $29, $2a, $31, $6f, $30, $c1, $c1 ;0f power-up
0EDE0 33 33 57 73 C6 5C 30      	.db $33, $33, $57, $73, $c6, $5c, $30 ;16 star
0EDE7 C7 35 35 5E 59            	.db $c7, $35, $35, $5e, $59 ;1b 1up
0EDEC 5B 74                     	.db $5b, $74 ;1c vine
0EDEE                           	
0EDEE                           ToBreak:
0EDEE B5 1C                     	lda Enemy_State,x
0EDF0 10 70                     	bpl rp
0EDF2 AD 04 60                  	lda GrabFlag
0EDF5 F0 0C                     	beq +
0EDF7 EC 08 60                  	cpx GrabID
0EDFA D0 07                     	bne +
0EDFC 60                        	rts
0EDFD                           GetBlockCoin4:
0EDFD 4C BA EC                  	jmp GetBlockCoin
0EE00                           BreakBlock1:
0EE00 4C 1B ED                  	jmp BreakBlock
0EE03                           +:	
0EE03 A5 03                     	lda $03
0EE05                           Webos2:
0EE05 C9 C2                     	cmp #$c2				;coin?
0EE07 F0 F4                     	beq GetBlockCoin4
0EE09                           	
0EE09 C9 51                     	cmp #$51				;brick
0EE0B F0 F3                     	beq BreakBlock1
0EE0D C9 52                     	cmp #$52				;brick with line
0EE0F F0 EF                     	beq BreakBlock1
0EE11 C9 28                     	cmp #$28				;brick
0EE13 F0 EB                     	beq BreakBlock1
0EE15 C9 27                     	cmp #$27				;brick with line
0EE17 F0 E7                     	beq BreakBlock1
0EE19                           	
0EE19 A0 02                         ldy #Sfx_Bump           ;if not, play bump sound
0EE1B 84 F0                         sty Square1SoundQueue
0EE1D                           	
0EE1D C9 8D                     	cmp #$8d
0EE1F F0 49                     	beq OnOffSetE
0EE21 8D 34 60                  	sta temp9
0EE24 A0 1D                     	ldy #$1d
0EE26                           ShellBumpLoop:
0EE26 D9 D0 ED                  	cmp ShellBumpTable,y
0EE29 F0 04                     	beq +
0EE2B 88                        	dey
0EE2C 10 F8                     	bpl ShellBumpLoop
0EE2E 60                        	rts
0EE2F C9 74                     +:	cmp #$74
0EE31 F0 30                     	beq NothingBlock
0EE33 A9 00                     	lda #$00
0EE35 C0 1C                     	cpy #$1c
0EE37 B0 1A                     	bcs +
0EE39 A9 01                     	lda #$01
0EE3B C0 17                     	cpy #$17
0EE3D B0 14                     	bcs +
0EE3F A9 02                     	lda #$02
0EE41 C0 10                     	cpy #$10
0EE43 B0 0E                     	bcs +
0EE45 A9 03                     	lda #$03
0EE47 C0 07                     	cpy #$07
0EE49 B0 08                     	bcs +
0EE4B A9 04                     	lda #$04
0EE4D C0 03                     	cpy #$03
0EE4F B0 02                     	bcs +
0EE51 A9 05                     	lda #$05
0EE53 20 77 F7                  +:	jsr JumpEngineOthersTemp
0EE56                           	
0EE56 CA EE                     	.dw VineE
0EE58 B7 EE                     	.dw P1upE
0EE5A B4 EE                     	.dw StarE
0EE5C A3 EE                     	.dw MushE
0EE5E 85 EE                     	.dw MultiCoinE
0EE60 D9 EC                     	.dw CoinE
0EE62                           
0EE62 60                        rp:	rts
0EE63                           NothingBlock:
0EE63 8D 2A 60                  	sta temp6
0EE66 20 E1 EE                  	jsr GetBlockEnemy
0EE69 60                        	rts
0EE6A                           OnOffSetE:
0EE6A AD 53 60                  	lda OnOffBits
0EE6D 49 01                     	eor #%00000001
0EE6F 8D 53 60                  	sta OnOffBits
0EE72 29 01                     	and #%00000001
0EE74 8D 54 60                  	sta OnOffFlag
0EE77 60                        	rts
0EE78                           CoinE2:
0EE78 A9 00                     	lda #$00                 ;initialize multi-coin timer flag
0EE7A 8D BC 06                      sta BrickCoinTimerFlag
0EE7D A9 10                     	lda #$10
0EE7F 8D B4 63                      sta BrickCoinTimer       ;if not set, set brick coin timer
0EE82 4C D9 EC                  	jmp CoinE				 
0EE85                           MultiCoinE:
0EE85 AD BC 06                  	lda BrickCoinTimerFlag   ;check brick coin timer flag
0EE88 D0 08                         bne +                    ;if set, timer expired or counting down, thus branch
0EE8A A9 10                         lda #$10
0EE8C 8D B4 63                      sta BrickCoinTimer       ;if not set, set brick coin timer
0EE8F EE BC 06                  	inc BrickCoinTimerFlag   ;and set flag linked to it
0EE92 CE B4 63                  +:  dec BrickCoinTimer
0EE95 AD B4 63                  	lda BrickCoinTimer
0EE98 F0 DE                     	beq CoinE2
0EE9A AD 34 60                  	lda temp9
0EE9D 8D 2A 60                  	sta temp6
0EEA0 4C DE EC                  	jmp MultiCoin
0EEA3                           MushE:
0EEA3 EC 08 60                  	cpx GrabID
0EEA6 D0 05                     	bne ++
0EEA8 AD 78 60                  	lda GrabUp
0EEAB D0 04                     	bne +
0EEAD B5 1C                     ++:	lda Enemy_State,x      ;if enemy state d7 not set, branch
0EEAF 10 B1                         bpl rp
0EEB1                           +:	
0EEB1 A9 00                     	lda #$00
0EEB3 2C                        	.db $2c
0EEB4                           StarE:
0EEB4 A9 02                     	lda #$02
0EEB6 2C                        	.db $2c
0EEB7                           P1upE:
0EEB7 A9 03                     	lda #$03
0EEB9                           BlockPower:
0EEB9 85 39                     	sta PowerUpType			;fun fact: set block state to 1 to make it bump
0EEBB A9 C4                     	lda #$c4
0EEBD 8D 2A 60                  	sta temp6
0EEC0 20 E1 EE                  	jsr GetBlockEnemy
0EEC3 98                        	tya
0EEC4 AA                        	tax
0EEC5 A9 00                     	lda #$00
0EEC7 4C 7F A6                  	jmp SetupPowerUp
0EECA                           VineE:
0EECA A9 C4                     	lda #$c4
0EECC 8D 2A 60                  	sta temp6
0EECF 20 E1 EE                  	jsr GetBlockEnemy
0EED2 20 2A BB                  	jsr jmpidk
0EED5 B0 09                     	bcs +
0EED7 8E CD 7F                  	stx $7fcd
0EEDA AC EE 03                      ldy SprDataOffset_Ctrl  ;get control bit
0EEDD 4C BC A1                  	jmp Setup_Vine1
0EEE0 60                        +:	rts
0EEE1                           GetBlockEnemy:
0EEE1 AD 9B 60                  	lda $609b
0EEE4 85 F6                         sta $f6
0EEE6 AD 9C 60                      lda $609c
0EEE9 85 F7                         sta $f7
0EEEB AD 9D 60                      lda $609d
0EEEE 85 F8                         sta $f8
0EEF0 AD 9E 60                      lda $609e
0EEF3 85 F9                         sta $f9
0EEF5 AC EE 03                  	ldy SprDataOffset_Ctrl
0EEF8 A9 01                     	lda #$01
0EEFA 99 32 60                  	sta BlockUsed,y
0EEFD B9 24 00                  	lda Block_State,y
0EF00 09 01                     	ora #$00000001
0EF02 99 24 00                  	sta Block_State,y
0EF05 A9 07                     	lda #$07
0EF07 8D 84 07                      sta BlockBounceTimer     ;set block bounce timer
0EF0A 8C 34 60                  	sty temp9
0EF0D A4 02                     	ldy $02
0EF0F A9 23                     	lda #$23
0EF11 91 F7                     	sta ($f7),y
0EF13 20 C2 8A                  	jsr WriteBlockMetatile
0EF16 AC 34 60                  	ldy temp9
0EF19 A9 FE                     	lda #$fe
0EF1B 99 9A 00                  	sta Block_Y_Speed,y
0EF1E AD 2A 60                  	lda temp6
0EF21 99 E8 03                  	sta Block_Metatile,y
0EF24 A5 02                     	lda $02
0EF26 18                        	clc
0EF27 69 20                     	adc #$20
0EF29 99 C9 00                  	sta Block_Y_Position,y
0EF2C AD 78 60                  	lda GrabUp
0EF2F F0 0D                     	beq ++
0EF31 B5 79                     	lda Enemy_X_Position,x
0EF33                           	add #$08
0EF33 18                        	clc
0EF34 69 08                     	adc #$08 ;apparently this sometimes refuses to work correctly lmao
0EF36 29 F0                     	and #$f0
0EF38 99 81 00                  	sta Block_X_Position,y
0EF3B 4C 56 EF                  	jmp +
0EF3E                           ++:	
0EF3E B5 79                     	lda Enemy_X_Position,x
0EF40 29 F0                     	and #$f0
0EF42 B4 43                     	ldy Enemy_MovingDir,x
0EF44 88                        	dey
0EF45 D0 06                     	bne ++
0EF47 18                        	clc
0EF48 69 10                     	adc #$10
0EF4A 4C 50 EF                  	jmp +++
0EF4D 29 F0                     ++: and #$f0
0EF4F 18                        	clc
0EF50                           +++:
0EF50 AC 34 60                  	ldy temp9
0EF53 99 81 00                      sta Block_X_Position,y  ;save as horizontal coordinate for block object
0EF56                           +:	
0EF56 B5 60                     	lda Enemy_PageLoc,x
0EF58 69 00                     	adc #$00
0EF5A 99 68 00                  	sta Block_PageLoc,y
0EF5D A5 F7                     	lda $f7                  ;get low byte of block buffer address used in same routine
0EF5F 99 E6 03                      sta Block_BBuf_Low,y
0EF62 A5 F8                     	lda $f8
0EF64 99 9F 60                  	sta Block_BBuf_High,y
0EF67 A5 02                     	lda $02
0EF69 99 E4 03                  	sta Block_Orig_YPos,y
0EF6C AD EE 03                  	lda SprDataOffset_Ctrl
0EF6F 49 01                     	eor #$01
0EF71 8D EE 03                  	sta SprDataOffset_Ctrl
0EF74                           FY2:
0EF74 60                        	rts
0EF75                           
0EF75                           ;--------------------------------
0EF75                           ;$00 - used to hold horizontal difference between player and enemy
0EF75                           
0EF75                           ;-------------------------------                     ;and leave with flags set for conditional branch
0EF75                           DoSide1:
0EF75 4C 34 F0                  	jmp DoSide
0EF78                           Enemy_PSwitchJmp2:
0EF78 4C E7 9A                  	jmp Enemy_PSwitch
0EF7B                           EnemyJump:
0EF7B B5 C1                             lda Enemy_Y_Position,x  ;add 62 pixels to enemy object's
0EF7D C9 0C                             cmp #$0c                ;compare against a certain range     ;do a sub here
0EF7F 90 F4                             bcc DoSide1              ;if enemy vertical coord + 62 < 68, branch to leave
0EF81 C9 D5                     		cmp #$d5
0EF83 B0 F0                     		bcs DoSide1
0EF85 B5 A8                     		lda Enemy_Y_HighPos,x
0EF87 F0 EC                     		beq DoSide1
0EF89 B5 92                             lda Enemy_Y_Speed,x
0EF8B 30 E8                             bmi DoSide1 
0EF8D A9 00                     		lda #$00                  ;set flag in A for save vertical coordinate
0EF8F A0 15                             ldy #$15                  ;set Y to check the bottom middle (8,18) of enemy object
0EF91 E8                                inx
0EF92 20 7A F2                  	    jsr BBChk_E 
0EF95 F0 DE                             beq DoSide1            ;standing on anything, then branch to same place if not
0EF97 C9 8C                     		cmp #$8c
0EF99 F0 DD                     		beq Enemy_PSwitchJmp2
0EF9B AC 28 60                  		ldy PTimer
0EF9E F0 21                     		beq +
0EFA0 C9 51                     		cmp #$51
0EFA2 F0 D1                     		beq DoSide1
0EFA4 C9 52                     		cmp #$52
0EFA6 F0 CD                     		beq DoSide1
0EFA8 C9 28                     		cmp #$28
0EFAA F0 C9                     		beq DoSide1
0EFAC C9 27                     		cmp #$27
0EFAE F0 C5                     		beq DoSide1
0EFB0 C9 91                     		cmp #$91
0EFB2 F0 C1                     		beq DoSide1
0EFB4 C9 C2                     		cmp #$c2
0EFB6 F0 65                     		beq ++
0EFB8 AC 28 60                  		ldy PTimer
0EFBB D0 04                     		bne +
0EFBD C9 72                     		cmp #$72
0EFBF F0 5C                     	    beq ++
0EFC1 AC 54 60                  +:      ldy OnOffFlag
0EFC4 F0 07                     		beq ++++
0EFC6 C9 8F                     		cmp #$8f
0EFC8 F0 AA                     		beq FY2
0EFCA 4C D1 EF                  		jmp +++
0EFCD C9 8E                     ++++: 	cmp #$8e
0EFCF F0 A3                     		beq FY2
0EFD1                           +++:
0EFD1 C9 26                     		cmp #$26       ;blank metatile used for vines?
0EFD3 F0 9F                     		beq FY2
0EFD5 C9 C2                     	    cmp #$c2       ;regular coin?
0EFD7 F0 9B                     		beq FY2
0EFD9 C9 5F                     		cmp #$5f       ;hidden coin block?
0EFDB F0 97                     		beq FY2
0EFDD C9 60                     		cmp #$60       ;hidden 1-up block?
0EFDF F0 52                             beq FY3            ;branch if found
0EFE1 C9 71                     		cmp #$71
0EFE3 F0 4E                     		beq FY3
0EFE5 C9 74                     		cmp #$74
0EFE7 F0 4A                     	    beq FY3
0EFE9 C9 6F                     		cmp #$6f
0EFEB F0 46                     		beq FY3
0EFED C9 25                     		cmp #$25
0EFEF F0 42                     		beq FY3
0EFF1 C9 30                     		cmp #$30
0EFF3 F0 3E                     		beq FY3
0EFF5 C9 70                     		cmp #$70
0EFF7 F0 3A                     		beq FY3
0EFF9 C9 C5                     		cmp #$c5
0EFFB F0 36                     		beq FY3
0EFFD C9 25                     		cmp #$25
0EFFF F0 32                     		beq FY3
0F001 48                        		pha
0F002 C9 88                     		cmp #$88			;hiweputa
0F004 F0 0E                     		beq bruh
0F006 C9 C3                     		cmp #$c3
0F008 D0 0A                     		bne bruh
0F00A B5 C1                     		lda Enemy_Y_Position,x
0F00C 29 0F                     		and #$0f
0F00E C9 08                     		cmp #$08
0F010 B0 02                     	    bcs bruh
0F012 68                        bru:	pla
0F013 60                                rts
0F014 68                        bruh:	pla
0F015 C9 72                     		cmp #$72
0F017 F0 1A                     	    beq FY3
0F019 C9 91                     		cmp #$91
0F01B F0 16                     		beq FY3
0F01D A9 00                     ++:     lda #$00                    ;initialize vertical speed
0F01F 95 92                             sta Enemy_Y_Speed,x         ;and movement force
0F021 9D 34 04                          sta Enemy_Y_MoveForce,x            ;do something here to vertical speed and something else
0F024 B5 C1                             lda Enemy_Y_Position,x
0F026 29 F0                             and #%11110000          ;save high nybble of vertical coordinate, and
0F028 09 08                             ora #%00001000          ;set d3, then store, probably used to set enemy object
0F02A 95 C1                             sta Enemy_Y_Position,x  ;neatly on whatever it's landing on
0F02C A9 FD                             lda #$fd
0F02E 95 92                             sta Enemy_Y_Speed,x   ;make the paratroopa jump again
0F030 4C 0E EB                  DoSid2:	jmp DoEnemySideCheck
0F033 60                        FY3:	rts
0F034 B5 92                     DoSide: lda Enemy_Y_Speed,x
0F036 10 F8                     		bpl DoSid2
0F038 B5 C1                     		lda Enemy_Y_Position,x
0F03A C9 1F                     		cmp #$1f
0F03C 90 F2                     		bcc DoSid2
0F03E B5 A8                     		lda Enemy_Y_HighPos,x
0F040 F0 EE                     		beq DoSid2
0F042 20 5F F1                  		jsr ChkAboveEnemy
0F045 F0 E9                     		beq DoSid2
0F047 C9 91                     		cmp #$91
0F049 F0 E5                     		beq DoSid2
0F04B AC 28 60                  		ldy PTimer
0F04E F0 2D                     		beq NoPe
0F050 C9 51                     		cmp #$51
0F052 F0 DC                     		beq DoSid2
0F054 C9 29                     		cmp #$29
0F056 F0 D8                     		beq DoSid2
0F058 C9 2A                     		cmp #$2a
0F05A F0 6C                     	    beq +
0F05C C9 2B                     	    cmp #$2b
0F05E F0 68                     	    beq +
0F060 C9 30                     		cmp #$30
0F062 F0 64                     	    beq +
0F064 C9 52                     		cmp #$52
0F066 F0 60                     		beq +
0F068 C9 28                     		cmp #$28
0F06A F0 5C                     		beq +
0F06C C9 27                     		cmp #$27
0F06E F0 58                     		beq +
0F070                           		
0F070 C9 C2                     		cmp #$c2
0F072 F0 4D                     		beq Boi
0F074 AC 28 60                  		ldy PTimer
0F077 D0 4F                     		bne +
0F079 C9 72                     		cmp #$72
0F07B F0 44                     	    beq Boi
0F07D C9 26                     NoPe:   cmp #$26       ;blank metatile used for vines?
0F07F F0 B2                     		beq FY3
0F081 C9 C2                     	    cmp #$c2       ;regular coin?
0F083 F0 AE                     		beq FY3
0F085 C9 5F                     		cmp #$5f       ;hidden coin block?
0F087 F0 AA                     		beq FY3
0F089 C9 71                     		cmp #$71
0F08B F0 A6                     		beq FY3
0F08D C9 60                     		cmp #$60
0F08F F0 A2                     		beq FY3
0F091 C9 74                     		cmp #$74
0F093 F0 9E                     	    beq FY3
0F095 C9 6F                     		cmp #$6f
0F097 F0 9A                     		beq FY3
0F099 C9 25                     		cmp #$25
0F09B F0 96                     		beq FY3
0F09D C9 70                     		cmp #$70
0F09F F0 92                     	    beq FY3
0F0A1 C9 63                     		cmp #$63
0F0A3 F0 8E                     		beq FY3
0F0A5 C9 C5                     		cmp #$c5
0F0A7 F0 8A                     		beq FY3
0F0A9 C9 73                     		cmp #$73
0F0AB F0 1E                     		beq FY4
0F0AD C9 88                     		cmp #$88
0F0AF F0 1A                     		beq FY4
0F0B1 AC 54 60                  		ldy OnOffFlag
0F0B4 F0 07                     		beq Oetu
0F0B6 C9 8F                     		cmp #$8f
0F0B8 F0 11                     		beq FY4
0F0BA 4C C1 F0                  		jmp XD2
0F0BD C9 8E                     Oetu: 	cmp #$8e
0F0BF F0 79                     		beq FY
0F0C1                           XD2:
0F0C1 A9 02                     Boi:	lda #$02
0F0C3 95 92                     		sta Enemy_Y_Speed,x
0F0C5 9D 34 04                  		sta Enemy_Y_MoveForce,x
0F0C8 4C 0E EB                  +:   	jmp DoEnemySideCheck  ;check for horizontal blockage, then leave
0F0CB 60                        FY4:	rts
0F0CC                           NoUnderHammerBro2:
0F0CC 4C 58 F1                  	  jmp NoUnderHammerBro
0F0CF                           ;--------------------------------
0F0CF                           HammerBroBGColl:
0F0CF A9 00                           lda #$00                  ;set flag in A for save vertical coordinate
0F0D1 A0 15                           ldy #$15                  ;set Y to check the bottom middle (8,18) of enemy object
0F0D3 E8                              inx
0F0D4 20 7A F2                  	  jsr BBChk_E
0F0D7 F0 F3                           beq NoUnderHammerBro2    
0F0D9 C9 5F                     	  cmp #$5f
0F0DB F0 7B                     	  beq NoUnderHammerBro
0F0DD C9 60                     	  cmp #$60
0F0DF F0 77                     	  beq NoUnderHammerBro
0F0E1 C9 70                     	  cmp #$70
0F0E3 F0 73                     	  beq NoUnderHammerBro
0F0E5 C9 6F                     	  cmp #$6f
0F0E7 F0 6F                     	  beq NoUnderHammerBro
0F0E9 C9 30                     	  cmp #$30
0F0EB F0 6B                     	  beq NoUnderHammerBro
0F0ED C9 25                     	  cmp #$25
0F0EF F0 67                     	  beq NoUnderHammerBro
0F0F1 C9 C5                     	  cmp #$c5
0F0F3 F0 63                     	  beq NoUnderHammerBro
0F0F5 C9 74                     	  cmp #$74
0F0F7 F0 5F                     	  beq NoUnderHammerBro
0F0F9 C9 91                     	  cmp #$91
0F0FB F0 5B                     	  beq NoUnderHammerBro
0F0FD C9 73                     	  cmp #$73
0F0FF F0 57                     	  beq NoUnderHammerBro
0F101 AC 54 60                  	  ldy OnOffFlag
0F104 F0 07                     	  beq +++
0F106 C9 8F                     	  cmp #$8f
0F108 F0 4E                           beq NoUnderHammerBro
0F10A 4C 11 F1                  	  jmp ++
0F10D C9 8E                     +++:  cmp #$8e
0F10F F0 47                     	  beq NoUnderHammerBro
0F111 AC 28 60                  ++:	  ldy PTimer
0F114 D0 0B                     	  bne ++
0F116 C9 72                     	  cmp #$72
0F118 F0 3E                     	  beq NoUnderHammerBro
0F11A C9 C2                     	  cmp #$c2       ;regular coin?
0F11C F0 3A                           beq NoUnderHammerBro
0F11E 4C 29 F1                  	  jmp +
0F121 C9 52                     ++:   cmp #$52
0F123 F0 33                     	  beq NoUnderHammerBro
0F125 C9 51                     	  cmp #$51
0F127 F0 2F                     	  beq NoUnderHammerBro
0F129 C9 23                     +:    cmp #$23             ;check for blank metatile $23 and branch if not found
0F12B D0 0E                           bne UnderHammerBro
0F12D                           
0F12D                           KillEnemyAboveBlock:
0F12D B5 1C                           lda Enemy_State,x ;tu puta madre
0F12F 29 7F                     	  and #%01111111
0F131 95 1C                     	  sta Enemy_State,x
0F133 20 0C D5                  	  jsr ShellOrBlockDefeat  ;do this sub to kill enemy
0F136 A9 FC                           lda #$fc                ;alter vertical speed of enemy and leave
0F138 95 92                           sta Enemy_Y_Speed,x
0F13A 60                        FY:   rts
0F13B                           
0F13B                           UnderHammerBro:
0F13B BD 8A 07                        lda EnemyFrameTimer,x ;check timer used by hammer bro
0F13E D0 18                           bne NoUnderHammerBro  ;branch if not expired
0F140 B5 1C                           lda Enemy_State,x
0F142 29 88                           and #%10001000        ;save d7 and d3 from enemy state, nullify other bits
0F144 95 1C                           sta Enemy_State,x     ;and store
0F146 A9 00                           lda #$00                    ;initialize vertical speed
0F148 95 92                           sta Enemy_Y_Speed,x         ;and movement force
0F14A 9D 34 04                        sta Enemy_Y_MoveForce,x            ;do something here to vertical speed and something else
0F14D B5 C1                           lda Enemy_Y_Position,x
0F14F 29 F0                           and #%11110000          ;save high nybble of vertical coordinate, and
0F151 09 08                           ora #%00001000          ;set d3, then store, probably used to set enemy object
0F153 95 C1                           sta Enemy_Y_Position,x  ;neatly on whatever it's landing on
0F155 4C 0E EB                        jmp DoEnemySideCheck  ;then check for horizontal blockage and leave
0F158                           
0F158                           NoUnderHammerBro:
0F158 B5 1C                           lda Enemy_State,x  ;if hammer bro is not standing on anything, set d0
0F15A 09 01                           ora #$01           ;in the enemy state to indicate jumping or falling, then leave
0F15C 95 1C                           sta Enemy_State,x
0F15E 60                              rts
0F15F                           
0F15F                           ChkAboveEnemy:
0F15F A9 00                     	  lda #$00
0F161 A0 21                     	  ldy #$21
0F163 E8                        	  inx
0F164 4C 7A F2                  	  jmp BBChk_E
0F167                           ClearBounceFlag2:
0F167 A9 00                            lda #$00
0F169 95 3A                            sta FireballBouncingFlag,x  ;clear bouncing flag by default
0F16B 60                        	   rts
0F16C                           ;-------------------------------------------------------------------------------------
0F16C                           FireballBGCollision:
0F16C B5 C7                     	  lda Fireball_Y_Position,x   ;check fireball's vertical coordinate
0F16E C9 18                           cmp #$18
0F170 90 F5                           bcc ClearBounceFlag2         ;if within the status bar area of the screen, branch ahead
0F172 A0 1A                           ldy #$1a                  	;set offset for block buffer adder data
0F174 8A                        	  txa
0F175 18                        	  clc
0F176 69 07                     	  adc #$07                  ;add seven bytes to use
0F178 AA                        	  tax
0F179 A9 00                     	  lda #$00                  ;set A to return vertical coordinate
0F17B 48                        	  pha                         ;save contents of A to stack
0F17C 84 04                           sty $04                     ;save contents of Y here
0F17E B9 B5 BA                        lda BlockBuffer_X_Adder,y   ;add horizontal coordinate
0F181 18                               clc                         ;of object to value obtained using Y as offset
0F182 75 78                            adc SprObject_X_Position,x
0F184 85 05                            sta $05                     ;store here
0F186 B5 5F                     	   lda SprObject_PageLoc,x     ;of indirect here
0F188 69 66                     	   adc #$66
0F18A 85 F8                     	   sta $f8
0F18C A4 05                     	   ldy $05
0F18E B9 24 BD                  	   lda MSBtoLSB,y
0F191 85 F7                     	   sta $f7                     ;store here and leave
0F193 A4 04                            ldy $04                     ;get old contents of Y
0F195                           	   
0F195                           	   ;jsr TheLagMaker			   ;if need to lag the game to an unplayable level, uncomment this
0F195                           	   
0F195 B5 C0                            lda SprObject_Y_Position,x  ;get vertical coordinate of object
0F197 18                               clc
0F198 79 03 BB                         adc BlockBuffer_Y_Adder3,y   ;add it to value obtained using Y as offset
0F19B 29 F0                            and #%11110000              ;mask out low nybble
0F19D 85 02                            sta $02                     ;store result here
0F19F A8                               tay                         ;use as offset for block buffer
0F1A0 B1 F7                            lda ($f7),y                 ;check current content of block buffer
0F1A2 85 03                            sta $03                     ;and store here
0F1A4 A4 04                           ldy $04                     ;get old contents of Y again
0F1A6 68                              pla                         ;pull A from stack
0F1A7 D0 18                           bne xc1                      ;if A = 1, branch
0F1A9 B5 C0                           lda SprObject_Y_Position,x  ;if A = 0, load vertical coordinate
0F1AB 29 0F                           and #%00001111              ;and mask out high nybble
0F1AD 85 04                           sta $04                     ;store masked out result here
0F1AF A6 03                     	  ldx $03
0F1B1 BD FA B8                  	  lda MetatileThingy,x
0F1B4 A6 08                           ldx ObjectOffset          ;get object offset
0F1B6 C9 00                           cmp #$00                  ;check to see if object bumped into anything
0F1B8 4C D0 F1                  	  jmp +
0F1BB 4C 5F F2                  FY5:  jmp ClearBounceFlag
0F1BE 4C 5F F2                  ClearBounceFlag3: jmp ClearBounceFlag
0F1C1 B5 78                     xc1:  lda SprObject_X_Position,x  ;otherwise load horizontal coordinate
0F1C3 29 0F                           and #%00001111              ;and mask out high nybble
0F1C5 85 04                           sta $04                     ;store masked out result here
0F1C7                                 
0F1C7                           	  
0F1C7 A6 03                     	  ldx $03
0F1C9 BD FA B8                  	  lda MetatileThingy,x          ;and leave
0F1CC A6 08                     	  ldx ObjectOffset          ;get object offset
0F1CE C9 00                           cmp #$00                  ;check to see if object bumped into anything
0F1D0 F0 EC                     +:    beq ClearBounceFlag3         ;if nothing underneath fireball, branch
0F1D2 C9 26                           cmp #$26       ;blank metatile used for vines?
0F1D4 F0 E5                           beq FY5
0F1D6 C9 5F                           cmp #$5f       ;hidden coin block?
0F1D8 F0 E1                           beq FY5
0F1DA C9 6F                     	  cmp #$6f
0F1DC F0 DD                     	  beq FY5
0F1DE C9 70                     	  cmp #$70
0F1E0 F0 7D                     	  beq ClearBounceFlag
0F1E2 C9 73                     	  cmp #$73
0F1E4 F0 79                     	  beq ClearBounceFlag
0F1E6 C9 30                     	  cmp #$30
0F1E8 F0 75                     	  beq ClearBounceFlag
0F1EA C9 C5                     	  cmp #$c5
0F1EC F0 71                     	  beq ClearBounceFlag
0F1EE C9 91                     	  cmp #$91
0F1F0 F0 6D                     	  beq ClearBounceFlag
0F1F2 AC 54 60                  	  ldy OnOffFlag
0F1F5 F0 07                     	  beq +++
0F1F7 C9 8F                     	  cmp #$8f
0F1F9 F0 64                        	  beq ClearBounceFlag
0F1FB 4C 02 F2                  	  jmp ++
0F1FE C9 8E                     +++:  cmp #$8e
0F200 F0 5D                     	  beq ClearBounceFlag
0F202                           ++:
0F202 AC 28 60                  	  ldy PTimer
0F205 D0 0B                     	  bne ++
0F207 C9 72                     	  cmp #$72
0F209 F0 54                     	  beq ClearBounceFlag
0F20B C9 C2                     	  cmp #$c2       ;regular coin?
0F20D F0 50                           beq ClearBounceFlag
0F20F 4C 16 F2                  	  jmp +
0F212 C9 52                     ++:   cmp #$52
0F214 F0 49                     	  beq ClearBounceFlag
0F216 C9 60                     +:    cmp #$60       ;hidden 1-up block?
0F218 F0 45                           beq ClearBounceFlag         ;branch if any found
0F21A C9 74                     	  cmp #$74
0F21C F0 41                           beq ClearBounceFlag         ;branch if any found
0F21E C9 25                     	  cmp #$25
0F220 F0 3D                     	  beq ClearBounceFlag
0F222 C9 63                     	  cmp #$63
0F224 F0 04                     	  beq ++
0F226 C9 88                     	  cmp #$88
0F228 D0 0F                     	  bne +
0F22A B5 C7                     ++:	  lda Fireball_Y_Position,x
0F22C 29 0F                     	  and #$0f
0F22E C9 0D                     	  cmp #$0d
0F230 B0 04                     	  bcs +++
0F232 C9 08                     	  cmp #$08
0F234 B0 14                     	  bcs ++
0F236 4C 5F F2                  +++:  jmp ClearBounceFlag
0F239                           +:	  
0F239 B5 C7                     	  lda Fireball_Y_Position,x
0F23B C9 E0                     	  cmp #$e0
0F23D B0 20                     	  bcs ClearBounceFlag
0F23F B5 98                           lda Fireball_Y_Speed,x      ;if fireball's vertical speed set to move upwards,
0F241 30 21                           bmi InitFireballExplode     ;branch to set exploding bit in fireball's state
0F243 B5 3A                     	  lda FireballBouncingFlag,x  ;if bouncing flag already set,
0F245 D0 1D                           bne InitFireballExplode     ;branch to set exploding bit in fireball's state
0F247 4C 50 F2                  	  jmp +
0F24A B5 C7                     ++:   lda Fireball_Y_Position,x
0F24C C9 E0                     	  cmp #$e0
0F24E B0 0F                     	  bcs ClearBounceFlag
0F250 A9 FD                     +:	  lda #$fd
0F252 95 98                           sta Fireball_Y_Speed,x      ;otherwise set vertical speed to move upwards (give it bounce)
0F254 A9 01                           lda #$01
0F256 95 3A                           sta FireballBouncingFlag,x  ;set bouncing flag
0F258 B5 C7                           lda Fireball_Y_Position,x
0F25A 29 F8                           and #$f8                    ;modify vertical coordinate to land it properly
0F25C 95 C7                           sta Fireball_Y_Position,x   ;store as new vertical coordinate
0F25E 60                        NSFn: rts
0F25F                                                   ;leave
0F25F                           
0F25F                           ClearBounceFlag:
0F25F A9 00                           lda #$00
0F261 95 3A                           sta FireballBouncingFlag,x  ;clear bouncing flag by default
0F263 60                              rts                         ;leave
0F264                           
0F264                           InitFireballExplode:
0F264 A9 80                           lda #$80
0F266 95 22                           sta Fireball_State,x        ;set exploding flag in fireball's state
0F268 A9 02                           lda #Sfx_Bump
0F26A 85 F0                           sta Square1SoundQueue       ;load bump sound
0F26C 60                              rts                         ;leave
0F26D                           ;-------------------------------------------------------------------------------------
0F26D                           ;$02 - modified y coordinate
0F26D                           ;$03 - stores metatile involved in block buffer collisions
0F26D                           ;$04 - comes in with offset to block buffer adder data, goes out with low nybble x/y coordinate
0F26D                           ;$05 - modified x coordinate
0F26D                           ;$06-$07 - block buffer address
0F26D                           
0F26D                           BlockBufferChk_Enemy:
0F26D E8                              inx
0F26E                           	  ;inc PlayerFoot,x
0F26E 4C 7A F2                        jmp BBChk_E
0F271                           
0F271                           ;ResidualMiscObjectCode:
0F271                           ;      txa
0F271                           ;      clc           ;supposedly used once to set offset for
0F271                           ;      adc #$0d      ;miscellaneous objects
0F271                           ;      tax
0F271                           ;      ldy #$1b      ;supposedly used once to set offset for block buffer data
0F271                           ;      jmp ResJmpM   ;probably used in early stages to do misc to bg collision detection
0F271                           
0F271                           BlockBufferChk_FBall:
0F271 A0 1A                              ldy #$1a                  ;set offset for block buffer adder data
0F273 8A                                 txa
0F274 18                                 clc
0F275 69 07                              adc #$07                  ;add seven bytes to use
0F277 AA                                 tax
0F278 A9 00                     ResJmpM: lda #$00                  ;set A to return vertical coordinate
0F27A 48                        BBChk_E: pha                         ;save contents of A to stack
0F27B 84 04                            sty $04                     ;save contents of Y here
0F27D B9 B5 BA                         lda BlockBuffer_X_Adder,y   ;add horizontal coordinate
0F280 18                               clc                         ;of object to value obtained using Y as offset
0F281 75 78                            adc SprObject_X_Position,x
0F283 85 05                            sta $05                     ;store here
0F285 B5 5F                     	   lda SprObject_PageLoc,x     ;of indirect here
0F287 69 66                     	   adc #$66
0F289 85 F8                     	   sta $f8
0F28B A4 05                     	   ldy $05
0F28D B9 24 BD                  	   lda MSBtoLSB,y
0F290 85 F7                     	   sta $f7                     ;store here and leave
0F292 A4 04                            ldy $04                     ;get old contents of Y
0F294                           	   
0F294                           	   ;jsr TheLagMaker			   ;if need to lag the game to an unplayable level, uncomment this
0F294                           	   
0F294 B5 C0                            lda SprObject_Y_Position,x  ;get vertical coordinate of object
0F296 18                               clc
0F297 79 03 BB                         adc BlockBuffer_Y_Adder3,y   ;add it to value obtained using Y as offset
0F29A 29 F0                            and #%11110000              ;mask out low nybble                  ;subtract 32 pixels for the status bar
0F29C 85 02                            sta $02                     ;store result here
0F29E A8                               tay                         ;use as offset for block buffer
0F29F B1 F7                            lda ($f7),y                 ;check current content of block buffer
0F2A1 85 03                            sta $03                     ;and store here
0F2A3 A4 04                            ldy $04                     ;get old contents of Y again
0F2A5 68                               pla                         ;pull A from stack
0F2A6 D0 10                            bne xc                      ;if A = 1, branch
0F2A8 B5 C0                            lda SprObject_Y_Position,x  ;if A = 0, load vertical coordinate
0F2AA 29 0F                            and #%00001111              ;and mask out high nybble
0F2AC 85 04                            sta $04                     ;store masked out result here
0F2AE A6 03                     	   ldx $03                     ;get saved content of block buffer                       ;and leave
0F2B0 BD FA B8                  	   lda MetatileThingy,x
0F2B3 A6 08                     	   ldx ObjectOffset            ;get object offset
0F2B5 C9 00                     	   cmp #$00
0F2B7 60                        	   rts
0F2B8 B5 78                     xc:    lda SprObject_X_Position,x  ;otherwise load horizontal coordinate
0F2BA 29 0F                            and #%00001111              ;and mask out high nybble
0F2BC 85 04                            sta $04                     ;store masked out result here
0F2BE A6 03                            ldx $03                     ;get saved content of block buffer                       ;and leave
0F2C0 BD FA B8                  	   lda MetatileThingy,x
0F2C3 A6 08                     	   ldx ObjectOffset            ;get object offset
0F2C5 C9 00                     	   cmp #$00
0F2C7 60                        	   rts
0F2C8                           ;-------------------------------------------------------------------------------------
0F2C8                           ;-------------------------------------------------------------------------------------
0F2C8                           ;$00 - offset to vine Y coordinate adder
0F2C8                           ;$02 - offset to sprite data
0F2C8                           
0F2C8                           VineYPosAdder:
0F2C8 00 30                           .db $00, $30
0F2CA                           
0F2CA                           DrawVine:
0F2CA 84 00                              sty $00                    ;save offset here
0F2CC AD B9 03                           lda Enemy_Rel_YPos         ;get relative vertical coordinate
0F2CF 18                                 clc
0F2D0 79 C8 F2                           adc VineYPosAdder,y        ;add value using offset in Y to get value
0F2D3 BE 9A 03                           ldx VineObjOffset,y        ;get offset to vine
0F2D6 BC E5 06                           ldy Enemy_SprDataOffset,x  ;get sprite data offset
0F2D9 84 02                              sty $02                    ;store sprite data offset here
0F2DB 20 BA BB                           jsr SixSpriteStacker       ;stack six sprites on top of each other vertically
0F2DE AD AE 03                           lda Enemy_Rel_XPos         ;get relative horizontal coordinate
0F2E1 99 03 02                           sta Sprite_X_Position,y    ;store in first, third and fifth sprites
0F2E4 99 0B 02                           sta Sprite_X_Position+8,y
0F2E7 99 13 02                           sta Sprite_X_Position+16,y
0F2EA 18                                 clc
0F2EB 69 06                              adc #$06                   ;add six pixels to second, fourth and sixth sprites
0F2ED 99 07 02                           sta Sprite_X_Position+4,y  ;to give characteristic staggered vine shape to
0F2F0 99 0F 02                           sta Sprite_X_Position+12,y ;our vertical stack of sprites
0F2F3 99 17 02                           sta Sprite_X_Position+20,y
0F2F6 A9 21                              lda #%00100001             ;set bg priority and palette attribute bits
0F2F8 99 02 02                           sta Sprite_Attributes,y    ;set in first, third and fifth sprites
0F2FB 99 0A 02                           sta Sprite_Attributes+8,y
0F2FE 99 12 02                           sta Sprite_Attributes+16,y
0F301 09 40                              ora #%01000000             ;additionally, set horizontal flip bit
0F303 99 06 02                           sta Sprite_Attributes+4,y  ;for second, fourth and sixth sprites
0F306 99 0E 02                           sta Sprite_Attributes+12,y
0F309 99 16 02                           sta Sprite_Attributes+20,y
0F30C A2 05                              ldx #$05                   ;set tiles for six sprites
0F30E A9 E1                     VineTL:  lda #$e1                   ;set tile number for sprite
0F310 99 01 02                           sta Sprite_Tilenumber,y
0F313 C8                                 iny                        ;move offset to next sprite data
0F314 C8                                 iny
0F315 C8                                 iny
0F316 C8                                 iny
0F317 CA                                 dex                        ;move onto next sprite
0F318 10 F4                              bpl VineTL                 ;loop until all sprites are done
0F31A A4 02                              ldy $02                    ;get original offset
0F31C A5 00                              lda $00                    ;get offset to vine adding data
0F31E D0 05                              bne SkpVTop                ;if offset not zero, skip this part
0F320 A9 E0                              lda #$e0
0F322 99 01 02                           sta Sprite_Tilenumber,y    ;set other tile number for top of vine
0F325 A2 00                     SkpVTop: ldx #$00                   ;start with the first sprite again
0F327 AD 9D 03                  ChkFTop: lda VineStart_Y_Position   ;get original starting vertical coordinate
0F32A 38                                 sec
0F32B F9 00 02                           sbc Sprite_Y_Position,y    ;subtract top-most sprite's Y coordinate
0F32E C9 64                              cmp #$64                   ;if two coordinates are less than 100/$64 pixels
0F330 90 05                              bcc NextVSp                ;apart, skip this to leave sprite alone
0F332 A9 F8                              lda #$f8
0F334 99 00 02                           sta Sprite_Y_Position,y    ;otherwise move sprite offscreen
0F337 C8                        NextVSp: iny                        ;move offset to next OAM data
0F338 C8                                 iny
0F339 C8                                 iny
0F33A C8                                 iny
0F33B E8                                 inx                        ;move onto next sprite
0F33C E0 06                              cpx #$06                   ;do this until all sprites are checked
0F33E D0 E7                              bne ChkFTop
0F340 A4 00                              ldy $00                    ;return offset set earlier
0F342 60                                 rts
0F343                           ;-------------------------------------------------------------------------------------
0F343                           
0F343                           
0F343                           DrawHammer:
0F343 BC F3 06                              ldy Misc_SprDataOffset,x    ;get misc object OAM data offset
0F346 AD 47 07                              lda TimerControl
0F349 D0 08                                 bne ForceHPose              ;if master timer control set, skip this part
0F34B B5 28                                 lda Misc_State,x            ;otherwise get hammer's state
0F34D 29 7F                                 and #%01111111              ;mask out d7
0F34F C9 01                                 cmp #$01                    ;check to see if set to 1 yet
0F351 F0 04                                 beq GetHPose                ;if so, branch
0F353 A2 00                     ForceHPose: ldx #$00                    ;reset offset here
0F355 F0 07                                 beq RenderH                 ;do unconditional branch to rendering part
0F357 A5 09                     GetHPose:   lda FrameCounter            ;get frame counter
0F359 4A                                    lsr                         ;move d3-d2 to d1-d0
0F35A 4A                                    lsr
0F35B 29 03                                 and #%00000011              ;mask out all but d1-d0 (changes every four frames)
0F35D AA                                    tax                         ;use as timing offset
0F35E AD BE 03                  RenderH:    lda Misc_Rel_YPos           ;get relative vertical coordinate
0F361 18                                    clc
0F362 7D 38 91                              adc FirstSprYPos,x          ;add first sprite vertical adder based on offset
0F365 99 00 02                              sta Sprite_Y_Position,y     ;store as sprite Y coordinate for first sprite
0F368 18                                    clc
0F369 7D 40 91                              adc SecondSprYPos,x         ;add second sprite vertical adder based on offset
0F36C 99 04 02                              sta Sprite_Y_Position+4,y   ;store as sprite Y coordinate for second sprite
0F36F AD B3 03                              lda Misc_Rel_XPos           ;get relative horizontal coordinate
0F372 18                                    clc
0F373 7D 34 91                              adc FirstSprXPos,x          ;add first sprite horizontal adder based on offset
0F376 99 03 02                              sta Sprite_X_Position,y     ;store as sprite X coordinate for first sprite
0F379 18                                    clc
0F37A 7D 3C 91                              adc SecondSprXPos,x         ;add second sprite horizontal adder based on offset
0F37D 99 07 02                              sta Sprite_X_Position+4,y   ;store as sprite X coordinate for second sprite
0F380 BD 44 91                              lda FirstSprTilenum,x
0F383 99 01 02                              sta Sprite_Tilenumber,y     ;get and store tile number of first sprite
0F386 BD 48 91                              lda SecondSprTilenum,x
0F389 99 05 02                              sta Sprite_Tilenumber+4,y   ;get and store tile number of second sprite
0F38C BD 4C 91                              lda HammerSprAttrib,x
0F38F 99 02 02                              sta Sprite_Attributes,y     ;get and store attribute bytes for both
0F392 99 06 02                              sta Sprite_Attributes+4,y   ;note in this case they use the same data
0F395 A6 08                                 ldx ObjectOffset            ;get misc object offset
0F397 AD D6 03                              lda Misc_OffscreenBits
0F39A 29 FC                                 and #%11111100              ;check offscreen bits
0F39C F0 0C                                 beq NoHOffscr               ;if all bits clear, leave object alone
0F39E A9 00                                 lda #$00
0F3A0 95 28                                 sta Misc_State,x            ;otherwise nullify misc object state
0F3A2 A9 F8                                 lda #$f8
0F3A4 99 04 02                              sta Sprite_Data+4,y         ;and into first row sprites
0F3A7 99 00 02                  			sta Sprite_Data,y
0F3AA 60                        NoHOffscr:  rts                         ;leave
0F3AB                           
0F3AB                           ;-------------------------------------------------------------------------------------
0F3AB                           ;$00-$01 - used to hold tile numbers ($01 addressed in draw floatey number part)
0F3AB                           ;$02 - used to hold Y coordinate for floatey number
0F3AB                           ;$03 - residual byte used for flip (but value set here affects nothing)
0F3AB                           ;$04 - attribute byte for floatey number
0F3AB                           ;$05 - used as X coordinate for floatey number
0F3AB                           
0F3AB                           
0F3AB                           FlagpoleGfxHandler:
0F3AB BC E5 06                        ldy Enemy_SprDataOffset,x      ;get sprite data offset for flagpole flag
0F3AE AD AE 03                        lda Enemy_Rel_XPos             ;get relative horizontal coordinate
0F3B1 99 03 02                        sta Sprite_X_Position,y        ;store as X coordinate for first sprite
0F3B4 18                              clc
0F3B5 69 08                           adc #$08                       ;add eight pixels and store
0F3B7 99 07 02                        sta Sprite_X_Position+4,y      ;as X coordinate for second and third sprites
0F3BA 99 0B 02                        sta Sprite_X_Position+8,y
0F3BD 18                              clc
0F3BE 69 0C                           adc #$0c                       ;add twelve more pixels and
0F3C0 85 05                           sta $05                        ;store here to be used later by floatey number
0F3C2 B5 C1                           lda Enemy_Y_Position,x         ;get vertical coordinate
0F3C4 99 04 02                        sta Sprite_Data+4,y            ;and into first row sprites
0F3C7 99 00 02                  	  sta Sprite_Data,y              ;and do sub to dump into first and second sprites
0F3CA 69 08                           adc #$08                       ;add eight pixels
0F3CC 99 08 02                        sta Sprite_Y_Position+8,y      ;and store into third sprite
0F3CF AD 0D 01                        lda FlagpoleFNum_Y_Pos         ;get vertical coordinate for floatey number
0F3D2 85 02                           sta $02                        ;store it here
0F3D4 A9 01                           lda #$01
0F3D6 85 03                           sta $03                        ;set value for flip which will not be used, and
0F3D8 85 04                           sta $04                        ;attribute byte for floatey number
0F3DA 99 02 02                        sta Sprite_Attributes,y        ;set attribute bytes for all three sprites
0F3DD 99 06 02                        sta Sprite_Attributes+4,y
0F3E0 99 0A 02                        sta Sprite_Attributes+8,y
0F3E3 A9 7E                           lda #$7e
0F3E5 99 01 02                        sta Sprite_Tilenumber,y        ;put triangle shaped tile
0F3E8 99 09 02                        sta Sprite_Tilenumber+8,y      ;into first and third sprites
0F3EB A9 7F                           lda #$7f
0F3ED 99 05 02                        sta Sprite_Tilenumber+4,y      ;put skull tile into second sprite
0F3F0 AD 0F 07                        lda FlagpoleCollisionYPos      ;get vertical coordinate at time of collision
0F3F3 F0 15                           beq ChkFlagOffscreen           ;if zero, branch ahead
0F3F5 98                              tya
0F3F6 18                              clc                            ;add 12 bytes to sprite data offset
0F3F7 69 0C                           adc #$0c
0F3F9 A8                              tay                            ;put back in Y
0F3FA AD 0F 01                        lda FlagpoleScore              ;get offset used to award points for touching flagpole
0F3FD 0A                              asl                            ;multiply by 2 to get proper offset here
0F3FE AA                              tax
0F3FF BD 24 F9                        lda FlagpoleScoreNumTiles,x    ;get appropriate tile data
0F402 85 00                           sta $00
0F404 BD 25 F9                        lda FlagpoleScoreNumTiles+1,x
0F407 20 09 F5                        jsr DrawOneSpriteRow           ;use it to render floatey number
0F40A                           
0F40A                           ChkFlagOffscreen:
0F40A A6 08                           ldx ObjectOffset               ;get object offset for flag
0F40C BC E5 06                        ldy Enemy_SprDataOffset,x      ;get OAM data offset
0F40F AD D1 03                        lda Enemy_OffscreenBits        ;get offscreen bits
0F412 29 0E                           and #%00001110                 ;mask out all but d3-d1
0F414 F0 14                           beq ExitDumpSpr                ;if none of these bits set, branch to leave
0F416                           
0F416                           ;-------------------------------------------------------------------------------------
0F416                           
0F416                           MoveSixSpritesOffscreen:
0F416 A9 F8                           lda #$f8                  ;set offscreen coordinate if jumping here
0F418                           
0F418                           DumpSixSpr:
0F418 99 14 02                        sta Sprite_Data+20,y      ;dump A contents
0F41B 99 10 02                        sta Sprite_Data+16,y      ;into third row sprites
0F41E                           
0F41E                           DumpFourSpr:
0F41E 99 0C 02                        sta Sprite_Data+12,y      ;into second row sprites
0F421                           
0F421                           DumpThreeSpr:
0F421 99 08 02                        sta Sprite_Data+8,y
0F424                           
0F424                           DumpTwoSpr:
0F424 99 04 02                        sta Sprite_Data+4,y       ;and into first row sprites
0F427 99 00 02                        sta Sprite_Data,y
0F42A                           
0F42A                           ExitDumpSpr:
0F42A 60                              rts
0F42B                           
0F42B                           ;-------------------------------------------------------------------------------------
0F42B                           
0F42B                           DrawLargePlatform:
0F42B BC E5 06                        ldy Enemy_SprDataOffset,x   ;get OAM data offset
0F42E 84 02                           sty $02                     ;store here
0F430 C8                              iny                         ;add 3 to it for offset
0F431 C8                              iny                         ;to X coordinate
0F432 C8                              iny
0F433 AD AE 03                        lda Enemy_Rel_XPos          ;get horizontal relative coordinate
0F436 20 BA BB                        jsr SixSpriteStacker        ;store X coordinates using A as base, stack horizontally
0F439 A6 08                           ldx ObjectOffset
0F43B B5 C1                           lda Enemy_Y_Position,x      ;get vertical coordinate
0F43D 20 1E F4                        jsr DumpFourSpr             ;dump into first four sprites as Y coordinate
0F440 AC 4E 07                        ldy AreaType
0F443 C0 03                           cpy #$03                    ;check for castle-type level
0F445 F0 05                           beq ShrinkPlatform
0F447 AC CC 06                        ldy SecondaryHardMode       ;check for secondary hard mode flag set
0F44A F0 02                           beq SetLast2Platform        ;branch if not set elsewhere
0F44C                           
0F44C                           ShrinkPlatform:
0F44C A9 F8                           lda #$f8                    ;load offscreen coordinate if flag set or castle-type level
0F44E                           
0F44E                           SetLast2Platform:
0F44E BC E5 06                  	  ldy Enemy_SprDataOffset,x   ;get OAM data offset
0F451 99 10 02                        sta Sprite_Y_Position+16,y  ;store vertical coordinate or offscreen
0F454 99 14 02                        sta Sprite_Y_Position+20,y  ;coordinate into last two sprites as Y coordinate
0F457 A9 EB                           lda #$eb                    ;load default tile for platform (girder)
0F459 AE 43 07                        ldx CloudTypeOverride
0F45C F0 02                           beq SetPlatformTilenum      ;if cloud level override flag not set, use
0F45E A9 EB                           lda #$eb                    ;otherwise load other tile for platform (puff)
0F460                           
0F460                           SetPlatformTilenum:
0F460 A6 08                             ldx ObjectOffset            ;get enemy object buffer offset
0F462 C8                                iny                         ;increment Y for tile offset
0F463 20 18 F4                          jsr DumpSixSpr              ;dump tile number into all six sprites
0F466 A9 02                             lda #$02                    ;set palette controls
0F468 C8                                iny                         ;increment Y for sprite attributes
0F469 20 18 F4                          jsr DumpSixSpr              ;dump attributes into all six sprites
0F46C E8                                inx                         ;increment X for enemy objects
0F46D 20 67 AE                          jsr GetXOffscreenBits       ;get offscreen bits again
0F470 CA                                dex
0F471 BC E5 06                          ldy Enemy_SprDataOffset,x   ;get OAM data offset
0F474 0A                                asl                         ;rotate d7 into carry, save remaining
0F475 48                                pha                         ;bits to the stack
0F476 90 05                             bcc SChk2
0F478 A9 F8                             lda #$f8                    ;if d7 was set, move first sprite offscreen
0F47A 99 00 02                          sta Sprite_Y_Position,y
0F47D 68                        SChk2:  pla                         ;get bits from stack
0F47E 0A                                asl                         ;rotate d6 into carry
0F47F 48                                pha                         ;save to stack
0F480 90 05                             bcc SChk3
0F482 A9 F8                             lda #$f8                    ;if d6 was set, move second sprite offscreen
0F484 99 04 02                          sta Sprite_Y_Position+4,y
0F487 68                        SChk3:  pla                         ;get bits from stack
0F488 0A                                asl                         ;rotate d5 into carry
0F489 48                                pha                         ;save to stack
0F48A 90 05                             bcc SChk4
0F48C A9 F8                             lda #$f8                    ;if d5 was set, move third sprite offscreen
0F48E 99 08 02                          sta Sprite_Y_Position+8,y
0F491 68                        SChk4:  pla                         ;get bits from stack
0F492 0A                                asl                         ;rotate d4 into carry
0F493 48                                pha                         ;save to stack
0F494 90 05                             bcc SChk5
0F496 A9 F8                             lda #$f8                    ;if d4 was set, move fourth sprite offscreen
0F498 99 0C 02                          sta Sprite_Y_Position+12,y
0F49B 68                        SChk5:  pla                         ;get bits from stack
0F49C 0A                                asl                         ;rotate d3 into carry
0F49D 48                                pha                         ;save to stack
0F49E 90 05                             bcc SChk6
0F4A0 A9 F8                             lda #$f8                    ;if d3 was set, move fifth sprite offscreen
0F4A2 99 10 02                          sta Sprite_Y_Position+16,y
0F4A5 68                        SChk6:  pla                         ;get bits from stack
0F4A6 0A                                asl                         ;rotate d2 into carry
0F4A7 90 05                             bcc SLChk                   ;save to stack
0F4A9 A9 F8                             lda #$f8
0F4AB 99 14 02                          sta Sprite_Y_Position+20,y  ;if d2 was set, move sixth sprite offscreen
0F4AE AD D1 03                  SLChk:  lda Enemy_OffscreenBits     ;check d7 of offscreen bits
0F4B1 0A                                asl                         ;and if d7 is not set, skip sub
0F4B2 90 03                             bcc ExDLPl
0F4B4 4C 16 F4                          jmp MoveSixSpritesOffscreen ;otherwise branch to move all sprites offscreen
0F4B7 60                        ExDLPl: rts
0F4B8                           
0F4B8                           ;-------------------------------------------------------------------------------------
0F4B8                           
0F4B8                           
0F4B8                           
0F4B8                                    ;leave
0F4B8                           
0F4B8                           MovePlayerVertically:
0F4B8 A2 00                              ldx #$00                ;set X for player offset
0F4BA AD 47 07                           lda TimerControl
0F4BD D0 00                              bne NoJSChk             ;if master timer control set, branch ahead
0F4BF                                    ;lda JumpspringAnimCtrl  ;otherwise check to see if jumpspring is animating
0F4BF                                    ;bne +                   ;branch to leave if so
0F4BF AD 09 07                  NoJSChk: lda VerticalForce       ;dump vertical force 
0F4C2 85 00                              sta $00
0F4C4 A9 04                              lda #$04                ;set maximum vertical speed here
0F4C6 4C 11 AD                           jmp ImposeGravitySprObj ;then jump to move player vertically
0F4C9                           MoveEnemyHorizontally:
0F4C9 E8                              inx                         ;increment offset for enemy offset
0F4CA 4C 16 AC                        jmp MoveObjectHorizontally1  ;position object horizontally according to
0F4CD                           	  
0F4CD                           SignDoStuff:
0F4CD AD FC 06                  	  lda SavedJoypad1Bits
0F4D0 29 08                     	  and #Up_Dir
0F4D2 F0 15                     	  beq +
0F4D4 AD B8 63                  	  lda PreviousUp_Down_Buttons
0F4D7 29 08                     	  and #Up_Dir
0F4D9 05 91                     	  ora Player_Y_Speed
0F4DB 0D 00 06                  	  ora ClearRemainings
0F4DE D0 09                     	  bne +
0F4E0 BD CE 7F                  	  lda $7fce,x
0F4E3 8D C1 05                  	  sta TextboxID
0F4E6 EE 04 06                  	  inc clearVRAM
0F4E9 60                        +:	  rts
0F4EA                           
0F4EA                           
0F4EA                           ;--------------------------------
0F4EA                           
0F4EA                           InitBlock_XY_Pos:
0F4EA A5 78                           lda Player_X_Position   ;get player's horizontal coordinate
0F4EC 18                              clc
0F4ED 69 08                           adc #$08                ;add eight pixels
0F4EF 29 F0                           and #$f0                ;mask out low nybble to give 16-pixel correspondence
0F4F1 95 81                           sta Block_X_Position,x  ;save as horizontal coordinate for block object
0F4F3 A5 5F                           lda Player_PageLoc
0F4F5 69 00                           adc #$00                ;add carry to page location of player
0F4F7 95 68                           sta Block_PageLoc,x     ;save as page location of block object
0F4F9 9D EA 03                        sta Block_PageLoc2,x    ;save elsewhere to be used later
0F4FC A5 A7                           lda Player_Y_HighPos
0F4FE 95 B0                           sta Block_Y_HighPos,x   ;save vertical high byte of player into
0F500 60                              rts                     ;vertical high byte of block object and leave
0F501                           DrawEnemyObjRow:
0F501 BD 5E 96                  	  lda EnemyGraphicsTable,x    ;load two tiles of enemy graphics
0F504 85 00                           sta $00
0F506 BD 5F 96                        lda EnemyGraphicsTable+1,x
0F509                           
0F509                           DrawOneSpriteRow:
0F509 85 01                           sta $01
0F50B                                 if BLANK_SPRITE_MOD
0F50B                                       jsr DrawSpriteObject        ;draw them
0F50B                                       
0F50B                                       lda $00
0F50B                                       cmp #$fc                    ; first sprite is not blank, branch
0F50B                                       bne +
0F50B                                       cmp $01                     ; second sprite is not blank, branch
0F50B                                       bne +
0F50B                                       
0F50B                                       cpy #$00
0F50B                                       beq +
0F50B                                       
0F50B                                       lda #$f8                    ; move the (blank) sprites offscreen
0F50B                                       sta Sprite_Data+4-8,y
0F50B                                       sta Sprite_Data-8,y
0F50B                                   +
0F50B                                 else
0F50B 4C 0F F5                              jmp DrawSpriteObject        ;draw them
0F50E                                 endif
0F50E 60                              rts
0F50F                           	 DrawSpriteObject:
0F50F A5 03                              lda $03                    ;get saved flip control bits
0F511 4A                                 lsr
0F512 4A                                 lsr                        ;move d1 into carry
0F513 A5 00                              lda $00
0F515 90 0C                              bcc NoHFlip                ;if d1 not set, branch
0F517 99 05 02                           sta Sprite_Tilenumber+4,y  ;store first tile into second sprite
0F51A A5 01                              lda $01                    ;and second into first sprite
0F51C 99 01 02                           sta Sprite_Tilenumber,y
0F51F A9 40                              lda #$40                   ;activate horizontal flip OAM attribute
0F521 D0 0A                              bne SetHFAt                ;and unconditionally branch
0F523 99 01 02                  NoHFlip: sta Sprite_Tilenumber,y    ;store first tile into first sprite
0F526 A5 01                              lda $01                    ;and second into second sprite
0F528 99 05 02                           sta Sprite_Tilenumber+4,y
0F52B A9 00                              lda #$00                   ;clear bit for horizontal flip
0F52D 05 04                     SetHFAt: ora $04                    ;add other OAM attributes if necessary
0F52F 99 02 02                           sta Sprite_Attributes,y    ;store sprite attributes
0F532 99 06 02                           sta Sprite_Attributes+4,y
0F535 A5 02                              lda $02                    ;now the y coordinates
0F537 99 00 02                           sta Sprite_Y_Position,y    ;note because they are
0F53A 99 04 02                           sta Sprite_Y_Position+4,y  ;side by side, they are the same
0F53D A5 05                              lda $05       
0F53F 99 03 02                           sta Sprite_X_Position,y    ;store x coordinate, then
0F542 18                                 clc                        ;add 8 pixels and store another to
0F543 69 08                              adc #$08                   ;put them side by side
0F545 99 07 02                           sta Sprite_X_Position+4,y
0F548 A5 02                              lda $02                    ;add eight pixels to the next y
0F54A 18                                 clc                        ;coordinate
0F54B 69 08                              adc #$08
0F54D 85 02                              sta $02
0F54F 98                                 tya                        ;add eight to the offset in Y to
0F550 18                                 clc                        ;move to the next two sprites
0F551 69 08                              adc #$08
0F553 A8                                 tay
0F554 E8                                 inx                        ;increment offset to return it to the
0F555 E8                                 inx                        ;routine that called this subroutine
0F556 60                                 rts
0F557                           ;-------------------------------------------------------------------------------------
0F557                           ;$00-$01 - tile numbers
0F557                           ;$02 - relative Y position
0F557                           ;$03 - horizontal flip flag (not used here)
0F557                           ;$04 - attributes
0F557                           ;$05 - relative X position
0F557                           DefaultBlockObjTiles:
0F557 85 85 86 86 6E                  .db $85, $85, $86, $86, $6e             ;brick w/ line (these are sprite tiles, not BG!)
0F55C                           
0F55C                           DrawBlock:
0F55C AD BC 03                             lda Block_Rel_YPos            ;get relative vertical coordinate of block object
0F55F 85 02                                sta $02                       ;store here
0F561 AD B1 03                             lda Block_Rel_XPos            ;get relative horizontal coordinate of block object
0F564 85 05                                sta $05                       ;store here
0F566 A9 03                       		   lda #$03
0F568 85 04                                sta $04                       ;set attribute byte here
0F56A 4A                                   lsr
0F56B 85 03                                sta $03                       ;set horizontal flip bit here (will not be used)
0F56D BC EC 06                             ldy Block_SprDataOffset,x     ;get sprite data offset
0F570 A2 00                                ldx #$00                      ;reset X for use as offset to tile data
0F572 BD 57 F5                  DBlkLoop:  lda DefaultBlockObjTiles,x    ;get left tile number
0F575 85 00                                sta $00                       ;set here
0F577 BD 58 F5                             lda DefaultBlockObjTiles+1,x  ;get right tile number
0F57A 20 09 F5                             jsr DrawOneSpriteRow          ;do sub to write tile numbers to first row of sprites
0F57D E0 04                                cpx #$04                      ;check incremented offset
0F57F D0 F1                                bne DBlkLoop                  ;and loop back until all four sprites are done
0F581 A6 08                                ldx ObjectOffset              ;get block object offset
0F583 BC EC 06                             ldy Block_SprDataOffset,x     ;get sprite data offset
0F586 AD 4E 07                             lda AreaType
0F589 C9 01                                cmp #$01                      ;check for ground level type area
0F58B F0 08                                beq ChkRep                    ;if found, branch to next part
0F58D A9 86                                lda #$86
0F58F 99 01 02                             sta Sprite_Tilenumber,y       ;otherwise remove brick tiles with lines
0F592 99 05 02                             sta Sprite_Tilenumber+4,y     ;and replace then with lineless brick tiles
0F595                           ChkRep:    ;lda Cbolla,x
0F595                           		   ;bne +
0F595 BD E8 03                  		   lda Block_Metatile,x          ;check replacement metatile
0F598 C9 74                     		   cmp #$74
0F59A F0 04                     		   beq +
0F59C C9 C4                                cmp #$c4                      ;if not used block metatile, then
0F59E D0 2D                                bne BlkOffscr                 ;branch ahead to use current graphics
0F5A0 A9 87                     +:         lda #$87                      ;set A for used block tile
0F5A2 C8                                   iny                           ;increment Y to write to tile bytes
0F5A3 99 0C 02                             sta Sprite_Data+12,y          ;into second row sprites
0F5A6 99 08 02                             sta Sprite_Data+8,y
0F5A9 99 04 02                             sta Sprite_Data+4,y           ;and into first row sprites
0F5AC 99 00 02                             sta Sprite_Data,y
0F5AF 88                                   dey                           ;return Y to original offset
0F5B0 A9 03                                lda #$03                      ;set palette bits
0F5B2 AE 4E 07                             ldx AreaType
0F5B5 CA                                   dex                           ;check for ground level type area again
0F5B6 F0 01                                beq SetBFlip                  ;if found, use current palette bits
0F5B8 4A                                   lsr                           ;otherwise set to $01
0F5B9 A6 08                     SetBFlip:  ldx ObjectOffset              ;put block object offset back in X
0F5BB 99 02 02                             sta Sprite_Attributes,y       ;store attribute byte as-is in first sprite
0F5BE 09 40                                ora #%01000000
0F5C0 99 06 02                             sta Sprite_Attributes+4,y     ;set horizontal flip bit for second sprite
0F5C3 09 80                                ora #%10000000
0F5C5 99 0E 02                             sta Sprite_Attributes+12,y    ;set both flip bits for fourth sprite
0F5C8 29 83                                and #%10000011
0F5CA 99 0A 02                             sta Sprite_Attributes+8,y     ;set vertical flip bit for third sprite
0F5CD AD D4 03                  BlkOffscr: lda Block_OffscreenBits       ;get offscreen bits for block object
0F5D0 48                                   pha                           ;save to stack
0F5D1 29 04                                and #%00000100                ;check to see if d2 in offscreen bits are set
0F5D3 F0 08                                beq PullOfsB                  ;if not set, branch, otherwise move sprites offscreen
0F5D5 A9 F8                                lda #$f8                      ;move offscreen two OAMs
0F5D7 99 04 02                             sta Sprite_Y_Position+4,y     ;on the right side
0F5DA 99 0C 02                             sta Sprite_Y_Position+12,y
0F5DD 68                        PullOfsB:  pla                           ;pull offscreen bits from stack
0F5DE 29 08                     ChkLeftCo: and #%00001000                ;check to see if d3 in offscreen bits are set
0F5E0 F0 08                                beq ExDBlk                    ;if not set, branch, otherwise move sprites offscreen
0F5E2                           
0F5E2                           MoveColOffscreen:
0F5E2 A9 F8                             lda #$f8                   ;move offscreen two OAMs
0F5E4 99 00 02                          sta Sprite_Y_Position,y    ;on the left side (or two rows of enemy on either side
0F5E7 99 08 02                          sta Sprite_Y_Position+8,y  ;if branched here from enemy graphics handler)
0F5EA 60                        ExDBlk: rts
0F5EB                           
0F5EB                           ;-------------------------------------------------------------------------------------
0F5EB                           ;$00 - used to hold palette bits for attribute byte or relative X position
0F5EB                           
0F5EB                           ;-------------------------------------------------------------------------------------
0F5EB                           ;-------------------------------------------------------------------------------------
0F5EB                           	  
0F5EB                           	  
0F5EB                           Parallax:
0F5EB 0C 0C 0C 14 14 14 1C 1C.. 		.db %000001100, %000001100, %000001100, %000010100, %000010100, %000010100, %000011100, %000011100, %000011100, %000100100, %000100100, %000100100	;underground
0F5F7 2C 2C 2C 34 34 34 3C 3C.. 		.db %000101100, %000101100, %000101100, %000110100, %000110100, %000110100, %000111100, %000111100, %000111100, %001001100, %001001100, %001001100	;castle
0F603                           ResetOffsetParallax:
0F603 A9 00                     		lda #$00
0F605 8D 36 60                  		sta ParallaxOffset		;reset parallax and continue
0F608                           MakeParallax:
0F608 AD 36 60                  		lda ParallaxOffset
0F60B C9 18                     		cmp #$18
0F60D B0 F4                     		bcs ResetOffsetParallax
0F60F AA                        		tax
0F610 AD 5F 07                  		lda WorldNumber
0F613 C9 04                     	    cmp #$04
0F615 D0 0B                     	    bne +
0F617 AD 60 07                  	    lda AreaNumber
0F61A C9 03                     	    cmp #$03
0F61C D0 04                     	    bne +
0F61E A9 01                     		lda #$01
0F620 D0 22                     		bne ++
0F622                           			   
0F622                           +:			   
0F622 AD 4E 07                  		lda AreaType
0F625 C9 02                     		cmp #$02	
0F627 90 1B                     		bcc ++					;branch if AreaType not underground or castle
0F629 A8                        		tay
0F62A BD EB F5                  		lda Parallax,x
0F62D C0 03                     		cpy #$03
0F62F D0 05                     		bne +++
0F631 09 80                     		ora #%10000000		
0F633 18                        		clc
0F634 69 08                     		adc #%00001000			;do parallax
0F636 A8                        +++:	tay
0F637 A9 82                     		lda #$82
0F639 8D C5 05                  		sta Old8000
0F63C 8D 00 80                  		sta $8000
0F63F 98                        		tya
0F640                           		
0F640 8D 01 80                  		sta $8001
0F643 60                        		rts
0F644 A8                        ++:		tay
0F645 AD 72 07                  		lda OperMode_Task
0F648 C9 01                     		cmp #$01
0F64A D0 01                     		bne +
0F64C A8                        		tay
0F64D A9 82                     +:		lda #$82				;set no-parallax CHR
0F64F 8D C5 05                  		sta Old8000
0F652 8D 00 80                  		sta $8000
0F655 B9 FD F6                  		lda AreaParallax,y
0F658 8D 01 80                  		sta $8001
0F65B                           		
0F65B A9 83                     		lda #$83
0F65D 8D C5 05                  		sta Old8000
0F660 8D 00 80                  		sta $8000
0F663 AD CC 05                  		lda LastCHR3
0F666 8D 01 80                  		sta $8001
0F669                           		
0F669 60                        		rts
0F66A                           		
0F66A                           SprObjectOffscrChk:
0F66A A6 08                              ldx ObjectOffset          ;get enemy buffer offset
0F66C AD D1 03                           lda Enemy_OffscreenBits   ;check offscreen information
0F66F 4A                                 lsr
0F670 4A                                 lsr                       ;shift three times to the right
0F671 4A                                 lsr                       ;which puts d2 into carry
0F672 48                                 pha                       ;save to stack
0F673 90 12                              bcc LcChk                 ;branch if not set
0F675 A9 04                              lda #$04                  ;set for right column sprites
0F677 18                                 clc                         ;add A to enemy object OAM data offset
0F678 7D E5 06                  		 adc Enemy_SprDataOffset,x
0F67B A8                        		 tay                         ;use as offset
0F67C A9 F8                     		 lda #$f8                   ;move offscreen two OAMs
0F67E 99 00 02                  		 sta Sprite_Y_Position,y    ;on the left side (or two rows of enemy on either side
0F681 99 08 02                  		 sta Sprite_Y_Position+8,y  ;if branched here from enemy graphics handler)
0F684 99 10 02                  		 sta Sprite_Data+16,y        ;move third row sprite in column offscreen
0F687 68                        LcChk:   pla                       ;get from stack
0F688 4A                                 lsr                       ;move d3 to carry
0F689 48                                 pha                       ;save to stack
0F68A 90 12                              bcc Row3C                 ;branch if not set
0F68C A9 00                              lda #$00                  ;set for left column sprites,
0F68E 18                                 clc                         ;add A to enemy object OAM data offset
0F68F 7D E5 06                  		 adc Enemy_SprDataOffset,x
0F692 A8                        		 tay                         ;use as offset
0F693 A9 F8                     		 lda #$f8                   ;move offscreen two OAMs
0F695 99 00 02                  		 sta Sprite_Y_Position,y    ;on the left side (or two rows of enemy on either side
0F698 99 08 02                  		 sta Sprite_Y_Position+8,y  ;if branched here from enemy graphics handler)
0F69B 99 10 02                  		 sta Sprite_Data+16,y        ;move third row sprite in column offscreen
0F69E 68                        Row3C:   pla                       ;get from stack again
0F69F 4A                                 lsr                       ;move d5 to carry this time
0F6A0 4A                                 lsr
0F6A1 48                                 pha                       ;save to stack again
0F6A2 90 0F                              bcc Row23C                ;branch if carry not set
0F6A4 A9 10                              lda #$10                  ;set for third row of sprites
0F6A6 18                                 clc                         ;add A to enemy object OAM data offset
0F6A7 7D E5 06                           adc Enemy_SprDataOffset,x
0F6AA A8                                 tay                         ;use as offset
0F6AB A9 F8                              lda #$f8
0F6AD 99 04 02                           sta Sprite_Data+4,y       ;and into first row sprites
0F6B0 99 00 02                           sta Sprite_Data,y
0F6B3 68                        Row23C:  pla                       ;get from stack
0F6B4 4A                                 lsr                       ;move d6 into carry
0F6B5 48                                 pha                       ;save to stack
0F6B6 90 0F                              bcc AllRowC
0F6B8 A9 08                              lda #$08                  ;set for second and third rows
0F6BA 18                                 clc                         ;add A to enemy object OAM data offset
0F6BB 7D E5 06                           adc Enemy_SprDataOffset,x
0F6BE A8                                 tay                         ;use as offset
0F6BF A9 F8                              lda #$f8
0F6C1 99 04 02                           sta Sprite_Data+4,y       ;and into first row sprites
0F6C4 99 00 02                           sta Sprite_Data,y
0F6C7 68                        AllRowC: pla                       ;get from stack once more
0F6C8 4A                                 lsr                       ;move d7 into carry
0F6C9 90 31                              bcc ExEGHandler
0F6CB 18                                 clc                         ;add A to enemy object OAM data offset
0F6CC 7D E5 06                           adc Enemy_SprDataOffset,x
0F6CF A8                                 tay                         ;use as offset
0F6D0 A9 F8                              lda #$f8
0F6D2 99 04 02                           sta Sprite_Data+4,y       ;and into first row sprites
0F6D5 99 00 02                           sta Sprite_Data,y
0F6D8 B5 15                              lda Enemy_ID,x
0F6DA C9 0C                              cmp #Podoboo              ;check enemy identifier for podoboo
0F6DC D0 06                              bne +           ;skip this part if found, we do not want to erase podoboo!
0F6DE B5 1C                     		 lda Enemy_State,x
0F6E0 C9 22                     		 cmp #$22
0F6E2 D0 18                     		 bne ExEGHandler
0F6E4 B5 A8                     +:       lda Enemy_Y_HighPos,x     ;check high byte of vertical position
0F6E6 C9 02                              cmp #$02                  ;if not yet past the bottom of the screen, branch
0F6E8 D0 12                              bne ExEGHandler
0F6EA BC C4 63                  		 ldy SavedOffset,x
0F6ED B9 AC 62                  		 lda Saved_isDefeated,y
0F6F0 C9 02                     		 cmp #$02
0F6F2 F0 05                     		 beq +
0F6F4 A9 00                     		 lda #$00
0F6F6 99 AC 62                  		 sta Saved_isDefeated,y
0F6F9 4C 1A C5                  +        jmp EraseEnemyObject      ;what it says
0F6FC                           ExEGHandler:
0F6FC 60                              rts
0F6FD                           
0F6FD                           AreaParallax:
0F6FD DC 04                     	.db %11011100, %00000100 
0F6FF                           	
0F6FF                           WorldPaletteLUT:
0F6FF 00 00 00 01 00 02 03 04.. 	  .db $00, $00, $00, $01, $00, $02, $03, $04, $00
0F708                           
0F708                           ;-------------------------------------------------------------------------------------
0F708                           
0F708                           CheckForCoinMTiles:
0F708 AE 28 60                  		 ldx PTimer
0F70B E0 00                     		 cpx #$00
0F70D D0 06                              bne +
0F70F C9 C2                     		 cmp #$c2              ;check for regular coin
0F711 F0 01                              beq CoinSd            ;branch if found
0F713 18                                 clc                   ;otherwise clear carry and leave
0F714 60                        CoinSd:  rts
0F715                           +:
0F715 C9 51                     		cmp #$51
0F717 F0 FB                     		beq CoinSd
0F719 C9 52                     		cmp #$52
0F71B F0 F7                     		beq CoinSd
0F71D C9 28                     		cmp #$28
0F71F F0 F3                     		beq CoinSd
0F721 C9 27                     		cmp #$27
0F723 F0 EF                     		beq CoinSd
0F725 18                        		clc
0F726                           
0F726 60                        	   rts      
0F727                           ;------------------------------------------------------------------------------------
0F727                           ;-------------------------------------------------------------------------------------
0F727                           ;$00 - used to store player's vertical offscreen bits
0F727                           
0F727                           ;tiles arranged in order, 2 tiles per row, top to bottom
0F727                           ;-------------------------------------------------------------------------------------
0F727                           ;-------------------------------------------------------------------------------------
0F727                           ;$00-$01 - used to hold tile numbers, $00 also used to hold upper extent of animation frames
0F727                           ;$02 - vertical position
0F727                           ;$03 - facing direction, used as horizontal flip control
0F727                           ;$04 - attributes
0F727                           ;$05 - horizontal position
0F727                           ;$07 - number of rows to draw
0F727                           ;these also used in IntermediatePlayerData
0F727                           	
0F727                           	
0F727                           SmallPlatformCollision:
0F727 AD 47 07                        lda TimerControl             ;if master timer control set,
0F72A D0 43                           bne ExSPC                    ;branch to leave
0F72C 9D A2 03                        sta PlatformCollisionFlag,x  ;otherwise initialize collision flag
0F72F 20 C1 DE                        jsr CheckPlayerVertical      ;do a sub to see if player is below a certain point
0F732 B0 3B                           bcs ExSPC                    ;or entirely offscreen, and branch to leave if true
0F734 A9 02                           lda #$02
0F736 85 00                           sta $00                      ;load counter here for 2 bounding boxes
0F738                           
0F738                           ChkSmallPlatLoop:
0F738 A6 08                           ldx ObjectOffset           ;get enemy object offset
0F73A A5 08                           lda ObjectOffset         ;get enemy object buffer offset
0F73C 0A                        	  asl                          ;multiply A by four, then add four
0F73D 0A                              asl                          ;to skip player's bounding box
0F73E 18                              clc
0F73F 69 04                           adc #$04
0F741 A8                              tay                          ;send to Y
0F742 AD D1 03                        lda Enemy_OffscreenBits      ;get offscreen bits for enemy object
0F745 29 0F                           and #%00001111               ;save low nybble
0F747 C9 0F                           cmp #%00001111               ;check for all bits set
0F749 29 02                           and #%00000010             ;if d1 of offscreen lower nybble bits was set
0F74B D0 22                           bne ExSPC                  ;then branch to leave
0F74D B9 AD 04                        lda BoundingBox_UL_YPos,y  ;check top of platform's bounding box for being
0F750 C9 20                           cmp #$20                   ;above a specific point
0F752 90 05                           bcc MoveBoundBox           ;if so, branch, don't do collision detection
0F754 20 0F B6                        jsr PlayerCollisionCore    ;otherwise, perform player-to-platform collision detection
0F757 B0 19                           bcs ProcSPlatCollisions    ;skip ahead if collision
0F759                           
0F759                           MoveBoundBox:
0F759 B9 AD 04                         lda BoundingBox_UL_YPos,y  ;move bounding box vertical coordinates
0F75C 18                               clc                        ;128 pixels downwards
0F75D 69 80                            adc #$80
0F75F 99 AD 04                         sta BoundingBox_UL_YPos,y
0F762 B9 AF 04                         lda BoundingBox_DR_YPos,y
0F765 18                               clc
0F766 69 80                            adc #$80
0F768 99 AF 04                         sta BoundingBox_DR_YPos,y
0F76B C6 00                            dec $00                    ;decrement counter we set earlier
0F76D D0 C9                            bne ChkSmallPlatLoop       ;loop back until both bounding boxes are checked
0F76F A6 08                     ExSPC: ldx ObjectOffset           ;get enemy object buffer offset, then leave
0F771 60                               rts
0F772                           	   
0F772                           
0F772                           ProcSPlatCollisions:
0F772 A6 08                           ldx ObjectOffset             ;return enemy object buffer offset to X, then continue
0F774 4C 2F DE                  	  jmp ProcLPlatCollisions
0F777                           
0F777                           
0F777                           ;-------------------------------------------------------------------------------------
0F777                           ;$00 - used as temp variable to hold offscreen bits
0F777                           ;--------------------------------
0F777                           ;(these apply to these three subsections)
0F777                           ;$04 - used to store proper offset
0F777                           ;$05 - used as adder in DividePDiff
0F777                           ;$06 - used to store preset value used to compare to pixel difference in $07
0F777                           ;$07 - used to store difference between coordinates of object and screen edges
0F777                           
0F777                           ;--------------------------------
0F777                           
0F777                           
0F777                           ;-------------------------------------------------------------------------------------
0F777                           ;$04 - address low to jump address
0F777                           ;$05 - address high to jump address
0F777                           ;$06 - jump address low
0F777                           ;$07 - jump address high
0F777                           
0F777                           JumpEngineOthersTemp:
0F777 A4 F6                     	   ldy $f6
0F779 8C 9B 60                  	   sty $609b
0F77C A4 F7                     	   ldy $f7
0F77E 8C 9C 60                  	   sty $609c
0F781 A4 F8                     	   ldy $f8
0F783 8C 9D 60                  	   sty $609d
0F786 A4 F9                     	   ldy $f9
0F788 8C 9E 60                  	   sty $609e
0F78B 0A                        	   asl          ;shift bit from contents of A
0F78C A8                               tay
0F78D 68                               pla          ;pull saved return address from stack
0F78E 85 F6                            sta $f6      ;save to indirect
0F790 68                               pla
0F791 85 F7                            sta $f7
0F793 C8                               iny
0F794 B1 F6                            lda ($f6),y  ;load pointer from indirect
0F796 85 F8                            sta $f8      ;note that if an RTS is performed in next routine
0F798 C8                               iny          ;it will return to the execution before the sub
0F799 B1 F6                            lda ($f6),y  ;that called this routine
0F79B 85 F9                            sta $f9
0F79D 6C F8 00                         jmp ($f8)    ;jump to the address we loaded
0F7A0                           	   
0F7A0                           JumpEngine:
0F7A0 0A                               asl          ;shift bit from contents of A
0F7A1 A8                               tay
0F7A2 68                               pla          ;pull saved return address from stack
0F7A3 85 04                            sta $04      ;save to indirect
0F7A5 68                               pla
0F7A6 85 05                            sta $05
0F7A8 C8                               iny
0F7A9 B1 04                            lda ($04),y  ;load pointer from indirect
0F7AB 85 06                            sta $06      ;note that if an RTS is performed in next routine
0F7AD C8                               iny          ;it will return to the execution before the sub
0F7AE B1 04                            lda ($04),y  ;that called this routine
0F7B0 85 07                            sta $07
0F7B2 6C 06 00                         jmp ($06)    ;jump to the address we loaded
0F7B5                           Reset:
0F7B5                                   ; $FFFC-$FFFD reset vector new location, & bankswap to $4058 to load MMC3's setups
0F7B5 78                                sei
0F7B6 D8                                cld
0F7B7 A9 01                             lda #$01
0F7B9 20 6A F8                          jsr BankSwap
0F7BC 20 01 80                          jsr MMC3Setup
0F7BF                                   
0F7BF 20 58 F8                          jsr RestoreBank
0F7C2 4C 02 C0                          jmp Start
0F7C5                           ;InitEnemyRoutines1:
0F7C5                           ;		lda #$04
0F7C5                           ;		jsr BankSwap
0F7C5                           ;		ldx ObjectOffset
0F7C5                           ;		lda Enemy_ID,x
0F7C5                           ;		jsr InitEnemyRoutines
0F7C5                           ;		jmp RestoreBank
0F7C5                           RunPauseMenu:
0F7C5 A9 01                     		lda #$01
0F7C7 20 6A F8                  		jsr BankSwap
0F7CA 20 7B 91                  		jsr PauseMenu
0F7CD 4C 58 F8                  		jmp RestoreBank
0F7D0                           RunStuff:
0F7D0 A9 01                             lda #$01
0F7D2 20 6A F8                          jsr BankSwap
0F7D5 20 CF 8A                  		jsr ChangeBankRunner
0F7D8 4C 58 F8                          jmp RestoreBank
0F7DB                           		
0F7DB                           MoveSpritesOffscreen:
0F7DB A9 01                             lda #$01
0F7DD 20 6A F8                          jsr BankSwap
0F7E0 20 37 95                  		jsr MoveSpritesOffscreen1
0F7E3 4C 58 F8                          jmp RestoreBank
0F7E6                           _GetAreaMusic:
0F7E6 20 58 F8                  		jsr RestoreBank
0F7E9 20 CB 8F                  		jsr GetAreaMusic
0F7EC A9 01                     		lda #$01
0F7EE 4C 6A F8                  		jmp BankSwap
0F7F1                           
0F7F1                           		
0F7F1                           LoadAreaPointer:
0F7F1 A9 04                     		lda #$04
0F7F3 20 6A F8                  		jsr BankSwap
0F7F6 20 3F 80                  		jsr LoadAreaPointerR
0F7F9 4C 58 F8                  		jmp RestoreBank
0F7FC                           		
0F7FC                           InitPodoboo2:
0F7FC A9 04                     		lda #$04
0F7FE 20 6A F8                  		jsr BankSwap
0F801 20 24 95                  		jsr InitPodoboo
0F804 4C 58 F8                  		jmp RestoreBank
0F807                           		
0F807                           GetAreaDataAddrs:
0F807 A9 04                     		lda #$04
0F809 20 6A F8                  		jsr BankSwap
0F80C 20 82 80                  		jsr GetAreaDataAddrsR
0F80F 4C 58 F8                  		jmp RestoreBank
0F812                           		
0F812                           AreaParserTaskHandler1:
0F812 A9 04                     		lda #$04
0F814 20 6A F8                  		jsr BankSwap
0F817 20 2F 84                  		jsr AreaParserTaskHandler
0F81A 4C 58 F8                  		jmp RestoreBank
0F81D                           		
0F81D                           ProcLoopCommand1:
0F81D A9 04                     		lda #$04
0F81F 20 6A F8                  		jsr BankSwap
0F822 20 A1 90                  		jsr ProcLoopCommand
0F825 4C 58 F8                  		jmp RestoreBank
0F828                           
0F828                           InitEnemyRoutines1:
0F828 A9 04                     		lda #$04
0F82A 20 6A F8                  		jsr BankSwap
0F82D B5 15                     		lda Enemy_ID,x
0F82F 20 49 93                  		jsr InitEnemyRoutines
0F832 A9 01                     		lda #$01
0F834 4C 6A F8                  		jmp BankSwap
0F837                           		
0F837                           SetupTextbox1:
0F837 A9 01                             lda #$01
0F839 20 6A F8                          jsr BankSwap
0F83C 20 92 85                  		jsr SetupTextbox
0F83F 4C 58 F8                          jmp RestoreBank	
0F842                           		
0F842                           EnemyGfxHandler:
0F842 A9 01                             lda #$01
0F844 20 6A F8                          jsr BankSwap
0F847 20 A5 97                  		jsr EnemyGfxHandler1
0F84A 4C 58 F8                          jmp RestoreBank	
0F84D                           		
0F84D                           		
0F84D                           GameOverMenu1:
0F84D A9 01                             lda #$01
0F84F 20 6A F8                          jsr BankSwap
0F852 20 39 9C                  		jsr GameOverMenu
0F855 4C 58 F8                          jmp RestoreBank
0F858                           	
0F858                           RestoreBank:
0F858                                   ; restores $10-$4000 rom, back to $8000-$BFFF ram (4CAAF2)
0F858 A9 00                             lda #$00
0F85A 4C 6A F8                          jmp BankSwap
0F85D                           
0F85D                           
0F85D                           RestoreBank1
0F85D                                   ; restores $10-$4000 rom, back to $8000-$BFFF ram (4CAAF2)
0F85D A9 00                             lda #$00
0F85F 20 6A F8                          jsr BankSwap
0F862 A6 03                             ldx $03                     ;get saved content of block buffer
0F864 BD FA B8                  	    lda MetatileThingy,x
0F867 60                        		rts
0F868                                   
0F868                           BankSwapCore:
0F868 A9 03                            lda #BANK_CORE
0F86A                                  ; continue to BankSwap
0F86A                                  
0F86A                           BankSwap:
0F86A                                   ;bankswap routine (A9## 20B0F2)
0F86A 8D 82 60                          sta currentBank
0F86D 48                        Ostia3:	pha
0F86E 0A                                asl
0F86F 48                                pha
0F870 A9 86                             lda #$86
0F872 8D C5 05                  		sta Old8000
0F875 8D 00 80                          sta $8000
0F878 68                                pla
0F879                           		
0F879 8D 01 80                          sta $8001
0F87C 09 01                             ora #$01
0F87E C9 09                     		cmp #$09
0F880 D0 06                     		bne +
0F882 AD 06 7E                  		lda LevelBank
0F885 18                        		clc
0F886 69 0A                     		adc #FirstLevelBank
0F888 48                        +:      pha
0F889 A9 87                             lda #$87
0F88B 8D C5 05                  		sta Old8000
0F88E 8D 00 80                          sta $8000
0F891 68                                pla
0F892                           		
0F892 8D 01 80                          sta $8001
0F895 68                                pla
0F896 60                                rts
0F897                           
0F897                           
0F897                           StatusBarData:
0F897 F0 06                           .db $f0, $06 ; top score display on title screen
0F899 63 06                           .db $63, $06 ; player score
0F89B 63 06                           .db $63, $06
0F89D 6D 04                           .db $6d, $04 ; coin tally
0F89F 6D 04                           .db $6d, $04
0F8A1 7A 03                           .db $7a, $03 ; game timer
0F8A3 4F 02                     	  .db $4f, $02
0F8A5                           
0F8A5                           StatusBarOffset:
0F8A5 06 0C 12 18 1E 24 26            .db $06, $0c, $12, $18, $1e, $24, $26
0F8AC                           
0F8AC                           ; Below are some wrappers for core routines
0F8AC                           ; They have been moved to the "Core" bank, used for
0F8AC                           ; Self-contained routines that probably won't change
0F8AC                           ; much.
0F8AC                           
0F8AC                           InitializeMemory:
0F8AC 4C E8 B7                          jmp _InitializeMemory
0F8AF                           
0F8AF                           ReadJoypads:
0F8AF 20 68 F8                          jsr BankSwapCore
0F8B2 20 5F 80                          jsr _ReadJoypads
0F8B5 4C 58 F8                          jmp RestoreBank
0F8B8                           
0F8B8                           InitializeNameTables:
0F8B8 20 68 F8                          jsr BankSwapCore
0F8BB 20 A5 80                          jsr _InitializeNameTables
0F8BE 4C 58 F8                          jmp RestoreBank
0F8C1                           
0F8C1                           ;DemoEngine:
0F8C1                            ;       jsr BankSwapCore
0F8C1                            ;       jsr _DemoEngine
0F8C1                            ;       jmp RestoreBank
0F8C1                           
0F8C1                           ; Routines from handlePlayerData.asm
0F8C1                           
0F8C1                           LoadPlayerData:
0F8C1                                   ;jsr BankSwapCore
0F8C1                                   ;jsr _LoadPlayerData
0F8C1                                   ;jmp RestoreBank
0F8C1                           SavePlayerData:
0F8C1                                   ;jsr BankSwapCore
0F8C1                                   ;jsr _SavePlayerData
0F8C1                                   ;jmp RestoreBank
0F8C1                           WipePlayerData:
0F8C1                           		;jsr BankSwapCore
0F8C1                                   ;jsr _WipePlayerData
0F8C1                                   ;jmp RestoreBank
0F8C1                           
0F8C1                           CopyToAllPlayers:
0F8C1 60                        		rts
0F8C2                                   ;tay
0F8C2                                   ;jsr BankSwapCore
0F8C2                                   ;jsr _CopyToAllPlayers
0F8C2                                   ;jmp RestoreBank
0F8C2                           ; Having issue with this one.
0F8C2                           ;ProcessWhirlpools:
0F8C2                                   ;jsr BankSwapCore
0F8C2                            ;       jmp _ProcessWhirlpools
0F8C2                                   ;rts
0F8C2                                   ;jmp RestoreBank
0F8C2                                   ;jmp ImposeGravity           ;jump to put whirlpool effect on player vertically, do not return
0F8C2                           
0F8C2                           ;include code\whirlpools.asm
0F8C2                           
0F8C2                           ;-------------------------------------------------------------------------------------
0F8C2                           handleSound:
0F8C2 A9 02                             lda #BANK_SOUND
0F8C4 20 6D F8                          jsr Ostia3
0F8C7 20 01 80                          jsr SoundEngine
0F8CA AD 82 60                  		lda currentBank
0F8CD 4C 6A F8                          jmp BankSwap
0F8D0                           	
0F8D0                           ;shitty rng
0F8D0                           		
0F8D0                           RNG:
0F8D0 A2 00                     			   ldx #$00
0F8D2 A0 07                                    ldy #$07
0F8D4 AD A7 07                                 lda PseudoRandomBitReg    ;get first memory location of LSFR bytes
0F8D7 29 02                                    and #%00000010            ;mask out all but d1
0F8D9 85 00                                    sta $00                   ;save here
0F8DB AD A8 07                                 lda PseudoRandomBitReg+1  ;get second memory location
0F8DE 29 02                                    and #%00000010            ;mask out all but d1
0F8E0 45 00                                    eor $00                   ;perform exclusive-OR on d1 from first and second bytes
0F8E2 18                                       clc                       ;if neither or both are set, carry will be clear
0F8E3 F0 01                                    beq RotPRandomBit
0F8E5 38                                       sec                       ;if one or the other is set, carry will be set
0F8E6 7E A7 07                  RotPRandomBit: ror PseudoRandomBitReg,x  ;rotate carry into d7, and rotate last bit into carry
0F8E9 AD FC 06                                 lda SavedJoypadBits
0F8EC F0 03                     			   beq +
0F8EE 7E A7 07                  			   ror PseudoRandomBitReg,x
0F8F1                           +:		
0F8F1 E8                        			   inx                       ;increment to next byte
0F8F2 88                                       dey                       ;decrement for loop
0F8F3 D0 F1                                    bne RotPRandomBit
0F8F5 60                        			   rts
0F8F6                           
0F8F6                           ; thx nesdev for the rng
0F8F6                           
0F8F6                           RNG_call:
0F8F6 AD 08 7E                  	lda seed+1
0F8F9 A8                        	tay 			;store copy of high byte
0F8FA                           	; compute seed+1 ($39>>1 = %11100)
0F8FA 4A                        	lsr 			;shift to consume zeroes on left...
0F8FB 4A                        	lsr
0F8FC 4A                        	lsr
0F8FD 8D 08 7E                  	sta seed+1 		;now recreate the remaining bits in reverse order... %111
0F900 4A                        	lsr
0F901 4D 08 7E                  	eor seed+1
0F904 4A                        	lsr
0F905 4D 08 7E                  	eor seed+1
0F908 4D 07 7E                  	eor seed+0 		;recombine with original low byte
0F90B 8D 08 7E                  	sta seed+1
0F90E                           	; compute seed+0 ($39 = %111001)
0F90E 98                        	tya 			;original high byte
0F90F 8D 07 7E                  	sta seed+0
0F912 0A                        	asl
0F913 4D 07 7E                  	eor seed+0
0F916 0A                        	asl
0F917 4D 07 7E                  	eor seed+0
0F91A 0A                        	asl
0F91B 0A                        	asl
0F91C 0A                        	asl
0F91D 4D 07 7E                  	eor seed+0
0F920 8D 07 7E                  	sta seed+0
0F923 60                        	rts
0F924                           		
0F924                           
0F924                           FlagpoleScoreNumTiles:
0F924 FD FE                           .db $fd, $fe
0F926 F7 50                           .db $f7, $50
0F928 FA FB                           .db $fa, $fb
0F92A F8 FB                           .db $f8, $fb
0F92C F6 FB                           .db $f6, $fb
0F92E                           
0F92E                           ExplosionTiles:
0F92E 68 67 66                        .db $68, $67, $66
0F931                           		
0F931                           
0F931                           PlayerStarting_X_Pos:
0F931 28 18                           .db $28, $18
0F933 38 28                           .db $38, $28
0F935                           
0F935                           AltYPosOffset:
0F935 08 00                           .db $08, $00
0F937                           
0F937                           PlayerStarting_Y_Pos:
0F937 00 20 B0 50 00 00 B0 B0         .db $00, $20, $b0, $50, $00, $00, $b0, $b0
0F93F F0                              .db $f0
0F940                           
0F940                           PlayerBGPriorityData:
0F940 00 20 00 00 00 00 00 00         .db $00, $20, $00, $00, $00, $00, $00, $00
0F948                           
0F948                           GameTimerData:
0F948 20                              .db $20 ;dummy byte, used as part of bg priority data
0F949 03 03 02                        .db $03, $03, $02
0F94C                           GameTimerSec:
0F94C 00 05 00 05               	  .db $00, $05, $00, $05
0F950                           ForceThing:
0F950 0A 70 70 70               		.db $0a, $70, $70, $70		
0F954                           
0F954                           LevelSelectAreasOffsets:
0F954 00 02 03 04                             .db $00, $02, $03, $04
0F958 00 02 03 04                             .db $00, $02, $03, $04
0F95C 00 01 02 03                             .db $00, $01, $02, $03
0F960 00 01 02 03                             .db $00, $01, $02, $03
0F964 00 01 02 03                             .db $00, $01, $02, $03
0F968 00 01 02 03                             .db $00, $01, $02, $03
0F96C 00 02 03 04                             .db $00, $02, $03, $04
0F970 00 01 02 03                             .db $00, $01, $02, $03
0F974 00 01 02 03                             .db $00, $01, $02, $03
0F978                           ;_FamiToneMusicPlay:
0F978                           ;		pha
0F978                           ;		lda #BANK_SOUND
0F978                           ;		jsr Ostia3
0F978                           ;		pla
0F978                           ;		jsr FamiToneMusicPlay
0F978                           ;		lda currentBank
0F978                           ;		jmp BankSwap
0F978                           ;_FamitoneInit:
0F978                           ;		lda #BANK_SOUND
0F978                           ;		jsr Ostia3
0F978                           ;		jsr FamiToneInit
0F978                           ;		lda currentBank
0F978                           ;		jmp BankSwap
0F978                           ;if USEIRQ == 1
0F978                           ;endif
0F978                           include code\irq.asm
0F978                           IRQ:
0F978                           	;sei
0F978 48                        	pha
0F979                           	;lda $00
0F979                           	;pha
0F979 8A                        	txa
0F97A 48                        	pha
0F97B 98                        	tya
0F97C 48                        	pha
0F97D                           	
0F97D A9 01                     	lda #$01
0F97F 8D 00 E0                  	sta $e000
0F982 AD C4 05                  	lda IRQnum
0F985 D0 79                     	bne SecondIRQ
0F987 AD B7 63                  	lda SetupPause
0F98A F0 2B                     	beq +
0F98C                           	
0F98C AD 78 07                  	lda Mirror_PPU_CTRL_REG1
0F98F 29 EE                     	and #%11101110
0F991 09 02                     	ora #%00000010
0F993 8D 78 07                  	sta Mirror_PPU_CTRL_REG1
0F996 8D 00 20                  	sta PPU_CTRL_REG1
0F999                           	
0F999 AD 02 20                  	lda PPU_STATUS
0F99C                           	
0F99C AD B7 63                  	lda SetupPause
0F99F C9 04                     	cmp #$04
0F9A1 90 14                     	bcc +
0F9A3                           	
0F9A3 A9 00                     	lda #$00
0F9A5 8D 05 20                  	sta PPU_SCROLL_REG
0F9A8 8D 05 20                  	sta PPU_SCROLL_REG
0F9AB                           	
0F9AB 4C E7 F9                  	jmp Exitante
0F9AE 8D 7C 07                  -:	sta IRQAckFlag
0F9B1 4C F5 FA                  	jmp EndIRQ
0F9B4                           ThirdIRQ_:
0F9B4 4C 97 FA                  	jmp ThirdIRQ
0F9B7                           	
0F9B7                           +:	
0F9B7 AD 78 07                  	lda Mirror_PPU_CTRL_REG1
0F9BA 29 EC                     	and #%11101100
0F9BC 0D AE 63                  	ora OldNameTableSelect	
0F9BF 8D 78 07                  	sta Mirror_PPU_CTRL_REG1
0F9C2 8D 00 20                  	sta PPU_CTRL_REG1
0F9C5                           	
0F9C5 AD 02 06                  	lda OldTextboxID
0F9C8 0D C1 05                  	ora TextboxID
0F9CB F0 12                     	beq +
0F9CD AD 4E 07                  	lda AreaType
0F9D0 F0 0D                     	beq +
0F9D2 A9 83                     	lda #$83
0F9D4 8D 00 80                  	sta $8000
0F9D7 A9 05                     	lda #$05
0F9D9 8D 01 80                  	sta $8001
0F9DC AD 02 20                  	lda PPU_STATUS
0F9DF                           +:
0F9DF                           	
0F9DF AD AD 63                  	lda OldHorizontalScroll
0F9E2 8D 05 20                  	sta PPU_SCROLL_REG
0F9E5                           	
0F9E5 A9 00                     	lda #$00
0F9E7                           Exitante:
0F9E7 8D 05 20                  	sta PPU_SCROLL_REG         
0F9EA                           	
0F9EA AD C6 05                  	lda StartedTextBox
0F9ED F0 BF                     	beq -
0F9EF A9 95                     	lda #$95
0F9F1 8D 00 C0                      sta $c000
0F9F4 8D 01 C0                      sta $c001
0F9F7 8D 01 E0                  	sta $e001
0F9FA                           	
0F9FA EE C4 05                  	inc IRQnum
0F9FD 4C F5 FA                  	jmp EndIRQ
0FA00                           SecondIRQ:
0FA00 C9 02                     	cmp #$02
0FA02 B0 B0                     	bcs ThirdIRQ_
0FA04                           	
0FA04 A2 0F                     			   ldx #15            ;delay HBLANK
0FA06                           -			
0FA06 CA                                       dex		
0FA07 10 FD                                    bpl -		      ;7 cycles per loop
0FA09                           
0FA09 EA                                       nop
0FA0A EA                        			   nop
0FA0B EA                        			   nop
0FA0C EA                        			   nop
0FA0D EA                        			   nop
0FA0E                                          
0FA0E                                          
0FA0E A2 0D                                    ldx #13            ;delay HBLANK
0FA10                                          -
0FA10 CA                                       dex
0FA11 10 FD                                    bpl -
0FA13 A9 00                     			   lda #$00
0FA15 8D 01 20                  			   sta $2001
0FA18 A9 08                                    lda #$08
0FA1A A2 3F                                    ldx #$3f
0FA1C A0 17                                    ldy #$17
0FA1E                                          
0FA1E                                          
0FA1E 8E 06 20                                 stx $2006
0FA21 8D 06 20                                 sta $2006
0FA24 EA                        			   nop
0FA25 EA                        			   nop
0FA26 EA                        			   nop
0FA27 A2 0F                     			   ldx #$0f
0FA29 A9 30                     			   lda #$30
0FA2B                           			   
0FA2B                           
0FA2B                           Y_Scroll = #$00
0FA2B                           
0FA2B                                          ;HBLANK starts here
0FA2B 2C 07 20                                 bit $2007
0FA2E 8D 07 20                                 sta $2007
0FA31 8C 07 20                                 sty $2007
0FA34 8E 07 20                  			   stx $2007
0FA37                           
0FA37 A9 0C                     			   lda #%00001100
0FA39 29 0C                                    and #%00001100
0FA3B A2 00                     			   ldx #Y_Scroll
0FA3D 8D 06 20                                 sta $2006
0FA40 8E 05 20                                 stx $2005
0FA43 8E 05 20                                 stx $2005				;x doesnt matter
0FA46 A9 00                                    lda #(#Y_Scroll & #$F8) << 2
0FA48 8D 06 20                                 sta $2006
0FA4B                                          
0FA4B AD 01 01                                 lda $0101
0FA4E 8D 05 20                                 sta $2005
0FA51 8D 05 20                                 sta $2005
0FA54 AD 78 07                                 lda Mirror_PPU_CTRL_REG1
0FA57 29 EE                     			   and #%11101110
0FA59 09 03                     			   ora #%00000011
0FA5B 8D 78 07                  			   sta Mirror_PPU_CTRL_REG1
0FA5E 8D 00 20                  			   sta PPU_CTRL_REG1
0FA61                           			   
0FA61                                          
0FA61 A9 82                     	lda #$82
0FA63 8D 00 80                  	sta $8000
0FA66 A9 84                     	lda #%10000100
0FA68 8D 01 80                  	sta $8001
0FA6B                           	
0FA6B A9 83                     	lda #$83
0FA6D 8D 00 80                  	sta $8000
0FA70 A9 83                     	lda #%10000011
0FA72 8D 01 80                  	sta $8001
0FA75 AD C5 05                  	lda Old8000 
0FA78 8D 00 80                  	sta $8000
0FA7B                           	;lda #%00001010
0FA7B                           	;sta PPU_CTRL_REG2
0FA7B                           	;sta Mirror_PPU_CTRL_REG2
0FA7B                           	
0FA7B                           	
0FA7B                           	
0FA7B                           	;lda #%00001100
0FA7B                           	;sta PPU_ADDRESS
0FA7B                           	;lda #$01
0FA7B                           	;sta PPU_SCROLL_REG
0FA7B                           	;lda #$00
0FA7B                           	;sta PPU_SCROLL_REG
0FA7B                           	;sta PPU_ADDRESS
0FA7B                           	
0FA7B A9 03                     	lda #$03
0FA7D 8D 00 C0                      sta $c000
0FA80 8D 01 C0                      sta $c001
0FA83 8D 01 E0                  	sta $e001
0FA86 A9 0E                     	lda #$0e
0FA88 8D 01 20                      sta $2001
0FA8B                           	
0FA8B                           	
0FA8B EE C4 05                  	inc IRQnum
0FA8E AD 7C 07                  	lda IRQAckFlag
0FA91 8D 7C 07                  +:	sta IRQAckFlag
0FA94 4C F5 FA                  	jmp EndIRQ
0FA97                           
0FA97                           ThirdIRQ:
0FA97 C9 03                     	cmp #$03
0FA99 B0 36                     	bcs FourthIRQ
0FA9B A2 31                     	ldx #49
0FA9D                           -:
0FA9D CA                        	dex
0FA9E 10 FD                         bpl -
0FAA0 A9 0C                     	lda #%00001100
0FAA2 8D 06 20                  	sta PPU_ADDRESS
0FAA5 AD C8 05                  	lda TextBoxYScroll
0FAA8 18                        	clc
0FAA9 69 07                     	adc #$07
0FAAB 8D 05 20                  	sta PPU_SCROLL_REG
0FAAE A9 00                     	lda #$00
0FAB0 8D 05 20                  	sta PPU_SCROLL_REG
0FAB3 AD C8 05                  	lda TextBoxYScroll
0FAB6 18                        	clc
0FAB7 69 07                     	adc #$07
0FAB9 29 F8                     	and #$f8
0FABB 0A                        	asl
0FABC 0A                        	asl
0FABD 8D 06 20                  	sta PPU_ADDRESS
0FAC0                           	
0FAC0 A9 1F                     	lda #$1f
0FAC2 8D 00 C0                      sta $c000
0FAC5 8D 01 C0                      sta $c001
0FAC8 8D 01 E0                  	sta $e001
0FACB EE C4 05                  	inc IRQnum
0FACE 4C F5 FA                  	jmp EndIRQ
0FAD1                           	
0FAD1                           FourthIRQ:
0FAD1 A2 35                     	ldx #53
0FAD3                           -:
0FAD3 CA                        	dex
0FAD4 10 FD                         bpl -
0FAD6 A9 0C                     	lda #%00001100
0FAD8 8D 06 20                  	sta PPU_ADDRESS
0FADB A9 53                     	lda #$53
0FADD 8D 05 20                  	sta PPU_SCROLL_REG
0FAE0 A9 00                     	lda #$00
0FAE2 8D 05 20                  	sta PPU_SCROLL_REG
0FAE5 A9 40                     	lda #$40
0FAE7 8D 06 20                  	sta PPU_ADDRESS
0FAEA A9 00                     	lda #$00
0FAEC 8D 00 E0                  	sta $e000
0FAEF 8D 7C 07                  	sta IRQAckFlag
0FAF2 8D C4 05                  	sta IRQnum
0FAF5                           EndIRQ:	
0FAF5 68                        	pla
0FAF6 A8                        	tay
0FAF7 68                        	pla
0FAF8 AA                        	tax
0FAF9                           	;pla
0FAF9                           	;sta $00
0FAF9 68                        	pla
0FAFA                           	;cli
0FAFA 40                        	rti
0FAFB                           	
0FAFB                           	0FAFB                           include code\writebuffer.asm
0FAFB                           ;-------------------------------------------------------------------------------------
0FAFB                           ;$00 - vram buffer address table low
0FAFB                           ;$01 - vram buffer address table high
0FAFB                           ;WriteBufferToScreen1:
0FAFB                           ;               sta PPU_ADDRESS           ;store high byte of vram address
0FAFB                           ;               iny
0FAFB                           ;               lda ($00),y               ;load next byte (second)
0FAFB                           ;               sta PPU_ADDRESS           ;store low byte of vram address
0FAFB                           ;               iny
0FAFB                           ;               lda ($00),y               ;load next byte (third)
0FAFB                           ;               asl                       ;shift to left and save in stack
0FAFB                           ;               pha
0FAFB                           ;               lda Mirror_PPU_CTRL_REG1  ;load mirror of $2000,
0FAFB                           ;               ora #%00000100            ;set ppu to increment by 32 by default
0FAFB                           ;               bcs SetupWrites1           ;if d7 of third byte was clear, ppu will
0FAFB                           ;               and #%11101011            ;only increment by 1
0FAFB                           ;SetupWrites1:  sta PPU_CTRL_REG1         ;write contents of A to PPU register 1
0FAFB                           ;               sta Mirror_PPU_CTRL_REG1  ;and its mirror
0FAFB                           ;               pla                       ;pull from stack and shift to left again
0FAFB                           ;               asl
0FAFB                           ;               bcc GetLength1             ;if d6 of third byte was clear, do not repeat byte
0FAFB                           ;               ora #%00000010            ;otherwise set d1 and increment Y
0FAFB                           ;               iny
0FAFB                           ;GetLength1:    lsr                       ;shift back to the right to get proper length
0FAFB                           ;               lsr                       ;note that d1 will now be in carry
0FAFB                           ;               tax
0FAFB                           ;OutputToVRAM1: bcs RepeatByte1            ;if carry set, repeat loading the same byte
0FAFB                           ;               iny                       ;otherwise increment Y to load next byte
0FAFB                           ;RepeatByte1:   lda ($00),y               ;load more data from buffer and write to vram
0FAFB                           ;			   jmp WriteArea
0FAFB                           ;H23:		   sta PPU_DATA
0FAFB                           ;               dex                       ;done writing?
0FAFB                           ;               bne OutputToVRAM1
0FAFB                           ;			   jmp +
0FAFB                           ;WriteArea:
0FAFB                           ;		  php
0FAFB                           ;		  cpy #$06
0FAFB                           ;		  bne H24
0FAFB                           ;		  pha		  
0FAFB                           ;		  lda AreaType
0FAFB                           ;		  cmp #$02
0FAFB                           ;		  bcs Cont
0FAFB                           ;		  pla
0FAFB                           ;H24:	  plp
0FAFB                           ;		  jmp H23
0FAFB                           ;Cont:
0FAFB                           ;		  pla
0FAFB                           ;		  lda AreaType
0FAFB                           ;		  cmp #$02
0FAFB                           ;		  beq +
0FAFB                           ;		  lda #$2d
0FAFB                           ;		  plp
0FAFB                           ;		  jmp H23
0FAFB                           ;+:		  lda #$0c
0FAFB                           ;		  plp
0FAFB                           ;		  jmp H23
0FAFB                           WriteBufferToScreen:
0FAFB 8D 06 20                                 sta PPU_ADDRESS           ;store high byte of vram address
0FAFE C8                                       iny
0FAFF B1 00                                    lda ($00),y               ;load next byte (second)
0FB01 8D 06 20                                 sta PPU_ADDRESS           ;store low byte of vram address
0FB04 C8                                       iny
0FB05 B1 00                                    lda ($00),y               ;load next byte (third)
0FB07 0A                                       asl                       ;shift to left and save in stack
0FB08 48                                       pha
0FB09 AD 78 07                                 lda Mirror_PPU_CTRL_REG1  ;load mirror of $2000,
0FB0C 09 04                                    ora #%00000100            ;set ppu to increment by 32 by default
0FB0E B0 02                                    bcs SetupWrites           ;if d7 of third byte was clear, ppu will
0FB10 29 EB                                    and #%11101011            ;only increment by 1
0FB12 8D 00 20                  SetupWrites:   sta PPU_CTRL_REG1         ;write contents of A to PPU register 1
0FB15 8D 78 07                                 sta Mirror_PPU_CTRL_REG1  ;and its mirror
0FB18 68                                       pla                       ;pull from stack and shift to left again
0FB19 0A                                       asl
0FB1A 90 03                                    bcc GetLength             ;if d6 of third byte was clear, do not repeat byte
0FB1C 09 02                                    ora #%00000010            ;otherwise set d1 and increment Y
0FB1E C8                                       iny
0FB1F 4A                        GetLength:     lsr                       ;shift back to the right to get proper length
0FB20 4A                                       lsr                       ;note that d1 will now be in carry
0FB21 AA                                       tax
0FB22 B0 01                     OutputToVRAM:  bcs RepeatByte            ;if carry set, repeat loading the same byte
0FB24 C8                                       iny                       ;otherwise increment Y to load next byte
0FB25 B1 00                     RepeatByte:    lda ($00),y               ;load more data from buffer and write to vram
0FB27 8D 07 20                                 sta PPU_DATA
0FB2A CA                                       dex                       ;done writing?
0FB2B D0 F5                                    bne OutputToVRAM
0FB2D 38                        +:             sec          
0FB2E 98                                       tya
0FB2F 65 00                                    adc $00                   ;add end length plus one to the indirect at $00
0FB31 85 00                                    sta $00                   ;to allow this routine to read another set of updates
0FB33 A9 00                                    lda #$00
0FB35 65 01                                    adc $01
0FB37 85 01                                    sta $01
0FB39 A9 3F                                    lda #$3f                  ;sets vram address to $3f00
0FB3B 8D 06 20                                 sta PPU_ADDRESS
0FB3E A9 00                                    lda #$00
0FB40 8D 06 20                                 sta PPU_ADDRESS
0FB43 8D 06 20                                 sta PPU_ADDRESS           ;then reinitializes it for some reason
0FB46 AE 02 20                  UpdateScreen:  ldx PPU_STATUS            ;reset flip-flop
0FB49 A0 00                                    ldy #$00                  ;load first byte from indirect as a pointer
0FB4B B1 00                                    lda ($00),y  
0FB4D F0 03                                    beq InitScroll		     ;if byte is zero we have no further updates to make here
0FB4F                           			   ;ldx VRAM_Buffer_AddrCtrl
0FB4F                           			   ;cpx #$09
0FB4F                           			   ;beq WriteBufferToScreen2
0FB4F                           			   ;cpx #$0a
0FB4F                           			   ;beq WriteBufferToScreen2
0FB4F                           			   ;cpx #$0b
0FB4F                           			   ;beq WriteBufferToScreen2
0FB4F 4C FB FA                  			   jmp WriteBufferToScreen
0FB52                           WriteBufferToScreen2:
0FB52                           			   ;jmp WriteBufferToScreen1
0FB52 8D 05 20                  InitScroll:    sta PPU_SCROLL_REG        ;store contents of A into scroll registers
0FB55 8D 05 20                                 sta PPU_SCROLL_REG        ;and end whatever subroutine led us here
0FB58 AD B7 63                  			   lda SetupPause
0FB5B F0 0D                     			   beq +
0FB5D AD 78 07                  			   lda Mirror_PPU_CTRL_REG1
0FB60 29 EE                     			   and #%11101110
0FB62 09 02                     			   ora #%00000010
0FB64 8D 78 07                  			   sta Mirror_PPU_CTRL_REG1
0FB67 8D 00 20                  			   sta PPU_CTRL_REG1
0FB6A 60                        +:             rts
0FB6B                           
0FB6B                           ;-------------------------------------------------------------------------------------
0FB6B                           
0FB6B                           WritePPUReg1:
0FB6B 8D 00 20                                 sta PPU_CTRL_REG1         ;write contents of A to PPU register 1
0FB6E 8D 78 07                                 sta Mirror_PPU_CTRL_REG1  ;and its mirror
0FB71 60                                       rts
0FB72                           
0FB72 88 04                     .dw Vectors-$ ; This is just here to show how much free space is in this spot in the list file.
0FB74                           ;-------------------------------------------------------------------------------------
0FB74                           ;INTERRUPT VECTORS
0FB74 FF FF FF FF FF FF FF FF.. .pad $fffa, $ff
0FFFA                                 Vectors:
0FFFA 06 C1                           .dw NonMaskableInterrupt
0FFFC B5 F7                           .dw Reset
0FFFE 78 F9                           .dw IRQ
10000                                 ;.dw $fff0  ;unused
10000                                 ;.dw Reset
10000                           
10000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\smb_new.chr" 				;%00000100
12000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\smb_new2.chr"				;%00001100
14000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\smb_new3.chr"				;%00010100
16000 00 03 0F 1F 1F 1C 24 26.. .incbin "data\smb_new4.chr"				;%00011100
18000                           
18000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\smb_new5.chr"				;%00100100
1A000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\smb_new6.chr"				;%00101100
1C000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\smb_new7.chr"				;%00110100
1E000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\smb_new8.chr"				;%00111100
20000                           
20000                           
20000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\smb_new9.chr"				;%01000100
22000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\smb_newA.chr"				;%01001100
24000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\smb_newB.chr"				;%01010100
26000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\smb_newC.chr"				;%01011100
28000                           
28000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\smb_newD.chr"				;%01100100
2A000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\smb_newE.chr"				;%01101100
2C000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\smb_newF.chr"				;%01110100
2E000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\smb_newG.chr"				;%01111100
30000                           
30000                           
30000 7C FE E7 E7 E7 7F 3E 00.. .incbin "data\smb_newPSwitch.chr"		;%10000100
32000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\titleScreen.chr"			;%10001100
34000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\castlepar1.chr"			;%10010100
36000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\castlepar2.chr"			;%10011100
38000                           
38000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\castlepar3.chr" 			;%10100100
3A000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\castlepar4.chr" 			;%10101100
3C000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\castlepar5.chr" 			;%10110100
3E000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\castlepar6.chr" 			;%10111100
40000                           
40000                           
40000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\castlepar7.chr" 			;%11000100
42000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\smb_newPSwitchonblock.chr";%11001100
44000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\castlepar8.chr" 			;%11010100
46000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\smb_new9a.chr" 			;%11011100
48000                           
48000                           ;size inflation because fuck fceux and its powers of two
48000                           
48000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\castlepar7.chr" 			;%11000100
4A000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\smb_newPSwitchonblock.chr";%11001100
4C000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\castlepar8.chr" 			;%11010100
4E000 03 0F 1F 1F 1C 24 26 66.. .incbin "data\smb_new9a.chr" 			;%11011100
50000                           
